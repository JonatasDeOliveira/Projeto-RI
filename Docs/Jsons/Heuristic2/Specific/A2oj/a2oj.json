{
  "2000": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains 2 integers separated by a single space X Y (1 \u2264 X,Y \u2264 100). X and Y are the 2 numbers which you should print the sum of them.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n1. Omar\n\n\n\n\n\nProblem Statement:\n\n\nOmar is the youngest programer in the world, he is just 14 months old (when this problem was added), and he has just decided to write his first program.\n\nThis program is very simple, the program should be able to read 2 numbers and print the sum of them.\n\nCan you help Omar by writing a correct program so that he can use it to check if his program is correct or not?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains 2 integers separated by a single space X Y (1 \u2264 X,Y \u2264 100). X and Y are the 2 numbers which you should print the sum of them.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line contains a single integer which is the sum of X and Y.\n\n\n\n\nSample Input:\n\n5\n22 12\n23 12\n1 1\n2 3\n100 100\n\n\n\nSample Output:\n\n34\n35\n2\n5\n200\n\n\n\nNotes:\n\n\n\n(Omar after winning the ACM ACPC Regional Contest 2013)\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-02-21 09:24:26 UTC\n\n\n\n\nTime Limit:\n\n\n2-3 second(s)\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n5\n22 12\n23 12\n1 1\n2 3\n100 100\n\n\nSample Output:\n\n34\n35\n2\n5\n200\n\n",
    "Description": "\nProblem Statement:\n\n\nOmar is the youngest programer in the world, he is just 14 months old (when this problem was added), and he has just decided to write his first program.\n\nThis program is very simple, the program should be able to read 2 numbers and print the sum of them.\n\nCan you help Omar by writing a correct program so that he can use it to check if his program is correct or not?\n\n\n",
    "Title": "1. Omar",
    "Notes": "\nNotes:\n\n\n\n(Omar after winning the ACM ACPC Regional Contest 2013)\n\n",
    "URL": "https://a2oj.com/p?ID=1",
    "Time Limit": "2-3 second(s)",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line contains a single integer which is the sum of X and Y.\n\n\n"
  },
  "2001": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing two integers separated by a single space N M (1 \u2264 N, M \u2264 1,000) representing the dimensions of the candies' grid, followed by N lines, each one contains M integers separated by a single space, representing the candies' scores in this row. The given grid representation will satisfy the conditions mentioned above, and each integer in the grid will not be less than -2,000 and will not be greater than 2,000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n10. Omar Loves Candies\n\n\n\n\n\nProblem Statement:\n\n\nOmar loves to eat a lot of candies, but unfortunately most of the candies are not healthy. So his parents found a way to give each candy a score, a higher score means a healthier candy (the score is an integer that can be positive, zero or negative).\n\nOne day he went with his parents to buy some candies, and they found a strange store where all the candies are stored in a 2-dimensional grid of N rows with M candies in each row. The rows are numbered from 1 to N from top to bottom, and the columns are numbered from 1 to M from left to right and every cell contains one candy.\n\nThey noticed something else, any candy (except for those in the first row) is healthier than the candy which is exactly above it, and any candy (except for those in the first column) is healthier than the candy which is exactly to its left (healthier means having higher score as defined above).\n\nThere is one more strange thing about this store, to buy some candies you have to select a sub-rectangle of the candies' grid and buy all the candies within this sub rectangle.\n\nOmar's parents want to select a non-empty sub-rectangle that has the maximum sum of candies' scores among all possible sub-rectangles.\n\nFor example, consider the grid in the example input. Some of the possible sub-rectangles of candies they can select are [-2, -1, 2, 3], [-4, -2, -1] or [2, 3, 4, 5]. The last sub-rectangle has the maximum sum of scores, which is 14. They can not select the following lists of candies [1, 2, 3, 4, 5] or [-2, -1, 2] (because these lists do not form a sub-rectangle of the given grid).\n\n\n\nCan you help them by writing a program which finds the non-empty sub-rectangle with the maximum possible sum of scores in the given grid?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing two integers separated by a single space N M (1 \u2264 N, M \u2264 1,000) representing the dimensions of the candies' grid, followed by N lines, each one contains M integers separated by a single space, representing the candies' scores in this row. The given grid representation will satisfy the conditions mentioned above, and each integer in the grid will not be less than -2,000 and will not be greater than 2,000.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the maximum sum of scores they can get from a non-empty sub-rectangle.\n\n\n\n\nSample Input:\n\n1\n3 3\n-4 -2 -1\n-3 2 3\n1 4 5\n\n\n\nSample Output:\n\n14\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 08:40:25 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3 3\n-4 -2 -1\n-3 2 3\n1 4 5\n\n\nSample Output:\n\n14\n\n",
    "Description": "\nProblem Statement:\n\n\nOmar loves to eat a lot of candies, but unfortunately most of the candies are not healthy. So his parents found a way to give each candy a score, a higher score means a healthier candy (the score is an integer that can be positive, zero or negative).\n\nOne day he went with his parents to buy some candies, and they found a strange store where all the candies are stored in a 2-dimensional grid of N rows with M candies in each row. The rows are numbered from 1 to N from top to bottom, and the columns are numbered from 1 to M from left to right and every cell contains one candy.\n\nThey noticed something else, any candy (except for those in the first row) is healthier than the candy which is exactly above it, and any candy (except for those in the first column) is healthier than the candy which is exactly to its left (healthier means having higher score as defined above).\n\nThere is one more strange thing about this store, to buy some candies you have to select a sub-rectangle of the candies' grid and buy all the candies within this sub rectangle.\n\nOmar's parents want to select a non-empty sub-rectangle that has the maximum sum of candies' scores among all possible sub-rectangles.\n\nFor example, consider the grid in the example input. Some of the possible sub-rectangles of candies they can select are [-2, -1, 2, 3], [-4, -2, -1] or [2, 3, 4, 5]. The last sub-rectangle has the maximum sum of scores, which is 14. They can not select the following lists of candies [1, 2, 3, 4, 5] or [-2, -1, 2] (because these lists do not form a sub-rectangle of the given grid).\n\n\n\nCan you help them by writing a program which finds the non-empty sub-rectangle with the maximum possible sum of scores in the given grid?\n\n\n",
    "Title": "10. Omar Loves Candies",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=10",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the maximum sum of scores they can get from a non-empty sub-rectangle.\n\n\n"
  },
  "2002": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains 6 integers separated by a single space N1 F1 D1 N2 F2 D2 (1 \u2264 N1,N2 \u2264 1018) and (1 \u2264 F1,D1,F2,D2 \u2264 109) representing the length of the first sequence, the first element in the first sequence, the incremental value of the first sequence, the length of the second sequence, the first element in the second sequence and the incremental value of the second sequence, respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n11. Modified LCS\n\n\n\n\n\nProblem Statement:\n\n\nLCS stands for longest common subsequence, and it is a well known problem. A sequence in this problem means a list of integers, and a sequence X is considered a subsequence of another sequence Y, when the sequence X can be obtained by deleting zero or more elements from the sequence Y without changing the order of the remaining elements.\n\nIn this problem you are given two sequences and your task is to find the length of the longest sequence which is a subsequence of both the given sequences.\n\nYou are not given the sequences themselves. For each sequence you are given three integers N, F and D, where N is the length of the sequence, F is the first element in the sequence. Each element except the first element is greater than the element before it by D.\n\nFor example N = 5, F = 3 and D = 4 represents the following sequence: [3, 7, 11, 15, 19].\n\nThere will be at least one integer which belongs to both sequences and it is not greater than 1,000,000.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains 6 integers separated by a single space N1 F1 D1 N2 F2 D2 (1 \u2264 N1,N2 \u2264 1018) and (1 \u2264 F1,D1,F2,D2 \u2264 109) representing the length of the first sequence, the first element in the first sequence, the incremental value of the first sequence, the length of the second sequence, the first element in the second sequence and the incremental value of the second sequence, respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the length of the longest common subsequence between the given two sequences.\n\n\n\n\nSample Input:\n\n3\n5 3 4 15 3 1\n10 2 2 7 3 3\n100 1 1 100 1 2\n\n\n\nSample Output:\n\n4\n3\n50\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 08:46:43 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n5 3 4 15 3 1\n10 2 2 7 3 3\n100 1 1 100 1 2\n\n\nSample Output:\n\n4\n3\n50\n\n",
    "Description": "\nProblem Statement:\n\n\nLCS stands for longest common subsequence, and it is a well known problem. A sequence in this problem means a list of integers, and a sequence X is considered a subsequence of another sequence Y, when the sequence X can be obtained by deleting zero or more elements from the sequence Y without changing the order of the remaining elements.\n\nIn this problem you are given two sequences and your task is to find the length of the longest sequence which is a subsequence of both the given sequences.\n\nYou are not given the sequences themselves. For each sequence you are given three integers N, F and D, where N is the length of the sequence, F is the first element in the sequence. Each element except the first element is greater than the element before it by D.\n\nFor example N = 5, F = 3 and D = 4 represents the following sequence: [3, 7, 11, 15, 19].\n\nThere will be at least one integer which belongs to both sequences and it is not greater than 1,000,000.\n\n\n",
    "Title": "11. Modified LCS",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=11",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the length of the longest common subsequence between the given two sequences.\n\n\n"
  },
  "2003": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of each test case contains 3 integers separated by a single space N M L (2 \u2264 N \u2264 100), (1 \u2264 M \u2264 100) and (1 \u2264 L \u2264 1,000) representing the number of stations, the number of boost coins and the maximum sum of coins' costs in each move, respectively. Followed by a line which contains N unique positive integers separated by a single space (not necessary sorted, and each integer will be at most 1,000), representing the positions of the stations. Followed by M lines, each line contains 2 integers separated by a single space C V (1 \u2264 C, V \u2264 100) which represent the cost and the power value of a coin, respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n12. Mario Kart\n\n\n\n\n\nProblem Statement:\n\n\nHave you ever played the Mario game? Of course you did, who did not?! Anyway, a new version of the Mario game has been released, it is some kind of kart racing game. And you decided to write a program to find the best strategy for you to complete each level.\n\nEach level track can be modeled as an infinite straight line, with some stations at some specific points on this line. Each station has an integer, representing its position on the track. Your task is to go from the first station (the one with smallest position) to the last one (the one with largest position) in the minimum number of moves.\n\nYou can move between any two stations directly (you can go to a non-adjacent station, or you can go back to a station with a lower position if you want!) if you have enough boost coins for that move. In each level, you have some boost coins that you can use. Each boost coin has a cost and power value. You can select any subset of the coins for each move, but each coin may be used only once per move. Coins are permanent, and you can use the coins again for other moves in the same level.\n\nTo make a move, you must choose a subset of the boost coins, such that the sum of their costs must not exceed L, and the sum of their power values must be exactly equal to the absolute difference between the positions of the two stations you are moving between. If there is no such subset, then you cannot make that move directly.\n\nNow you are given some configurations for some levels, and you are required to find the minimum number of moves to finish each one, or say it is impossible to finish that level.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of each test case contains 3 integers separated by a single space N M L (2 \u2264 N \u2264 100), (1 \u2264 M \u2264 100) and (1 \u2264 L \u2264 1,000) representing the number of stations, the number of boost coins and the maximum sum of coins' costs in each move, respectively. Followed by a line which contains N unique positive integers separated by a single space (not necessary sorted, and each integer will be at most 1,000), representing the positions of the stations. Followed by M lines, each line contains 2 integers separated by a single space C V (1 \u2264 C, V \u2264 100) which represent the cost and the power value of a coin, respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer, this integer should be -1 if there is no way to go from the left most station to the right most station, or the minimum number of moves to do it if it is possible.\n\n\n\n\nSample Input:\n\n2\n3 2 4\n3 1 6\n3 2\n3 3\n3 1 4\n1 3 6\n3 2\n\n\n\nSample Output:\n\n2\n-1\n\n\n\nNotes:\n\n\nIn the first test case, the station positions are [3, 1, 6], and you start at 1 and must end at 6. You will have to make 2 moves, going from 1 -> 3 using the coin (3, 2), and going from 3 -> 6 using the coin (3, 3). You can not go directly from 1 -> 6 using (3, 2) and (3, 3) because the sum of the costs of the coins exceeds the limit 4.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 08:49:37 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 2 4\n3 1 6\n3 2\n3 3\n3 1 4\n1 3 6\n3 2\n\n\nSample Output:\n\n2\n-1\n\n",
    "Description": "\nProblem Statement:\n\n\nHave you ever played the Mario game? Of course you did, who did not?! Anyway, a new version of the Mario game has been released, it is some kind of kart racing game. And you decided to write a program to find the best strategy for you to complete each level.\n\nEach level track can be modeled as an infinite straight line, with some stations at some specific points on this line. Each station has an integer, representing its position on the track. Your task is to go from the first station (the one with smallest position) to the last one (the one with largest position) in the minimum number of moves.\n\nYou can move between any two stations directly (you can go to a non-adjacent station, or you can go back to a station with a lower position if you want!) if you have enough boost coins for that move. In each level, you have some boost coins that you can use. Each boost coin has a cost and power value. You can select any subset of the coins for each move, but each coin may be used only once per move. Coins are permanent, and you can use the coins again for other moves in the same level.\n\nTo make a move, you must choose a subset of the boost coins, such that the sum of their costs must not exceed L, and the sum of their power values must be exactly equal to the absolute difference between the positions of the two stations you are moving between. If there is no such subset, then you cannot make that move directly.\n\nNow you are given some configurations for some levels, and you are required to find the minimum number of moves to finish each one, or say it is impossible to finish that level.\n\n\n",
    "Title": "12. Mario Kart",
    "Notes": "\nNotes:\n\n\nIn the first test case, the station positions are [3, 1, 6], and you start at 1 and must end at 6. You will have to make 2 moves, going from 1 -> 3 using the coin (3, 2), and going from 3 -> 6 using the coin (3, 3). You can not go directly from 1 -> 6 using (3, 2) and (3, 3) because the sum of the costs of the coins exceeds the limit 4.\n\n",
    "URL": "https://a2oj.com/p?ID=12",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer, this integer should be -1 if there is no way to go from the left most station to the right most station, or the minimum number of moves to do it if it is possible.\n\n\n"
  },
  "2004": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains one integer 0 < t \u2264 100 which is the number of test cases. Each test case is a line containing two integers (0 < A, B < 216) separated by a space. A and B are the number of kids in the first group and the second group consecutively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n122. Teams\n\n\n\n\n\nProblem Statement:\n\n\nIn your neighborhood, a morning ritual is having two groups of kids fighting over the playground. Those groups would like to have a soccer game but most of the times the groups have different number of kids, at this point the kids agreed that each group should form some number of teams, all teams should be the same size. Then a match will be held between every team from the first group with every other team in the second group. All groups of kids want to play, so any kid should belong to one and only one team. Kids would like to have the minimum possible number of matches. One day the yelling and noise become unbearable so you've decided to solve this issue once and forever.\n\n\n\n\nInput Format:\n\n\nThe first line contains one integer 0 < t \u2264 100 which is the number of test cases. Each test case is a line containing two integers (0 < A, B < 216) separated by a space. A and B are the number of kids in the first group and the second group consecutively.\n\n\n\n\nOutput Format:\n\n\nFor each test case you should output one line containing two values separated by a space, the first is the size of each team, the second is the minimum possible number of matches consecutively.\n\n\n\n\nSample Input:\n\n4\n5 8\n7 7\n12 6\n4 6\n\n\n\n\nSample Output:\n\n1 40\n7 1\n6 2\n2 6\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:02 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n5 8\n7 7\n12 6\n4 6\n\n\n\nSample Output:\n\n1 40\n7 1\n6 2\n2 6\n\n\n",
    "Description": "\nProblem Statement:\n\n\nIn your neighborhood, a morning ritual is having two groups of kids fighting over the playground. Those groups would like to have a soccer game but most of the times the groups have different number of kids, at this point the kids agreed that each group should form some number of teams, all teams should be the same size. Then a match will be held between every team from the first group with every other team in the second group. All groups of kids want to play, so any kid should belong to one and only one team. Kids would like to have the minimum possible number of matches. One day the yelling and noise become unbearable so you've decided to solve this issue once and forever.\n\n\n",
    "Title": "122. Teams",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=122",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you should output one line containing two values separated by a space, the first is the size of each team, the second is the minimum possible number of matches consecutively.\n\n\n"
  },
  "2005": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains one integer 0 < t \u2264 5000 which is the number of test cases.\nEach test case is a round described as follow: first line contains an integer 0 < n < 15 denotes the number of rolling times and a character 'A' or 'B' or 'C' denotes Salwa's choice at this particular round. The following three lines describes the three used dices 'A', 'B', and 'C' respectively, each line contains three integers denoting the numbers that can be found on each side of the associated dice.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n123. Weird Dice\n\n\n\n\n\nProblem Statement:\n\n\nAhmad and Salwa are obsessed with gambling, they have tried every known game and they know every trick in the book. Once they heard about a new casino that offers an unusual games.\nSoon enough their passion led them to that casino, they stepped in and reached an empty table, immediately the man behind that table started to explain the game, pointing at a bag, he said: \"At this bag I have a collection of weird dices each of which has three sides only with a different number in the range [1, 9] on each side, along with the bag, we have a roulette of 15 sectors numbered 1, 2, ... , 15. The game will start by choosing three random dices from the bag, then spinning the roulette to decide a number n at random (0 < n < 16). Each player should pick one dice and roll it n times, the score will be kept for each player as the sum of faced up sides among the n rolls, the player with the maximum score wins the game\".\nBeing a gentleman, Ahmad will let Salwa get the first choice of which dice to play with. Your task is to help Ahmad then to choose a reasonable dice from the two left ones.\n\n\n\n\nInput Format:\n\n\nThe first line contains one integer 0 < t \u2264 5000 which is the number of test cases.\nEach test case is a round described as follow: first line contains an integer 0 < n < 15 denotes the number of rolling times and a character 'A' or 'B' or 'C' denotes Salwa's choice at this particular round. The following three lines describes the three used dices 'A', 'B', and 'C' respectively, each line contains three integers denoting the numbers that can be found on each side of the associated dice.\n\n\n\n\nOutput Format:\n\n\nFor each test case you have to output one line containing one of the following statements:\nPick A, Pick B, Pick C, No Choice, and Pick Any\nWhere:\nPick A is outputted if dice A is most likely to win.\nPick B is outputted if dice B is most likely to win.\nPick C is outputted if dice C is most likely to win.\nNo Choice is outputted if Salwa's choice is better than Ahmad's both available choices.\nPick Any is outputted if both Ahmad's available choices are better than Salwa choice.\n\n\n\n\nSample Input:\n\n2\n2 A\n1 5 9\n2 6 7\n3 4 8\n3 C\n7 1 2\n3 5 6\n8 4 9\n\n\n\n\nSample Output:\n\nPick C\nNo Choice\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:03 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 A\n1 5 9\n2 6 7\n3 4 8\n3 C\n7 1 2\n3 5 6\n8 4 9\n\n\n\nSample Output:\n\nPick C\nNo Choice\n\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmad and Salwa are obsessed with gambling, they have tried every known game and they know every trick in the book. Once they heard about a new casino that offers an unusual games.\nSoon enough their passion led them to that casino, they stepped in and reached an empty table, immediately the man behind that table started to explain the game, pointing at a bag, he said: \"At this bag I have a collection of weird dices each of which has three sides only with a different number in the range [1, 9] on each side, along with the bag, we have a roulette of 15 sectors numbered 1, 2, ... , 15. The game will start by choosing three random dices from the bag, then spinning the roulette to decide a number n at random (0 < n < 16). Each player should pick one dice and roll it n times, the score will be kept for each player as the sum of faced up sides among the n rolls, the player with the maximum score wins the game\".\nBeing a gentleman, Ahmad will let Salwa get the first choice of which dice to play with. Your task is to help Ahmad then to choose a reasonable dice from the two left ones.\n\n\n",
    "Title": "123. Weird Dice",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=123",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you have to output one line containing one of the following statements:\nPick A, Pick B, Pick C, No Choice, and Pick Any\nWhere:\nPick A is outputted if dice A is most likely to win.\nPick B is outputted if dice B is most likely to win.\nPick C is outputted if dice C is most likely to win.\nNo Choice is outputted if Salwa's choice is better than Ahmad's both available choices.\nPick Any is outputted if both Ahmad's available choices are better than Salwa choice.\n\n\n"
  },
  "2006": {
    "Input Description": "\nInput Format:\n\n\nFirst line contains K (1 \u2264 K \u2264 100) number of test cases. Each line in the next K lines contains: party day D (1 \u2264 D \u2264 100000000) followed by number of trees N (1 \u2264 N \u2264 100000) followed by N numbers ti denotes the number of days that tree i needs to grow to full maturity (1 \u2264 ti \u2264 1000000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n124. Party\n\n\n\n\n\nProblem Statement:\n\n\nAhmad has bought a new farm recently. He wants to invite his relatives to a party at his new farm. He bought N trees to plant it at the farm, for each tree Ahmad knows exactly how many days after the planting day it needs to grow to full maturity. Unfortunately, he forgot to tell his wife about that. Today his wife told him that she confirmed the party at day D from now and invited all guests!\nAhmad wants your help to find out the maximum number of trees that he can plant and let them grow to full maturity before party day if he starts planting tomorrow. Keep in mind that Ahmad can choose the order of planting the trees as he likes but he can plant only one tree at a day.\n\n\n\n\nInput Format:\n\n\nFirst line contains K (1 \u2264 K \u2264 100) number of test cases. Each line in the next K lines contains: party day D (1 \u2264 D \u2264 100000000) followed by number of trees N (1 \u2264 N \u2264 100000) followed by N numbers ti denotes the number of days that tree i needs to grow to full maturity (1 \u2264 ti \u2264 1000000).\n\n\n\n\nOutput Format:\n\n\nFor each test case your program should print one line contains one integer represents the maximum number of trees that can grow to full maturity if Ahmad starts planting tomorrow.\n\n\n\n\nSample Input:\n\n2\n8 5 2 3 4 3 4\n45 8 36 40 36 37 39 40 38 40\n\n\n\n\nSample Output:\n\n5\n8\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n8 5 2 3 4 3 4\n45 8 36 40 36 37 39 40 38 40\n\n\n\nSample Output:\n\n5\n8\n\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmad has bought a new farm recently. He wants to invite his relatives to a party at his new farm. He bought N trees to plant it at the farm, for each tree Ahmad knows exactly how many days after the planting day it needs to grow to full maturity. Unfortunately, he forgot to tell his wife about that. Today his wife told him that she confirmed the party at day D from now and invited all guests!\nAhmad wants your help to find out the maximum number of trees that he can plant and let them grow to full maturity before party day if he starts planting tomorrow. Keep in mind that Ahmad can choose the order of planting the trees as he likes but he can plant only one tree at a day.\n\n\n",
    "Title": "124. Party",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=124",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case your program should print one line contains one integer represents the maximum number of trees that can grow to full maturity if Ahmad starts planting tomorrow.\n\n\n"
  },
  "2007": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains one integer 0 < t \u2264 100 which is the number of test cases. Each test case is a given gray scale image, the first line contains two integers 0 < n,m \u2264 128 To denote the image dimensions, each of the following n lines contains m values each of which denote the pixel value at that position (each pixel value is in the range [0,255] inclusively), the next line contains one integer 0 < V < 255 to denote the size the list of intensity values), the next line contains V values as the intensity values, the next line contains an integer 0 < b < 50 to denote the minimum bound of adjacent pixels to be considered as an object.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n125. Objects Count\n\n\n\n\n\nProblem Statement:\n\n\nIn computer vision, the problem of counting objects in an image has been studied a long time ago; a very na\u00efve approach has been developed for counting the objects in a gray scale image (in which each pixel has a value between [0,255]). Experiments have shown that this simple algorithm has yielded some good results.\nThe algorithm start by scanning the image pixel by pixel (from top left to bottom right) and assign an intensity value vi for each pixel. The intensity value v is one of a small list of given values V = {v1, v2, ... , vn} where 0 < vi < 255, each pixel will be mapped to exactly one intensity value that is the closest to the pixel's value itself (in case of tie the smallest intensity value is taken). A reasonable assumption at this point is \"a region of at least b adjacent pixels (where each pixel has at most 4 adjacent pixels up, down, left, and right) sharing the same intensity value represents one object in the image\".\n\n\n\n\nInput Format:\n\n\nThe first line contains one integer 0 < t \u2264 100 which is the number of test cases. Each test case is a given gray scale image, the first line contains two integers 0 < n,m \u2264 128 To denote the image dimensions, each of the following n lines contains m values each of which denote the pixel value at that position (each pixel value is in the range [0,255] inclusively), the next line contains one integer 0 < V < 255 to denote the size the list of intensity values), the next line contains V values as the intensity values, the next line contains an integer 0 < b < 50 to denote the minimum bound of adjacent pixels to be considered as an object.\n\n\n\n\nOutput Format:\n\n\nFor each test case you have to output one line containing the number of objects in the given image described by the test case.\n\n\n\n\nSample Input:\n\n2\n5 5\n28 34 12 11 100\n35 30 10 12 110\n230 34 36 120 130\n233 218 233 218 233\n240 233 218 233 218\n8\n16 40 64 90 128 150 190 230\n5\n4 3\n28 34 12 35\n30 10 230 34\n36 233 218 233\n4\n32 96 160 224\n2\n\n\n\n\nSample Output:\n\n2\n2\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:05 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 5\n28 34 12 11 100\n35 30 10 12 110\n230 34 36 120 130\n233 218 233 218 233\n240 233 218 233 218\n8\n16 40 64 90 128 150 190 230\n5\n4 3\n28 34 12 35\n30 10 230 34\n36 233 218 233\n4\n32 96 160 224\n2\n\n\n\nSample Output:\n\n2\n2\n\n\n",
    "Description": "\nProblem Statement:\n\n\nIn computer vision, the problem of counting objects in an image has been studied a long time ago; a very na\u00efve approach has been developed for counting the objects in a gray scale image (in which each pixel has a value between [0,255]). Experiments have shown that this simple algorithm has yielded some good results.\nThe algorithm start by scanning the image pixel by pixel (from top left to bottom right) and assign an intensity value vi for each pixel. The intensity value v is one of a small list of given values V = {v1, v2, ... , vn} where 0 < vi < 255, each pixel will be mapped to exactly one intensity value that is the closest to the pixel's value itself (in case of tie the smallest intensity value is taken). A reasonable assumption at this point is \"a region of at least b adjacent pixels (where each pixel has at most 4 adjacent pixels up, down, left, and right) sharing the same intensity value represents one object in the image\".\n\n\n",
    "Title": "125. Objects Count",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=125",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you have to output one line containing the number of objects in the given image described by the test case.\n\n\n"
  },
  "2008": {
    "Input Description": "\nInput Format:\n\n\nThe first line has an integer (N < 100) represent the number of test cases.\nThe first line of each test case has three integers (M < 100, F < 10, and R < 1000) where (M) is the count of the rooms in the hotel, (F) is the initial reservation list length; (R) is the number of requests.\nThe following F line has the following format:\nroom_n start_date end_date\nWhere (room_n) is the room number. All rooms are numbered from 1 to M.\nThe following R lines represent the requests and have this format:\nstart_date end_date #rooms\nWhere (#rooms) is the number of rooms that must be available.\nAll dates has this format dd/mm/yyyy\nWhere dd is the day, the 9th day can be displayed as 9 and 09;\nAnd mm is the month, the 9th month can be displayed as 9 and 09;\nyyyy is the year and always consist of four digits.\nThe reservation of room starts and ends in noon (12 o'clock). This mean that reserving a room from 11/11/2013 to 13/11/2013 start from 12:00 11/11/2013 to 12:00 13/11/2013 with two nights.\nWe need the software to be a lifelong one, so it has to handle all 21th century request from 01/01/2000 to 31/12/2099.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n126. Reserve a Room\n\n\n\n\n\nProblem Statement:\n\n\nThe organizers of an ACM regional often make offers for the participants to make reservation in certain hotels that offer a big discount for the ACMers. But there is a problem with one of these hotels this year. The reservation system is broken down and the requests for the reservation are arriving. The hotel manager urgently needs a new reservation software.\nThe hotel has many rooms and has an initial reserve list. For each of the incoming request it has to check the availability of rooms.\nEach request is handled separately without considering the previous requests.\nIt is possible for the clients to change their room during their stay.\n\n\n\n\nInput Format:\n\n\nThe first line has an integer (N < 100) represent the number of test cases.\nThe first line of each test case has three integers (M < 100, F < 10, and R < 1000) where (M) is the count of the rooms in the hotel, (F) is the initial reservation list length; (R) is the number of requests.\nThe following F line has the following format:\nroom_n start_date end_date\nWhere (room_n) is the room number. All rooms are numbered from 1 to M.\nThe following R lines represent the requests and have this format:\nstart_date end_date #rooms\nWhere (#rooms) is the number of rooms that must be available.\nAll dates has this format dd/mm/yyyy\nWhere dd is the day, the 9th day can be displayed as 9 and 09;\nAnd mm is the month, the 9th month can be displayed as 9 and 09;\nyyyy is the year and always consist of four digits.\nThe reservation of room starts and ends in noon (12 o'clock). This mean that reserving a room from 11/11/2013 to 13/11/2013 start from 12:00 11/11/2013 to 12:00 13/11/2013 with two nights.\nWe need the software to be a lifelong one, so it has to handle all 21th century request from 01/01/2000 to 31/12/2099.\n\n\n\n\nOutput Format:\n\n\nFor each request print on a line 'Welcome' if there are available rooms or 'Sorry' otherwise.\nSeparate test cases with a line contains three dashes '---'\n\n\n\n\nSample Input:\n\n1\n3 7 3\n3 10/7/2013 27/7/2013\n1 15/7/2013 17/7/2013\n2 20/7/2013 25/7/2013\n1 5/7/2013 15/7/2013\n3 4/7/2013 9/7/2013\n2 10/7/2013 15/7/2013\n3 1/7/2013 2/7/2013\n15/7/2013 16/7/2013 1\n15/7/2013 16/7/2013 2\n3/7/2013 4/7/2013 3\n\n\n\n\nSample Output:\n\nWelcome\nSorry\nWelcome\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:06 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3 7 3\n3 10/7/2013 27/7/2013\n1 15/7/2013 17/7/2013\n2 20/7/2013 25/7/2013\n1 5/7/2013 15/7/2013\n3 4/7/2013 9/7/2013\n2 10/7/2013 15/7/2013\n3 1/7/2013 2/7/2013\n15/7/2013 16/7/2013 1\n15/7/2013 16/7/2013 2\n3/7/2013 4/7/2013 3\n\n\n\nSample Output:\n\nWelcome\nSorry\nWelcome\n\n\n",
    "Description": "\nProblem Statement:\n\n\nThe organizers of an ACM regional often make offers for the participants to make reservation in certain hotels that offer a big discount for the ACMers. But there is a problem with one of these hotels this year. The reservation system is broken down and the requests for the reservation are arriving. The hotel manager urgently needs a new reservation software.\nThe hotel has many rooms and has an initial reserve list. For each of the incoming request it has to check the availability of rooms.\nEach request is handled separately without considering the previous requests.\nIt is possible for the clients to change their room during their stay.\n\n\n",
    "Title": "126. Reserve a Room",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=126",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each request print on a line 'Welcome' if there are available rooms or 'Sorry' otherwise.\nSeparate test cases with a line contains three dashes '---'\n\n\n"
  },
  "2009": {
    "Input Description": "\nInput Format:\n\n\nThe input is given in multi-lines, each line represents single test case and contains two integers 1 < n \u2264 8, 1 < m \u2264 8 represent the board dimensions.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n127. Pronto\n\n\n\n\n\nProblem Statement:\n\n\nThere is a game called \"Pronto\"!!!, don't ask why. It is played on a rectangular board. Two players alternate the put of a lot of 2*2 pieces on the board. Each piece must be fully inside the board and do not overlaps over any other pieces. The player who put the last piece is the winner.\nThe goal of this problem is to determine if there is a way for a player to win if he starts first.\n\n\n\n\nInput Format:\n\n\nThe input is given in multi-lines, each line represents single test case and contains two integers 1 < n \u2264 8, 1 < m \u2264 8 represent the board dimensions.\n\n\n\n\nOutput Format:\n\n\nFor each input line, print \"I can win :)\" if the first player can win the game whatever the second player will do, print \"Maybe :(\" otherwise.\n\n\n\n\nSample Input:\n\n2 2\n4 4\n5 5\n\n\n\n\nSample Output:\n\nI can win :)\nI can win :)\nMaybe :(\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:07 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2 2\n4 4\n5 5\n\n\n\nSample Output:\n\nI can win :)\nI can win :)\nMaybe :(\n\n\n",
    "Description": "\nProblem Statement:\n\n\nThere is a game called \"Pronto\"!!!, don't ask why. It is played on a rectangular board. Two players alternate the put of a lot of 2*2 pieces on the board. Each piece must be fully inside the board and do not overlaps over any other pieces. The player who put the last piece is the winner.\nThe goal of this problem is to determine if there is a way for a player to win if he starts first.\n\n\n",
    "Title": "127. Pronto",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=127",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each input line, print \"I can win :)\" if the first player can win the game whatever the second player will do, print \"Maybe :(\" otherwise.\n\n\n"
  },
  "2010": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains one integer t \u2264 100 which is the number of test cases.\nFor each test case, the first line contains two integers n and k, n \u2264 100 is the dimension of the square museum and k \u2264 n*n the number of target squares where precious pieces are located, the next k lines, each one contains two integers (1 \u2264 x, y \u2264 n) the location of a precious piece in the museum.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n128. Museum Security\n\n\n\n\n\nProblem Statement:\n\n\nSquare shaped museum, consisting of n by n squared rooms, featuring thousands of rare and precious pieces, making it a target for many thieves who will try to steal its contents.\nSecurity experts met to put some plan to protect the most important pieces in the museum, and agreed to put guards on each valuable piece and thus ensure not to be robbed, but soon they found that they need an army of guards to be able to achieve their goal.\nOne expert in the area of security suggested that monitoring cameras can do the work, although one simple approach is to associate one camera to each precious piece is a feasible solution, but the expert believes that there should be a more elegant solution with a minimum number of cameras. The expert noticed that all rooms reside on a diagonal has a perfect angel and can be monitored by one camera, also he noticed that unimportant pieces unlike the precious ones are surrounded by some bad quality glass protectors which according to the diagonal monitoring angel prevent a clear sight of the next room. \nGiven the locations of the precious pieces, and assuming that other locations is filled or can be filled at any time with unimportant pieces, your task is to help the security expert to find the minimum number of cameras (which can be placed in any room) needed to implement his plan.\n\n\n\n\nInput Format:\n\n\nThe first line contains one integer t \u2264 100 which is the number of test cases.\nFor each test case, the first line contains two integers n and k, n \u2264 100 is the dimension of the square museum and k \u2264 n*n the number of target squares where precious pieces are located, the next k lines, each one contains two integers (1 \u2264 x, y \u2264 n) the location of a precious piece in the museum.\n\n\n\n\nOutput Format:\n\n\nFor each input scenario, output a line specifying the minimum number of cameras needed to monitor all of the precious pieces.\n\n\n\n\nSample Input:\n\n2\n5 5\n1 1\n2 2\n2 1\n1 2\n3 3\n10 4\n1 1\n4 4\n2 6\n8 8\n\n\n\n\nSample Output:\n\n2\n4\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:08 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 5\n1 1\n2 2\n2 1\n1 2\n3 3\n10 4\n1 1\n4 4\n2 6\n8 8\n\n\n\nSample Output:\n\n2\n4\n\n\n",
    "Description": "\nProblem Statement:\n\n\nSquare shaped museum, consisting of n by n squared rooms, featuring thousands of rare and precious pieces, making it a target for many thieves who will try to steal its contents.\nSecurity experts met to put some plan to protect the most important pieces in the museum, and agreed to put guards on each valuable piece and thus ensure not to be robbed, but soon they found that they need an army of guards to be able to achieve their goal.\nOne expert in the area of security suggested that monitoring cameras can do the work, although one simple approach is to associate one camera to each precious piece is a feasible solution, but the expert believes that there should be a more elegant solution with a minimum number of cameras. The expert noticed that all rooms reside on a diagonal has a perfect angel and can be monitored by one camera, also he noticed that unimportant pieces unlike the precious ones are surrounded by some bad quality glass protectors which according to the diagonal monitoring angel prevent a clear sight of the next room. \nGiven the locations of the precious pieces, and assuming that other locations is filled or can be filled at any time with unimportant pieces, your task is to help the security expert to find the minimum number of cameras (which can be placed in any room) needed to implement his plan.\n\n\n",
    "Title": "128. Museum Security",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=128",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each input scenario, output a line specifying the minimum number of cameras needed to monitor all of the precious pieces.\n\n\n"
  },
  "2011": {
    "Input Description": "\nInput Format:\n\n\nFirst line contains K (1 \u2264 K \u2264 100) number of test cases. Each line in the next K lines represents one test case, containing sequence of numbers that should be subtracted without changing their order. Each number is in range [1,999]. Each test case may contain from 1 to 150 numbers.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n129. Subtraction\n\n\n\n\n\nProblem Statement:\n\n\nSalwa is a brilliant student; she is just a six years old. She knew only one mathematical operation: addition (+). Yesterday she learned subtraction using minus operator (-). She went home and starts playing with it. She realized that when she subtract 3 numbers the answer depends on the order of executing the subtractions even when she didn't change the order of the 3 numbers themselves (subtraction is not an associative operation).\nFor example:  2 - ((5 - 1) - 8) = 6, while (2 - 5) - (1 - 8) = 4\nShe tried to find a way to maximize the answer of subtract sequence of numbers without changing their order. Of course, you will not let her alone with this mathematical task even when you have a competition to win! So please help her as a part of your competition.\n\n\n\n\nInput Format:\n\n\nFirst line contains K (1 \u2264 K \u2264 100) number of test cases. Each line in the next K lines represents one test case, containing sequence of numbers that should be subtracted without changing their order. Each number is in range [1,999]. Each test case may contain from 1 to 150 numbers.\n\n\n\n\nOutput Format:\n\n\nFor each test case output one line containing one number represents the maximum answer of subtract test case sequence numbers without changing their order.\n\n\n\n\nSample Input:\n\n2\n2 5 1 8\n6 2 1\n\n\n\n\nSample Output:\n\n6\n5\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:09 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 5 1 8\n6 2 1\n\n\n\nSample Output:\n\n6\n5\n\n\n",
    "Description": "\nProblem Statement:\n\n\nSalwa is a brilliant student; she is just a six years old. She knew only one mathematical operation: addition (+). Yesterday she learned subtraction using minus operator (-). She went home and starts playing with it. She realized that when she subtract 3 numbers the answer depends on the order of executing the subtractions even when she didn't change the order of the 3 numbers themselves (subtraction is not an associative operation).\nFor example:  2 - ((5 - 1) - 8) = 6, while (2 - 5) - (1 - 8) = 4\nShe tried to find a way to maximize the answer of subtract sequence of numbers without changing their order. Of course, you will not let her alone with this mathematical task even when you have a competition to win! So please help her as a part of your competition.\n\n\n",
    "Title": "129. Subtraction",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=129",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case output one line containing one number represents the maximum answer of subtract test case sequence numbers without changing their order.\n\n\n"
  },
  "2012": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains 3 integers separated by a single space N X Y (1 \u2264 N \u2264 99), (1 \u2264 X \u2264 100) and (1 \u2264 Y \u2264 2). N is the value of the second parameter and X is the value of the third parameter. If Y is 1, you should generate an array which when passed to the function with the given parameters, the function will return a correct result. If Y is 2, you should generate an array which when passed to the function with the given parameters, the function will return a wrong result. In both cases, the generated array must satisfy the above conditions.\n\nNote that correct or wrong result is relative to the way which Omar wants the function to work.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n13. Omar's Bug\n\n\n\n\n\nProblem Statement:\n\n\nOmar is the youngest programer in the world, he is just 11 months old. He has read about the binary search algorithm, and he decided to write it by himself.\n\nHe wrote the following function (its syntax is valid and it does the same job in both C++ and Java):\n\nint findFirstGreaterThanOrEqual(int array[], int N, int X) {\n\u00a0\u00a0int start = 0, end = N;\n\u00a0\u00a0while (start < end) {\n\u00a0\u00a0\u00a0\u00a0int middle = (start + end) / 2;\n\u00a0\u00a0\u00a0\u00a0if (array[middle] > X) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end = middle;\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start = middle + 1;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\u00a0\u00a0return start;\n}\n\n\nThe function will always be called with parameters which satisfy the following conditions:\n\n1. The first parameter is an array which contains at least 1 integer and at most 99 integers.\n2. The array contains distinct integers and it is sorted in increasing order.\n3. The integers in the array are positive and each one is at most 100.\n4. N is the number of elements in this array.\n5. X is a positive integer which is at most 100.\n\nHere is how Omar wants the function to work:\n\nIf there is no integer in the given array which is greater than or equal to X, Omar wants the function to return N . Otherwise, Omar wants the function to return the index of the smallest integer in the array that is greater than or equal to X (the first element in the array has index 0). Unfortunately there is a bug in the function and it returns wrong result for some cases, and Omar can not find the bug (he is too young). Can you help him to generate some arrays to test his function?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains 3 integers separated by a single space N X Y (1 \u2264 N \u2264 99), (1 \u2264 X \u2264 100) and (1 \u2264 Y \u2264 2). N is the value of the second parameter and X is the value of the third parameter. If Y is 1, you should generate an array which when passed to the function with the given parameters, the function will return a correct result. If Y is 2, you should generate an array which when passed to the function with the given parameters, the function will return a wrong result. In both cases, the generated array must satisfy the above conditions.\n\nNote that correct or wrong result is relative to the way which Omar wants the function to work.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line, N integers separated by a single space, the first integer is the first integer in the generated array, the second integer is the second integer in the generated array and so on (the generated array should satisfy the above conditions). If there is more than one correct solution, print the lexicographically smallest one. When comparing two different arrays of the same length, the lexicographically smaller array is the one with a smaller value on the smallest index where they differ.\n\n\n\n\nSample Input:\n\n2\n3 3 1\n4 7 2\n\n\n\nSample Output:\n\n1 2 4\n1 2 3 7\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 08:53:09 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 3 1\n4 7 2\n\n\nSample Output:\n\n1 2 4\n1 2 3 7\n\n",
    "Description": "\nProblem Statement:\n\n\nOmar is the youngest programer in the world, he is just 11 months old. He has read about the binary search algorithm, and he decided to write it by himself.\n\nHe wrote the following function (its syntax is valid and it does the same job in both C++ and Java):\n\nint findFirstGreaterThanOrEqual(int array[], int N, int X) {\n\u00a0\u00a0int start = 0, end = N;\n\u00a0\u00a0while (start < end) {\n\u00a0\u00a0\u00a0\u00a0int middle = (start + end) / 2;\n\u00a0\u00a0\u00a0\u00a0if (array[middle] > X) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end = middle;\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start = middle + 1;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\u00a0\u00a0return start;\n}\n\n\nThe function will always be called with parameters which satisfy the following conditions:\n\n1. The first parameter is an array which contains at least 1 integer and at most 99 integers.\n2. The array contains distinct integers and it is sorted in increasing order.\n3. The integers in the array are positive and each one is at most 100.\n4. N is the number of elements in this array.\n5. X is a positive integer which is at most 100.\n\nHere is how Omar wants the function to work:\n\nIf there is no integer in the given array which is greater than or equal to X, Omar wants the function to return N . Otherwise, Omar wants the function to return the index of the smallest integer in the array that is greater than or equal to X (the first element in the array has index 0). Unfortunately there is a bug in the function and it returns wrong result for some cases, and Omar can not find the bug (he is too young). Can you help him to generate some arrays to test his function?\n\n\n",
    "Title": "13. Omar's Bug",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=13",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line, N integers separated by a single space, the first integer is the first integer in the generated array, the second integer is the second integer in the generated array and so on (the generated array should satisfy the above conditions). If there is more than one correct solution, print the lexicographically smallest one. When comparing two different arrays of the same length, the lexicographically smaller array is the one with a smaller value on the smallest index where they differ.\n\n\n"
  },
  "2013": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains one integer 0 < t \u2264 1000 which is the number of test cases. Each test case is a line contains two integers 0 < n \u2264 1000 to denote the number of blocks, and 0 < x \u2264 100 to denote the width of a block.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n130. Hanging Out\n\n\n\n\n\nProblem Statement:\n\n\nSami (five years old boy) has a collection of n identical blocks, he is trying to stack them one on top of next one on a table, Sami can stack the blocks in any way he wants. Next figure shows one possible solution to do so. He is trying to arrange the blocks in a way such that one of them hangs out completely over the edge of the table and has the maximum possible offset of it, without having the stack fall over. \nFrom the physic point of view the stable stack is a stack having its mass center relaying on the table (not on air). The mass center of the stack is the center of the mass centers of all the blocks in it and the mass center of a block is the middle point in the block (half way of its width).\nSami tried a lot of times before he gave up and came to you. Your task is to find out the maximum possible offset achievable by building a stack of n blocks each of which has a width of x.\n\n\n\n\nInput Format:\n\n\nThe first line contains one integer 0 < t \u2264 1000 which is the number of test cases. Each test case is a line contains two integers 0 < n \u2264 1000 to denote the number of blocks, and 0 < x \u2264 100 to denote the width of a block.\n\n\n\n\nOutput Format:\n\n\nFor each test case you have to output a line contains the maximum achievable offset with a precision of 4 digits. If no offset can be gained you should output the string \"impossible\".\n\n\n\n\nSample Input:\n\n3\n2 80\n10 50\n27 22\n\n\n\n\nSample Output:\n\nimpossible\n23.2242\n20.8060\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:10 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n2 80\n10 50\n27 22\n\n\n\nSample Output:\n\nimpossible\n23.2242\n20.8060\n\n\n",
    "Description": "\nProblem Statement:\n\n\nSami (five years old boy) has a collection of n identical blocks, he is trying to stack them one on top of next one on a table, Sami can stack the blocks in any way he wants. Next figure shows one possible solution to do so. He is trying to arrange the blocks in a way such that one of them hangs out completely over the edge of the table and has the maximum possible offset of it, without having the stack fall over. \nFrom the physic point of view the stable stack is a stack having its mass center relaying on the table (not on air). The mass center of the stack is the center of the mass centers of all the blocks in it and the mass center of a block is the middle point in the block (half way of its width).\nSami tried a lot of times before he gave up and came to you. Your task is to find out the maximum possible offset achievable by building a stack of n blocks each of which has a width of x.\n\n\n",
    "Title": "130. Hanging Out",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=130",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you have to output a line contains the maximum achievable offset with a precision of 4 digits. If no offset can be gained you should output the string \"impossible\".\n\n\n"
  },
  "2014": {
    "Input Description": "\nInput Format:\n\n\nFirst line contains K (1 \u2264 K \u2264 100) number of test cases. Each line in the next K lines contains: one positive number representing level (1 \u2264 N =2m < 64000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n131. Triangles\n\n\n\n\n\nProblem Statement:\n\n\nGeorge loves drawing recursive shapes; today he draws recursive triangles using matches. Triangles have multiple levels determines by number of matches in one of its sides as following\n\n\n\nGeorge defines the term \"fragment\" as a straight line that contains one or more match. He wants you to help him counting all fragments in a specific level.\n\n\n\n\nInput Format:\n\n\nFirst line contains K (1 \u2264 K \u2264 100) number of test cases. Each line in the next K lines contains: one positive number representing level (1 \u2264 N =2m < 64000).\n\n\n\n\nOutput Format:\n\n\nFor each test case your program should print one line contains number of all fragments in level N.\n\n\n\n\nSample Input:\n\n3\n1\n2\n4\n\n\n\nSample Output:\n\n3\n12\n60\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:01 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Syrian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1\n2\n4\n\n\nSample Output:\n\n3\n12\n60\n\n",
    "Description": "\nProblem Statement:\n\n\nGeorge loves drawing recursive shapes; today he draws recursive triangles using matches. Triangles have multiple levels determines by number of matches in one of its sides as following\n\n\n\nGeorge defines the term \"fragment\" as a straight line that contains one or more match. He wants you to help him counting all fragments in a specific level.\n\n\n",
    "Title": "131. Triangles",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=131",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case your program should print one line contains number of all fragments in level N.\n\n\n"
  },
  "2015": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 13). Followed by the test cases, each test case is exactly two lines, the first line contains two integers y and n (the current year and the number of available stones, respectively). The next line contains exactly n positive integers separated by single space representing the values of these stones (the value of each stone is less then 1000). (0 < y < 10000) (0 < n \u2264 10).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n133. Time Jumper (Easy)\n\n\n\n\n\nProblem Statement:\n\n\nLong time ago, time traveling was possible, it was called time jumping, there was highly sophisticated machines called \"time jumpers\", you sit in one of those and relax, then you walk up in a different era!\n\nAmazing ha? However in that time there was no electronic devices, those machines were taking special stones in a special compatible  slots called USB (Universal Stones Bus) (the machine can take any number of stones), more important is that each stone had its own value, this value represents an amount of years.\n\nFor example, if I have a stone which its value is 200, I can travel 200 years in one step. If I have two stones which their values are 100 and 50 I can travel 50, 100 or 150 in one step.\n\nI can insert any number of stones into the machine and it will simply sum the values of these stones and jump in time corresponding to that sum.\n\nGiven the current year, the number of stones and the value of each stone, your job is to find all the years that you can jump to in one step.\n\nIn this problem we only jump forward in time so these years must be greater than the current year (you should use at least one stone).\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 13). Followed by the test cases, each test case is exactly two lines, the first line contains two integers y and n (the current year and the number of available stones, respectively). The next line contains exactly n positive integers separated by single space representing the values of these stones (the value of each stone is less then 1000). (0 < y < 10000) (0 < n \u2264 10).\n\n\n\n\nOutput Format:\n\n\nFor each test case output all the different years that I can jump to (forward in time) in increasing order, each one in a line.\n\n\n\n\nSample Input:\n\n2\n1100 1\n200\n2000 2\n50 150\n\n\n\nSample Output:\n\n1300\n2050\n2150\n2200\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-02-28 18:58:48 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1100 1\n200\n2000 2\n50 150\n\n\nSample Output:\n\n1300\n2050\n2150\n2200\n\n",
    "Description": "\nProblem Statement:\n\n\nLong time ago, time traveling was possible, it was called time jumping, there was highly sophisticated machines called \"time jumpers\", you sit in one of those and relax, then you walk up in a different era!\n\nAmazing ha? However in that time there was no electronic devices, those machines were taking special stones in a special compatible  slots called USB (Universal Stones Bus) (the machine can take any number of stones), more important is that each stone had its own value, this value represents an amount of years.\n\nFor example, if I have a stone which its value is 200, I can travel 200 years in one step. If I have two stones which their values are 100 and 50 I can travel 50, 100 or 150 in one step.\n\nI can insert any number of stones into the machine and it will simply sum the values of these stones and jump in time corresponding to that sum.\n\nGiven the current year, the number of stones and the value of each stone, your job is to find all the years that you can jump to in one step.\n\nIn this problem we only jump forward in time so these years must be greater than the current year (you should use at least one stone).\n\n\n",
    "Title": "133. Time Jumper (Easy)",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=133",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case output all the different years that I can jump to (forward in time) in increasing order, each one in a line.\n\n\n"
  },
  "2016": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 1000). Followed by T lines, each line represents a test case. Each test case consists of two integers n and h (0 < n < 1000) (0 < h < 1000) separated by a space, representing the number of snails and the number of hours.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n134. Slow Snails\n\n\n\n\n\nProblem Statement:\n\n\nOne day, your friend Ahmed wanted to challenge you with the hardest challenge ever, watching snails for so long time!\n\nAhmed has n snails. His snails are trained to walk on a 1 meter circle circumference, this circle is drawn on a table and all the snails walk only on the circumference of this circle (clockwise or anti-clockwise) with constant speed 1 meter per hour. When two snails meet both instantly change their directions and continue walking.\n\nThe challenge is to place the snails on the circle and choose their directions to achieve the following:\n1- The minimum number (min_meetings) of meetings between the snails in h hours.\n2- The maximum number (max_meetings) of meetings between the snails in h hours.\n\nEach case should be handled independently, in other words, solve the problem for the first case, and then solve it again for the second case.\n\nSince the snails are so slow, and the number of hours may be very big, you decided to write a program that calculates the required numbers.\n\nPlease note that the circle's circumference is always 1 meter, and all the snails have the same constant speed 1 meter per hour, and you can place each snail anywhere on the circle (there is infinite number of different places on the circle), but you can't place two or more snails in the same position.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 1000). Followed by T lines, each line represents a test case. Each test case consists of two integers n and h (0 < n < 1000) (0 < h < 1000) separated by a space, representing the number of snails and the number of hours.\n\n\n\n\nOutput Format:\n\n\nFor each test case print in a single line two numbers min_meetings and max_meetings separated by a single space.\n\n\n\n\nSample Input:\n\n3\n1 5\n2 1\n3 1\n\n\n\nSample Output:\n\n0 0\n0 2\n0 4\n\n\n\nNotes:\n\n\nHere is an explanation of the second test case:\n\nmax_meeting = 2\n\n\nmin_meeting = 0\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-02-28 18:58:49 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1 5\n2 1\n3 1\n\n\nSample Output:\n\n0 0\n0 2\n0 4\n\n",
    "Description": "\nProblem Statement:\n\n\nOne day, your friend Ahmed wanted to challenge you with the hardest challenge ever, watching snails for so long time!\n\nAhmed has n snails. His snails are trained to walk on a 1 meter circle circumference, this circle is drawn on a table and all the snails walk only on the circumference of this circle (clockwise or anti-clockwise) with constant speed 1 meter per hour. When two snails meet both instantly change their directions and continue walking.\n\nThe challenge is to place the snails on the circle and choose their directions to achieve the following:\n1- The minimum number (min_meetings) of meetings between the snails in h hours.\n2- The maximum number (max_meetings) of meetings between the snails in h hours.\n\nEach case should be handled independently, in other words, solve the problem for the first case, and then solve it again for the second case.\n\nSince the snails are so slow, and the number of hours may be very big, you decided to write a program that calculates the required numbers.\n\nPlease note that the circle's circumference is always 1 meter, and all the snails have the same constant speed 1 meter per hour, and you can place each snail anywhere on the circle (there is infinite number of different places on the circle), but you can't place two or more snails in the same position.\n\n\n",
    "Title": "134. Slow Snails",
    "Notes": "\nNotes:\n\n\nHere is an explanation of the second test case:\n\nmax_meeting = 2\n\n\nmin_meeting = 0\n\n\n\n",
    "URL": "https://a2oj.com/p?ID=134",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print in a single line two numbers min_meetings and max_meetings separated by a single space.\n\n\n"
  },
  "2017": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 13). Followed by the test cases, each test case is exactly two lines, the first line contains two integers y and n (the current year and the number of available stones, respectively). The next line contains exactly n positive integers separated by single space representing the values of these stones (the value of each stone is less then 1000). (0 < y < 10000) (0 < n \u2264 100).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n136. Time Jumper (Hard)\n\n\n\n\n\nProblem Statement:\n\n\nLong time ago, time traveling was possible, it was called time jumping, there was highly sophisticated machines called \"time jumpers\", you sit in one of those and relax, then you walk up in a different era!\n\nAmazing ha? However in that time there was no electronic devices, those machines were taking special stones in a special compatible  slots called USB (Universal Stones Bus) (the machine can take any number of stones), more important is that each stone had its own value, this value represents an amount of years.\n\nFor example, if I have a stone which its value is 200, I can travel 200 years in one step. If I have two stones which their values are 100 and 50 I can travel 50, 100 or 150 in one step.\n\nI can insert any number of stones into the machine and it will simply sum the values of these stones and jump in time corresponding to that sum.\n\nGiven the current year, the number of stones and the value of each stone, your job is to find all the years that you can jump to in one step.\n\nIn this problem we only jump forward in time so these years must be greater than the current year (you should use at least one stone).\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 13). Followed by the test cases, each test case is exactly two lines, the first line contains two integers y and n (the current year and the number of available stones, respectively). The next line contains exactly n positive integers separated by single space representing the values of these stones (the value of each stone is less then 1000). (0 < y < 10000) (0 < n \u2264 100).\n\n\n\n\nOutput Format:\n\n\nFor each test case output all the different years that I can jump to (forward in time) in increasing order, each one in a line.\n\n\n\n\nSample Input:\n\n2\n1100 1\n200\n2000 2\n50 150\n\n\n\nSample Output:\n\n1300\n2050\n2150\n2200\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-02-28 18:58:51 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1100 1\n200\n2000 2\n50 150\n\n\nSample Output:\n\n1300\n2050\n2150\n2200\n\n",
    "Description": "\nProblem Statement:\n\n\nLong time ago, time traveling was possible, it was called time jumping, there was highly sophisticated machines called \"time jumpers\", you sit in one of those and relax, then you walk up in a different era!\n\nAmazing ha? However in that time there was no electronic devices, those machines were taking special stones in a special compatible  slots called USB (Universal Stones Bus) (the machine can take any number of stones), more important is that each stone had its own value, this value represents an amount of years.\n\nFor example, if I have a stone which its value is 200, I can travel 200 years in one step. If I have two stones which their values are 100 and 50 I can travel 50, 100 or 150 in one step.\n\nI can insert any number of stones into the machine and it will simply sum the values of these stones and jump in time corresponding to that sum.\n\nGiven the current year, the number of stones and the value of each stone, your job is to find all the years that you can jump to in one step.\n\nIn this problem we only jump forward in time so these years must be greater than the current year (you should use at least one stone).\n\n\n",
    "Title": "136. Time Jumper (Hard)",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=136",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case output all the different years that I can jump to (forward in time) in increasing order, each one in a line.\n\n\n"
  },
  "2018": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input contains an integer t, the number of test cases. Followed by t test cases. Each test case starts with a line contains two integers n and m, the number of the words in the sentence and the cryptography key, respectively (1 \u2264 n \u2264 10) and (0 \u2264 m \u2264 1000). Followed by a line which contains n non-empty strings separated by single space which represent the sentence. Each word will consist of up to 20 English characters (from 'a' to 'z' or from 'A' to 'Z').\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n137. Cryptography\n\n\n\n\n\nProblem Statement:\n\n\nCryptography is an important field for military purposes, it's important because transferring secret messages in wars is very critical, so we need these messages to stay secret even if it is caught by the enemy.\n\nCesar invented an idea to encode a letter using a key (an integer m) and replaces each character with the m-th next character, for example if m=6 we replace 'A' with 'G', and if m=5 we replace 'w' with 'b' (because we assume that the letter after 'z' is 'a'). Then we replace each lower case character with the same character but in upper case (for example, 'a' to 'A'), and we replace each upper case character with the same character but in lower case (for example, 'A' to 'a').\n\nGiven a sentence of n words, your task is to output the encoded sentence.\n\n\n\n\nInput Format:\n\n\nThe first line of the input contains an integer t, the number of test cases. Followed by t test cases. Each test case starts with a line contains two integers n and m, the number of the words in the sentence and the cryptography key, respectively (1 \u2264 n \u2264 10) and (0 \u2264 m \u2264 1000). Followed by a line which contains n non-empty strings separated by single space which represent the sentence. Each word will consist of up to 20 English characters (from 'a' to 'z' or from 'A' to 'Z').\n\n\n\n\nOutput Format:\n\n\nFor each test case print a line which contains the n words separated by single space, but encoded as described above.\n\n\n\n\nSample Input:\n\n2\n5 3\nNODAR likes Cryptography so much\n3 36\nI love You\n\n\n\nSample Output:\n\nqrgdu OLNHV fUBSWRJUDSKB VR PXFK\t\ns VYFO iYE\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-03-05 18:59:29 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 3\nNODAR likes Cryptography so much\n3 36\nI love You\n\n\nSample Output:\n\nqrgdu OLNHV fUBSWRJUDSKB VR PXFK\t\ns VYFO iYE\n\n",
    "Description": "\nProblem Statement:\n\n\nCryptography is an important field for military purposes, it's important because transferring secret messages in wars is very critical, so we need these messages to stay secret even if it is caught by the enemy.\n\nCesar invented an idea to encode a letter using a key (an integer m) and replaces each character with the m-th next character, for example if m=6 we replace 'A' with 'G', and if m=5 we replace 'w' with 'b' (because we assume that the letter after 'z' is 'a'). Then we replace each lower case character with the same character but in upper case (for example, 'a' to 'A'), and we replace each upper case character with the same character but in lower case (for example, 'A' to 'a').\n\nGiven a sentence of n words, your task is to output the encoded sentence.\n\n\n",
    "Title": "137. Cryptography",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=137",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a line which contains the n words separated by single space, but encoded as described above.\n\n\n"
  },
  "2019": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1  \u2264  T  \u2264  100). Followed by the test cases, the first line of a test case contains two integers C and V separated by a single space. C and V (1  \u2264  C, V  \u2264  100) represent the number of candidates and voters respectively, followed by V lines each line contains C integers separated by a single space, representing the preferences list for a single voter (the first is his most preferable candidate while the last is his least preferable one). Each integer from 1 to C will appear exactly once in each line.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n14. The New President\n\n\n\n\n\nProblem Statement:\n\n\nFinally, it is time to vote for a new president and you are really excited about that. You know that the final results may take weeks to be announced, while you can't really wait to see the results.\n\nSomehow you managed to get the preferences list for every voter (we don't care how you managed to get this piece of information!). Each voter sorted out all candidates starting by his most preferred candidate and ending with his least preferred one. When voting, a voter votes for the candidate who comes first in his preferences list. For example, if there are 5 candidates (numbered 1 to 5), and the preferences list for one voter is [3, 2, 5, 1, 4] and the current competing candidates in the voting process are candidates 2 and 4, the voter will vote for candidate number 2.\n\nHere are the rules for the election process:\n\n1. There are C candidates (numbered from 1 to C), and V voters (V is always an odd number).\n\n2. The election process consists of up to 2 rounds. All candidates compete in the the first round. If a candidate receives more than 50% of the votes, he wins, otherwise another round takes place, in which only the top 2 candidates compete for the presidency. The candidate who receives more votes than his opponent wins and becomes the new president.\n\n3. You can safely assume that the given preferences will never cause a situation in which the second and the third candidates from the first round receive the same number of votes.\n\n4. The voters' preferences are the same in both rounds, and each voter must vote exactly once in each round for a currently competing candidate according to his preferences.\n\nGiven the preferences lists, you need to write a program to figure out which candidate will win and in which round.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1  \u2264  T  \u2264  100). Followed by the test cases, the first line of a test case contains two integers C and V separated by a single space. C and V (1  \u2264  C, V  \u2264  100) represent the number of candidates and voters respectively, followed by V lines each line contains C integers separated by a single space, representing the preferences list for a single voter (the first is his most preferable candidate while the last is his least preferable one). Each integer from 1 to C will appear exactly once in each line.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line two integers separated by a single space. The first integer is the ID of the winner candidate (a number from 1 to C), the second integer is either 1 or 2 indicating whether this candidate will win in the first round or the second one respectively.\n\n\n\n\nSample Input:\n\n2\n2 3\n2 1\n1 2\n2 1\n3 5\n1 2 3\n1 2 3\n2 1 3\n2 3 1\n3 2 1\n\n\n\n\nSample Output:\n\n2 1\n2 2\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 19:36:22 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 3\n2 1\n1 2\n2 1\n3 5\n1 2 3\n1 2 3\n2 1 3\n2 3 1\n3 2 1\n\n\n\nSample Output:\n\n2 1\n2 2\n\n\n",
    "Description": "\nProblem Statement:\n\n\nFinally, it is time to vote for a new president and you are really excited about that. You know that the final results may take weeks to be announced, while you can't really wait to see the results.\n\nSomehow you managed to get the preferences list for every voter (we don't care how you managed to get this piece of information!). Each voter sorted out all candidates starting by his most preferred candidate and ending with his least preferred one. When voting, a voter votes for the candidate who comes first in his preferences list. For example, if there are 5 candidates (numbered 1 to 5), and the preferences list for one voter is [3, 2, 5, 1, 4] and the current competing candidates in the voting process are candidates 2 and 4, the voter will vote for candidate number 2.\n\nHere are the rules for the election process:\n\n1. There are C candidates (numbered from 1 to C), and V voters (V is always an odd number).\n\n2. The election process consists of up to 2 rounds. All candidates compete in the the first round. If a candidate receives more than 50% of the votes, he wins, otherwise another round takes place, in which only the top 2 candidates compete for the presidency. The candidate who receives more votes than his opponent wins and becomes the new president.\n\n3. You can safely assume that the given preferences will never cause a situation in which the second and the third candidates from the first round receive the same number of votes.\n\n4. The voters' preferences are the same in both rounds, and each voter must vote exactly once in each round for a currently competing candidate according to his preferences.\n\nGiven the preferences lists, you need to write a program to figure out which candidate will win and in which round.\n\n\n",
    "Title": "14. The New President",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=14",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line two integers separated by a single space. The first integer is the ID of the winner candidate (a number from 1 to C), the second integer is either 1 or 2 indicating whether this candidate will win in the first round or the second one respectively.\n\n\n"
  },
  "2020": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input contains an integer T, the number of test cases to follow. Each test case consists of a single line with one integer N (1 \u2264 N \u2264 500), the number of cubes to ship.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n140. Shipping\n\n\n\n\n\nProblem Statement:\n\n\nYou want to ship N cubes abroad. The size of each cube is 1 x 1 x 1. You can only ship the cubes by filling them into a single cuboid box. The cost of shipping a cuboid box with dimensions a x b x c is equal to (a + b + c). \n\nYou can't leave any empty space in the box, because the cubes would shift and get damaged during the transfer.\n\nYou are given an integer N. Print the minimal possible cost for shipping N cubes.\n\n\n\n\nInput Format:\n\n\nThe first line of the input contains an integer T, the number of test cases to follow. Each test case consists of a single line with one integer N (1 \u2264 N \u2264 500), the number of cubes to ship.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains the minimal possible cost for shipping N cubes.\n\n\n\n\nSample Input:\n\n4\n1\n6\n7\n200\n\n\n\nSample Output:\n\n3\n6\n9\n18\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-03-05 18:59:35 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n1\n6\n7\n200\n\n\nSample Output:\n\n3\n6\n9\n18\n\n",
    "Description": "\nProblem Statement:\n\n\nYou want to ship N cubes abroad. The size of each cube is 1 x 1 x 1. You can only ship the cubes by filling them into a single cuboid box. The cost of shipping a cuboid box with dimensions a x b x c is equal to (a + b + c). \n\nYou can't leave any empty space in the box, because the cubes would shift and get damaged during the transfer.\n\nYou are given an integer N. Print the minimal possible cost for shipping N cubes.\n\n\n",
    "Title": "140. Shipping",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=140",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains the minimal possible cost for shipping N cubes.\n\n\n"
  },
  "2021": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input contains an integer T, the number of test cases. Followed by the test cases. Each test case contains four space separated integers on a single line N,M,x,y (1 \u2264 N,M \u2264 200) (1 \u2264 x \u2264 N) (1 \u2264 y \u2264 M) representing the dimensions of the board and the starting position of the knight (as described above), respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n142. Chess Knights\n\n\n\n\n\nProblem Statement:\n\n\nYou are given an NxM (N rows numbered from 1 to N from to to bottom, and M columns numbered from 1 to M from left to right) chess board, and a knight at position (x,y) (x is the row number, and y is the column number). The knight can move like in the chess game (L shape moves, as shown in the image below).\n\n\nIt can move any number of moves as long as it doesn't fall of the board. Your task is to find how many squares the knight can strike (after 0 or more moves).\n\n\n\n\nInput Format:\n\n\nThe first line of the input contains an integer T, the number of test cases. Followed by the test cases. Each test case contains four space separated integers on a single line N,M,x,y (1 \u2264 N,M \u2264 200) (1 \u2264 x \u2264 N) (1 \u2264 y \u2264 M) representing the dimensions of the board and the starting position of the knight (as described above), respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line contains an integer representing the number of squares the knight can strike.\n\n\n\n\nSample Input:\n\n2\n2 2 1 2\n3 3 2 1\n\n\n\nSample Output:\n\n1\n8\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-03-05 18:59:42 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 2 1 2\n3 3 2 1\n\n\nSample Output:\n\n1\n8\n\n",
    "Description": "\nProblem Statement:\n\n\nYou are given an NxM (N rows numbered from 1 to N from to to bottom, and M columns numbered from 1 to M from left to right) chess board, and a knight at position (x,y) (x is the row number, and y is the column number). The knight can move like in the chess game (L shape moves, as shown in the image below).\n\n\nIt can move any number of moves as long as it doesn't fall of the board. Your task is to find how many squares the knight can strike (after 0 or more moves).\n\n\n",
    "Title": "142. Chess Knights",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=142",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line contains an integer representing the number of squares the knight can strike.\n\n\n"
  },
  "2022": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input will contain an integer T, the number of test cases. Followed by T test cases, each test case starts with a line containing an integer N (1 \u2264 N \u2264 10,000) which is the number of cards in this test case, followed by a line which contains N space separated integers which represent the numbers on the cards on the table before sorting them (from left to right).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n144. Shuffling\n\n\n\n\n\nProblem Statement:\n\n\nJack loves to play with cards,  once he was playing with a deck of uniquely numbered cards, the game was to sort the cards by their numbers (in increasing order).\n\nNow he shuffled all the cards and put them in a single row on a table, and before starting to sort them he wanted to count the number of cards which will stay at the same position after the sorting. To sort the cards, he will keep swapping pairs of cards as necessary until the cards are sorted in increasing order from left to right.\n\nGiven the initial cards order, can you help Jack to count the number of cards as described above?\n\n\n\n\nInput Format:\n\n\nThe first line of the input will contain an integer T, the number of test cases. Followed by T test cases, each test case starts with a line containing an integer N (1 \u2264 N \u2264 10,000) which is the number of cards in this test case, followed by a line which contains N space separated integers which represent the numbers on the cards on the table before sorting them (from left to right).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print one integer that indicate the number of cards which will stay in their original positions.\n\n\n\n\nSample Input:\n\n1\n5\n5 8 1 9 10\n\n\n\n\nSample Output:\n\n2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-03-05 19:00:40 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n5\n5 8 1 9 10\n\n\n\nSample Output:\n\n2\n\n",
    "Description": "\nProblem Statement:\n\n\nJack loves to play with cards,  once he was playing with a deck of uniquely numbered cards, the game was to sort the cards by their numbers (in increasing order).\n\nNow he shuffled all the cards and put them in a single row on a table, and before starting to sort them he wanted to count the number of cards which will stay at the same position after the sorting. To sort the cards, he will keep swapping pairs of cards as necessary until the cards are sorted in increasing order from left to right.\n\nGiven the initial cards order, can you help Jack to count the number of cards as described above?\n\n\n",
    "Title": "144. Shuffling",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=144",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print one integer that indicate the number of cards which will stay in their original positions.\n\n\n"
  },
  "2023": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing a string S (1 \u2264 |S| \u2264 1, 000, 000), followed by one or more lines each describing one of the following operations to perform on S (all indices are zero based, and the quotes are for clarity):\n\n1. \"I R X\" means insert the string R (1 \u2264 |R| \u2264 1, 000, 000) in S at index X (0 \u2264 X \u2264 |S|), when X equals |S| this means append R at the end of S. For example, the result of inserting \"xy\" in \"abc\" at position 1 will be \"axybc\", and the result of inserting \"xy\" in \"abc\" at position 3 will be \"abcxy\", and the result of inserting \"xy\" in \"abc\" at position 0 will be \"xyabc\".\n\n2. \"P X Y\" means print the substring of S from X to Y, inclusive (0 \u2264 X \u2264 Y \u2264 |S|). For example the substring from 0 to 2 of \"abc\" is \"abc\", and the string from 1 to 1 of \"abc\" is \"b\".\n\n3. \"END\" Indicates the end of operations for the test case.\n\nStrings S and R will consist of lower case English letters only ('a' to 'z'), and |S| will never get greater than 1,000,000 as a result of the operations for any test case. Also, the total number of characters to be printed for any test case will not exceed 1,000,000.\n\nNote: Make sure to use fast I0 operations, because the input and output files are very large.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n15. No Name\n\n\n\n\n\nProblem Statement:\n\n\nThis is the most direct problem ever, you are required to implement some basic string operations like insert and substring.\n\nIn this problem |S| means the length of the string S.\n\nNote: We didn't find a good name for this problem.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing a string S (1 \u2264 |S| \u2264 1, 000, 000), followed by one or more lines each describing one of the following operations to perform on S (all indices are zero based, and the quotes are for clarity):\n\n1. \"I R X\" means insert the string R (1 \u2264 |R| \u2264 1, 000, 000) in S at index X (0 \u2264 X \u2264 |S|), when X equals |S| this means append R at the end of S. For example, the result of inserting \"xy\" in \"abc\" at position 1 will be \"axybc\", and the result of inserting \"xy\" in \"abc\" at position 3 will be \"abcxy\", and the result of inserting \"xy\" in \"abc\" at position 0 will be \"xyabc\".\n\n2. \"P X Y\" means print the substring of S from X to Y, inclusive (0 \u2264 X \u2264 Y \u2264 |S|). For example the substring from 0 to 2 of \"abc\" is \"abc\", and the string from 1 to 1 of \"abc\" is \"b\".\n\n3. \"END\" Indicates the end of operations for the test case.\n\nStrings S and R will consist of lower case English letters only ('a' to 'z'), and |S| will never get greater than 1,000,000 as a result of the operations for any test case. Also, the total number of characters to be printed for any test case will not exceed 1,000,000.\n\nNote: Make sure to use fast I0 operations, because the input and output files are very large.\n\n\n\n\nOutput Format:\n\n\nFor every \"P X Y\" operation in the input, print one line with the corresponding substring.\n\n\n\n\nSample Input:\n\n1\nacm\nI ac 3\nP 0 3\nI x 3\nI xxxx 6\nI pc 6\nP 0 11\nEND\n\n\n\nSample Output:\n\nacma\nacmxacpcxxxx\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 19:28:44 UTC\n\n\n\n\nTime Limit:\n\n\n1.5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n1\nacm\nI ac 3\nP 0 3\nI x 3\nI xxxx 6\nI pc 6\nP 0 11\nEND\n\n\nSample Output:\n\nacma\nacmxacpcxxxx\n\n",
    "Description": "\nProblem Statement:\n\n\nThis is the most direct problem ever, you are required to implement some basic string operations like insert and substring.\n\nIn this problem |S| means the length of the string S.\n\nNote: We didn't find a good name for this problem.\n\n\n",
    "Title": "15. No Name",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=15",
    "Time Limit": "1.5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor every \"P X Y\" operation in the input, print one line with the corresponding substring.\n\n\n"
  },
  "2024": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is on two lines. The first line of each test case contains the encrypted password. The second line of each test case contains the original password. Both the encrypted password and the original password are at least 1 and at most 100,000 lower case English letters (from 'a' to 'z'), and the length of the original password is less than or equal the length of the encrypted password.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n16. Encrypted Password\n\n\n\n\n\nProblem Statement:\n\n\nEncrypting passwords is one of the most important problems nowadays, and you trust only the encryption algorithms which you invented, and you have just made a new encryption algorithm. Given a password which consists of only lower case English letters, your algorithm encrypts this password using the following 3 steps (in this given order):\n\n1. Swap two different characters of the given password (you can do this step zero or more times).\n2. Append zero or more lower case English letters at the beginning of the output of step one.\n3. Append zero or more lower case English letters to the end of the output of step two.\n\nAnd the encrypted password is the output of step three. You have just finished implementing the above algorithm and applied it on many passwords. Now you want to make sure that there are no bugs in your implementation, so you decided to write another program which validates the output of the encryption program. Given the encrypted password and the original password, your job is to check whether the encrypted password may be the result of applying your algorithm on the original password or not.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is on two lines. The first line of each test case contains the encrypted password. The second line of each test case contains the original password. Both the encrypted password and the original password are at least 1 and at most 100,000 lower case English letters (from 'a' to 'z'), and the length of the original password is less than or equal the length of the encrypted password.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line one word, \"YES\" (without the quotes) if applying the algorithm on the original password may generate the encrypted password, otherwise print \"NO\" (without the quotes).\n\n\n\n\nSample Input:\n\n3\nabedef\necd\ncde\necd\nabedef\nfed\n\n\n\nSample Output:\n\nNO\nYES\nYES\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 20:01:39 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n3\nabedef\necd\ncde\necd\nabedef\nfed\n\n\nSample Output:\n\nNO\nYES\nYES\n\n",
    "Description": "\nProblem Statement:\n\n\nEncrypting passwords is one of the most important problems nowadays, and you trust only the encryption algorithms which you invented, and you have just made a new encryption algorithm. Given a password which consists of only lower case English letters, your algorithm encrypts this password using the following 3 steps (in this given order):\n\n1. Swap two different characters of the given password (you can do this step zero or more times).\n2. Append zero or more lower case English letters at the beginning of the output of step one.\n3. Append zero or more lower case English letters to the end of the output of step two.\n\nAnd the encrypted password is the output of step three. You have just finished implementing the above algorithm and applied it on many passwords. Now you want to make sure that there are no bugs in your implementation, so you decided to write another program which validates the output of the encryption program. Given the encrypted password and the original password, your job is to check whether the encrypted password may be the result of applying your algorithm on the original password or not.\n\n\n",
    "Title": "16. Encrypted Password",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=16",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line one word, \"YES\" (without the quotes) if applying the algorithm on the original password may generate the encrypted password, otherwise print \"NO\" (without the quotes).\n\n\n"
  },
  "2025": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is on two lines. The first line of each test case contains two integers N, the number of different candies (1 \u2264 N \u2264 100), and K, the minimum number of candies which will make a kid happy as described above (1 \u2264 K \u2264 100). The second line of each test case contains N integers, separated by a single space, which are the available number of candies of each type. There will be at least 1 candy and at most 100 candies of each type.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n17. Kids Love Candies\n\n\n\n\n\nProblem Statement:\n\n\nYour son's birthday is coming soon (assume that you have a son), and you promised to make the best party ever for him. He will be very happy if he can invite all his friends to this party (he has many friends), but unfortunately you can't invite everyone because you have a limited number of candies, and you want everyone to be happy. \n\nAs we all know, kids love to eat a lot of candies of the same type, let's say a kid will be happy only if he can eat at least K candies of the same type.\n\n Given K, and the number of available candies of each type, calculate the maximum number of kids where you can make all of them happy by giving each one at least K candies of the same type.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is on two lines. The first line of each test case contains two integers N, the number of different candies (1 \u2264 N \u2264 100), and K, the minimum number of candies which will make a kid happy as described above (1 \u2264 K \u2264 100). The second line of each test case contains N integers, separated by a single space, which are the available number of candies of each type. There will be at least 1 candy and at most 100 candies of each type.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line one integer, the maximum number of kids you are asked to calculate as described above.\n\n\n\n\nSample Input:\n\n2\n3 2\n4 5 7\n3 8\n4 5 7\n\n\n\nSample Output:\n\n7\n0\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 20:03:51 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 2\n4 5 7\n3 8\n4 5 7\n\n\nSample Output:\n\n7\n0\n\n",
    "Description": "\nProblem Statement:\n\n\nYour son's birthday is coming soon (assume that you have a son), and you promised to make the best party ever for him. He will be very happy if he can invite all his friends to this party (he has many friends), but unfortunately you can't invite everyone because you have a limited number of candies, and you want everyone to be happy. \n\nAs we all know, kids love to eat a lot of candies of the same type, let's say a kid will be happy only if he can eat at least K candies of the same type.\n\n Given K, and the number of available candies of each type, calculate the maximum number of kids where you can make all of them happy by giving each one at least K candies of the same type.\n\n\n",
    "Title": "17. Kids Love Candies",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=17",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line one integer, the maximum number of kids you are asked to calculate as described above.\n\n\n"
  },
  "2026": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing the initial string S which consists of N lower case English letters (1 \u2264 N \u2264 100). Followed by N lines each line contains a string Ci which consists of Li distinct lower case English letters (1 \u2264 Li \u2264 5) which are the valid letters for the i-th position in the final string. Each letter in each Ci will appear at least once in S.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n18. The Swapping Game\n\n\n\n\n\nProblem Statement:\n\n\nLast year you invented a game which can be played using a board and a die (singular of dice), this year you invented another new game which can be played using a single string of some letters.\n\nThe game starts with a string of N lower case English letters ('a' to 'z'), and you can only swap two different characters in this string, and you can make this step zero or more times. Your goal is to reach the lexicographically smallest string after doing zero or more moves.\n\nBut there are some constraints on the final string. For each position, it must be a letter of some given letters (the given letters are not necessary the same for each position). For example, the first letter must be 'a' or 'b', the second letter must be 'b' or 'c', and so on.\n\nNote that these constraints are on the final string only, which means you can make moves which cause invalid strings to reach a valid string after some more moves.\n\nGiven the initial string and the constraints on each position, your task is to write a program to find the lexicographically smallest valid string after making zero or more moves.\n\nNote: When comparing two different strings of the same length, the lexicographically smaller one is the one with a smaller letter on the first place where they differ.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing the initial string S which consists of N lower case English letters (1 \u2264 N \u2264 100). Followed by N lines each line contains a string Ci which consists of Li distinct lower case English letters (1 \u2264 Li \u2264 5) which are the valid letters for the i-th position in the final string. Each letter in each Ci will appear at least once in S.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line the lexicographically smallest valid string you can get after zero or more moves. If there is no such valid string print \"NO SOLUTION\" (without the quotes).\n\n\n\n\nSample Input:\n\n2\nabcde\nabcde\na\nabcde\nabcde\nabcde\nabcde\nab\nab\nab\nabcde\nabcde\n\n\n\nSample Output:\n\nbacde\nNO SOLUTION\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 20:06:15 UTC\n\n\n\n\nTime Limit:\n\n\n10 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n2\nabcde\nabcde\na\nabcde\nabcde\nabcde\nabcde\nab\nab\nab\nabcde\nabcde\n\n\nSample Output:\n\nbacde\nNO SOLUTION\n\n",
    "Description": "\nProblem Statement:\n\n\nLast year you invented a game which can be played using a board and a die (singular of dice), this year you invented another new game which can be played using a single string of some letters.\n\nThe game starts with a string of N lower case English letters ('a' to 'z'), and you can only swap two different characters in this string, and you can make this step zero or more times. Your goal is to reach the lexicographically smallest string after doing zero or more moves.\n\nBut there are some constraints on the final string. For each position, it must be a letter of some given letters (the given letters are not necessary the same for each position). For example, the first letter must be 'a' or 'b', the second letter must be 'b' or 'c', and so on.\n\nNote that these constraints are on the final string only, which means you can make moves which cause invalid strings to reach a valid string after some more moves.\n\nGiven the initial string and the constraints on each position, your task is to write a program to find the lexicographically smallest valid string after making zero or more moves.\n\nNote: When comparing two different strings of the same length, the lexicographically smaller one is the one with a smaller letter on the first place where they differ.\n\n\n",
    "Title": "18. The Swapping Game",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=18",
    "Time Limit": "10 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line the lexicographically smallest valid string you can get after zero or more moves. If there is no such valid string print \"NO SOLUTION\" (without the quotes).\n\n\n"
  },
  "2027": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of a test case contains two integers L and N separated by a single space. L (1 \u2264 L \u2264 1,000) is the length of the pattern (as described above), and N (0 \u2264 N \u2264 12) is the number of points that you are sure they are not touched by the pattern, followed by N lines each line contains two integers X (1 \u2264 X \u2264 3) and Y (1 \u2264 Y \u2264 4) separated by a single space, representing the coordinates of one of the points which are not touched by thc pattern for sure, the N points are distinct.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n19. Lock Pattern\n\n\n\n\n\nProblem Statement:\n\n\nOne of the ways to lock some phones, is the lock pattern. To unlock your phone you have to draw a secret pattern on a grid of some points, the pattern will be some line segments connecting these points. Your phone pattern grid consists of four rows with three points in each row. The following image on the left is the representation of the grid, it can be modeled as a 2D plane with X and Y coordinates for each point, for example the top left point is (1,4) and the bottom right point is (3,1). The image on the right is a valid pattern, which connects the following points in this order: (3,4) (2,4) (1,2) (2,1) (2,2) (3,2) (3,1) (1,3)\n\n  \n\nA valid pattern has the following properties:\n\n- A pattern can be represented using the sequence of points which it's touching for the first time (in the same order of drawing the pattern), a pattern going from (1,1) to (2,2) is not the same as a pattern going from (2,2) to (1,1).\n\n- For every two consecutive points A and B in the pattern representation, if the line segment connecting A and B passes through some other points, these points must be in the sequence also and comes before A and B, otherwise the pattern will be invalid. For example a pattern representation which starts with (3,1) then (1,3) is invalid because the segment passes through (2,2) which didn't appear in the pattern representation before (3,1), and the correct representation for this pattern is (3,1) (2,2) (1,3). But the pattern (2,2) (3,2) (3,1) (1,3) is valid because (2,2) appeared before (3,1).\n\n- In the pattern representation we don't mention the same point more than once, even if the pattern will touch this point again through another valid segment, and each segment in the pattern must be going from a point to another point which the pattern didn't touch before and it might go through some points which already appeared in the pattern.\n\n- The length of a pattern is the sum of the Manhattan distances between every two consecutive points in the pattern representation. The Manhattan distance between two points (X1, Y1) and (X2, Y2) is |X1 \u2212 X2| + |Y1 \u2212 Y2| (where |X| means the absolute value of X). The length of the pattern in the above image is: 1 + 3 + 2 + 1 + 1 + 1 + 4 = 13.\n\n- A pattern must touch at least two points. Unfortunately you forgot your phone's pattern, but you remember the length of the pattern and a set of points S which are not touched by the pattern for sure (the points which are not in S might and might not be touched by the pattern), and you decided to try all the valid patterns which satisfy what you remember. Before doing this, you have to write a program to calculate for you the number of different valid patterns.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of a test case contains two integers L and N separated by a single space. L (1 \u2264 L \u2264 1,000) is the length of the pattern (as described above), and N (0 \u2264 N \u2264 12) is the number of points that you are sure they are not touched by the pattern, followed by N lines each line contains two integers X (1 \u2264 X \u2264 3) and Y (1 \u2264 Y \u2264 4) separated by a single space, representing the coordinates of one of the points which are not touched by thc pattern for sure, the N points are distinct.\n\n\n\n\nOutput Format:\n\n\nFor each test case, if there are no valid patterns according to what you remember, print on a single line \"BAD MEMORY\" (without the quotes), otherwise print the number of different valid patterns.\n\n\n\n\nSample Input:\n\n3\n1 0\n2 10\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n3 2\n3 3\n3 4\n1 3\n1 4\n2 4\n3 4\n\n\n\nSample Output:\n\n34\nBAD MEMORY\n24\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 20:12:58 UTC\n\n\n\n\nTime Limit:\n\n\n10 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1 0\n2 10\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n3 2\n3 3\n3 4\n1 3\n1 4\n2 4\n3 4\n\n\nSample Output:\n\n34\nBAD MEMORY\n24\n\n",
    "Description": "\nProblem Statement:\n\n\nOne of the ways to lock some phones, is the lock pattern. To unlock your phone you have to draw a secret pattern on a grid of some points, the pattern will be some line segments connecting these points. Your phone pattern grid consists of four rows with three points in each row. The following image on the left is the representation of the grid, it can be modeled as a 2D plane with X and Y coordinates for each point, for example the top left point is (1,4) and the bottom right point is (3,1). The image on the right is a valid pattern, which connects the following points in this order: (3,4) (2,4) (1,2) (2,1) (2,2) (3,2) (3,1) (1,3)\n\n  \n\nA valid pattern has the following properties:\n\n- A pattern can be represented using the sequence of points which it's touching for the first time (in the same order of drawing the pattern), a pattern going from (1,1) to (2,2) is not the same as a pattern going from (2,2) to (1,1).\n\n- For every two consecutive points A and B in the pattern representation, if the line segment connecting A and B passes through some other points, these points must be in the sequence also and comes before A and B, otherwise the pattern will be invalid. For example a pattern representation which starts with (3,1) then (1,3) is invalid because the segment passes through (2,2) which didn't appear in the pattern representation before (3,1), and the correct representation for this pattern is (3,1) (2,2) (1,3). But the pattern (2,2) (3,2) (3,1) (1,3) is valid because (2,2) appeared before (3,1).\n\n- In the pattern representation we don't mention the same point more than once, even if the pattern will touch this point again through another valid segment, and each segment in the pattern must be going from a point to another point which the pattern didn't touch before and it might go through some points which already appeared in the pattern.\n\n- The length of a pattern is the sum of the Manhattan distances between every two consecutive points in the pattern representation. The Manhattan distance between two points (X1, Y1) and (X2, Y2) is |X1 \u2212 X2| + |Y1 \u2212 Y2| (where |X| means the absolute value of X). The length of the pattern in the above image is: 1 + 3 + 2 + 1 + 1 + 1 + 4 = 13.\n\n- A pattern must touch at least two points. Unfortunately you forgot your phone's pattern, but you remember the length of the pattern and a set of points S which are not touched by the pattern for sure (the points which are not in S might and might not be touched by the pattern), and you decided to try all the valid patterns which satisfy what you remember. Before doing this, you have to write a program to calculate for you the number of different valid patterns.\n\n\n",
    "Title": "19. Lock Pattern",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=19",
    "Time Limit": "10 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, if there are no valid patterns according to what you remember, print on a single line \"BAD MEMORY\" (without the quotes), otherwise print the number of different valid patterns.\n\n\n"
  },
  "2028": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T , the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 10,000 letters, each letter is either a lower case English letter (from 'a' to 'z') or a question mark ('?'). This string represents a sticker configuration which contains zero or more question marks, it will also contain at least one letter which is not a question mark and there will be at least one valid original configuration for it.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n2. The Alphabet Sticker\n\n\n\n\n\nProblem Statement:\n\n\nWhen we were kids, we used to play with some stickers where these stickers contain some (but not necessarily all) lower case English alphabet letters.\n\nEach sticker contains some letters arranged in a single row, where all occurrences of the same letter are adjacent to each other. A sticker can be represented as a string of characters, for example the following are valid stickers' representations: \"aabcc\", \"ccccab\" and \"mmaw\". And the following are not valid (because not all occurrences of the same letter are adjacent to each other): \"abacc\", \"cccabc\" and \"mawm\".\n\nNow we found some stickers with some missing letters, but we are sure that all missing letters belong to the visible letters set (that is, for every missing letter, there is at least one visible letter that matches the missing one). In this problem a question mark letter represents a missing letter. Given some stickers' representations with zero or more missing letters, your task is to count the number of possible original configurations for each sticker.\n\nFor example, this sticker \"aa??bb\" with missing letters could have been one of the following original stickers \"aaaabb\", \"aaabbb\" or \"aabbbb\". But it could not have been any of the following original stickers \"aababb\" (it is invalid sticker) and \"aaccbb\" (because the letter 'c' did not appear in the given configuration).\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T , the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 10,000 letters, each letter is either a lower case English letter (from 'a' to 'z') or a question mark ('?'). This string represents a sticker configuration which contains zero or more question marks, it will also contain at least one letter which is not a question mark and there will be at least one valid original configuration for it.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the number of possible original configurations for the sticker, since the result may be very large, print it modulo 1,000,000,007 (109 + 7).\n\n\n\n\nSample Input:\n\n4\naa??bb\naaccbb\n?a?\na??a\n\n\n\nSample Output:\n\n3\n1\n1\n1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-21 22:54:41 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n4\naa??bb\naaccbb\n?a?\na??a\n\n\nSample Output:\n\n3\n1\n1\n1\n\n",
    "Description": "\nProblem Statement:\n\n\nWhen we were kids, we used to play with some stickers where these stickers contain some (but not necessarily all) lower case English alphabet letters.\n\nEach sticker contains some letters arranged in a single row, where all occurrences of the same letter are adjacent to each other. A sticker can be represented as a string of characters, for example the following are valid stickers' representations: \"aabcc\", \"ccccab\" and \"mmaw\". And the following are not valid (because not all occurrences of the same letter are adjacent to each other): \"abacc\", \"cccabc\" and \"mawm\".\n\nNow we found some stickers with some missing letters, but we are sure that all missing letters belong to the visible letters set (that is, for every missing letter, there is at least one visible letter that matches the missing one). In this problem a question mark letter represents a missing letter. Given some stickers' representations with zero or more missing letters, your task is to count the number of possible original configurations for each sticker.\n\nFor example, this sticker \"aa??bb\" with missing letters could have been one of the following original stickers \"aaaabb\", \"aaabbb\" or \"aabbbb\". But it could not have been any of the following original stickers \"aababb\" (it is invalid sticker) and \"aaccbb\" (because the letter 'c' did not appear in the given configuration).\n\n\n",
    "Title": "2. The Alphabet Sticker",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=2",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the number of possible original configurations for the sticker, since the result may be very large, print it modulo 1,000,000,007 (109 + 7).\n\n\n"
  },
  "2029": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing one integer N (1 \u2264 N \u2264 100) representing the number of targets in the game. Followed by N lines, the i-th line contains 4 integers separated by a single space X1 Y1 X2 Y2 (\u2212100 \u2264 X1, Y1, X2, Y2 \u2264 100) representing the i-th target end points (X1, Y1) and (X2, Y2)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n20. Archery\n\n\n\n\n\nProblem Statement:\n\n\nLast summer you were watching all the matches in the 2012 Olympics in London. One of the interesting sports is archery (it's the game of propelling arrows with the use of a bow to hit a target), but in this problem we are dealing with a new type of archery.\n\nIn this new type of archery, the player has arrows that can penetrate any target and can go to infinity (the same arrow may hit more than one target), and there will be a lot of targets around the player everywhere, and the targets may intersect and/or overlap with each others.\n\nFrom the top view you can model the targets as line segments and the player as a point at the origin (point (0,0) is the origin), also there will be no target which intersects with the player's position.\n\nYou are really interested to calculate the expected number of targets this player can penetrate using one arrow, if he will shoot his arrow in a random direction (there are infinite number of different directions, and each direction has the same probability to be used for the random shoot).\n\nFor example, the following figure explains the first sample test case, where the player is at the origin, and there are two targets T1 with end points (1,5) and (3,3), and T2 with end points (3,5) and (6,2), you can notice that there is a region where the player can shoot an arrow and penetrate the two targets, and there are two regions where he can penetrate only one target, and the last region he will not penetrate any target.\n\n\n\nNote that a target can be hit at any point between its 2 end points (inclusive).\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing one integer N (1 \u2264 N \u2264 100) representing the number of targets in the game. Followed by N lines, the i-th line contains 4 integers separated by a single space X1 Y1 X2 Y2 (\u2212100 \u2264 X1, Y1, X2, Y2 \u2264 100) representing the i-th target end points (X1, Y1) and (X2, Y2)\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line, a single number representing the expected number of targets the player can penetrate using one arrow, rounded to five decimal places.\n\n\n\n\nSample Input:\n\n2\n2\n1 5 3 3\n3 5 6 2\n8\n3 0 0 3\n0 3 -3 0\n-3 0 0 -3\n0 -3 3 0\n3 3 -3 3\n-3 3 -3 -3\n-3 -3 3 -3\n3 -3 3 3\n\n\n\nSample Output:\n\n0.20636\n2.00000\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 20:17:13 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2\n1 5 3 3\n3 5 6 2\n8\n3 0 0 3\n0 3 -3 0\n-3 0 0 -3\n0 -3 3 0\n3 3 -3 3\n-3 3 -3 -3\n-3 -3 3 -3\n3 -3 3 3\n\n\nSample Output:\n\n0.20636\n2.00000\n\n",
    "Description": "\nProblem Statement:\n\n\nLast summer you were watching all the matches in the 2012 Olympics in London. One of the interesting sports is archery (it's the game of propelling arrows with the use of a bow to hit a target), but in this problem we are dealing with a new type of archery.\n\nIn this new type of archery, the player has arrows that can penetrate any target and can go to infinity (the same arrow may hit more than one target), and there will be a lot of targets around the player everywhere, and the targets may intersect and/or overlap with each others.\n\nFrom the top view you can model the targets as line segments and the player as a point at the origin (point (0,0) is the origin), also there will be no target which intersects with the player's position.\n\nYou are really interested to calculate the expected number of targets this player can penetrate using one arrow, if he will shoot his arrow in a random direction (there are infinite number of different directions, and each direction has the same probability to be used for the random shoot).\n\nFor example, the following figure explains the first sample test case, where the player is at the origin, and there are two targets T1 with end points (1,5) and (3,3), and T2 with end points (3,5) and (6,2), you can notice that there is a region where the player can shoot an arrow and penetrate the two targets, and there are two regions where he can penetrate only one target, and the last region he will not penetrate any target.\n\n\n\nNote that a target can be hit at any point between its 2 end points (inclusive).\n\n\n",
    "Title": "20. Archery",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=20",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line, a single number representing the expected number of targets the player can penetrate using one arrow, rounded to five decimal places.\n\n\n"
  },
  "2030": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is the description of both islands (one after the other). The description of one island starts with one line containing one integer Ck represents the number of cities in this island, followed by Ck lines each one contains Ck characters (1 \u2264 Ck \u2264 100). Each character is '0', '1' or 'x'. The j-th character of the i-th line is the price of the train ticket from city i to city j on that island. A price 'x' means that it is one of the suspended train lines. Each Ck by Ck table is guaranteed to be symmetric (table[i][j] = table[j][i] for each different i and j), and each table will have a diagonal of '0's (table[i][i] = '0' for each different i), also each table will contain no more than 30 'x's (15 different trains, because each train will be mentioned twice in the table).\n\nNote that the input might contain 3 different cities in the same islands and the trains connecting them are not suspended, and these 3 cities don't satisfy the described condition above.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n21. Connecting Islands\n\n\n\n\n\nProblem Statement:\n\n\nThe civil war in the Bytelandian ocean has ended. The two Bytelandian islands have decided to unite forming the United Kingdom of Bytelandia. One of the first concerns of the newly chosen government is transportation.\n\nPrior to the war each of the 2 islands had a perfect network of transportation. On any given island, every city was connected by a train to every other city. Connections are bidirectional. During the war, some train lines were disrupted and thus, the trains on these lines were suspended. On any island, no more than 15 trains were suspended. In addition to rerunning the disrupted trains, the government has to form inter-island ferry connections. The ferries will connect every city X to every city Y, given that X and Y are not on the same island. Commuting between cities on the same island will only be via trains.\n\nIn Bytelandia, everything is binary, including train and ferry ticket prices. A ticket costs either 0 or 1 units of currency. The government decided not to change any ticket prices for trains that were not disrupted during the war. It will assign ticket costs to the trains suspended during the war and to all ferry lines. Priding themselves in being strong mathematicians, Bytelandians have decided to design the ticket system such that for any 3 distinct cities X, Y and Z,\n\nC(X, Y) + C(Y, Z) \u2265 C(X, Z) \nwhere C(X, Y) is the ticket price of getting from X to Y (by train if they belong to the same island or by ferry otherwise).\n\nYou are given a description of the Bytelandian islands, your goal is to figure out a costs assignment if it is possible.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is the description of both islands (one after the other). The description of one island starts with one line containing one integer Ck represents the number of cities in this island, followed by Ck lines each one contains Ck characters (1 \u2264 Ck \u2264 100). Each character is '0', '1' or 'x'. The j-th character of the i-th line is the price of the train ticket from city i to city j on that island. A price 'x' means that it is one of the suspended train lines. Each Ck by Ck table is guaranteed to be symmetric (table[i][j] = table[j][i] for each different i and j), and each table will have a diagonal of '0's (table[i][i] = '0' for each different i), also each table will contain no more than 30 'x's (15 different trains, because each train will be mentioned twice in the table).\n\nNote that the input might contain 3 different cities in the same islands and the trains connecting them are not suspended, and these 3 cities don't satisfy the described condition above.\n\n\n\n\nOutput Format:\n\n\nFor each test case, if there is no way to do the costs assignment satisfying the conditions described above, output on a single line \"NO\" (without the quotes).\n\nOtherwise, print \"YES\" (without the quotes) on the first line followed by C1 + C2 lines each one contains C1 + C2 characters C1 is the number of cities in the first island, and C2 is the number of cities in the second island). The j-th character on the i-th line is the cost of getting from city i to city j (by train if they belong to the same island or by ferry otherwise). In the output, the cities on the first island are numbered from 1 to C1 (inclusive) while the cities in the second island are numbered from C1 + 1 to C1 + C2 (inclusive). If there is more than one correct solution, print anyone of them.\n\nNote that you can't change the costs given in the input, and the output table must be symmetric.\n\n\n\n\nSample Input:\n\n2\n3\n011\n10x\n1x0\n2\n01\n10\n2\n0x\nx0\n4\n010x\n1010\n0100\nx000\n\n\n\nSample Output:\n\nYES\n01101\n10011\n10011\n01101\n11110\nNO\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 20:54:25 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3\n011\n10x\n1x0\n2\n01\n10\n2\n0x\nx0\n4\n010x\n1010\n0100\nx000\n\n\nSample Output:\n\nYES\n01101\n10011\n10011\n01101\n11110\nNO\n\n",
    "Description": "\nProblem Statement:\n\n\nThe civil war in the Bytelandian ocean has ended. The two Bytelandian islands have decided to unite forming the United Kingdom of Bytelandia. One of the first concerns of the newly chosen government is transportation.\n\nPrior to the war each of the 2 islands had a perfect network of transportation. On any given island, every city was connected by a train to every other city. Connections are bidirectional. During the war, some train lines were disrupted and thus, the trains on these lines were suspended. On any island, no more than 15 trains were suspended. In addition to rerunning the disrupted trains, the government has to form inter-island ferry connections. The ferries will connect every city X to every city Y, given that X and Y are not on the same island. Commuting between cities on the same island will only be via trains.\n\nIn Bytelandia, everything is binary, including train and ferry ticket prices. A ticket costs either 0 or 1 units of currency. The government decided not to change any ticket prices for trains that were not disrupted during the war. It will assign ticket costs to the trains suspended during the war and to all ferry lines. Priding themselves in being strong mathematicians, Bytelandians have decided to design the ticket system such that for any 3 distinct cities X, Y and Z,\n\nC(X, Y) + C(Y, Z) \u2265 C(X, Z) \nwhere C(X, Y) is the ticket price of getting from X to Y (by train if they belong to the same island or by ferry otherwise).\n\nYou are given a description of the Bytelandian islands, your goal is to figure out a costs assignment if it is possible.\n\n\n",
    "Title": "21. Connecting Islands",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=21",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, if there is no way to do the costs assignment satisfying the conditions described above, output on a single line \"NO\" (without the quotes).\n\nOtherwise, print \"YES\" (without the quotes) on the first line followed by C1 + C2 lines each one contains C1 + C2 characters C1 is the number of cities in the first island, and C2 is the number of cities in the second island). The j-th character on the i-th line is the cost of getting from city i to city j (by train if they belong to the same island or by ferry otherwise). In the output, the cities on the first island are numbered from 1 to C1 (inclusive) while the cities in the second island are numbered from C1 + 1 to C1 + C2 (inclusive). If there is more than one correct solution, print anyone of them.\n\nNote that you can't change the costs given in the input, and the output table must be symmetric.\n\n\n"
  },
  "2031": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each one starts with a line containing 2 integers separated by a single space N and M (1 \u2264 N, M \u2264 100) representing the dimensions of the hall, followed by N lines each line contains M integers separated by a single space, representing the tables assignment in this row. Each integer represents the university ID of the team assigned to this table or -1 if it is empty. All universities IDs are positive integers not greater than 100.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n22. Contest Hall Preparation\n\n\n\n\n\nProblem Statement:\n\n\nBefore the ACM-ACPC regional contest, the site director and the volunteers were very busy preparing for the contest. One of their tasks is to assign a table for each team such that no two teams from the same university are adjacent to each other. The site director decided not to waste his time doing this task and asked the judges to do it. The judges thought this could be a good problem to be used in the contest problems set. As they were very busy preparing for the contest, the judges decided to solve part of the problem and ask the contestants to solve the rest.\n\nThe judges will generate a number of layouts for the teams assignment to the tables and will ask the contestants to write a program to check whether each of these layouts is valid or not. If a layout is not valid the program should count how many different universities have at least two of their teams sitting adjacent to each other.\n\n\"Well, you may use those solutions for the next year's contest\", said by the chief judge Ahmed Aly to the site director.\n\nThe contest hall can be represented as a 2D grid of N rows with M cells in each row. Each cell in the grid is either occupied by a team or empty. There could be up to 8 teams adjacent to a single team. A team may have less than 8 adjacent teams if it is seated next to a hall edge or some of its adjacent cells are empty.\n\nFor example, in the layout shown in the following figure, team E has 7 adjacent teams, named A, B, C, D, F, G and H, while the adjacent teams to team A are B, D and E.\n\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each one starts with a line containing 2 integers separated by a single space N and M (1 \u2264 N, M \u2264 100) representing the dimensions of the hall, followed by N lines each line contains M integers separated by a single space, representing the tables assignment in this row. Each integer represents the university ID of the team assigned to this table or -1 if it is empty. All universities IDs are positive integers not greater than 100.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line integer, the number of different universities having at least two of their teams adjacent to each other.\n\n\n\n\nSample Input:\n\n3\n3 3\n1 2 3\n2 2 2\n1 1 1\n3 3\n1 2 3\n3 -1 1\n2 -1 2\n3 3\n1 2 3\n-1 1 5\n1 2 4\n\n\n\nSample Output:\n\n2\n0\n1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 22:24:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3 3\n1 2 3\n2 2 2\n1 1 1\n3 3\n1 2 3\n3 -1 1\n2 -1 2\n3 3\n1 2 3\n-1 1 5\n1 2 4\n\n\nSample Output:\n\n2\n0\n1\n\n",
    "Description": "\nProblem Statement:\n\n\nBefore the ACM-ACPC regional contest, the site director and the volunteers were very busy preparing for the contest. One of their tasks is to assign a table for each team such that no two teams from the same university are adjacent to each other. The site director decided not to waste his time doing this task and asked the judges to do it. The judges thought this could be a good problem to be used in the contest problems set. As they were very busy preparing for the contest, the judges decided to solve part of the problem and ask the contestants to solve the rest.\n\nThe judges will generate a number of layouts for the teams assignment to the tables and will ask the contestants to write a program to check whether each of these layouts is valid or not. If a layout is not valid the program should count how many different universities have at least two of their teams sitting adjacent to each other.\n\n\"Well, you may use those solutions for the next year's contest\", said by the chief judge Ahmed Aly to the site director.\n\nThe contest hall can be represented as a 2D grid of N rows with M cells in each row. Each cell in the grid is either occupied by a team or empty. There could be up to 8 teams adjacent to a single team. A team may have less than 8 adjacent teams if it is seated next to a hall edge or some of its adjacent cells are empty.\n\nFor example, in the layout shown in the following figure, team E has 7 adjacent teams, named A, B, C, D, F, G and H, while the adjacent teams to team A are B, D and E.\n\n\n\n",
    "Title": "22. Contest Hall Preparation",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=22",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line integer, the number of different universities having at least two of their teams adjacent to each other.\n\n\n"
  },
  "2032": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 1,000). Followed by T lines, each line represents one test case, and consists of an integer N (1 \u2264 N \u2264 1018) which is the length of the numbers you are asked to count (again, leading zeros are allowed) followed by a space then a string of 6 digits (each digit is '0', '1' or '2'), the i-th digit (the left most digit is the digit number 1) is '0' if the numbers shouldn't be divisible by i, and it's '1' if the numbers should be divisible by i, and it's '2' if the numbers can be divisible or not divisible by i.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n23. Math Homework\n\n\n\n\n\nProblem Statement:\n\n\nYes, your teacher gave you another hard math homework, and you have to finish it before its deadline.\n\nThis homework is about the division operation, and it's a practice for the division by small numbers. You are asked to count the non-negative numbers which consist of exactly N digits (leading zeros are allowed), and they satisfy some division requirements, for example let's say you want to count the numbers which consist of 2 digits and they are divisible by 6 and not divisible by 5, these are the numbers which satisfy these requirements: 06, 12, 18, 24, 36, 42, 48, 54, 66, 72, 78, 84 and 96.\n\nNote that zero is divisible by any positive number (check the third sample test case).\n\nSo, you decided to write a program to solve this homework for you, because N can be really large.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 1,000). Followed by T lines, each line represents one test case, and consists of an integer N (1 \u2264 N \u2264 1018) which is the length of the numbers you are asked to count (again, leading zeros are allowed) followed by a space then a string of 6 digits (each digit is '0', '1' or '2'), the i-th digit (the left most digit is the digit number 1) is '0' if the numbers shouldn't be divisible by i, and it's '1' if the numbers should be divisible by i, and it's '2' if the numbers can be divisible or not divisible by i.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line one integer, the count of the numbers you are asked to count as described above, since the result may be very large, print it modulo 1,000,000,007 (109 + 7).\n\n\n\n\nSample Input:\n\n4\n2 222201\n1 111001\n1 111111\n2 222222\n\n\n\nSample Output:\n\n13\n1\n1\n100\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 22:25:24 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2012\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n2 222201\n1 111001\n1 111111\n2 222222\n\n\nSample Output:\n\n13\n1\n1\n100\n\n",
    "Description": "\nProblem Statement:\n\n\nYes, your teacher gave you another hard math homework, and you have to finish it before its deadline.\n\nThis homework is about the division operation, and it's a practice for the division by small numbers. You are asked to count the non-negative numbers which consist of exactly N digits (leading zeros are allowed), and they satisfy some division requirements, for example let's say you want to count the numbers which consist of 2 digits and they are divisible by 6 and not divisible by 5, these are the numbers which satisfy these requirements: 06, 12, 18, 24, 36, 42, 48, 54, 66, 72, 78, 84 and 96.\n\nNote that zero is divisible by any positive number (check the third sample test case).\n\nSo, you decided to write a program to solve this homework for you, because N can be really large.\n\n\n",
    "Title": "23. Math Homework",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=23",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line one integer, the count of the numbers you are asked to count as described above, since the result may be very large, print it modulo 1,000,000,007 (109 + 7).\n\n\n"
  },
  "2033": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Next 2T lines contain the test cases, each on a pair of lines.\n\nThe first line of each case contains a single integer N, the number of words in the line to fix (1 \u2264 N \u2264 100). The second line contains N words, separated by single spaces, with no leading or trailing spaces, and each word will be at least 1 character and at most 10 characters long.\n\nEach word will be either Arabic or English. Arabic words will consist of one to ten '#' letters, and English words will consist of one to ten English lower case letters.\n\nEach line contains at most one English word.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n24. Arabic and English\n\n\n\n\n\nProblem Statement:\n\n\nIf you are here because of A2OJ Code Battle, please sign up for the tournament here.\nSome computer programs have problems in displaying Arabic text, especially when mixed with English words in the same line, because Arabic is written from right to left and English is written from left to right. In this problem we will try to fix a text with some corrupted lines which consist of a mixture of Arabic and English words. For simplicity, all Arabic letters will be replaced with the letter '#'.\n\nEach line will contain at most one English word. For a line containing an English word, the program that will fix the text will swap the words before the English word with the words after the English word. The words before the English word will remain in the same order. The words after the English word will also remain in the same order. For example, if the line is \"# #### ### abc ##\", it will be fixed to become \"## abc # #### ###\".\n\nPlease note that a line that contains words only of the same language is not corrupt.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Next 2T lines contain the test cases, each on a pair of lines.\n\nThe first line of each case contains a single integer N, the number of words in the line to fix (1 \u2264 N \u2264 100). The second line contains N words, separated by single spaces, with no leading or trailing spaces, and each word will be at least 1 character and at most 10 characters long.\n\nEach word will be either Arabic or English. Arabic words will consist of one to ten '#' letters, and English words will consist of one to ten English lower case letters.\n\nEach line contains at most one English word.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output, on a single line, the fixed line of input text.\n\n\n\n\nSample Input:\n\n3\n5\n# #### ### abc ##\n4\n## ### ## #####\n4\n## ##### # xyz\n\n\n\nSample Output:\n\n## abc # #### ###\n## ### ## #####\nxyz ## ##### #\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n5\n# #### ### abc ##\n4\n## ### ## #####\n4\n## ##### # xyz\n\n\nSample Output:\n\n## abc # #### ###\n## ### ## #####\nxyz ## ##### #\n\n",
    "Description": "\nProblem Statement:\n\n\nIf you are here because of A2OJ Code Battle, please sign up for the tournament here.\nSome computer programs have problems in displaying Arabic text, especially when mixed with English words in the same line, because Arabic is written from right to left and English is written from left to right. In this problem we will try to fix a text with some corrupted lines which consist of a mixture of Arabic and English words. For simplicity, all Arabic letters will be replaced with the letter '#'.\n\nEach line will contain at most one English word. For a line containing an English word, the program that will fix the text will swap the words before the English word with the words after the English word. The words before the English word will remain in the same order. The words after the English word will also remain in the same order. For example, if the line is \"# #### ### abc ##\", it will be fixed to become \"## abc # #### ###\".\n\nPlease note that a line that contains words only of the same language is not corrupt.\n\n\n",
    "Title": "24. Arabic and English",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=24",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output, on a single line, the fixed line of input text.\n\n\n"
  },
  "2034": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Follows 2T lines containing the test cases, each on a pair of lines.\n\nEach of the two lines in a case describe the altitudes of suitable points to build a platform on one mountain. Each line starts with an integer N, the number of reported altitudes (1 \u2264 N \u2264 1,000), followed by N integers, which represent the altitudes reported from this mountain. Any altitude value will be between 1 and 1,000,000, inclusive.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n25. Between the Mountains\n\n\n\n\n\nProblem Statement:\n\n\nDid you try to ride a telepherique (cable car)? It is a lot of fun. Our company is trying to build a new telepherique line between two high mountains and you will be invited for a free ride. The trick to get your free ride is to help the company in building the telepherique line.\n\nThe company wants to build two platforms, one on each mountain. The line will extend between these two platforms. The suitable points for holding a platform in each mountain were determined, and the altitudes of these points were reported.\n\nOne of the talented engineers suggested that the company can save a lot of energy if the two stations have the same altitude or at least have altitudes which are as close to each other as possible. Your job is to select two points, one at each mountain, from those suitable points, so that the altitude difference between the two points is as little as possible.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Follows 2T lines containing the test cases, each on a pair of lines.\n\nEach of the two lines in a case describe the altitudes of suitable points to build a platform on one mountain. Each line starts with an integer N, the number of reported altitudes (1 \u2264 N \u2264 1,000), followed by N integers, which represent the altitudes reported from this mountain. Any altitude value will be between 1 and 1,000,000, inclusive.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output, on a single line, a single number representing the minimum altitude difference between two suitable platform points, one at each mountain.\n\n\n\n\nSample Input:\n\n2\n8 1 3 5 7 9 7 3 1\n8 2 4 6 8 10 8 6 2\n8 2 3 5 10 9 3 2 1\n7 1 2 6 12 13 3 2\n\n\n\nSample Output:\n\n1\n0\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n8 1 3 5 7 9 7 3 1\n8 2 4 6 8 10 8 6 2\n8 2 3 5 10 9 3 2 1\n7 1 2 6 12 13 3 2\n\n\nSample Output:\n\n1\n0\n\n",
    "Description": "\nProblem Statement:\n\n\nDid you try to ride a telepherique (cable car)? It is a lot of fun. Our company is trying to build a new telepherique line between two high mountains and you will be invited for a free ride. The trick to get your free ride is to help the company in building the telepherique line.\n\nThe company wants to build two platforms, one on each mountain. The line will extend between these two platforms. The suitable points for holding a platform in each mountain were determined, and the altitudes of these points were reported.\n\nOne of the talented engineers suggested that the company can save a lot of energy if the two stations have the same altitude or at least have altitudes which are as close to each other as possible. Your job is to select two points, one at each mountain, from those suitable points, so that the altitude difference between the two points is as little as possible.\n\n\n",
    "Title": "25. Between the Mountains",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=25",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output, on a single line, a single number representing the minimum altitude difference between two suitable platform points, one at each mountain.\n\n\n"
  },
  "2035": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Next T lines contain the test cases, each on a single line.\n\nEach case starts with an integer N, the number of rooms in the exhibition (2 \u2264 N \u2264 100,000), followed by N numbers, the lengths of the corridors, L1, L2, ..., LN, in this order (1 \u2264 Li \u2264 1000,000).\n\nThe sum of the lengths of all corridors will not exceed 1,000,000,000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n26. Circleland\n\n\n\n\n\nProblem Statement:\n\n\nYou are visiting circleland, and you have long waited to visit their famous art exhibition. The exhibition has N rooms arranged in a cycle. In every room, there are some artistic pieces. The rooms are named R1, R2, ..., RN. There are also N corridors, named C1, C2, ..., CN, of lengths L1, L2, ..., LN, respectively. Each corridor Ci connects the two rooms Ri and Ri+1, except CN which connects RN and R1. Thus, the whole exhibition forms a cycle. You can walk in both directions in every corridor.\n\nThere is a single entrance to the exhibition in room R1, but there are exits in every room. As there is nothing interesting to see in the corridors, you would like to spend the least effort walking through corridors in the exhibition. Compute the minimum total distance you need to walk in corridors such that you enter from the entrance, exit from any exit and visit all rooms.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Next T lines contain the test cases, each on a single line.\n\nEach case starts with an integer N, the number of rooms in the exhibition (2 \u2264 N \u2264 100,000), followed by N numbers, the lengths of the corridors, L1, L2, ..., LN, in this order (1 \u2264 Li \u2264 1000,000).\n\nThe sum of the lengths of all corridors will not exceed 1,000,000,000.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output, on a single line, a single number representing the minimum total distance you have to walk in corridors such that you visit all rooms.\n\n\n\n\nSample Input:\n\n2\n5 1 1 1 1 1\n7 100 15 20 42 33 15 24\n\n\n\nSample Output:\n\n4\n149\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 1 1 1 1 1\n7 100 15 20 42 33 15 24\n\n\nSample Output:\n\n4\n149\n\n",
    "Description": "\nProblem Statement:\n\n\nYou are visiting circleland, and you have long waited to visit their famous art exhibition. The exhibition has N rooms arranged in a cycle. In every room, there are some artistic pieces. The rooms are named R1, R2, ..., RN. There are also N corridors, named C1, C2, ..., CN, of lengths L1, L2, ..., LN, respectively. Each corridor Ci connects the two rooms Ri and Ri+1, except CN which connects RN and R1. Thus, the whole exhibition forms a cycle. You can walk in both directions in every corridor.\n\nThere is a single entrance to the exhibition in room R1, but there are exits in every room. As there is nothing interesting to see in the corridors, you would like to spend the least effort walking through corridors in the exhibition. Compute the minimum total distance you need to walk in corridors such that you enter from the entrance, exit from any exit and visit all rooms.\n\n\n",
    "Title": "26. Circleland",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=26",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output, on a single line, a single number representing the minimum total distance you have to walk in corridors such that you visit all rooms.\n\n\n"
  },
  "2036": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 200). After that follow the specifications of T test cases.\n\nEach test case is specified in N + 2 lines. The first line contains two integers N and M (1 \u2264 N, M \u2264 10) representing the number of rows and number of columns of the board, respectively. The second line contains the string S representing the initial orientation of the die in the starting cell as described above. Each line of the remaining N lines contains M characters, the j-th character in the i-th line represents the value of the j-th cell in the i-th row of the board. Each character will be one of the following values:\n\n\u00a0\u00a01. '.' means an empty cell.\n\u00a0\u00a02. 'S' means the starting cell (which will appear exactly once in the board).\n\u00a0\u00a03. 'T' means the target cell (which will appear exactly once in the board).\n\u00a0\u00a04. A digit from '0' to '9' means the value written in this cell.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n27. Dice on a Board\n\n\n\n\n\nProblem Statement:\n\n\nYou and your friends like to play chess and backgammon every day. But now you are bored of these games, and you would like to play a new game. So you decided to make your own game, which will be played using a backgammon die (singular of dice) on a board similar to the chess board, and it will be a single player game.\n\n\n\nThe game is played on a board of N rows and M columns. Each cell is either empty or contains a number from 0 to 9, and there is a single die (a die with six faces containing the numbers from 1 to 6) placed in one of the empty cells (the borders of the bottom face is aligned to the axes of the board), and your goal is to move it to a target empty cell.\n\nThe initial orientation of the die is defined by a string S which is a permutation of the digits from 1 to 6. Each digit represents the number written on a face of the die according to this order: right, left, back, front (4 in the above picture), top, bottom. Moving the die is defined by the following rules:\n\n1. You can move the die from a cell to one of its four adjacent cells by flipping it on the corresponding face. For example, if the current orientation of the die is 136425 and you will move it to the cell on its right, you should flip the die on its right face and it will become the bottom face in the right cell, so the orientation of the die will be 256431. (This is the example in the figure).\n\n2. Your score is initially zero. By moving the die to another cell, if the number on the bottom face is the same as the number in the cell you just moved to, your score will be increased by the sum of these two numbers, otherwise your score will be decreased by the sum of these two numbers. Entering the target cell will not affect your score.\n\n3. You can not leave the board.\n\n4. Once you leave the starting cell, you can not enter it again.\n\n5. Once you enter the target cell, you can not leave it.\n\n6. You can not enter an empty cell, except the target one.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 200). After that follow the specifications of T test cases.\n\nEach test case is specified in N + 2 lines. The first line contains two integers N and M (1 \u2264 N, M \u2264 10) representing the number of rows and number of columns of the board, respectively. The second line contains the string S representing the initial orientation of the die in the starting cell as described above. Each line of the remaining N lines contains M characters, the j-th character in the i-th line represents the value of the j-th cell in the i-th row of the board. Each character will be one of the following values:\n\n\u00a0\u00a01. '.' means an empty cell.\n\u00a0\u00a02. 'S' means the starting cell (which will appear exactly once in the board).\n\u00a0\u00a03. 'T' means the target cell (which will appear exactly once in the board).\n\u00a0\u00a04. A digit from '0' to '9' means the value written in this cell.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output, on a single line, one of these values:\n\n\u00a0\u00a01. \"Impossible\" if you can not reach the target cell from the starting cell.\n\u00a0\u00a02. \"Infinity\" if there is no limit for your final score, and you can increase it with no limit.\n\u00a0\u00a03. Otherwise, output the maximum score which you can get.\n\n\n\n\nSample Input:\n\n3\n4 4\n123456\nS789\n0987\n789.\n09.T\n3 6\n153462\nS16521\n.46324\n.....T\n4 4\n623451\nS6T.\n....\n....\n....\n\n\n\nSample Output:\n\nImpossible\nInfinity\n12\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n4 4\n123456\nS789\n0987\n789.\n09.T\n3 6\n153462\nS16521\n.46324\n.....T\n4 4\n623451\nS6T.\n....\n....\n....\n\n\nSample Output:\n\nImpossible\nInfinity\n12\n\n",
    "Description": "\nProblem Statement:\n\n\nYou and your friends like to play chess and backgammon every day. But now you are bored of these games, and you would like to play a new game. So you decided to make your own game, which will be played using a backgammon die (singular of dice) on a board similar to the chess board, and it will be a single player game.\n\n\n\nThe game is played on a board of N rows and M columns. Each cell is either empty or contains a number from 0 to 9, and there is a single die (a die with six faces containing the numbers from 1 to 6) placed in one of the empty cells (the borders of the bottom face is aligned to the axes of the board), and your goal is to move it to a target empty cell.\n\nThe initial orientation of the die is defined by a string S which is a permutation of the digits from 1 to 6. Each digit represents the number written on a face of the die according to this order: right, left, back, front (4 in the above picture), top, bottom. Moving the die is defined by the following rules:\n\n1. You can move the die from a cell to one of its four adjacent cells by flipping it on the corresponding face. For example, if the current orientation of the die is 136425 and you will move it to the cell on its right, you should flip the die on its right face and it will become the bottom face in the right cell, so the orientation of the die will be 256431. (This is the example in the figure).\n\n2. Your score is initially zero. By moving the die to another cell, if the number on the bottom face is the same as the number in the cell you just moved to, your score will be increased by the sum of these two numbers, otherwise your score will be decreased by the sum of these two numbers. Entering the target cell will not affect your score.\n\n3. You can not leave the board.\n\n4. Once you leave the starting cell, you can not enter it again.\n\n5. Once you enter the target cell, you can not leave it.\n\n6. You can not enter an empty cell, except the target one.\n\n\n",
    "Title": "27. Dice on a Board",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=27",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output, on a single line, one of these values:\n\n\u00a0\u00a01. \"Impossible\" if you can not reach the target cell from the starting cell.\n\u00a0\u00a02. \"Infinity\" if there is no limit for your final score, and you can increase it with no limit.\n\u00a0\u00a03. Otherwise, output the maximum score which you can get.\n\n\n"
  },
  "2037": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). After that follow the specifications of T test cases.\n\nEach case is specified in N + 2 lines. Each case starts with a line containing an integer N (1\u2264 N \u2264 100,000), the number of available direct flight connections. Each of the following N lines contain the names of two different airports between which a direct flight connection exists and can be used in both directions. Every airport name is composed of exactly three capital letters. In each case, there will be at most one available direct flight connection between any pair of airports. The last line in each case contains the faulty ticket booked by the secretary.\n\nThe ticket is in the form \"M A1 A2...AM+1\", where M is the number of flight segments already booked, and Ai is an airport name (composed of three capital letters). Any two consecutive airport names in this line mean there is a flight segment booked from the earlier airport to the latter airport. The segments booked were so faulty, that there can be cycles and even multiple bookings of the same flight segment. However, the segments are from the available flight connections (which are described in the N lines above).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n28. Error\n\n\n\n\n\nProblem Statement:\n\n\nYour boss is very upset. He just discovered that his coming flight to the US was booked wrong. Your boss wanted to do his trip using the least number of transit stops. The secretary have booked flight segments that do not meet this condition. Given that the segments are already booked, your boss decided that the resolution of this issue needs you, the programmer.\n\nYou are given the possible flight connections between pairs of cities where each connection can be used in both directions. You are also given the set of faulty segments that were booked by the secretary. Your goal is to book the least number of additional segments, which, when combined with the already booked segments, can enable your boss the flexibility to reach his destination in the least number of stops.\n\nThe segments booked by the secretary are all flexible in timing and can be used in any order. Note that you can use some, all or none of the segments already booked, in addition to the segments you will add. However, an already booked segment from A to B can only be used from A to B and not from B to A. See examples for further clarification.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). After that follow the specifications of T test cases.\n\nEach case is specified in N + 2 lines. Each case starts with a line containing an integer N (1\u2264 N \u2264 100,000), the number of available direct flight connections. Each of the following N lines contain the names of two different airports between which a direct flight connection exists and can be used in both directions. Every airport name is composed of exactly three capital letters. In each case, there will be at most one available direct flight connection between any pair of airports. The last line in each case contains the faulty ticket booked by the secretary.\n\nThe ticket is in the form \"M A1 A2...AM+1\", where M is the number of flight segments already booked, and Ai is an airport name (composed of three capital letters). Any two consecutive airport names in this line mean there is a flight segment booked from the earlier airport to the latter airport. The segments booked were so faulty, that there can be cycles and even multiple bookings of the same flight segment. However, the segments are from the available flight connections (which are described in the N lines above).\n\n\n\n\nOutput Format:\n\n\nFor each test case, output, on a single line, a single number representing the minimum number of flight segments that have to be booked, such that, when combined with the already booked segments, the final ticket can be used to go from airport A1 to airport AM+1 in the least number of segments.\n\n\n\n\nSample Input:\n\n3\n5\nLHR JFK\nCAI LHR\nFRA CAI\nFRA JFK\nFRA LHR\n3 CAI FRA LHR JFK\n5\nCAI FRA\nFRA LHR\nLHR CDG\nCDG FRA\nLHR JFK\n7 CAI FRA CDG LHR FRA CDG LHR JFK\n3\nCAI FRA\nFRA JFK\nCAI JFK\n1 CAI JFK\n\n\n\nSample Output:\n\n1\n1\n0\n\n\n\nNotes:\n\n\nIn the first case of Sample Input, adding the segment FRA-JFK or CAI-LHR will enable the boss to go from CAI to JFK in one stop, which is the least number of stops to go from CAI to JFK.\n\nIn the second case, the least number of stops can be achieved only using the path CAI-FRA-LHR-JFK. However, the secretary had the segment LHR-FRA booked and not the other way around, so you have to add FRA-LHR to achieve the least number of stops.\n\nIn the third case, the secretary booked an optimal ticket so you do not need to add any segments.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n5\nLHR JFK\nCAI LHR\nFRA CAI\nFRA JFK\nFRA LHR\n3 CAI FRA LHR JFK\n5\nCAI FRA\nFRA LHR\nLHR CDG\nCDG FRA\nLHR JFK\n7 CAI FRA CDG LHR FRA CDG LHR JFK\n3\nCAI FRA\nFRA JFK\nCAI JFK\n1 CAI JFK\n\n\nSample Output:\n\n1\n1\n0\n\n",
    "Description": "\nProblem Statement:\n\n\nYour boss is very upset. He just discovered that his coming flight to the US was booked wrong. Your boss wanted to do his trip using the least number of transit stops. The secretary have booked flight segments that do not meet this condition. Given that the segments are already booked, your boss decided that the resolution of this issue needs you, the programmer.\n\nYou are given the possible flight connections between pairs of cities where each connection can be used in both directions. You are also given the set of faulty segments that were booked by the secretary. Your goal is to book the least number of additional segments, which, when combined with the already booked segments, can enable your boss the flexibility to reach his destination in the least number of stops.\n\nThe segments booked by the secretary are all flexible in timing and can be used in any order. Note that you can use some, all or none of the segments already booked, in addition to the segments you will add. However, an already booked segment from A to B can only be used from A to B and not from B to A. See examples for further clarification.\n\n\n",
    "Title": "28. Error",
    "Notes": "\nNotes:\n\n\nIn the first case of Sample Input, adding the segment FRA-JFK or CAI-LHR will enable the boss to go from CAI to JFK in one stop, which is the least number of stops to go from CAI to JFK.\n\nIn the second case, the least number of stops can be achieved only using the path CAI-FRA-LHR-JFK. However, the secretary had the segment LHR-FRA booked and not the other way around, so you have to add FRA-LHR to achieve the least number of stops.\n\nIn the third case, the secretary booked an optimal ticket so you do not need to add any segments.\n\n",
    "URL": "https://a2oj.com/p?ID=28",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output, on a single line, a single number representing the minimum number of flight segments that have to be booked, such that, when combined with the already booked segments, the final ticket can be used to go from airport A1 to airport AM+1 in the least number of segments.\n\n\n"
  },
  "2038": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 250). After that follow the specifications of T test cases.\n\nEach case is specified in N + 1 lines. Each case starts with a line containing an integer N, the number of trees in the garden (1 \u2264 N \u2264 100), followed by N lines, each in the format \"X Y R\", where X and Y are the 2D coordinates of the center of the tree, and R is the radius of the tree.\n\nX, Y, and R are all integers between 1 and 1,000, inclusive. No trees in the input touch or intersect each other.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n29. Fence\n\n\n\n\n\nProblem Statement:\n\n\nYou have a garden with trees and goats. Since you like to protect the trees from the goats, you decided to build a single fence around the trees, and you like this fence to be as short as possible.\n\n\n\nIn the top view of your garden trees can be modeled by circles in 2D space. In this view, the required fence will be a 2D shape that touch some or all of the trees, such that all the trees are inside this shape. For example, in the figure, the trees are shown as the circles, and the shortest possible fence is shown as the bold surrounding line.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 250). After that follow the specifications of T test cases.\n\nEach case is specified in N + 1 lines. Each case starts with a line containing an integer N, the number of trees in the garden (1 \u2264 N \u2264 100), followed by N lines, each in the format \"X Y R\", where X and Y are the 2D coordinates of the center of the tree, and R is the radius of the tree.\n\nX, Y, and R are all integers between 1 and 1,000, inclusive. No trees in the input touch or intersect each other.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output, on a single line, a single number representing the minimum length of the shortest possible fence that can surround all the trees, rounded to five decimal places.\n\n\n\n\nSample Input:\n\n4\n5\n3 3 2\n12 12 2\n3 12 2\n12 3 2\n8 8 1\n3\n3 3 2\n9 3 2\n6 7 2\n2\n5 5 1\n10 10 2\n1\n5 5 10\n\n\n\nSample Output:\n\n48.56637\n28.56637\n23.70857\n62.83185\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n7 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n5\n3 3 2\n12 12 2\n3 12 2\n12 3 2\n8 8 1\n3\n3 3 2\n9 3 2\n6 7 2\n2\n5 5 1\n10 10 2\n1\n5 5 10\n\n\nSample Output:\n\n48.56637\n28.56637\n23.70857\n62.83185\n\n",
    "Description": "\nProblem Statement:\n\n\nYou have a garden with trees and goats. Since you like to protect the trees from the goats, you decided to build a single fence around the trees, and you like this fence to be as short as possible.\n\n\n\nIn the top view of your garden trees can be modeled by circles in 2D space. In this view, the required fence will be a 2D shape that touch some or all of the trees, such that all the trees are inside this shape. For example, in the figure, the trees are shown as the circles, and the shortest possible fence is shown as the bold surrounding line.\n\n\n",
    "Title": "29. Fence",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=29",
    "Time Limit": "7 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output, on a single line, a single number representing the minimum length of the shortest possible fence that can surround all the trees, rounded to five decimal places.\n\n\n"
  },
  "2039": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T , the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of each test case contains an integer and a string separated by a single space N P (1 \u2264 N \u2264 1,000) representing the number of words in the dictionary and the initial representation of the poly-line, respectively. Followed by N lines, each line contains a single string which represents a word in the dictionary. All the strings in the input are non-empty strings of at least 2 and at most 100 upper case English letters (from 'A' to 'Z').\n\nNote that the given string for the poly-line is just to describe its segments, and it might not include all the letters which the poly-line touches. Also, one poly-line might touch the same letter more than once, even though consecutive letters of a poly-line can not be the same.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n3. Swyper Keyboard\n\n\n\n\n\nProblem Statement:\n\n\nSwyper keyboard is a new kind of keyboards for touch screen mobile phones, where you just draw a sequence of one or more connected segments (poly-line) instead of tapping every letter of the word you want to type. The keyboard layout which we will deal with in this problem will look like the following one (the width and height of each square is 1 unit, and the center of each square is always a point with integer coordinates):\n\n \nPlease note that the keyboard which is described in this problem does not behave exactly like the real popular keyboard, so do not make any assumption which is not mentioned in the problem statement.\n\nA poly-line in this problem will be represented using a string of 2 or more upper case English letters, where every 2 consecutive letters are always different. For example the string \"ACM\" represents a poly-line which starts from the center of the letter 'A' then goes to the center of the letter 'C' then goes to the center of the letter 'M'. But this poly-line touches some other letters, between 'A' and 'C' it touches 'B' and between 'C' and 'M' it touches 'B' then 'H' then 'G' then 'N' (in that order). Given the initial string which represents a poly-line, we can get another string of all the letters which that poly-line touches in the correct order, which is referred to as the expansion of the poly-line. In this example this string is \"ABCBHGNM\". When you draw this poly-line (which was initially represented by the string \"ACM\"), you might mean any word which is a subsequence of the expansion string of the poly-line (this string is \"ABCBHGNM\"), you might mean \"ACM\", \"BGN\", \"ABCBHGNM\" or any other subsequence.\n\nA string X is considered a subsequence of another string Y, when X can be obtained by deleting zero or more letters from the string Y without changing the order of the remaining letters.\n\nYou are given a dictionary containing one or more words and a string which is the initial representation for a poly-line, your task is to find a word in the dictionary which might be meant by that poly-line as described above.\n\nNote that a poly-line which touches only the boundaries of a square does not count as a touch, for example a segment going from 'A' to 'H' does not touch 'B' or 'G'.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T , the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of each test case contains an integer and a string separated by a single space N P (1 \u2264 N \u2264 1,000) representing the number of words in the dictionary and the initial representation of the poly-line, respectively. Followed by N lines, each line contains a single string which represents a word in the dictionary. All the strings in the input are non-empty strings of at least 2 and at most 100 upper case English letters (from 'A' to 'Z').\n\nNote that the given string for the poly-line is just to describe its segments, and it might not include all the letters which the poly-line touches. Also, one poly-line might touch the same letter more than once, even though consecutive letters of a poly-line can not be the same.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which should be \"NO SOLUTION\" if there is no word in the dictionary which is a subsequence of the expansion of the given poly-line. Otherwise you should print the first word (according to the input's order) which is a subsequence of the expansion of the given poly-line.\n\n\n\n\nSample Input:\n\n2\n3 ACM\nACPC\nAM\nACM\n2 ACM\nXY\nZW\n\n\n\nSample Output:\n\nAM\nNO SOLUTION\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-21 23:01:37 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 ACM\nACPC\nAM\nACM\n2 ACM\nXY\nZW\n\n\nSample Output:\n\nAM\nNO SOLUTION\n\n",
    "Description": "\nProblem Statement:\n\n\nSwyper keyboard is a new kind of keyboards for touch screen mobile phones, where you just draw a sequence of one or more connected segments (poly-line) instead of tapping every letter of the word you want to type. The keyboard layout which we will deal with in this problem will look like the following one (the width and height of each square is 1 unit, and the center of each square is always a point with integer coordinates):\n\n \nPlease note that the keyboard which is described in this problem does not behave exactly like the real popular keyboard, so do not make any assumption which is not mentioned in the problem statement.\n\nA poly-line in this problem will be represented using a string of 2 or more upper case English letters, where every 2 consecutive letters are always different. For example the string \"ACM\" represents a poly-line which starts from the center of the letter 'A' then goes to the center of the letter 'C' then goes to the center of the letter 'M'. But this poly-line touches some other letters, between 'A' and 'C' it touches 'B' and between 'C' and 'M' it touches 'B' then 'H' then 'G' then 'N' (in that order). Given the initial string which represents a poly-line, we can get another string of all the letters which that poly-line touches in the correct order, which is referred to as the expansion of the poly-line. In this example this string is \"ABCBHGNM\". When you draw this poly-line (which was initially represented by the string \"ACM\"), you might mean any word which is a subsequence of the expansion string of the poly-line (this string is \"ABCBHGNM\"), you might mean \"ACM\", \"BGN\", \"ABCBHGNM\" or any other subsequence.\n\nA string X is considered a subsequence of another string Y, when X can be obtained by deleting zero or more letters from the string Y without changing the order of the remaining letters.\n\nYou are given a dictionary containing one or more words and a string which is the initial representation for a poly-line, your task is to find a word in the dictionary which might be meant by that poly-line as described above.\n\nNote that a poly-line which touches only the boundaries of a square does not count as a touch, for example a segment going from 'A' to 'H' does not touch 'B' or 'G'.\n\n\n",
    "Title": "3. Swyper Keyboard",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=3",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which should be \"NO SOLUTION\" if there is no word in the dictionary which is a subsequence of the expansion of the given poly-line. Otherwise you should print the first word (according to the input's order) which is a subsequence of the expansion of the given poly-line.\n\n\n"
  },
  "2040": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). After that follow the specifications of T test cases.\n\nEach test case is specified on S + 1 lines. The first line contains two integers N and S representing the size of the board and the number of moves to validate, respectively (1 \u2264 N \u2264 20, 1 \u2264 S \u2264 1,000). Each line of the remaining S lines will contain either two zeros which means a pass turn, or two integers R and C specifying the horizontal and vertical line numbers of the player's move (1 \u2264 R, C \u2264 N).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n30. Go\n\n\n\n\n\nProblem Statement:\n\n\nGo is an ancient board game for two players that originated in China over 2,000 years ago. The game is notably known for being rich in strategy despite its relatively simple rules.\n\nThe game is played by two players who alternately place black and white stones on the vacant intersections of a grid of N x N orthogonal lines. The objective of the game is to use one's stones to make a larger territory than the opponent.\n\nThe horizontal lines are numbered from top to bottom by the numbers from 1 to N, and the vertical lines are numbered from left to right by the numbers from 1 to N.\n\nTwo intersections or stones are adjacent if one of them is adjacent to the other, from right, left, top or bottom. A ``solidly connected group\" is a set of intersections or stones in which every pair is connected by a path of adjacent intersections or stones from the same set.\n\nA solidly connected group of empty intersections or stones is called surrounded by a color, if all the adjacent intersections to the group are occupied by stones of that color.\n\nA player's territory consists of all the intersections occupied by the player's stones, in addition to the solidly connected groups of empty intersections surrounded by the player's stone color.\n\nHere is a list of the rules for a simplified version of the game:\n\n1. The board is empty at the beginning of the game.\n\n2. Each player has stones of one color (black or white).\n\n3. Black gets the first turn, then the players alternate turns.\n\n4. A move consists of placing one stone of one's own color on an empty intersection on the board.\n\n5. A player may pass his turn at any time and give the turn to the other player.\n\n6. A solidly connected group of stones of one color is captured and removed from the board once it is surrounded by the opponent.\n\n7. Self-capture happens when your move causes some of your stones to be captured and thus removed.\n\n8. In case of a move causing a group from both players to be captured, capture of the opponent takes precedence over self-capture.\n\nYou are given the size of the board and a sequence of moves, and your task is to validate this sequence of moves and print the index (1-based) of the first invalid move (a move is invalid if the player is trying to put a stone in a non-empty intersection). If all moves are valid you should print the sizes of the territories for each player after the last move.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). After that follow the specifications of T test cases.\n\nEach test case is specified on S + 1 lines. The first line contains two integers N and S representing the size of the board and the number of moves to validate, respectively (1 \u2264 N \u2264 20, 1 \u2264 S \u2264 1,000). Each line of the remaining S lines will contain either two zeros which means a pass turn, or two integers R and C specifying the horizontal and vertical line numbers of the player's move (1 \u2264 R, C \u2264 N).\n\n\n\n\nOutput Format:\n\n\nFor each test case, output, on a single line, one of two outputs:\n\n\"Invalid X\", if there is at least one invalid move, where X is the index of the earliest invalid move. Please note that passing the turn to the other player does not count as a move.\n\"B W \", if there are no invalid moves, where B and W are the sizes of the black and white territories, respectively.\n\nHint: Explanation for the second test case\n\n\n\n\nSample Input:\n\n3\n4 4\n1 1\n2 2\n3 3\n4 4\n4 5\n1 2\n1 1\n2 1\n1 1\n2 2\n4 8\n1 2\n1 1\n0 0\n0 0\n2 2\n2 1\n4 4\n1 1\n\n\n\nSample Output:\n\n2 2\n16 0\nInvalid 6\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n4 4\n1 1\n2 2\n3 3\n4 4\n4 5\n1 2\n1 1\n2 1\n1 1\n2 2\n4 8\n1 2\n1 1\n0 0\n0 0\n2 2\n2 1\n4 4\n1 1\n\n\nSample Output:\n\n2 2\n16 0\nInvalid 6\n\n",
    "Description": "\nProblem Statement:\n\n\nGo is an ancient board game for two players that originated in China over 2,000 years ago. The game is notably known for being rich in strategy despite its relatively simple rules.\n\nThe game is played by two players who alternately place black and white stones on the vacant intersections of a grid of N x N orthogonal lines. The objective of the game is to use one's stones to make a larger territory than the opponent.\n\nThe horizontal lines are numbered from top to bottom by the numbers from 1 to N, and the vertical lines are numbered from left to right by the numbers from 1 to N.\n\nTwo intersections or stones are adjacent if one of them is adjacent to the other, from right, left, top or bottom. A ``solidly connected group\" is a set of intersections or stones in which every pair is connected by a path of adjacent intersections or stones from the same set.\n\nA solidly connected group of empty intersections or stones is called surrounded by a color, if all the adjacent intersections to the group are occupied by stones of that color.\n\nA player's territory consists of all the intersections occupied by the player's stones, in addition to the solidly connected groups of empty intersections surrounded by the player's stone color.\n\nHere is a list of the rules for a simplified version of the game:\n\n1. The board is empty at the beginning of the game.\n\n2. Each player has stones of one color (black or white).\n\n3. Black gets the first turn, then the players alternate turns.\n\n4. A move consists of placing one stone of one's own color on an empty intersection on the board.\n\n5. A player may pass his turn at any time and give the turn to the other player.\n\n6. A solidly connected group of stones of one color is captured and removed from the board once it is surrounded by the opponent.\n\n7. Self-capture happens when your move causes some of your stones to be captured and thus removed.\n\n8. In case of a move causing a group from both players to be captured, capture of the opponent takes precedence over self-capture.\n\nYou are given the size of the board and a sequence of moves, and your task is to validate this sequence of moves and print the index (1-based) of the first invalid move (a move is invalid if the player is trying to put a stone in a non-empty intersection). If all moves are valid you should print the sizes of the territories for each player after the last move.\n\n\n",
    "Title": "30. Go",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=30",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output, on a single line, one of two outputs:\n\n\"Invalid X\", if there is at least one invalid move, where X is the index of the earliest invalid move. Please note that passing the turn to the other player does not count as a move.\n\"B W \", if there are no invalid moves, where B and W are the sizes of the black and white territories, respectively.\n\nHint: Explanation for the second test case\n\n\n"
  },
  "2041": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will contain a single integer T, the number of test cases (1 \u2264 T \u2264 200). Next T lines contain the test cases, each on a single line.\n\nEach of those lines will contain 7 integers, a, minX, maxX, minY, maxY, P and C, separated by single spaces, given in this order (1 \u2264 minX, maxX, minY, maxY \u2264 100, 1 \u2264 P \u2264 3, 1 \u2264 a, C \u2264 1,000,000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n31. Homework\n\n\n\n\n\nProblem Statement:\n\n\nNow it is time for your math homework. A Tornado operation T(n) is defined as follows:\n\n\na is a given constant, and + is the set of positive integers. Xn and Yn are positive integers chosen such that Xn \u2264 Xn+1 and Yn \u2264 Yn+1, for all positive n. Also, minX \u2264 Xn \u2264 maxX and minY \u2264 Yn \u2264 maxY, for all positive n.\n\nFor example if a = 1, X1 = 2, X2 = 4, and Y1 = Y2 = 3, then:\n\n\nGiven a, minX, maxX, minY, maxY and two positive integers P and C, your homework is to find the minimum value of n such that T(n) + C is divisible by 10P, by choosing appropriate values for X1,..., Xn and Y1,..., Yn.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will contain a single integer T, the number of test cases (1 \u2264 T \u2264 200). Next T lines contain the test cases, each on a single line.\n\nEach of those lines will contain 7 integers, a, minX, maxX, minY, maxY, P and C, separated by single spaces, given in this order (1 \u2264 minX, maxX, minY, maxY \u2264 100, 1 \u2264 P \u2264 3, 1 \u2264 a, C \u2264 1,000,000).\n\n\n\n\nOutput Format:\n\n\nFor each test case, output, on a single line, a single integer representing the minimum value for n such that T(n) + C is divisible by 10P. If there is no such value, output '-1' instead.\n\n\n\n\nSample Input:\n\n4\n4 1 1 1 2 1 5\n4 1 100 1 100 1 6\n3 1 1 2 2 2 11\n1 2 2 1 1 3 2\n\n\n\nSample Output:\n\n1\n0\n2\n-1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n4 1 1 1 2 1 5\n4 1 100 1 100 1 6\n3 1 1 2 2 2 11\n1 2 2 1 1 3 2\n\n\nSample Output:\n\n1\n0\n2\n-1\n\n",
    "Description": "\nProblem Statement:\n\n\nNow it is time for your math homework. A Tornado operation T(n) is defined as follows:\n\n\na is a given constant, and + is the set of positive integers. Xn and Yn are positive integers chosen such that Xn \u2264 Xn+1 and Yn \u2264 Yn+1, for all positive n. Also, minX \u2264 Xn \u2264 maxX and minY \u2264 Yn \u2264 maxY, for all positive n.\n\nFor example if a = 1, X1 = 2, X2 = 4, and Y1 = Y2 = 3, then:\n\n\nGiven a, minX, maxX, minY, maxY and two positive integers P and C, your homework is to find the minimum value of n such that T(n) + C is divisible by 10P, by choosing appropriate values for X1,..., Xn and Y1,..., Yn.\n\n\n",
    "Title": "31. Homework",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=31",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output, on a single line, a single integer representing the minimum value for n such that T(n) + C is divisible by 10P. If there is no such value, output '-1' instead.\n\n\n"
  },
  "2042": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 200). Next T lines contain the test cases, each on a single line.\n\nEach case contains three integers, separated by single spaces, N, R, Q as described in the problem, in this order (1 \u2264 N < 101,000,0 \u2264 R < Q \u2264 1,000). All numbers in the input will not contain leading zeros.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n32. Identify the Number\n\n\n\n\n\nProblem Statement:\n\n\nYou are given three numbers N, Q and R. You want to find M, such that:\n\n\u00a01. M is positive.\n\u00a02. The string decimal representation of M is a subsequence of the string decimal representation of \u00a0 \u00a0\u00a0N, i.e. M can be obtained from the removal of zero or more digits from 3. the decimal \u00a0\u00a0\u00a0\u00a0representation of N.\n\u00a04. M gives a remainder of R when divided by Q.\n\u00a05. M is the maximum possible.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 200). Next T lines contain the test cases, each on a single line.\n\nEach case contains three integers, separated by single spaces, N, R, Q as described in the problem, in this order (1 \u2264 N < 101,000,0 \u2264 R < Q \u2264 1,000). All numbers in the input will not contain leading zeros.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output, on a single line, the number M as described in the problem, with no leading zeros. If no such M can be found, output on a single line \"Not found\" instead.\n\nIn the first case below, 840 is divisible by 8, thus it is the largest possible value of M.\n\nIn the second case, the subsequences of 901 are {9, 0, 1, 90, 01, 91, 901}. Out of these there is 0 which is not positive and 01 which has a leading zero. Only 91 has a remainder of 3 when divided by 8.\n\nIn the third case, there is no subsequence of 123456789 that gives a remainder of 10 when divided by 100.\n\n\n\n\nSample Input:\n\n3\n840 0 8\n901 3 8\n123456789 10 100\n\n\n\nSample Output:\n\n840\n91\nNot found\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n840 0 8\n901 3 8\n123456789 10 100\n\n\nSample Output:\n\n840\n91\nNot found\n\n",
    "Description": "\nProblem Statement:\n\n\nYou are given three numbers N, Q and R. You want to find M, such that:\n\n\u00a01. M is positive.\n\u00a02. The string decimal representation of M is a subsequence of the string decimal representation of \u00a0 \u00a0\u00a0N, i.e. M can be obtained from the removal of zero or more digits from 3. the decimal \u00a0\u00a0\u00a0\u00a0representation of N.\n\u00a04. M gives a remainder of R when divided by Q.\n\u00a05. M is the maximum possible.\n\n\n",
    "Title": "32. Identify the Number",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=32",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output, on a single line, the number M as described in the problem, with no leading zeros. If no such M can be found, output on a single line \"Not found\" instead.\n\nIn the first case below, 840 is divisible by 8, thus it is the largest possible value of M.\n\nIn the second case, the subsequences of 901 are {9, 0, 1, 90, 01, 91, 901}. Out of these there is 0 which is not positive and 01 which has a leading zero. Only 91 has a remainder of 3 when divided by 8.\n\nIn the third case, there is no subsequence of 123456789 that gives a remainder of 10 when divided by 100.\n\n\n"
  },
  "2043": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). After that follow the specifications of T test cases.\n\nEach case is specified on N + 1 lines. The first line of a case contains three integer N, M and K, representing the number of rows, number of cells in each row and the maximum allowed distance in every move, respectively (1 \u2264 N, M, K \u2264 1,000).\n\nEach line of the remaining N lines contains M numbers. The j-th number in the i-th line is the number in the cell (i, j). The absolute value of all the given numbers is at most 1,000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n33. Joy of the Cylinder Game\n\n\n\n\n\nProblem Statement:\n\n\nThe cylinder game is new and not published anywhere yet. The inventor of this game is interested in writing a solver for the game before publishing it, and he needs your help to write this solver.\n\nThe game is played on a cylinder. This cylinder is divided into N rows numbered from 1 to N (the first row is the top-most one), and each row is divided into M cells numbered from 1 to M, and each cell contains a number. The cell number 1 is adjacent to the cell number M in the same row (check the image for more clarification).\n\nEach cell will be defined by two numbers X and Y, where X is the row number and Y is the cell number in this row. The distance between two cells (X1, Y1) and (X2, Y2) is the absolute difference between X1 and X2 added to the minimum of (the absolute difference between Y1 and Y2) and (M - the absolute difference between Y1 and Y2).\n\nThe first step in the game is to select any cell from the first row to start from, then you will move from the current cell to any cell in the next row, without exceeding a distance of K. You will keep doing this move until you reach the last row. Your final score will be the sum of the numbers inside the cells you selected in your steps. The goal of the game is to maximize this score.\n\nCan you help by writing a solver for this game?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). After that follow the specifications of T test cases.\n\nEach case is specified on N + 1 lines. The first line of a case contains three integer N, M and K, representing the number of rows, number of cells in each row and the maximum allowed distance in every move, respectively (1 \u2264 N, M, K \u2264 1,000).\n\nEach line of the remaining N lines contains M numbers. The j-th number in the i-th line is the number in the cell (i, j). The absolute value of all the given numbers is at most 1,000.\n\n\n\n\nOutput Format:\n\n\nFor each test case, you must print one line of output that starts by the maximum score you can get, followed by a single space, followed by N numbers separated by single spaces, where the i-th number is the index of the selected cell in the row number i.\n\nIf there are multiple solutions that reach the same maximum score, you should print the lexicographically smallest one. (A solution X is defined as lexicographically smaller than a solution Y if X has a smaller number than Y at the first position where they differ).\n\n\n\n\nSample Input:\n\n1\n11 12 3\n5 -2 -5 0 3 10 0 0 0 0 0 0\n1 0 -5 7 9 5 0 0 0 0 0 0\n2 5 3 3 1 0 0 0 0 0 0 0\n9 7 5 1 2 3 0 0 0 0 0 0\n8 8 7 -4 5 5 0 0 0 0 0 0\n11 2 4 -1 5 9 0 0 0 0 0 0\n10 20 15 21 3 -5 0 0 0 0 0 0\n1 2 0 2 1 0 0 0 0 0 0 0\n3 2 1 3 -2 0 0 0 0 0 0 0\n5 6 12 10 11 -9 0 0 0 0 0 0\n0 -1 -2 5 7 3 0 0 0 0 0 0\n\n\n\nSample Output:\n\n94 6 4 2 1 1 1 2 2 1 3 5\n\n\n\nNotes:\n\n\nThis is the sample test case. The unviewable cells (behind) are all zeros, and the best solution is highlighted\n \n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-26 01:15:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2011\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n11 12 3\n5 -2 -5 0 3 10 0 0 0 0 0 0\n1 0 -5 7 9 5 0 0 0 0 0 0\n2 5 3 3 1 0 0 0 0 0 0 0\n9 7 5 1 2 3 0 0 0 0 0 0\n8 8 7 -4 5 5 0 0 0 0 0 0\n11 2 4 -1 5 9 0 0 0 0 0 0\n10 20 15 21 3 -5 0 0 0 0 0 0\n1 2 0 2 1 0 0 0 0 0 0 0\n3 2 1 3 -2 0 0 0 0 0 0 0\n5 6 12 10 11 -9 0 0 0 0 0 0\n0 -1 -2 5 7 3 0 0 0 0 0 0\n\n\nSample Output:\n\n94 6 4 2 1 1 1 2 2 1 3 5\n\n",
    "Description": "\nProblem Statement:\n\n\nThe cylinder game is new and not published anywhere yet. The inventor of this game is interested in writing a solver for the game before publishing it, and he needs your help to write this solver.\n\nThe game is played on a cylinder. This cylinder is divided into N rows numbered from 1 to N (the first row is the top-most one), and each row is divided into M cells numbered from 1 to M, and each cell contains a number. The cell number 1 is adjacent to the cell number M in the same row (check the image for more clarification).\n\nEach cell will be defined by two numbers X and Y, where X is the row number and Y is the cell number in this row. The distance between two cells (X1, Y1) and (X2, Y2) is the absolute difference between X1 and X2 added to the minimum of (the absolute difference between Y1 and Y2) and (M - the absolute difference between Y1 and Y2).\n\nThe first step in the game is to select any cell from the first row to start from, then you will move from the current cell to any cell in the next row, without exceeding a distance of K. You will keep doing this move until you reach the last row. Your final score will be the sum of the numbers inside the cells you selected in your steps. The goal of the game is to maximize this score.\n\nCan you help by writing a solver for this game?\n\n\n",
    "Title": "33. Joy of the Cylinder Game",
    "Notes": "\nNotes:\n\n\nThis is the sample test case. The unviewable cells (behind) are all zeros, and the best solution is highlighted\n \n\n",
    "URL": "https://a2oj.com/p?ID=33",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, you must print one line of output that starts by the maximum score you can get, followed by a single space, followed by N numbers separated by single spaces, where the i-th number is the index of the selected cell in the row number i.\n\nIf there are multiple solutions that reach the same maximum score, you should print the lexicographically smallest one. (A solution X is defined as lexicographically smaller than a solution Y if X has a smaller number than Y at the first position where they differ).\n\n\n"
  },
  "2044": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of each test case contains 3 integers separated by a single space N M Q (2 \u2264 N \u2264 150), (0 \u2264 M \u2264 3,000) and (1 \u2264 Q \u2264 1,000) representing the number of nodes, the number of edges and the number of queries, respectively. Followed by M lines, each line contains 3 integers separated by a single space X Y Z (1 \u2264 X, Y \u2264 N), (1 \u2264 Z \u2264 3,000) which represent an edge going from the node X to the node Y with cost Z (X and Y will be different). Followed by Q lines, each line contains 3 integers separated by a single space A B C (1 \u2264 A, B \u2264 N), (0 \u2264 C \u2264 M) which represent a query as described above (A and B will be different). \n\nNote that there might multiple edges between the same pair of nodes.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n4. Increasing Shortest Path\n\n\n\n\n\nProblem Statement:\n\n\nWe all love short and direct problems, it is easier to write, read and understand the problem statement. Here is one of these problems. \"Life is too short to make a story\", said Ahmed Aly.\n\nYou are given a weighted directed graph of N nodes (the nodes are numbered from 1 to N), where the weights of the edges are distinct and positive. For each graph, you are also given a list of queries to answer.\n\nEach query will be represented by 3 integers A B C, which means you need to find the shortest path (the path with minimum sum of weights of its edges) which goes from node A to node B and uses at most C edges, such that the weights of the edges in that path are in increasing order along the path, which means the weight of each edge in that path should be greater than the weight of the edge before it (unless it is the first edge in the path).\n\nYour task is to write a program which answers these queries\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of each test case contains 3 integers separated by a single space N M Q (2 \u2264 N \u2264 150), (0 \u2264 M \u2264 3,000) and (1 \u2264 Q \u2264 1,000) representing the number of nodes, the number of edges and the number of queries, respectively. Followed by M lines, each line contains 3 integers separated by a single space X Y Z (1 \u2264 X, Y \u2264 N), (1 \u2264 Z \u2264 3,000) which represent an edge going from the node X to the node Y with cost Z (X and Y will be different). Followed by Q lines, each line contains 3 integers separated by a single space A B C (1 \u2264 A, B \u2264 N), (0 \u2264 C \u2264 M) which represent a query as described above (A and B will be different). \n\nNote that there might multiple edges between the same pair of nodes.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line for each query which contains a single integer, the minimum sum of weights for a path between the given pair of nodes which satisfies the given constraints, or -1 if there is no valid path between the given nodes which satisfies the given constraints. The output must not contain empty lines between the cases.\n\n\n\n\nSample Input:\n\n1\n8 9 3\n1 2 1\n2 3 2\n3 4 3\n4 5 12\n5 8 7\n1 6 8\n6 4 9\n1 7 5\n7 4 4\n1 4 2\n1 4 3\n1 4 1\n\n\n\nSample Output:\n\n17\n6\n-1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-21 23:12:28 UTC\n\n\n\n\nTime Limit:\n\n\n60 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n8 9 3\n1 2 1\n2 3 2\n3 4 3\n4 5 12\n5 8 7\n1 6 8\n6 4 9\n1 7 5\n7 4 4\n1 4 2\n1 4 3\n1 4 1\n\n\nSample Output:\n\n17\n6\n-1\n\n",
    "Description": "\nProblem Statement:\n\n\nWe all love short and direct problems, it is easier to write, read and understand the problem statement. Here is one of these problems. \"Life is too short to make a story\", said Ahmed Aly.\n\nYou are given a weighted directed graph of N nodes (the nodes are numbered from 1 to N), where the weights of the edges are distinct and positive. For each graph, you are also given a list of queries to answer.\n\nEach query will be represented by 3 integers A B C, which means you need to find the shortest path (the path with minimum sum of weights of its edges) which goes from node A to node B and uses at most C edges, such that the weights of the edges in that path are in increasing order along the path, which means the weight of each edge in that path should be greater than the weight of the edge before it (unless it is the first edge in the path).\n\nYour task is to write a program which answers these queries\n\n\n",
    "Title": "4. Increasing Shortest Path",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=4",
    "Time Limit": "60 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line for each query which contains a single integer, the minimum sum of weights for a path between the given pair of nodes which satisfies the given constraints, or -1 if there is no valid path between the given nodes which satisfies the given constraints. The output must not contain empty lines between the cases.\n\n\n"
  },
  "2045": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of each test case contains 1 integer L (0 \u2264 L \u2264 1012) representing the life points of the monster. Followed by 5 lines, each one contains 3 integers separated by a single space H D C representing the maximum number of hits, the damage by each hit and the cost of each hit by one of the characters, respectively (0 \u2264 H \u2264 1,000), (0 \u2264 D, C \u2264 109) and the sum of the maximum number of hits for all characters will not be more than 1,000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n5. Cup of Cowards\n\n\n\n\n\nProblem Statement:\n\n\nCup of Cowards (CoC) is a role playing game that has 5 different characters (Mage, Tank, Fighter, Assassin and Marksman). A team consists of 5 players (one from each kind) and the goal is to kill a monster with L life points. The monster dies if the total damage it gets is at least L. Each character has a certain number of allowed hits, each hit has a certain damage and a certain cost (the cost and damage might be different for each character). The team wants to kill the monster using the minimum cost so they can perform better in later missions. They want your help to find the minimum cost they will pay to kill the monster and the damage they should incur on it.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, the first line of each test case contains 1 integer L (0 \u2264 L \u2264 1012) representing the life points of the monster. Followed by 5 lines, each one contains 3 integers separated by a single space H D C representing the maximum number of hits, the damage by each hit and the cost of each hit by one of the characters, respectively (0 \u2264 H \u2264 1,000), (0 \u2264 D, C \u2264 109) and the sum of the maximum number of hits for all characters will not be more than 1,000.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains 2 space separated integers, the first is the minimum cost for the hits used to kill the monster and the second is the damage incurred upon the monster. If there is more than one way to kill the monster using the same minimum cost, select the one with the least damage and if there is no way to kill the monster print \"We are doomed!!\"(without the quotes).\n\n\n\n\nSample Input:\n\n2\n33\n2 3 4\n3 1 2\n4 3 2\n1 7 1\n3 4 2\n51\n3 3 1\n4 3 2\n2 3 3\n3 1 4\n5 2 3\n\n\n\nSample Output:\n\n19 33\nWe are doomed!!\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-21 23:43:58 UTC\n\n\n\n\nTime Limit:\n\n\n10 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n33\n2 3 4\n3 1 2\n4 3 2\n1 7 1\n3 4 2\n51\n3 3 1\n4 3 2\n2 3 3\n3 1 4\n5 2 3\n\n\nSample Output:\n\n19 33\nWe are doomed!!\n\n",
    "Description": "\nProblem Statement:\n\n\nCup of Cowards (CoC) is a role playing game that has 5 different characters (Mage, Tank, Fighter, Assassin and Marksman). A team consists of 5 players (one from each kind) and the goal is to kill a monster with L life points. The monster dies if the total damage it gets is at least L. Each character has a certain number of allowed hits, each hit has a certain damage and a certain cost (the cost and damage might be different for each character). The team wants to kill the monster using the minimum cost so they can perform better in later missions. They want your help to find the minimum cost they will pay to kill the monster and the damage they should incur on it.\n\n\n",
    "Title": "5. Cup of Cowards",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=5",
    "Time Limit": "10 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains 2 space separated integers, the first is the minimum cost for the hits used to kill the monster and the second is the damage incurred upon the monster. If there is more than one way to kill the monster using the same minimum cost, select the one with the least damage and if there is no way to kill the monster print \"We are doomed!!\"(without the quotes).\n\n\n"
  },
  "2046": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1  \u2264  T  \u2264  100). Followed by the test cases, the first line of each test case contains 3 integers separated by a single space N X Y (3  \u2264  N  \u2264  100) and (1  \u2264  X, Y  \u2264  N) representing the number of problems, the color which the easiest problem should not get and the color which the hardest problem should not get, respectively. Followed by a line which contains N integers separated by a single space (each integer from 1 to N should appear exactly once), the first integer is the color for the first problem (the easiest), the second integer is the color for the second problem and so on (the last integer is the color for the hardest problem).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n6. Balloons Colors\n\n\n\n\n\nProblem Statement:\n\n\nIf you are here because of A2OJ Code Battle, please sign up for the tournament here.\nAssigning a balloon color to each problem is one of the tasks we need to do every year, and sometimes it is tricky.\n\nWe noticed that some contestants assume some colors for some problems according to the difficulty. For example, the easiest problem is the red one and the hardest problem is the black one.\n\nWe do not want these assumptions to be true, so we decided to add constraints for the easiest and the hardest problems.\n\nThere are N problems, numbered from 1 to N, the easiest problem is problem number 1, and the hardest problem is problem number N. Also there are N unique colors, for simplicity we will give each color a unique number from 1 to N.\n\nWe want to assign each color to exactly 1 problem, such that the easiest problem does not get the color X and the hardest problem does not get the color Y.\n\nGiven N, X, Y and an assignment of the colors, your task is to find if this assignment satisfies the above conditions or not.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1  \u2264  T  \u2264  100). Followed by the test cases, the first line of each test case contains 3 integers separated by a single space N X Y (3  \u2264  N  \u2264  100) and (1  \u2264  X, Y  \u2264  N) representing the number of problems, the color which the easiest problem should not get and the color which the hardest problem should not get, respectively. Followed by a line which contains N integers separated by a single space (each integer from 1 to N should appear exactly once), the first integer is the color for the first problem (the easiest), the second integer is the color for the second problem and so on (the last integer is the color for the hardest problem).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single word, this word should be (without the quotes):\n\n- \"BOTH\": If both the easiest and hardest problems got colors which they should not get.\n\n- \"EASY\": If only the easiest problem got a color which it should not get.\n\n- \"HARD\": If only the hardest problem got a color which it should not get.\n\n- \"OKAY\": If both the easiest and hardest problems got colors which they can get.\n\n\n\n\nSample Input:\n\n4\n3 1 2\n1 3 2\n5 3 4\n3 1 2 4 5\n6 1 6\n2 1 3 4 5 6\n7 7 7\n1 7 2 3 4 5 6\n\n\n\n\nSample Output:\n\nBOTH\nEASY\nHARD\nOKAY\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-21 23:46:39 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n3 1 2\n1 3 2\n5 3 4\n3 1 2 4 5\n6 1 6\n2 1 3 4 5 6\n7 7 7\n1 7 2 3 4 5 6\n\n\n\nSample Output:\n\nBOTH\nEASY\nHARD\nOKAY\n\n\n",
    "Description": "\nProblem Statement:\n\n\nIf you are here because of A2OJ Code Battle, please sign up for the tournament here.\nAssigning a balloon color to each problem is one of the tasks we need to do every year, and sometimes it is tricky.\n\nWe noticed that some contestants assume some colors for some problems according to the difficulty. For example, the easiest problem is the red one and the hardest problem is the black one.\n\nWe do not want these assumptions to be true, so we decided to add constraints for the easiest and the hardest problems.\n\nThere are N problems, numbered from 1 to N, the easiest problem is problem number 1, and the hardest problem is problem number N. Also there are N unique colors, for simplicity we will give each color a unique number from 1 to N.\n\nWe want to assign each color to exactly 1 problem, such that the easiest problem does not get the color X and the hardest problem does not get the color Y.\n\nGiven N, X, Y and an assignment of the colors, your task is to find if this assignment satisfies the above conditions or not.\n\n\n",
    "Title": "6. Balloons Colors",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=6",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single word, this word should be (without the quotes):\n\n- \"BOTH\": If both the easiest and hardest problems got colors which they should not get.\n\n- \"EASY\": If only the easiest problem got a color which it should not get.\n\n- \"HARD\": If only the hardest problem got a color which it should not get.\n\n- \"OKAY\": If both the easiest and hardest problems got colors which they can get.\n\n\n"
  },
  "2047": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 100,000 letters, each letter is 'U', 'R', 'D', 'L' or '?'. This string represents the sequence of signals as described above.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n7. NASSA's Robot\n\n\n\n\n\nProblem Statement:\n\n\nIf you are here because of A2OJ Code Battle, please sign up for the tournament here.\nNASSA's robot landed on Mars. The place where it landed can be modeled as an infinite 2-dimensional plane with perpendicular X-axis and Y-axis coordinates.\n\nThe robot continuously reports its location back to Earth, but due to a serious design flaw, it only reports the moves it makes instead of the coordinates of its exact location. Some signals went missing and never reached our reception.\n\nIn one of the space exploration missions, the robot sent a sequence of signals, which can be represented by a string composed of the following characters: 'U', 'R', 'D', 'L' or '?'. 'U' represents up (Y-coordinate increases by 1), 'R' represents right (X-coordinate increases by 1), 'D' represents down (Y-coordinate decreases by 1), 'L' represents left (X-coordinate decreases by 1) and '?' represents a missed signal. Every character in the sequence is a single step in the corresponding direction. A missed signal is a single step in one of the four directions. The robot is initially at X-coordinate 0 and Y-coordinate 0 before starting to send the given signals.\n\nAfter sending some signals while the robot is moving, its software crashed and the robot could not do any further moves. The researchers on the base want to limit the space where they can look for the robot. In other words, they want to find the minimum possible X-coordinate, the minimum possible Y-coordinate, the maximum possible X-coordinate and the maximum possible Y-coordinate of the current location of the robot.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 100,000 letters, each letter is 'U', 'R', 'D', 'L' or '?'. This string represents the sequence of signals as described above.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains 4 integers separated by a single space, which are the minimum possible X-coordinate, the minimum possible Y-coordinate, the maximum possible X-coordinate and the maximum possible Y-coordinate for the location of the robot after it stopped moving.\n\n\n\n\nSample Input:\n\n3\nRUL?R?D\n????????\nRRRUU\n\n\n\nSample Output:\n\n-1 -2 3 2\n-8 -8 8 8\n3 2 3 2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-21 23:48:47 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n3\nRUL?R?D\n????????\nRRRUU\n\n\nSample Output:\n\n-1 -2 3 2\n-8 -8 8 8\n3 2 3 2\n\n",
    "Description": "\nProblem Statement:\n\n\nIf you are here because of A2OJ Code Battle, please sign up for the tournament here.\nNASSA's robot landed on Mars. The place where it landed can be modeled as an infinite 2-dimensional plane with perpendicular X-axis and Y-axis coordinates.\n\nThe robot continuously reports its location back to Earth, but due to a serious design flaw, it only reports the moves it makes instead of the coordinates of its exact location. Some signals went missing and never reached our reception.\n\nIn one of the space exploration missions, the robot sent a sequence of signals, which can be represented by a string composed of the following characters: 'U', 'R', 'D', 'L' or '?'. 'U' represents up (Y-coordinate increases by 1), 'R' represents right (X-coordinate increases by 1), 'D' represents down (Y-coordinate decreases by 1), 'L' represents left (X-coordinate decreases by 1) and '?' represents a missed signal. Every character in the sequence is a single step in the corresponding direction. A missed signal is a single step in one of the four directions. The robot is initially at X-coordinate 0 and Y-coordinate 0 before starting to send the given signals.\n\nAfter sending some signals while the robot is moving, its software crashed and the robot could not do any further moves. The researchers on the base want to limit the space where they can look for the robot. In other words, they want to find the minimum possible X-coordinate, the minimum possible Y-coordinate, the maximum possible X-coordinate and the maximum possible Y-coordinate of the current location of the robot.\n\n\n",
    "Title": "7. NASSA's Robot",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=7",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains 4 integers separated by a single space, which are the minimum possible X-coordinate, the minimum possible Y-coordinate, the maximum possible X-coordinate and the maximum possible Y-coordinate for the location of the robot after it stopped moving.\n\n\n"
  },
  "2048": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains 3 integers separated by a single space N M X (1 \u2264 N, M \u2264 109) and (1 \u2264 X \u2264 M) representing the number of stones, the number of players and the player number, respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n8. The Stones Game\n\n\n\n\n\nProblem Statement:\n\n\nThe stones game is a simple game, it is also a very old game which is unknown to almost everyone.\n\nThe game starts with N stones and M players, the players are numbered from 1 to M. The players play in turns, player number 1 plays first, then player number 2 and so on until player number M plays, after this player number 1 plays again and they keep playing until the end of the game. For each turn, the players do the following 2 steps:\n\n1. The player gets a chance to remove a stone, and he/she should remove a stone in this step if he/she decided to do so.\n\n2. Regardless of the decision of the current player (whether or not he/she removed a stone in the first step), if this is not the first turn and in the previous turn the player decided not to remove a stone in his/her first step, then the current player must remove a stone in this step (if in the previous turn the player decided to remove a stone in his/her first step, then the current player must not remove a stone in this step).\n\nThis means in some turns a player might remove 0, 1 or 2 stones according to the above rules. In this game, the player who removes the last stone wins the game. Now you are given the total number of stones, the total number of players and a player number and you are asked to answer the following question: Is there a strategy for this player to win the game regardless of the actions taken by the other players in their turns?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is described in one line which contains 3 integers separated by a single space N M X (1 \u2264 N, M \u2264 109) and (1 \u2264 X \u2264 M) representing the number of stones, the number of players and the player number, respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single word, this word is either \"YES\" or \"NO\" (without the quotes) representing the answer for the above question for the given player number.\n\n\n\n\nSample Input:\n\n2\n2 2 2\n2 2 1\n\n\n\nSample Output:\n\nYES\nNO\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 00:00:13 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 2 2\n2 2 1\n\n\nSample Output:\n\nYES\nNO\n\n",
    "Description": "\nProblem Statement:\n\n\nThe stones game is a simple game, it is also a very old game which is unknown to almost everyone.\n\nThe game starts with N stones and M players, the players are numbered from 1 to M. The players play in turns, player number 1 plays first, then player number 2 and so on until player number M plays, after this player number 1 plays again and they keep playing until the end of the game. For each turn, the players do the following 2 steps:\n\n1. The player gets a chance to remove a stone, and he/she should remove a stone in this step if he/she decided to do so.\n\n2. Regardless of the decision of the current player (whether or not he/she removed a stone in the first step), if this is not the first turn and in the previous turn the player decided not to remove a stone in his/her first step, then the current player must remove a stone in this step (if in the previous turn the player decided to remove a stone in his/her first step, then the current player must not remove a stone in this step).\n\nThis means in some turns a player might remove 0, 1 or 2 stones according to the above rules. In this game, the player who removes the last stone wins the game. Now you are given the total number of stones, the total number of players and a player number and you are asked to answer the following question: Is there a strategy for this player to win the game regardless of the actions taken by the other players in their turns?\n\n\n",
    "Title": "8. The Stones Game",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=8",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single word, this word is either \"YES\" or \"NO\" (without the quotes) representing the answer for the above question for the given player number.\n\n\n"
  },
  "2049": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing 3 integers separated by a single space N M S (1 \u2264 N, M \u2264 50) and (0 \u2264 S \u2264 500) representing the number of rows in the grid, the number of columns and the remaining time, respectively.\n\nFollowed by a line containing 2 integers separated by a single space I J (1 \u2264 I \u2264 N) and (1 \u2264 J \u2264 M) representing the row number and the column number of the cell which the first ant will start from it, respectively. Followed by N lines each line contains M integers separated by a single space, representing the value of each sugar unit in each cell in that row. Each integer in the grid will not be less than 0 and will not be greater than 9.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n9. Super Ants\n\n\n\n\n\nProblem Statement:\n\n\nHere is another game, this game is called the ants game. In this game, you are given a grid, with N rows and M columns. The rows are numbered from 1 to N from top to bottom, and the columns are numbered from 1 to M from left to right. Each cell in the grid has unlimited store of a certain type of sugar, each unit of sugar gives the player a specific score. The game is just 1 step, given 1 super ant, position it in any cell in the grid, and the ant will do its magical work to determine your score.\n\nOnce a super ant is placed in one of the cells, it does a systematic behavior to gather sugar units from the stores. If there is no remaining time, the ant gets 1 unit of sugar from the store of its cell and stops working. If there is some remaining time, it starts a magical operation, which is the ants cloning operation.\n\nThe super ant starts to clone itself to all the possible cells according to the current remaining time (all of its cloning operations start at the same time). It takes D seconds to clone itself to a cell that is far with D units. An ant at position (R1, C1) is far from the position (R2, C2) by max(|R1 - R2|, |C1 - C2|) units (where |X| means the absolute value of X). Once a new super ant is cloned, it behaves as a super ant by utilizing the remaining time.\n\nAt the end, when the remaining time is not enough for any ant to clone itself to any other cell, each ant will collect one unit of sugar from its cell and your score is the sum of the values of all the collected sugar units. Note that an ant can not clone itself to another cell with distance more than the current remaining time, and an ant can not clone itself to the same cell more than once, and it can not clone itself to its cell, and any cell can contain any number of ants at any time.\n\nOkay, which positions an ant can clone itself to them? First of all, an ant can not clone itself to a cell outside of the grid. Second, it can only clone to any cell in one of its 8 directions' vectors. Direction vector means all consecutive cells on the same direction, for example from position (A, B), east vector will generate (A, B + 1), (A, B + 2), (A, B + 3) and so on. In the below image, a super ant with 2 seconds remaining, can clone itself to 16 positions, 8 of them with distance 1 and 8 with distance 2.\n\n\n\n\nGiven the score value of each sugar unit in the grid, the total allowed time you have (the time starts once the first ant is placed) and a cell which the first super ant will start from it, can you write a program which calculates the score you will get if you used that cell?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with a line containing 3 integers separated by a single space N M S (1 \u2264 N, M \u2264 50) and (0 \u2264 S \u2264 500) representing the number of rows in the grid, the number of columns and the remaining time, respectively.\n\nFollowed by a line containing 2 integers separated by a single space I J (1 \u2264 I \u2264 N) and (1 \u2264 J \u2264 M) representing the row number and the column number of the cell which the first ant will start from it, respectively. Followed by N lines each line contains M integers separated by a single space, representing the value of each sugar unit in each cell in that row. Each integer in the grid will not be less than 0 and will not be greater than 9.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the score you will get at the end of the game, since the result may be very large, print it modulo 1,000,000,007 (109 + 7).\n\n\n\n\nSample Input:\n\n2\n5 6 1\n3 3\n0 2 4 6 8 1\n1 1 2 3 1 2\n1 4 5 6 3 4\n2 7 8 9 5 8\n3 5 8 0 7 0\n5 6 2\n3 3\n0 2 4 6 8 1\n1 1 2 3 1 2\n1 4 5 6 3 4\n2 7 8 9 5 8\n3 5 8 0 7 0\n\n\n\nSample Output:\n\n45\n349\n\n\n\nNotes:\n\n\nIn the first example, the first ant will collect one sugar unit from its cell with score 5. In addition, it will clone 8 ants in the 8 directions, each one of them can only get 1 sugar unit from its cell. The total score is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45.\n\nIn the second example, the first ant will clone itself to 8 cells at distance 2, with remaining time 0, and to 8 cells at distance 1 with remaining time 1 (thus each of the latter clones will further clone itself).\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-02-22 00:27:38 UTC\n\n\n\n\nTime Limit:\n\n\n120 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 6 1\n3 3\n0 2 4 6 8 1\n1 1 2 3 1 2\n1 4 5 6 3 4\n2 7 8 9 5 8\n3 5 8 0 7 0\n5 6 2\n3 3\n0 2 4 6 8 1\n1 1 2 3 1 2\n1 4 5 6 3 4\n2 7 8 9 5 8\n3 5 8 0 7 0\n\n\nSample Output:\n\n45\n349\n\n",
    "Description": "\nProblem Statement:\n\n\nHere is another game, this game is called the ants game. In this game, you are given a grid, with N rows and M columns. The rows are numbered from 1 to N from top to bottom, and the columns are numbered from 1 to M from left to right. Each cell in the grid has unlimited store of a certain type of sugar, each unit of sugar gives the player a specific score. The game is just 1 step, given 1 super ant, position it in any cell in the grid, and the ant will do its magical work to determine your score.\n\nOnce a super ant is placed in one of the cells, it does a systematic behavior to gather sugar units from the stores. If there is no remaining time, the ant gets 1 unit of sugar from the store of its cell and stops working. If there is some remaining time, it starts a magical operation, which is the ants cloning operation.\n\nThe super ant starts to clone itself to all the possible cells according to the current remaining time (all of its cloning operations start at the same time). It takes D seconds to clone itself to a cell that is far with D units. An ant at position (R1, C1) is far from the position (R2, C2) by max(|R1 - R2|, |C1 - C2|) units (where |X| means the absolute value of X). Once a new super ant is cloned, it behaves as a super ant by utilizing the remaining time.\n\nAt the end, when the remaining time is not enough for any ant to clone itself to any other cell, each ant will collect one unit of sugar from its cell and your score is the sum of the values of all the collected sugar units. Note that an ant can not clone itself to another cell with distance more than the current remaining time, and an ant can not clone itself to the same cell more than once, and it can not clone itself to its cell, and any cell can contain any number of ants at any time.\n\nOkay, which positions an ant can clone itself to them? First of all, an ant can not clone itself to a cell outside of the grid. Second, it can only clone to any cell in one of its 8 directions' vectors. Direction vector means all consecutive cells on the same direction, for example from position (A, B), east vector will generate (A, B + 1), (A, B + 2), (A, B + 3) and so on. In the below image, a super ant with 2 seconds remaining, can clone itself to 16 positions, 8 of them with distance 1 and 8 with distance 2.\n\n\n\n\nGiven the score value of each sugar unit in the grid, the total allowed time you have (the time starts once the first ant is placed) and a cell which the first super ant will start from it, can you write a program which calculates the score you will get if you used that cell?\n\n\n",
    "Title": "9. Super Ants",
    "Notes": "\nNotes:\n\n\nIn the first example, the first ant will collect one sugar unit from its cell with score 5. In addition, it will clone 8 ants in the 8 directions, each one of them can only get 1 sugar unit from its cell. The total score is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45.\n\nIn the second example, the first ant will clone itself to 8 cells at distance 2, with remaining time 0, and to 8 cells at distance 1 with remaining time 1 (thus each of the latter clones will further clone itself).\n\n",
    "URL": "https://a2oj.com/p?ID=9",
    "Time Limit": "120 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the score you will get at the end of the game, since the result may be very large, print it modulo 1,000,000,007 (109 + 7).\n\n\n"
  },
  "2050": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is on two lines. Each line contains one of the strings. Both strings are at least 1 and at most 10,000 lower case English letters (from 'a' to 'z').\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n132. Anagram String\n\n\n\n\n\nProblem Statement:\n\n\nTwo strings are considered anagrams of each other if they have the same characters (but maybe in different order). For example the strings \"bacdc\" and \"dcbac\" are anagrams, while the strings \"bacdc\" and \"dcbad\" are not.\n\nGiven two strings, you should find out the minimum number of characters deletions required to make the two strings anagrams. Any character can be deleted from any of the strings.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case is on two lines. Each line contains one of the strings. Both strings are at least 1 and at most 10,000 lower case English letters (from 'a' to 'z').\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the minimum number of  character deletions.\n\n\n\n\nSample Input:\n\n2\ncde\nabc\nabc\ncba\n\n\n\nSample Output:\n\n4\n0\n\n\n\nNotes:\n\n\nIn the first test case, we need to delete 4 characters to make both strings anagrams, 'd' and 'e' from the first string and 'b' and 'a' from the second string.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\ncde\nabc\nabc\ncba\n\n\nSample Output:\n\n4\n0\n\n",
    "Description": "\nProblem Statement:\n\n\nTwo strings are considered anagrams of each other if they have the same characters (but maybe in different order). For example the strings \"bacdc\" and \"dcbac\" are anagrams, while the strings \"bacdc\" and \"dcbad\" are not.\n\nGiven two strings, you should find out the minimum number of characters deletions required to make the two strings anagrams. Any character can be deleted from any of the strings.\n\n\n",
    "Title": "132. Anagram String",
    "Notes": "\nNotes:\n\n\nIn the first test case, we need to delete 4 characters to make both strings anagrams, 'd' and 'e' from the first string and 'b' and 'a' from the second string.\n\n",
    "URL": "https://a2oj.com/p?ID=132",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the minimum number of  character deletions.\n\n\n"
  },
  "2051": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 60). Followed by T test cases, each test case consists of two lines, the first line contains m and n separated by space as described above, the second line contains n integers indicates the numbers x1, x2, x3 .... xn separated by a space.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n135. Meet Mad Max\n\n\n\n\n\nProblem Statement:\n\n\nMax is a mad thief, who used to steal from the poor people to pay his taxes! But recently he decided not to pay anything anymore, he just wants to steal things and hide them in his 2 safes. Max knows some number theory, so he made a way to encrypt the 2 keys of the 2 safes (each safe has different key).\n\nAs a police officer, you chased Max and caught him, but Max now refuses to give you the keys. You made a deal with Max, that he will explain how to get the keys, and you will release him after 1000000 years!\n\nThe way to get the keys: You are given n (2 \u2264 n \u2264 100) distinct integers x1, x2, x3 .... xn (0 \u2264 xi \u2264 106). And an integer m (10 \u2264 m \u2264 106).\n\nFind the pair of numbers (k1, k2) from all xi's for which the value (k1 * k2) mod m is maximized, where k1 < k2. Then the keys are just the two numbers k1 and k2.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 60). Followed by T test cases, each test case consists of two lines, the first line contains m and n separated by space as described above, the second line contains n integers indicates the numbers x1, x2, x3 .... xn separated by a space.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print one line containing two ordered integers k1 and k2 (k1 < k2) separated by space. If there are multiple pairs that satisfy the conditions, print the pair with the lowest k1, if there are still multiple pairs, print the pair with the lowest k2.\n\n\n\n\nSample Input:\n\n3\n17 5\n56 88 108 150 38\n211 10\n2146 1275 894 2163 1723 1479 1304 1498 1296 2317\n5007 3\n99998 99997 99999\n\n\n\nSample Output:\n\n108 150\n2163 2317\n99998 99999\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n17 5\n56 88 108 150 38\n211 10\n2146 1275 894 2163 1723 1479 1304 1498 1296 2317\n5007 3\n99998 99997 99999\n\n\nSample Output:\n\n108 150\n2163 2317\n99998 99999\n\n",
    "Description": "\nProblem Statement:\n\n\nMax is a mad thief, who used to steal from the poor people to pay his taxes! But recently he decided not to pay anything anymore, he just wants to steal things and hide them in his 2 safes. Max knows some number theory, so he made a way to encrypt the 2 keys of the 2 safes (each safe has different key).\n\nAs a police officer, you chased Max and caught him, but Max now refuses to give you the keys. You made a deal with Max, that he will explain how to get the keys, and you will release him after 1000000 years!\n\nThe way to get the keys: You are given n (2 \u2264 n \u2264 100) distinct integers x1, x2, x3 .... xn (0 \u2264 xi \u2264 106). And an integer m (10 \u2264 m \u2264 106).\n\nFind the pair of numbers (k1, k2) from all xi's for which the value (k1 * k2) mod m is maximized, where k1 < k2. Then the keys are just the two numbers k1 and k2.\n\n\n",
    "Title": "135. Meet Mad Max",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=135",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print one line containing two ordered integers k1 and k2 (k1 < k2) separated by space. If there are multiple pairs that satisfy the conditions, print the pair with the lowest k1, if there are still multiple pairs, print the pair with the lowest k2.\n\n\n"
  },
  "2052": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input will contain an integer T, the number of test cases. T lines follow, each line contains a non-empty string which consists of at most 2000 upper case English letters.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n139. RLE Secret\n\n\n\n\n\nProblem Statement:\n\n\nMultimedia Systems is a fundamental course for computer science students. In this course students learn various methods of data encoding and compression (e.g. image compression) in order to exploit the redundancy that exists in natural pictures or other data and achieve a bandwidth reduction, thus data can be sent through a communication channel in a reasonable time.\n\nOne of the most popular methods of lossless data compression is known as RLE (Run Length Encoding). In this scheme we aim to reduce the number of symbols to be sent by only sending the first occurrence of a symbol in a continuous sequence of the same symbol, followed by a number (without leading zeros) which represents the count of its occurrences (it is also called a run length).\n\nIn this problem we will only deal with text data, because pictures encoding will be studied well later on at university.\n\nSuppose you have the string of upper case English letters \"ABBBCCCCEEDFFFFFFF\" it will be encoded by RLE to become like \"A1B3C4E2D1F7\" (you can notice the amount of reduction between the two strings).\n\n\n\n\nInput Format:\n\n\nThe first line of the input will contain an integer T, the number of test cases. T lines follow, each line contains a non-empty string which consists of at most 2000 upper case English letters.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print the RLE encoded string as described above.\n\n\n\n\nSample Input:\n\n2\nABBBCCCCEEDFFFFFFF\nACMSCPC\n\n\n\n\nSample Output:\n\nA1B3C4E2D1F7\nA1C1M1S1C1P1C1\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen University First Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\nABBBCCCCEEDFFFFFFF\nACMSCPC\n\n\n\nSample Output:\n\nA1B3C4E2D1F7\nA1C1M1S1C1P1C1\n\n\n",
    "Description": "\nProblem Statement:\n\n\nMultimedia Systems is a fundamental course for computer science students. In this course students learn various methods of data encoding and compression (e.g. image compression) in order to exploit the redundancy that exists in natural pictures or other data and achieve a bandwidth reduction, thus data can be sent through a communication channel in a reasonable time.\n\nOne of the most popular methods of lossless data compression is known as RLE (Run Length Encoding). In this scheme we aim to reduce the number of symbols to be sent by only sending the first occurrence of a symbol in a continuous sequence of the same symbol, followed by a number (without leading zeros) which represents the count of its occurrences (it is also called a run length).\n\nIn this problem we will only deal with text data, because pictures encoding will be studied well later on at university.\n\nSuppose you have the string of upper case English letters \"ABBBCCCCEEDFFFFFFF\" it will be encoded by RLE to become like \"A1B3C4E2D1F7\" (you can notice the amount of reduction between the two strings).\n\n\n",
    "Title": "139. RLE Secret",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=139",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print the RLE encoded string as described above.\n\n\n"
  },
  "2053": {
    "Input Description": "\nInput Format:\n\n\nthe input is a long encrypted message on multiple lines, each line has no more than 1000 characters, the message ends with a line of three stars  '***'.\nEach line contains at least one digit.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n148. Katama\n\n\n\n\n\nProblem Statement:\n\n\nThe highly advanced level of the modern 'Space Science' lets humans be more aware about what is going on in the space around them. We discovered a lot of interesting and mysterious things that we never thought about it in any time. One of these mysterious things is the existence of kind of highly advanced creatures in a planet so far from ours. \n\nThe human curiosity lets scientists to spy on them and try to decode their messages. For simplicity we call these creatures \"Katama \", don't ask me, I don't know why !. In a strange ways they know that we are spying on their messages and they tried to decode them. So now Katama is encrypting the message before sending it. But our brilliants discovered how the encrypting done by the Katama.\n\nKatama messages are only of digits. To irritate us; they reverse the order of them then insert random characters between these digits.\n\nIf the message is \n9 5 3\n\nThey reverse it\n3 5 9\n\nAnd then \n$we3zxc (5-gwev d%%sd 9x\n\n\n\n\nInput Format:\n\n\nthe input is a long encrypted message on multiple lines, each line has no more than 1000 characters, the message ends with a line of three stars  '***'.\nEach line contains at least one digit.\n\n\n\n\nOutput Format:\n\n\nFor each line of the input, output one line after the decryption. The digits must be separated by a single space.\n\n\n\n\nSample Input:\n\n/Tv;25>$c<\n9bRp(cA-yGs^9jY+#\\P?tl6:1%85m0F5l+!V5haQ,HOKHM\n***\n\n\n\nSample Output:\n\n5 2\n5 5 0 5 8 1 6 9 9\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-03-14 19:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University Second Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n/Tv;25>$c<\n9bRp(cA-yGs^9jY+#\\P?tl6:1%85m0F5l+!V5haQ,HOKHM\n***\n\n\nSample Output:\n\n5 2\n5 5 0 5 8 1 6 9 9\n\n",
    "Description": "\nProblem Statement:\n\n\nThe highly advanced level of the modern 'Space Science' lets humans be more aware about what is going on in the space around them. We discovered a lot of interesting and mysterious things that we never thought about it in any time. One of these mysterious things is the existence of kind of highly advanced creatures in a planet so far from ours. \n\nThe human curiosity lets scientists to spy on them and try to decode their messages. For simplicity we call these creatures \"Katama \", don't ask me, I don't know why !. In a strange ways they know that we are spying on their messages and they tried to decode them. So now Katama is encrypting the message before sending it. But our brilliants discovered how the encrypting done by the Katama.\n\nKatama messages are only of digits. To irritate us; they reverse the order of them then insert random characters between these digits.\n\nIf the message is \n9 5 3\n\nThey reverse it\n3 5 9\n\nAnd then \n$we3zxc (5-gwev d%%sd 9x\n\n\n",
    "Title": "148. Katama",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=148",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each line of the input, output one line after the decryption. The digits must be separated by a single space.\n\n\n"
  },
  "2054": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input is the number of test cases; it is approximately equal to 100. Each test case consists of many lines. The first line contains two integers p and n : p is the amount of money that Sokolombo has , n is the number of balls available in the store (n <= 100). Followed by n lines, each describes a ball. A ball is described by a character ('R' or 'G' or 'B') indicates its color and a positive integer indicates its price.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n149. Balls\n\n\n\n\n\nProblem Statement:\n\n\nDo you know 'Sokolombo'? \n\nSokolombo is a clever child that loves balls. He has an infinite number of balls of all colors. One day Sokolombo's mother gave him money to buy more balls. Sokolombo went to the store and took a look on the available balls. \n\nThere are many balls in different RGB colors (Red-Green-Blue). Each ball has a price. Sokolombo needs to know how many balls he can buy from each color. In other way; how many red balls he can buy if he spent all his money on red balls, and how many green balls he can buy if he spent all his money on green balls... And so on.\n\n\n\n\nInput Format:\n\n\nThe first line of input is the number of test cases; it is approximately equal to 100. Each test case consists of many lines. The first line contains two integers p and n : p is the amount of money that Sokolombo has , n is the number of balls available in the store (n <= 100). Followed by n lines, each describes a ball. A ball is described by a character ('R' or 'G' or 'B') indicates its color and a positive integer indicates its price.\n\n\n\n\nOutput Format:\n\n\nFor each test case output three lines specifying how many balls Sokolombo can buy from each color in the following format:\nRed balls = ?\nGreen balls = ?\nBlue balls = ?\n\nThe '?' is replaced with the real number of balls that Sokolombo can buy from that color.\n\nPrint a blank line after each test case.\n\n\n\n\nSample Input:\n\n2\n555 6\nG 19\nB 73\nR 10\nR 54\nR 93\nG 41\n939 9\nB 96\nB 54\nR 46\nR 89\nR 10\nR 49\nG 68\nB 92\nB 11\n\n\n\nSample Output:\n\nRed balls = 3\nGreen balls = 2\nBlue balls = 1\n\nRed balls = 4\nGreen balls = 1\nBlue balls = 4\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-03-14 19:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University Second Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n555 6\nG 19\nB 73\nR 10\nR 54\nR 93\nG 41\n939 9\nB 96\nB 54\nR 46\nR 89\nR 10\nR 49\nG 68\nB 92\nB 11\n\n\nSample Output:\n\nRed balls = 3\nGreen balls = 2\nBlue balls = 1\n\nRed balls = 4\nGreen balls = 1\nBlue balls = 4\n\n",
    "Description": "\nProblem Statement:\n\n\nDo you know 'Sokolombo'? \n\nSokolombo is a clever child that loves balls. He has an infinite number of balls of all colors. One day Sokolombo's mother gave him money to buy more balls. Sokolombo went to the store and took a look on the available balls. \n\nThere are many balls in different RGB colors (Red-Green-Blue). Each ball has a price. Sokolombo needs to know how many balls he can buy from each color. In other way; how many red balls he can buy if he spent all his money on red balls, and how many green balls he can buy if he spent all his money on green balls... And so on.\n\n\n",
    "Title": "149. Balls",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=149",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case output three lines specifying how many balls Sokolombo can buy from each color in the following format:\nRed balls = ?\nGreen balls = ?\nBlue balls = ?\n\nThe '?' is replaced with the real number of balls that Sokolombo can buy from that color.\n\nPrint a blank line after each test case.\n\n\n"
  },
  "2055": {
    "Input Description": "\nInput Format:\n\n\nThe input consist of multiple lines (<100,000), each has one integer n: 0 <= n <= 100000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n150. Fibo\n\n\n\n\n\nProblem Statement:\n\n\nYes, the Fibonacci sequence again and again, we all know the Fibonacci sequence, each term of it is the sum of the two previous terms. In this problem we don't care about the actual values of the Fibonacci sequence, we need to know just the last digit, too simple.\n\nF (0) = 0;\nF (1) = 1;\nF (n) = F (n-1) + F (n-2);\n\n\n\n\nInput Format:\n\n\nThe input consist of multiple lines (<100,000), each has one integer n: 0 <= n <= 100000.\n\n\n\n\nOutput Format:\n\n\nFor each line of the input, output the last digit of the term F (n).\n\n\n\n\nSample Input:\n\n5\n13\n70007\n\n\n\nSample Output:\n\n5\n3\n3\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-03-14 19:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University Second Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n5\n13\n70007\n\n\nSample Output:\n\n5\n3\n3\n\n\n",
    "Description": "\nProblem Statement:\n\n\nYes, the Fibonacci sequence again and again, we all know the Fibonacci sequence, each term of it is the sum of the two previous terms. In this problem we don't care about the actual values of the Fibonacci sequence, we need to know just the last digit, too simple.\n\nF (0) = 0;\nF (1) = 1;\nF (n) = F (n-1) + F (n-2);\n\n\n",
    "Title": "150. Fibo",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=150",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each line of the input, output the last digit of the term F (n).\n\n\n"
  },
  "2056": {
    "Input Description": "\nInput Format:\n\n\nThe input consists of many test cases, each test case is composed of two lines. On the first line of the input file there is a number indicates the number of test cases. The first line of each test case has two integer numbers (k, n): k is the target number, n <= 10 is the number of elements of the set. On the second line there are n integer numbers, each of these numbers is less than one hundred.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n151. Double S\n\n\n\n\n\nProblem Statement:\n\n\nSubsets Sum, or \"SS\" (double S) for shortcut, is a classical problem in computer science. \n\nWe are given a set of positive integer numbers; we have to know if there is a non-empty subset of this set that the sum of its elements is equal to a given number.\n\nEx: suppose the set is [3, 4, 7, 9, 10] and the target number is 20\nThe sum of elements of the subset [3, 7, 10] is equal to 20.\n\n\n\n\nInput Format:\n\n\nThe input consists of many test cases, each test case is composed of two lines. On the first line of the input file there is a number indicates the number of test cases. The first line of each test case has two integer numbers (k, n): k is the target number, n <= 10 is the number of elements of the set. On the second line there are n integer numbers, each of these numbers is less than one hundred.\n\n\n\n\nOutput Format:\n\n\nfor each test case print \"YES\" without quotes if there is a subset that satisfies the condition above, \"NO\" otherwise.\n\n\n\n\nSample Input:\n\n2\n1 5\n45 26 36 4 8 \n49 8\n49 9 5 37 0 42 15 19\n\n\n\nSample Output:\n\nNO\nYES\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-03-14 19:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University Second Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1 5\n45 26 36 4 8 \n49 8\n49 9 5 37 0 42 15 19\n\n\nSample Output:\n\nNO\nYES\n\n\n",
    "Description": "\nProblem Statement:\n\n\nSubsets Sum, or \"SS\" (double S) for shortcut, is a classical problem in computer science. \n\nWe are given a set of positive integer numbers; we have to know if there is a non-empty subset of this set that the sum of its elements is equal to a given number.\n\nEx: suppose the set is [3, 4, 7, 9, 10] and the target number is 20\nThe sum of elements of the subset [3, 7, 10] is equal to 20.\n\n\n",
    "Title": "151. Double S",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=151",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nfor each test case print \"YES\" without quotes if there is a subset that satisfies the condition above, \"NO\" otherwise.\n\n\n"
  },
  "2057": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. \nThe first line of the input will be a single integer T, the number of test cases (0 < T < 100). \nFollowed by the test cases, each test case is on one line. the line contains a single integer: n \n(1<=n<=500000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n152. Ahmad & Sally\n\n\n\n\n\nProblem Statement:\n\n\nAhmad is a mathematics scientist , he has a fiance`, her name is sally.\nAhmad loves her but he is always angry from her 'cause she makes many mistakes in math.\nFinally, he decided to test her, if she pass the test he will marry her , but if she won't he will leave her.\n\nthe test is:\nhe will give her one integer n, she must write a sequence  a1, a2, ..., an consisting of n integers\n\nIts elements are in increasing order. That is an inequality ai<aj holds for any two indices i,j (i<j).\nFor any two indices i and j (i<j), aj must not be divisible by ai.\n\nSally is afraid to fail, so she asked you to help her to write a program that solves the problem.\n\nas your grandmother says: How lucky is who gathered two heads on one pillow.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. \nThe first line of the input will be a single integer T, the number of test cases (0 < T < 100). \nFollowed by the test cases, each test case is on one line. the line contains a single integer: n \n(1<=n<=500000).\n\n\n\n\nOutput Format:\n\n\nfor each test case print a line that contains n space-separated integers a1 a2, ..., an \n(1<=ai<10^6), representing a possible sequence. \nNote, that each ai must not be greater than 999999 (10^6 - 1) or less than 1.\n\nIf there are multiple solutions print the lexicographically largest one.\n\nWhen comparing two different sequences of the same length, the lexicographically larger one is the one with a larger value on the smallest index where they differ.\n\n\n\n\nSample Input:\n\n1\n2\n\n\n\nSample Output:\n\n999998 999999\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-03-14 19:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Damascus University Second Training Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n2\n\n\nSample Output:\n\n999998 999999\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmad is a mathematics scientist , he has a fiance`, her name is sally.\nAhmad loves her but he is always angry from her 'cause she makes many mistakes in math.\nFinally, he decided to test her, if she pass the test he will marry her , but if she won't he will leave her.\n\nthe test is:\nhe will give her one integer n, she must write a sequence  a1, a2, ..., an consisting of n integers\n\nIts elements are in increasing order. That is an inequality ai<aj holds for any two indices i,j (i<j).\nFor any two indices i and j (i<j), aj must not be divisible by ai.\n\nSally is afraid to fail, so she asked you to help her to write a program that solves the problem.\n\nas your grandmother says: How lucky is who gathered two heads on one pillow.\n\n\n",
    "Title": "152. Ahmad & Sally",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=152",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nfor each test case print a line that contains n space-separated integers a1 a2, ..., an \n(1<=ai<10^6), representing a possible sequence. \nNote, that each ai must not be greater than 999999 (10^6 - 1) or less than 1.\n\nIf there are multiple solutions print the lexicographically largest one.\n\nWhen comparing two different sequences of the same length, the lexicographically larger one is the one with a larger value on the smallest index where they differ.\n\n\n"
  },
  "2058": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains an integer\u00a0T (1 <= 20 <= T) followed by T test cases.\nEach test case contains a positive integer\u00a0N\u00a0[1 <= N <= 105] followed by\u00a0N integers [0 <= Xi\u00a0<= 109] separated by spaces (see sample input for more clarification).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n154. Khairy and Gold Alloys\n\n\n\n\n\nProblem Statement:\n\n\nKhairy is a small guy who likes gold very much, but he has a problem in his eyes and the word \"WAL3A\" (WAL3A in arabic means \"Firing\"), whenever he likes something very much sooner or later it is destroyed by any means (Please don't impress him with something you want :|) \n\nOne day Khairy visited the National Museum and saw a Grid with infinite height and N columns and each column i contains Xi Gold Alloys. No empty cells between Alloys in the same column. \n\nKhairy is a short guy, so he only sees the first row of the grid (High things may survive), also he is only impressed by at least two Gold Alloys adjacent to each other in a row, so if he found an Alloy alone in the row, he ignores it, else he would shout \"WAL3AAAAAAAA\". \n\nUnfortunately all Gold Alloys that impress Khairy in the 1st row are destroyed and disappeard :S, consequently the Alloys of the same columns above the destroyed Alloys fall to the the cell which is directly below it (each affected column height is decreased by 1 unit). Khairy continues saying \"WAL3A\" till he finds the first row not impressing anymore. \n\nThe example below Khairy would say \"WAL3A\" twice and 7 gold alloys are destroyed. \n\n\nOf course the museum lost a fotune during Khairy's visit, so could you help the government find how many Gold Alloys are destroyed by Khairy.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains an integer\u00a0T (1 <= 20 <= T) followed by T test cases.\nEach test case contains a positive integer\u00a0N\u00a0[1 <= N <= 105] followed by\u00a0N integers [0 <= Xi\u00a0<= 109] separated by spaces (see sample input for more clarification).\n\n\n\n\nOutput Format:\n\n\nFor each test case output one line contains\u00a0how many Gold Alloys are destroyed by Khairy.\n\n\n\n\nSample Input:\n\n2\n5\n1 2 2 1 5\n3\n7 7 7\n\n\n\n\nSample Output:\n\n7\n21\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\neagle93\n\n\n\n\nAdded at:\n\n\n2014-03-28 02:39:11 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5\n1 2 2 1 5\n3\n7 7 7\n\n\n\nSample Output:\n\n7\n21\n\n",
    "Description": "\nProblem Statement:\n\n\nKhairy is a small guy who likes gold very much, but he has a problem in his eyes and the word \"WAL3A\" (WAL3A in arabic means \"Firing\"), whenever he likes something very much sooner or later it is destroyed by any means (Please don't impress him with something you want :|) \n\nOne day Khairy visited the National Museum and saw a Grid with infinite height and N columns and each column i contains Xi Gold Alloys. No empty cells between Alloys in the same column. \n\nKhairy is a short guy, so he only sees the first row of the grid (High things may survive), also he is only impressed by at least two Gold Alloys adjacent to each other in a row, so if he found an Alloy alone in the row, he ignores it, else he would shout \"WAL3AAAAAAAA\". \n\nUnfortunately all Gold Alloys that impress Khairy in the 1st row are destroyed and disappeard :S, consequently the Alloys of the same columns above the destroyed Alloys fall to the the cell which is directly below it (each affected column height is decreased by 1 unit). Khairy continues saying \"WAL3A\" till he finds the first row not impressing anymore. \n\nThe example below Khairy would say \"WAL3A\" twice and 7 gold alloys are destroyed. \n\n\nOf course the museum lost a fotune during Khairy's visit, so could you help the government find how many Gold Alloys are destroyed by Khairy.\n\n\n",
    "Title": "154. Khairy and Gold Alloys",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=154",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case output one line contains\u00a0how many Gold Alloys are destroyed by Khairy.\n\n\n"
  },
  "2059": {
    "Input Description": "\nInput Format:\n\n\nInput starts with an integer T (T \u2264 200,000), denoting the number of test cases, followed by the test cases. Each case is one line contains one integer N (1 \u2264 N \u2264 109).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n155. Easy Sum-2\n\n\n\n\n\nProblem Statement:\n\n\nGiven N. You have to find S. Where S=20+21+22+...........+2N\n\n\n\nInput Format:\n\n\nInput starts with an integer T (T \u2264 200,000), denoting the number of test cases, followed by the test cases. Each case is one line contains one integer N (1 \u2264 N \u2264 109).\n\n\n\n\nOutput Format:\n\n\nFor each case, print  S in a single line. Since S can be large so output S modulo 33,554,431.\n\n\n\n\nSample Input:\n\n2\n1\n8\n\n\n\n\nSample Output:\n\n3\n511\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nAlim14\n\n\n\n\nAdded at:\n\n\n2014-03-29 06:15:17 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1\n8\n\n\n\nSample Output:\n\n3\n511\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven N. You have to find S. Where S=20+21+22+...........+2N\n\n",
    "Title": "155. Easy Sum-2",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=155",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each case, print  S in a single line. Since S can be large so output S modulo 33,554,431.\n\n\n"
  },
  "2060": {
    "Input Description": "\nInput Format:\n\n\nThe input consist of many cases, each case contains two numbers 0<n, m<=100 the number of rows and columns in the grid respectively, input ends when n=m=-1\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n157. Count Paths\n\n\n\n\n\nProblem Statement:\n\n\nAhmad is a mathematics scientist, he has many researches and papers on counting theory, he is working now on a new project and he needs your help to calculate the number of paths in a rectangular grid to move from the upper-left corner to bottom-right corner. He can move only down and right.\n\n\n\n\nInput Format:\n\n\nThe input consist of many cases, each case contains two numbers 0<n, m<=100 the number of rows and columns in the grid respectively, input ends when n=m=-1\n\n\n\n\nOutput Format:\n\n\nFor each case print one line the number of paths MOD 1000000007\n\n\n\n\nSample Input:\n\n1 2\n2 2\n-1 -1\n\n\n\n\nSample Output:\n\n3\n6\n\n\n\n\nNotes:\n\n\nExplanation of the second case:\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-05-19 20:19:42 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen-CPC 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1 2\n2 2\n-1 -1\n\n\n\nSample Output:\n\n3\n6\n\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmad is a mathematics scientist, he has many researches and papers on counting theory, he is working now on a new project and he needs your help to calculate the number of paths in a rectangular grid to move from the upper-left corner to bottom-right corner. He can move only down and right.\n\n\n",
    "Title": "157. Count Paths",
    "Notes": "\nNotes:\n\n\nExplanation of the second case:\n\n\n\n",
    "URL": "https://a2oj.com/p?ID=157",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each case print one line the number of paths MOD 1000000007\n\n\n"
  },
  "2061": {
    "Input Description": "\nInput Format:\n\n\nThe first line is the number of test cases, there will be at most 100 test cases. Each test case is presented on one line that starts with the grid?s size (Max size is 19), a space, then the message; the message may contains any printable character, its length is at least one character.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n158. 3000 BC\n\n\n\n\n\nProblem Statement:\n\n\nYears ago, when kings send messages to their allies; the most important thing is to deny any person to understand the content of the message if he can get it. They used a sophisticated method to encrypt their messages. After writing the message they put it in a square grid, and then they traverse the grid by its diagonals one by one and reformate the message. If the message length is smaller than the grid?s cell count; fill the remaining with ?*?, if longer; ignore the rest of the message.\n\nExample:\n\nThe message is ?Tomorrow, we will invade Sparta!? and the grid dimensions is 6\n\n\n\n\n\nThen the letter should be printed in the following order:\n\n\n\n\n\nWhen the messages got too long, the process became too boring, so they need a computer program to do this job.\nThen the message will be:\n\nToomw o,wir in rwlvSaelap! da*er*t**\n\n\n\n\nInput Format:\n\n\nThe first line is the number of test cases, there will be at most 100 test cases. Each test case is presented on one line that starts with the grid?s size (Max size is 19), a space, then the message; the message may contains any printable character, its length is at least one character.\n\n\n\n\nOutput Format:\n\n\nFor each test case output the encrypted message.\n\n\n\n\nSample Input:\n\n2\n6 Tomorrow, we will invade Sparta!\n2 Hello\n\n\n\n\nSample Output:\n\nToomw o,wir in rwlvSaelap! da*er*t**\nHell\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-05-19 20:19:46 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen-CPC 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n6 Tomorrow, we will invade Sparta!\n2 Hello\n\n\n\nSample Output:\n\nToomw o,wir in rwlvSaelap! da*er*t**\nHell\n\n\n",
    "Description": "\nProblem Statement:\n\n\nYears ago, when kings send messages to their allies; the most important thing is to deny any person to understand the content of the message if he can get it. They used a sophisticated method to encrypt their messages. After writing the message they put it in a square grid, and then they traverse the grid by its diagonals one by one and reformate the message. If the message length is smaller than the grid?s cell count; fill the remaining with ?*?, if longer; ignore the rest of the message.\n\nExample:\n\nThe message is ?Tomorrow, we will invade Sparta!? and the grid dimensions is 6\n\n\n\n\n\nThen the letter should be printed in the following order:\n\n\n\n\n\nWhen the messages got too long, the process became too boring, so they need a computer program to do this job.\nThen the message will be:\n\nToomw o,wir in rwlvSaelap! da*er*t**\n\n\n",
    "Title": "158. 3000 BC",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=158",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case output the encrypted message.\n\n\n"
  },
  "2062": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains a single integer T, (1 \u2264 T \u2264 1000), which is the number of test cases. Each case consists of a single line containing 10 integers whose values are between 1 and 1000 inclusive.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n159. Nth Smallest Value\n\n\n\n\n\nProblem Statement:\n\n\nFor this problem, you will write a program that prints the Nth smallest value in a fixed sized array of integers. To make things simple, N will be 2 and the array will always be have 10 decimal integer values.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains a single integer T, (1 \u2264 T \u2264 1000), which is the number of test cases. Each case consists of a single line containing 10 integers whose values are between 1 and 1000 inclusive.\n\n\n\n\nOutput Format:\n\n\nFor each case, print on one line the 2nd value.\n\n\n\n\nSample Input:\n\n3\n1 2 3 4 5 6 7 8 9 1000\n338 304 619 95 343 496 489 116 98 127\n1 1 2 3 4 5 6 7 8 9\n\n\n\n\nSample Output:\n\n2\n98\n1\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-05-19 20:19:48 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen-CPC 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1 2 3 4 5 6 7 8 9 1000\n338 304 619 95 343 496 489 116 98 127\n1 1 2 3 4 5 6 7 8 9\n\n\n\nSample Output:\n\n2\n98\n1\n\n\n",
    "Description": "\nProblem Statement:\n\n\nFor this problem, you will write a program that prints the Nth smallest value in a fixed sized array of integers. To make things simple, N will be 2 and the array will always be have 10 decimal integer values.\n\n\n",
    "Title": "159. Nth Smallest Value",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=159",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each case, print on one line the 2nd value.\n\n\n"
  },
  "2063": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). \nFollowed by the test cases, each test case contains a number N (1 <= N <= 1000) representing the number of lines that follows.\nEach line contains 4 space separated integers (1 <= F, Y, X, H <= 10) means in the floor number F room (Y, X) there are H hostages.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n160. Commandos\n\n\n\n\n\nProblem Statement:\n\n\nA commando is a soldier of an elite light infantry often specializing in amphibious landings, abseiling or parachuting.\nThis time our Commando unit wants to free as many hostages as it could from a hotel in Byteland, This hotel contains 10 identical floors numbered from 1 to 10 each one is a suite of 10 by 10 symmetric square rooms, our unit can move from a room (F,Y,X) to the room right next to it (F,Y,X+1) or front next to it (F,Y+1,X) and it can also use the cooling system to move to the room underneath it (F-1,Y,X).\nKnowing that our unit parachuted successfully in room (1, 1) in floor 10 with a map of hostages locations try to calculate the maximum possible hostages they could save.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). \nFollowed by the test cases, each test case contains a number N (1 <= N <= 1000) representing the number of lines that follows.\nEach line contains 4 space separated integers (1 <= F, Y, X, H <= 10) means in the floor number F room (Y, X) there are H hostages.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line, a single number representing the maximum possible hostages that they could save.\n\n\n\n\nSample Input:\n\n2\n3\n10 5 5 1\n10 5 9 5\n10 9 5 9\n3\n1 5 5 1\n5 5 9 5\n5 9 5 8\n\n\n\n\nSample Output:\n\n10\n8\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-05-19 20:19:50 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen-CPC 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3\n10 5 5 1\n10 5 9 5\n10 9 5 9\n3\n1 5 5 1\n5 5 9 5\n5 9 5 8\n\n\n\nSample Output:\n\n10\n8\n\n\n",
    "Description": "\nProblem Statement:\n\n\nA commando is a soldier of an elite light infantry often specializing in amphibious landings, abseiling or parachuting.\nThis time our Commando unit wants to free as many hostages as it could from a hotel in Byteland, This hotel contains 10 identical floors numbered from 1 to 10 each one is a suite of 10 by 10 symmetric square rooms, our unit can move from a room (F,Y,X) to the room right next to it (F,Y,X+1) or front next to it (F,Y+1,X) and it can also use the cooling system to move to the room underneath it (F-1,Y,X).\nKnowing that our unit parachuted successfully in room (1, 1) in floor 10 with a map of hostages locations try to calculate the maximum possible hostages they could save.\n\n\n",
    "Title": "160. Commandos",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=160",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line, a single number representing the maximum possible hostages that they could save.\n\n\n"
  },
  "2064": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains a single integer P, (1 \u2264 P \u2264 1000), which is the number of test cases that follow. Each test case is a single line that contains up to 100 decimal digits which is the input value.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n161. The Photographer\n\n\n\n\n\nProblem Statement:\n\n\nTom is a very talented photographer; he has his own Facebook photography page with many likes and followers.\nAlthough Tom became famous he never forgot his friends; when a group of friends wants to take a photo, Tom (as a professional) first assign a decimal digit (1-9) for each person repressing his height in some kind of photographers units.\nTom needs to take photos in every possible order of the people considering the heights (it?s also a photographer?s thing) i.e. a permutation of the heights.\nWe can describe the order of these people (heights in particular) using a string of decimal digits.\nIn the first photo he puts people in order that the value of the describing string as a decimal number is the smallest possible. In the next photo he puts people in order that the value of the describing string as a decimal number is the next smallest possible. And he keep repeating the last step until he reaches the value of the describing string as a decimal number is biggest possible, when he finishes that, he is done taking photos of these group of people, Photography isn?t as easy as you thought!\nHowever, when the number of people is big, the task become very hard. Especially that tom isn?t good at math as much as he is good at photography.\nSo you need to help Tom take the next photo, he gives you the current order (permutation) of the heights and you give him the order for the next photo or you tell him that he?s finally done.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains a single integer P, (1 \u2264 P \u2264 1000), which is the number of test cases that follow. Each test case is a single line that contains up to 100 decimal digits which is the input value.\n\n\n\n\nOutput Format:\n\n\nFor each data set there is one line of output. If there is no next photo, the output should be the string ?DONE? without quotes. If there is more photo(s) to take, the output should be next larger permutation of heights.\n\n\n\n\nSample Input:\n\n3\n123\n521\n279134399742\n\n\n\n\nSample Output:\n\n132\nDONE\n279134423799\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-05-19 20:19:52 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen-CPC 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n123\n521\n279134399742\n\n\n\nSample Output:\n\n132\nDONE\n279134423799\n\n\n",
    "Description": "\nProblem Statement:\n\n\nTom is a very talented photographer; he has his own Facebook photography page with many likes and followers.\nAlthough Tom became famous he never forgot his friends; when a group of friends wants to take a photo, Tom (as a professional) first assign a decimal digit (1-9) for each person repressing his height in some kind of photographers units.\nTom needs to take photos in every possible order of the people considering the heights (it?s also a photographer?s thing) i.e. a permutation of the heights.\nWe can describe the order of these people (heights in particular) using a string of decimal digits.\nIn the first photo he puts people in order that the value of the describing string as a decimal number is the smallest possible. In the next photo he puts people in order that the value of the describing string as a decimal number is the next smallest possible. And he keep repeating the last step until he reaches the value of the describing string as a decimal number is biggest possible, when he finishes that, he is done taking photos of these group of people, Photography isn?t as easy as you thought!\nHowever, when the number of people is big, the task become very hard. Especially that tom isn?t good at math as much as he is good at photography.\nSo you need to help Tom take the next photo, he gives you the current order (permutation) of the heights and you give him the order for the next photo or you tell him that he?s finally done.\n\n\n",
    "Title": "161. The Photographer",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=161",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each data set there is one line of output. If there is no next photo, the output should be the string ?DONE? without quotes. If there is more photo(s) to take, the output should be next larger permutation of heights.\n\n\n"
  },
  "2065": {
    "Input Description": "\nInput Format:\n\n\nThe input consists of multiple test cases, the first line has an integer (t<100) represents the number of test cases. Each test case starts with a line containing two integers (0<d<=50, 0<n<=50): d is the max distance that Milo can jump, n is the number of floating wood circles. The following n line each contains two integers (0<x, y<50) represent the coordinate of a single circle (circle is represented as points, there is no radius).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n162. Frog\n\n\n\n\n\nProblem Statement:\n\n\nEvery weekend, our friend Milo visits his parents. In his way, there is a river. Every time Milo crosses the river, he thinks about how he can cross it in a minimal number of jumps! Yes, our friend is a frog! He needs your help to find the best steps.\nMany wood circles float in the river in an integer coordinate, the part of the river that has these floating circles is 50m * 50m. Milo starts from the middle of the left side (at point (25, 0)) and want to go to the middle of the other side (at point (25, 50)), noting that Milo can't walk on any river sides. Milo can jump to a limited number of meters.\n\n\n\n\nInput Format:\n\n\nThe input consists of multiple test cases, the first line has an integer (t<100) represents the number of test cases. Each test case starts with a line containing two integers (0<d<=50, 0<n<=50): d is the max distance that Milo can jump, n is the number of floating wood circles. The following n line each contains two integers (0<x, y<50) represent the coordinate of a single circle (circle is represented as points, there is no radius).\n\n\n\n\nOutput Format:\n\n\nFor each test case outputs the minimal number of required jumps to cross the river or \"Impossible\" without quotes in case there is no way to cross the river.\n\n\n\n\nSample Input:\n\n2\n2 3\n5 5\n10 10\n20 20\n25 5\n15 5\n20 15\n20 35\n35 5\n20 20\n\n\n\n\nSample Output:\n\nImpossible\n3\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-05-19 20:19:54 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen-CPC 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 3\n5 5\n10 10\n20 20\n25 5\n15 5\n20 15\n20 35\n35 5\n20 20\n\n\n\nSample Output:\n\nImpossible\n3\n\n\n",
    "Description": "\nProblem Statement:\n\n\nEvery weekend, our friend Milo visits his parents. In his way, there is a river. Every time Milo crosses the river, he thinks about how he can cross it in a minimal number of jumps! Yes, our friend is a frog! He needs your help to find the best steps.\nMany wood circles float in the river in an integer coordinate, the part of the river that has these floating circles is 50m * 50m. Milo starts from the middle of the left side (at point (25, 0)) and want to go to the middle of the other side (at point (25, 50)), noting that Milo can't walk on any river sides. Milo can jump to a limited number of meters.\n\n\n",
    "Title": "162. Frog",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=162",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case outputs the minimal number of required jumps to cross the river or \"Impossible\" without quotes in case there is no way to cross the river.\n\n\n"
  },
  "2066": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains the number of the test cases T (<=100). Each test case consists of many lines. The first line contains 2 numbers N M (1<=N, M<=100) as described in the problem statements, the next N lines, each contains exactly M positive integers representing the points in each cell (<=10^5).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n163. Dancing With Numbers\n\n\n\n\n\nProblem Statement:\n\n\nFillip is a professional dancer; he is very good at dancing that he invented his own dancing game. Unfortunately, he likes numbers too, therefor his game is full of dancing and full of numbers, he calls it \"Dancing with the Numbers\"\nThe game is very simple, there is a two dimensional dance floor divided into square cells,  the dancer starts in the first cell and have to dance until he reach the final cell, in each dance move, he must move from his current cell to any adjacent cell (left, right, up or down) that he hasn't visited before. The problem is that each cell the dancer visits in his way, adds some points to his score, each cell has its own number of points. For this game the lower the score the better, you need to minimize your score.\nFillip needs your help to determine the lowest possible score for a specific dance floor.\nGiven N*M dancer floor and the number of points in each cell. For simplicity the starting cell will always be the cell (1, 1) and the final cell will be the cell (n, m).\nYou need to find the lowest possible score.\n\n\n\n\nInput Format:\n\n\nThe first line contains the number of the test cases T (<=100). Each test case consists of many lines. The first line contains 2 numbers N M (1<=N, M<=100) as described in the problem statements, the next N lines, each contains exactly M positive integers representing the points in each cell (<=10^5).\n\n\n\n\nOutput Format:\n\n\nFor each test case print one line contains one integer representing the lowest possible score.\n\n\n\n\nSample Input:\n\n1\n3 3\n1 3 4\n1 2 4\n1 2 3\n\n\n\n\nSample Output:\n\n8\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-05-19 20:19:56 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen-CPC 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3 3\n1 3 4\n1 2 4\n1 2 3\n\n\n\nSample Output:\n\n8\n\n",
    "Description": "\nProblem Statement:\n\n\nFillip is a professional dancer; he is very good at dancing that he invented his own dancing game. Unfortunately, he likes numbers too, therefor his game is full of dancing and full of numbers, he calls it \"Dancing with the Numbers\"\nThe game is very simple, there is a two dimensional dance floor divided into square cells,  the dancer starts in the first cell and have to dance until he reach the final cell, in each dance move, he must move from his current cell to any adjacent cell (left, right, up or down) that he hasn't visited before. The problem is that each cell the dancer visits in his way, adds some points to his score, each cell has its own number of points. For this game the lower the score the better, you need to minimize your score.\nFillip needs your help to determine the lowest possible score for a specific dance floor.\nGiven N*M dancer floor and the number of points in each cell. For simplicity the starting cell will always be the cell (1, 1) and the final cell will be the cell (n, m).\nYou need to find the lowest possible score.\n\n\n",
    "Title": "163. Dancing With Numbers",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=163",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print one line contains one integer representing the lowest possible score.\n\n\n"
  },
  "2067": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The \ufb01rst line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case contains one integer R (1 <= R <= 100) representing the radius of the colony.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n164. Circle Of Death\n\n\n\n\n\nProblem Statement:\n\n\nAnts are social insects, which means they live in large colonies or groups, some colonies consist of millions of ants, if you watch ants for any length of time you will see that they really do communicate with each other and very e\ufb00ectively too, they communicate by touching each other with their antennae, ants also use chemicals called pheromones to leave scent trails for other ants to follow.\nA side e\ufb00ect of the self-organizing structure of ant colonies is ant mill a phenomenon in which, the ants seem to have gone insane, walking in an endless circle together, the cause of this behavior is the technology ant societies use for ground navigation, they follow pheromone trails on the ground laid down by other ants, or they simply follow other ants visually, the system works well normally, a scout ant goes out and \ufb01nds something, other ants go back to get more by following the scent trail, or by following each other.\nHowever, if a loop created, the ants will march blindly, circling until they die.\n\n\n\n\n\nAn ant got mad of its colony and decided to make massacre, this ant will surround its colony by a cycle of pheromone forcing most of its members to run amok and die tragically, given the radius of this colony try to help nature getting rid of these undeveloped su\ufb03ciently creatures by calculating the length of this pheromone circle of death.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The \ufb01rst line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case contains one integer R (1 <= R <= 100) representing the radius of the colony.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line, a single number representing the expected length of pheromone line needed, rounded to two decimal places.\n\n\n\n\nSample Input:\n\n1\n1\n\n\n\n\nSample Output:\n\n6.28\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-05-19 20:19:58 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen-CPC 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n1\n\n\n\nSample Output:\n\n6.28\n\n",
    "Description": "\nProblem Statement:\n\n\nAnts are social insects, which means they live in large colonies or groups, some colonies consist of millions of ants, if you watch ants for any length of time you will see that they really do communicate with each other and very e\ufb00ectively too, they communicate by touching each other with their antennae, ants also use chemicals called pheromones to leave scent trails for other ants to follow.\nA side e\ufb00ect of the self-organizing structure of ant colonies is ant mill a phenomenon in which, the ants seem to have gone insane, walking in an endless circle together, the cause of this behavior is the technology ant societies use for ground navigation, they follow pheromone trails on the ground laid down by other ants, or they simply follow other ants visually, the system works well normally, a scout ant goes out and \ufb01nds something, other ants go back to get more by following the scent trail, or by following each other.\nHowever, if a loop created, the ants will march blindly, circling until they die.\n\n\n\n\n\nAn ant got mad of its colony and decided to make massacre, this ant will surround its colony by a cycle of pheromone forcing most of its members to run amok and die tragically, given the radius of this colony try to help nature getting rid of these undeveloped su\ufb03ciently creatures by calculating the length of this pheromone circle of death.\n\n\n",
    "Title": "164. Circle Of Death",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=164",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line, a single number representing the expected length of pheromone line needed, rounded to two decimal places.\n\n\n"
  },
  "2068": {
    "Input Description": "\nInput Format:\n\n\nThe first line in input is t \u2264 1000 the number of test cases, followed by t lines.\nEach line describes a test case, each test case contains two integers n and k separated by one space (0\u2264n\u226410^9 ,0\u2264k\u22643).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n165. Black Sum\n\n\n\n\n\nProblem Statement:\n\n\nNo need for introducing the BlackSum problem, just read its description below?\nThe problem asks to calculate two types of the sum of integer series, those two types are:\nThe sum of consecutive integers to known power, i.e. the sum:\n\n\n\nThe sum of consecutive sign-alternating integers to known power, i.e. the sum:\n\n\n\nAs a matter of simplicity, we will consider that 0\u2264k\u22643.\nAnd as the expected output might be very large, you should print the sum mod 10^9+7.\nFor example, if k=2 and n=3 then:\nThe first type sum will be 1^2 + 2^2 + 3^2 = 14.\nThe second type sum will be \u22121^2 + 2^2 \u2212 3^2 = \u22126 \u2261 1000000001(MOD 10^9+7)\n\n\n\n\nInput Format:\n\n\nThe first line in input is t \u2264 1000 the number of test cases, followed by t lines.\nEach line describes a test case, each test case contains two integers n and k separated by one space (0\u2264n\u226410^9 ,0\u2264k\u22643).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print two integers in a single line, the first type sum and the second type sum, separated by a single space.\n\n\n\n\nSample Input:\n\n1\n3 2\n\n\n\nSample Output:\n\n14 1000000001\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-05-19 20:20:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Tishreen-CPC 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3 2\n\n\nSample Output:\n\n14 1000000001\n\n",
    "Description": "\nProblem Statement:\n\n\nNo need for introducing the BlackSum problem, just read its description below?\nThe problem asks to calculate two types of the sum of integer series, those two types are:\nThe sum of consecutive integers to known power, i.e. the sum:\n\n\n\nThe sum of consecutive sign-alternating integers to known power, i.e. the sum:\n\n\n\nAs a matter of simplicity, we will consider that 0\u2264k\u22643.\nAnd as the expected output might be very large, you should print the sum mod 10^9+7.\nFor example, if k=2 and n=3 then:\nThe first type sum will be 1^2 + 2^2 + 3^2 = 14.\nThe second type sum will be \u22121^2 + 2^2 \u2212 3^2 = \u22126 \u2261 1000000001(MOD 10^9+7)\n\n\n",
    "Title": "165. Black Sum",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=165",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print two integers in a single line, the first type sum and the second type sum, separated by a single space.\n\n\n"
  },
  "2069": {
    "Input Description": "\nInput Format:\n\n\nThe first number in the input file is an integer n (1 \u0014 <= n <=\u0014 5000) representing the number of segments.\nThe rest of file is filled by 2n integers (x1 y1 x2 y2 . . .) meaning coordinates of two points confining i segment.\nAll coordinates do not exceed (109) by an absolute value.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n166. Segments\n\n\n\n\n\nProblem Statement:\n\n\nYou are to find the total length of union of n segments located on a horizontal line.\n\n\n\n\nInput Format:\n\n\nThe first number in the input file is an integer n (1 \u0014 <= n <=\u0014 5000) representing the number of segments.\nThe rest of file is filled by 2n integers (x1 y1 x2 y2 . . .) meaning coordinates of two points confining i segment.\nAll coordinates do not exceed (109) by an absolute value.\n\n\n\n\nOutput Format:\n\n\nPrint only one number ? the total length of union of given segments.\n\n\n\n\nSample Input:\n\n3 \n0 5\n3 6\n7 8\n\n\n\n\nSample Output:\n\n7\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\neagle93\n\n\n\n\nAdded at:\n\n\n2014-07-06 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3 \n0 5\n3 6\n7 8\n\n\n\nSample Output:\n\n7\n\n\n",
    "Description": "\nProblem Statement:\n\n\nYou are to find the total length of union of n segments located on a horizontal line.\n\n\n",
    "Title": "166. Segments",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=166",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nPrint only one number ? the total length of union of given segments.\n\n\n"
  },
  "2070": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input file contains one integer number n (1 \u0014<= n <= \u0014 30000).\nThe next n lines contain four integer numbers each: x1 y1 x2 y2, where (x1, y1) are coordinates of the upper-left corner of the window, and (x2, y2) are ones for the down-right.\nAll coordinates do not exceed 5000 by an absolute value. Note that the y coordinates on the display grow downwards.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n167. Windows\n\n\n\n\n\nProblem Statement:\n\n\nN rectangular windows have appeared on the screen. \nYour task is to find the area covered simultaneously by all windows displayed.\n\n\n\n\nInput Format:\n\n\nThe first line of the input file contains one integer number n (1 \u0014<= n <= \u0014 30000).\nThe next n lines contain four integer numbers each: x1 y1 x2 y2, where (x1, y1) are coordinates of the upper-left corner of the window, and (x2, y2) are ones for the down-right.\nAll coordinates do not exceed 5000 by an absolute value. Note that the y coordinates on the display grow downwards.\n\n\n\n\nOutput Format:\n\n\nWrite to the output file a single integer number ? the area covered by all the windows displayed.\n\n\n\n\nSample Input:\n\n2\n0 0 3 2\n1 1 4 4\n\n\n\n\nSample Output:\n\n2\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\neagle93\n\n\n\n\nAdded at:\n\n\n2014-07-06 07:00:01 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n0 0 3 2\n1 1 4 4\n\n\n\nSample Output:\n\n2\n\n\n",
    "Description": "\nProblem Statement:\n\n\nN rectangular windows have appeared on the screen. \nYour task is to find the area covered simultaneously by all windows displayed.\n\n\n",
    "Title": "167. Windows",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=167",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nWrite to the output file a single integer number ? the area covered by all the windows displayed.\n\n\n"
  },
  "2071": {
    "Input Description": "\nInput Format:\n\n\nInput file contains one integer number n, (1 \u0014<= n <=\u0014 10).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n168. Parentheses\n\n\n\n\n\nProblem Statement:\n\n\nGenerate correct parenthesis sequences in lexicographic order.\nCorrect parenthesis sequences are given by the rule:\nS ::= ()|(S)|SS Lexicographic order is imposed by assuming '(' less than ')'.\n\n\n\n\nInput Format:\n\n\nInput file contains one integer number n, (1 \u0014<= n <=\u0014 10).\n\n\n\n\nOutput Format:\n\n\nOutput all correct parenthesis sequences of length 2n, one sequence a line, without spaces.\n\n\n\n\nSample Input:\n\n3\n\n\n\n\nSample Output:\n\n((()))\n(()())\n(())()\n()(())\n()()()\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\neagle93\n\n\n\n\nAdded at:\n\n\n2014-07-06 07:00:02 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n\n\n\nSample Output:\n\n((()))\n(()())\n(())()\n()(())\n()()()\n\n\n",
    "Description": "\nProblem Statement:\n\n\nGenerate correct parenthesis sequences in lexicographic order.\nCorrect parenthesis sequences are given by the rule:\nS ::= ()|(S)|SS Lexicographic order is imposed by assuming '(' less than ')'.\n\n\n",
    "Title": "168. Parentheses",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=168",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nOutput all correct parenthesis sequences of length 2n, one sequence a line, without spaces.\n\n\n"
  },
  "2072": {
    "Input Description": "\nInput Format:\n\n\nAn integer T (1 <= T <=1000) denoting the number of test cases followed by T lines. Each containing a single integer N (1 <= N <= 50005000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n171. Dots\n\n\n\n\n\nProblem Statement:\n\n\nGiven N dots and you can make exactly N dots Right Triangle (45-45-90 triangle). Rearrange the given N dots, like this: \n\n \n\nNow your task is to find if N dots can make a right triangle or not (all N dots must be used).\n\n\n\n\nInput Format:\n\n\nAn integer T (1 <= T <=1000) denoting the number of test cases followed by T lines. Each containing a single integer N (1 <= N <= 50005000).\n\n\n\n\nOutput Format:\n\n\nFor each case you have to print \"Yes\" if you can make a right triangle using N dots, otherwise \"No\".\n\n\n\n\nSample Input:\n\n3\n6\n4\n21\n\n\n\nSample Output:\n\nYes\nNo\nYes\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nshipu\n\n\n\n\nAdded at:\n\n\n2014-07-24 15:45:58 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Shipu Ahamed, Dept. of CSE, Bangladesh University of Business and Technology (BUBT)\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n6\n4\n21\n\n\nSample Output:\n\nYes\nNo\nYes\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven N dots and you can make exactly N dots Right Triangle (45-45-90 triangle). Rearrange the given N dots, like this: \n\n \n\nNow your task is to find if N dots can make a right triangle or not (all N dots must be used).\n\n\n",
    "Title": "171. Dots",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=171",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case you have to print \"Yes\" if you can make a right triangle using N dots, otherwise \"No\".\n\n\n"
  },
  "2073": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input contains an integer, T (1 \u2264 T \u2264 2000) indicating the number of test cases. For each test case, two lines appear, the first one contains a number N (1 \u2264 N \u2264 100), representing the length of the numbers and K (1 \u2264 K \u2264 105). The second line of each test case contains the sequence of integers p1,\u2009p2,\u2009...,\u2009pn (0\u2009\u2264\u2009pi\u2009\u2264\u20091100).  It's mixed with psycho numbers and ordinary numbers.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n172. Make Psycho\n\n\n\n\n\nProblem Statement:\n\n\nThe number N is called Psycho Number. Psycho Number is calculated as follows:\n\nFirst, If we factorize N, then we have some primes and their powers. Assume that, there are M powers. From M powers, you should count the number of even and odd powers. Now if the counted even power is strictly greater than odd power, then we call the number N is \"Psycho Number\", otherwise the number N is call \"Ordinary Number\".\n\nAs for example, if N = 67500 then prime factorization, \n\n67500 = 22 x 33 x 54. \n\nCount even powers and odd powers. This number have 2 even powers (2,4) and 1 odd power (3). Let, P = 2 even powers (2,4) and Q = 1 odd power (3).  Since the P is greater than Q, so the number 67500 is a Psycho Number.\n\nNow, Given an integer K, your task is to find whether it is possible to form a subset (out of some given numbers) consisting of only psycho numbers that sum up to exactly K, or not.\n\n\n\n\nInput Format:\n\n\nThe first line of the input contains an integer, T (1 \u2264 T \u2264 2000) indicating the number of test cases. For each test case, two lines appear, the first one contains a number N (1 \u2264 N \u2264 100), representing the length of the numbers and K (1 \u2264 K \u2264 105). The second line of each test case contains the sequence of integers p1,\u2009p2,\u2009...,\u2009pn (0\u2009\u2264\u2009pi\u2009\u2264\u20091100).  It's mixed with psycho numbers and ordinary numbers.\n\n\n\n\nOutput Format:\n\n\nFor each case print  \"Yes\" if possible to make K (as described above) otherwise \"No\".\n\n\n\n\nSample Input:\n\n3\n5 20\n4 5 12 20 16\n5 3\n3 5 9 2 7 \n3 24\n4 4 16\n\n\n\nSample Output:\n\nYes\nNo\nYes\n\n\n\nNotes:\n\n\n0 and 1 are not a psycho number.\n\n\nExplanation: \n\n1st test case\n  \u00a0    psycho numbers: 4 and 16.\n   \u00a0    possible number: 4, 16 and 20 (4+16). \n    \u00a0   K is 20 so you can make this number.\n\n2nd test case\n\u00a0 psycho numbers: only 9.\n   \u00a0   K is 3 but it's not possible to make subset of psycho numbers which sum is equal to K. \n\n3rd test case\n\u00a0 psycho numbers: 4, 4, 16.\n   \u00a0  possible number: 4, 16, 20(16+4) and 24 (16+4+4).\n    \u00a0  K is 24 so you can make this number.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nshipu\n\n\n\n\nAdded at:\n\n\n2014-07-24 15:46:04 UTC\n\n\n\n\nTime Limit:\n\n\n0.5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Shipu Ahamed, Dept. of CSE, Bangladesh University of Business and Technology (BUBT)\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n5 20\n4 5 12 20 16\n5 3\n3 5 9 2 7 \n3 24\n4 4 16\n\n\nSample Output:\n\nYes\nNo\nYes\n\n",
    "Description": "\nProblem Statement:\n\n\nThe number N is called Psycho Number. Psycho Number is calculated as follows:\n\nFirst, If we factorize N, then we have some primes and their powers. Assume that, there are M powers. From M powers, you should count the number of even and odd powers. Now if the counted even power is strictly greater than odd power, then we call the number N is \"Psycho Number\", otherwise the number N is call \"Ordinary Number\".\n\nAs for example, if N = 67500 then prime factorization, \n\n67500 = 22 x 33 x 54. \n\nCount even powers and odd powers. This number have 2 even powers (2,4) and 1 odd power (3). Let, P = 2 even powers (2,4) and Q = 1 odd power (3).  Since the P is greater than Q, so the number 67500 is a Psycho Number.\n\nNow, Given an integer K, your task is to find whether it is possible to form a subset (out of some given numbers) consisting of only psycho numbers that sum up to exactly K, or not.\n\n\n",
    "Title": "172. Make Psycho",
    "Notes": "\nNotes:\n\n\n0 and 1 are not a psycho number.\n\n\nExplanation: \n\n1st test case\n  \u00a0    psycho numbers: 4 and 16.\n   \u00a0    possible number: 4, 16 and 20 (4+16). \n    \u00a0   K is 20 so you can make this number.\n\n2nd test case\n\u00a0 psycho numbers: only 9.\n   \u00a0   K is 3 but it's not possible to make subset of psycho numbers which sum is equal to K. \n\n3rd test case\n\u00a0 psycho numbers: 4, 4, 16.\n   \u00a0  possible number: 4, 16, 20(16+4) and 24 (16+4+4).\n    \u00a0  K is 24 so you can make this number.\n\n",
    "URL": "https://a2oj.com/p?ID=172",
    "Time Limit": "0.5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each case print  \"Yes\" if possible to make K (as described above) otherwise \"No\".\n\n\n"
  },
  "2074": {
    "Input Description": "\nInput Format:\n\n\nAn integer T (1 <= T <=100) denoting the number of test cases followed by T lines. Each containing a single integer N (1 <= N <= 2*107).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n173. Minimum Step To One\n\n\n\n\n\nProblem Statement:\n\n\nProblem statement is very easy. On a positive integer, you can perform any one of the following 3 steps:\n\n \u00a0 1.)  Subtract 1 from it. (n = n - 1)\n\n \u00a0 2.)  If its divisible by 2, divide by 2. (if n % 2 == 0, then n = n / 2)\n\n \u00a0 3.)  If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3)\n\nGiven a positive integer n and your task is find the minimum number of steps that takes n to one.\n\n\n\n\nInput Format:\n\n\nAn integer T (1 <= T <=100) denoting the number of test cases followed by T lines. Each containing a single integer N (1 <= N <= 2*107).\n\n\n\n\nOutput Format:\n\n\nFor each case, print the case number and minimum steps like the following examples.\n\n\n\n\nSample Input:\n\n3\n1\n4\n7\n\n\n\nSample Output:\n\nCase 1: 0\nCase 2: 2\nCase 3: 3\n\n\n\nNotes:\n\n\n\u00a0 1.) For N= 1, output: 0      \n\n\u00a0 2.) For N = 4, output: 2  (4  /2 = 2  /2 = 1)\n\n\u00a0 3.) For N = 7, output: 3  (7 -1 = 6  /3 = 2   /2 = 1)\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nshipu\n\n\n\n\nAdded at:\n\n\n2014-07-24 15:46:07 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Shipu Ahamed, Dept. of CSE, Bangladesh University of Business and Technology (BUBT)\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1\n4\n7\n\n\nSample Output:\n\nCase 1: 0\nCase 2: 2\nCase 3: 3\n\n",
    "Description": "\nProblem Statement:\n\n\nProblem statement is very easy. On a positive integer, you can perform any one of the following 3 steps:\n\n \u00a0 1.)  Subtract 1 from it. (n = n - 1)\n\n \u00a0 2.)  If its divisible by 2, divide by 2. (if n % 2 == 0, then n = n / 2)\n\n \u00a0 3.)  If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3)\n\nGiven a positive integer n and your task is find the minimum number of steps that takes n to one.\n\n\n",
    "Title": "173. Minimum Step To One",
    "Notes": "\nNotes:\n\n\n\u00a0 1.) For N= 1, output: 0      \n\n\u00a0 2.) For N = 4, output: 2  (4  /2 = 2  /2 = 1)\n\n\u00a0 3.) For N = 7, output: 3  (7 -1 = 6  /3 = 2   /2 = 1)\n\n",
    "URL": "https://a2oj.com/p?ID=173",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case, print the case number and minimum steps like the following examples.\n\n\n"
  },
  "2075": {
    "Input Description": "\nInput Format:\n\n\nInput consists of pairs of lines. The first line of a pair contains the first string S and the second line contains the second string T. Each string is on a separate line and consists of at most 1000 characters. The end of input occurs when the first sequence starts with an \"#\"character (without the quotes).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n174. Minimum Cost\n\n\n\n\n\nProblem Statement:\n\n\nGiven two string S and T. You can delete a character from S with cost 15 or a Character from T with cost 30. Your goal is to make the string equal (same). It is not mandatory  to delete  character.\n\nFor example :  S = aXb and T = Yab, Now, if we delete X from S and Y from T, then total cost  =  15+30 = 45. And  S and T will become ab.\n\nAnother example :  S = ab, T = cd, Now  total cost = 15  + 15 + 30 + 30 = 90.\n\nAnother example :  S = abcd, T = acdb, Now  total cost = 15 + 30 = 45.\n\n\n\n\nInput Format:\n\n\nInput consists of pairs of lines. The first line of a pair contains the first string S and the second line contains the second string T. Each string is on a separate line and consists of at most 1000 characters. The end of input occurs when the first sequence starts with an \"#\"character (without the quotes).\n\n\n\n\nOutput Format:\n\n\nFor each subsequent pair of input lines, output a line containing one integer number which the minimum cost to make the string equal (same).\n\n\n\n\nSample Input:\n\naxb\nyab\nab\ncd\nko\np\nabcd\nacdb\n# \n\n\n\nSample Output:\n\n45\n90\n60\n45\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nshipu\n\n\n\n\nAdded at:\n\n\n2014-07-24 18:51:16 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Shipu Ahamed, Dept. of CSE, Bangladesh University of Business and Technology (BUBT)\n\n\n\n",
    "Example": "\nSample Input:\n\naxb\nyab\nab\ncd\nko\np\nabcd\nacdb\n# \n\n\nSample Output:\n\n45\n90\n60\n45\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven two string S and T. You can delete a character from S with cost 15 or a Character from T with cost 30. Your goal is to make the string equal (same). It is not mandatory  to delete  character.\n\nFor example :  S = aXb and T = Yab, Now, if we delete X from S and Y from T, then total cost  =  15+30 = 45. And  S and T will become ab.\n\nAnother example :  S = ab, T = cd, Now  total cost = 15  + 15 + 30 + 30 = 90.\n\nAnother example :  S = abcd, T = acdb, Now  total cost = 15 + 30 = 45.\n\n\n",
    "Title": "174. Minimum Cost",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=174",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each subsequent pair of input lines, output a line containing one integer number which the minimum cost to make the string equal (same).\n\n\n"
  },
  "2076": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input has one integer T, which is the number of test cases. Next are T test cases.\n\nEach test case has two lines. The first line has one integer N, which is the number of toys Rami has.\n\nThe next line has N integers a1, a2 ... an representing the goodness of each toy.\n\n1 \u2264 N \u2264 100,000\n\n0 \u2264 ai  \u2264 109\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n178. Rami and Toys\n\n\n\n\n\nProblem Statement:\n\n\nRami has a new baby sister. He loves her very much and wants to give her his best toy to play with.\n\nRami has a lot of toys, every toy has a level of goodness represented by an integer ai . Rami is very lazy to do this by himself so he asked you to write a program to help him.\n\n\n\n\nInput Format:\n\n\nThe first line of input has one integer T, which is the number of test cases. Next are T test cases.\n\nEach test case has two lines. The first line has one integer N, which is the number of toys Rami has.\n\nThe next line has N integers a1, a2 ... an representing the goodness of each toy.\n\n1 \u2264 N \u2264 100,000\n\n0 \u2264 ai  \u2264 109\n\n\n\nOutput Format:\n\n\nFor each test case output a single integer, representing the value of the best toy Rami has.\n\n\n\n\nSample Input:\n\n2\n5\n1 3 7 1 6\n7\n2 2 2 9 3 1 3\n\n\n\nSample Output:\n\n7\n9\n\n\n\nNotes:\n\n\nIs the first test case Rami has 5 toys, their goodness is 1, 3, 7, 1, 6.\n\nThe best toy is the third toy with goodness equal to 7.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:10 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Practical C++ and Algorithms Course, Level 1, By. Sami EMAD\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5\n1 3 7 1 6\n7\n2 2 2 9 3 1 3\n\n\nSample Output:\n\n7\n9\n\n",
    "Description": "\nProblem Statement:\n\n\nRami has a new baby sister. He loves her very much and wants to give her his best toy to play with.\n\nRami has a lot of toys, every toy has a level of goodness represented by an integer ai . Rami is very lazy to do this by himself so he asked you to write a program to help him.\n\n\n",
    "Title": "178. Rami and Toys",
    "Notes": "\nNotes:\n\n\nIs the first test case Rami has 5 toys, their goodness is 1, 3, 7, 1, 6.\n\nThe best toy is the third toy with goodness equal to 7.\n\n",
    "URL": "https://a2oj.com/p?ID=178",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case output a single integer, representing the value of the best toy Rami has.\n\n\n"
  },
  "2077": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input has one integer T, which is the number of test cases. Next there are T cases.\n\nEach case has one line with a single integer number x. ( 1 \u2264 x \u2264 109 )\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n179. Rami and The Number 7\n\n\n\n\n\nProblem Statement:\n\n\nRami's little sister Rama is always spying on him. She always reads everything he writes on his notebook. Fortunately she is a baby, so she can only read numbers.\n\nRama hates the number 7 and ignores any number divisible by 7 (e.g. 7, 14, 21...), and Rami wants to use this to hide his calculations from Rama. He asks for your help to do this.\n\nYour job is to write a program that takes a number x and output the smallest possible multiple of x that divides 7.\n\n\n\n\nInput Format:\n\n\nThe first line of input has one integer T, which is the number of test cases. Next there are T cases.\n\nEach case has one line with a single integer number x. ( 1 \u2264 x \u2264 109 )\n\n\n\n\nOutput Format:\n\n\nFor each test case output a single line with the smallest multiple of x that is divisible by 7.\n\n\n\n\nSample Input:\n\n3\n1\n2\n10\n\n\n\nSample Output:\n\n7\n14\n70\n\n\n\n\nNotes:\n\n\nIn the first test case: x=1. So the smallest multiple that is divisible by 7 is 1*7 = 7\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:11 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Practical C++ and Algorithms Course, Level 1, By. Sami EMAD\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1\n2\n10\n\n\nSample Output:\n\n7\n14\n70\n\n\n",
    "Description": "\nProblem Statement:\n\n\nRami's little sister Rama is always spying on him. She always reads everything he writes on his notebook. Fortunately she is a baby, so she can only read numbers.\n\nRama hates the number 7 and ignores any number divisible by 7 (e.g. 7, 14, 21...), and Rami wants to use this to hide his calculations from Rama. He asks for your help to do this.\n\nYour job is to write a program that takes a number x and output the smallest possible multiple of x that divides 7.\n\n\n",
    "Title": "179. Rami and The Number 7",
    "Notes": "\nNotes:\n\n\nIn the first test case: x=1. So the smallest multiple that is divisible by 7 is 1*7 = 7\n\n",
    "URL": "https://a2oj.com/p?ID=179",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case output a single line with the smallest multiple of x that is divisible by 7.\n\n\n"
  },
  "2078": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input has one integer N, which is the number of clients Rami has. Next are the details about N clients. ( 1 \u2264 N \u2264 100 )\n\nEach client details start with a single word representing the name of the client (only English alphabet a-z, A-Z, 30 character max).\n\nThe next line has two integers: S and k. S is the starting amount of money for the client and k is the number of transactions this client has made.\n\n ( 0 \u2264 S \u2264 106 )\n\n ( 1 \u2264 k \u2264 1000 )\n\nk lines follow, each line with either \"sell\" or \"buy\" and an integer xi which is the price.\n\n( 0 \u2264 x \u2264 106 )\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n180. Rami The Accountant\n\n\n\n\n\nProblem Statement:\n\n\nRami is a very lazy accountant. All day at his job, he sits and calculates his clients' accounts.\n\nEvery client has some starting amount of money. He does some transactions (buying and selling things). Each transaction is described with a word (either buy, or sell) and a number which is the price.\n\nAs Rami is too lazy to do this operations all by himself, and as he has too many clients, he asked your help. Your job is to write a program to calculate the final amount of money for each client after all the transactions are done.\n\n\n\n\nInput Format:\n\n\nThe first line of input has one integer N, which is the number of clients Rami has. Next are the details about N clients. ( 1 \u2264 N \u2264 100 )\n\nEach client details start with a single word representing the name of the client (only English alphabet a-z, A-Z, 30 character max).\n\nThe next line has two integers: S and k. S is the starting amount of money for the client and k is the number of transactions this client has made.\n\n ( 0 \u2264 S \u2264 106 )\n\n ( 1 \u2264 k \u2264 1000 )\n\nk lines follow, each line with either \"sell\" or \"buy\" and an integer xi which is the price.\n\n( 0 \u2264 x \u2264 106 )\n\n\n\n\nOutput Format:\n\n\nFor each client output a single line with the name of the client and the amount of money he finally has.\n\n\n\n\nSample Input:\n\n2\nKareem\n500 2\nbuy 200\nsell 50\nRama\n1000 3\nbuy 100\nbuy 500\nbuy 200\n\n\n\nSample Output:\n\nKareem 350\nRama 200\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:12 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Practical C++ and Algorithms Course, Level 1, By. Sami EMAD\n\n\n\n",
    "Example": "\nSample Input:\n\n2\nKareem\n500 2\nbuy 200\nsell 50\nRama\n1000 3\nbuy 100\nbuy 500\nbuy 200\n\n\nSample Output:\n\nKareem 350\nRama 200\n\n",
    "Description": "\nProblem Statement:\n\n\nRami is a very lazy accountant. All day at his job, he sits and calculates his clients' accounts.\n\nEvery client has some starting amount of money. He does some transactions (buying and selling things). Each transaction is described with a word (either buy, or sell) and a number which is the price.\n\nAs Rami is too lazy to do this operations all by himself, and as he has too many clients, he asked your help. Your job is to write a program to calculate the final amount of money for each client after all the transactions are done.\n\n\n",
    "Title": "180. Rami The Accountant",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=180",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each client output a single line with the name of the client and the amount of money he finally has.\n\n\n"
  },
  "2079": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input has one integer T, which is the number of test cases. T test cases follow\n\nThe first line of each test case contains two integers n,\u2009m (1\u2009\u2264\u2009n\u2009\u2264\u2009100; 1\u2009\u2264\u2009m\u2009\u2264\u2009100).\n\nThe second line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009100).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n181. Rami and Children\n\n\n\n\n\nProblem Statement:\n\n\nThere are n children in Rami's school. Rami is going to give some candies to them. Let us number all the children from 1 to n. The i-th child wants to get at least ai candies.\n\nRami asks children to line up. Initially, the i-th child stands at the i-th place of the line. Then Rami start distribution of the candies. He follows the algorithm:\n\n- Give m candies to the first child of the line.\n- If this child still haven't got enough candies, then the child goes to the end of the line, else the child go home.\n- Repeat the first two steps while the line is not empty. \n\nConsider all the children in the order they go home. Rami wants to know, which child will be the last in this order?\n\n\n\n\nInput Format:\n\n\nThe first line of input has one integer T, which is the number of test cases. T test cases follow\n\nThe first line of each test case contains two integers n,\u2009m (1\u2009\u2264\u2009n\u2009\u2264\u2009100; 1\u2009\u2264\u2009m\u2009\u2264\u2009100).\n\nThe second line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009100).\n\n\n\n\nOutput Format:\n\n\nFor each test case, output a single integer, representing the number of the last child.\n\n\n\n\nSample Input:\n\n2\n5 2\n1 3 1 4 2\n6 4\n1 1 2 2 3 3\n\n\n\nSample Output:\n\n4\n6\n\n\n\n\nNotes:\n\n\nIn the first test case: Firstly, child 1 gets 2 candies and go home. Then child 2 gets 2 candies and go to the end of the line. Then child 3 gets 2 candies and go home, and then child 4 gets 2 candies and goes to the end of the line. Then child 5 gets 2 candies and goes home. Then child 2 gets two candies and goes home, and finally child 4 gets 2 candies and goes home.\n\nChild 4 is the last one who goes home.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:13 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Practical C++ and Algorithms Course, Level 1, By. Sami EMAD\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 2\n1 3 1 4 2\n6 4\n1 1 2 2 3 3\n\n\nSample Output:\n\n4\n6\n\n\n",
    "Description": "\nProblem Statement:\n\n\nThere are n children in Rami's school. Rami is going to give some candies to them. Let us number all the children from 1 to n. The i-th child wants to get at least ai candies.\n\nRami asks children to line up. Initially, the i-th child stands at the i-th place of the line. Then Rami start distribution of the candies. He follows the algorithm:\n\n- Give m candies to the first child of the line.\n- If this child still haven't got enough candies, then the child goes to the end of the line, else the child go home.\n- Repeat the first two steps while the line is not empty. \n\nConsider all the children in the order they go home. Rami wants to know, which child will be the last in this order?\n\n\n",
    "Title": "181. Rami and Children",
    "Notes": "\nNotes:\n\n\nIn the first test case: Firstly, child 1 gets 2 candies and go home. Then child 2 gets 2 candies and go to the end of the line. Then child 3 gets 2 candies and go home, and then child 4 gets 2 candies and goes to the end of the line. Then child 5 gets 2 candies and goes home. Then child 2 gets two candies and goes home, and finally child 4 gets 2 candies and goes home.\n\nChild 4 is the last one who goes home.\n\n",
    "URL": "https://a2oj.com/p?ID=181",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output a single integer, representing the number of the last child.\n\n\n"
  },
  "2080": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input has one integer T, which is the number of test cases. Next are T test cases.\n\nEach test case starts with and integer N, the number of sticks Rami has. Followed by N integers a1, a2 ... an representing the side lengths of the N sticks.\n\n( 1 \u2264 N \u2264 100,000 )\n\n( 1 \u2264 ai  \u2264 109 )\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n182. Rami and Squares\n\n\n\n\n\nProblem Statement:\n\n\nRami's birthday is today. He had so many gifts for his birthday, but one gift in particular he is very curious about.\n\nHe opened the gift and found N sticks, each with length ai . Now he is wondering how many squares can he make with these sticks. He wants his squares to be perfect, so he can't break any stick, neither can he put two sticks together in one square edge.\n\n\n\n\nInput Format:\n\n\nThe first line of input has one integer T, which is the number of test cases. Next are T test cases.\n\nEach test case starts with and integer N, the number of sticks Rami has. Followed by N integers a1, a2 ... an representing the side lengths of the N sticks.\n\n( 1 \u2264 N \u2264 100,000 )\n\n( 1 \u2264 ai  \u2264 109 )\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single number to the output, the number of squares Rami can put together.\n\n\n\n\nSample Input:\n\n3\n7\n1 1 2 2 1 1 2\n14\n3 1 4 4 4 7 7 7 7 7 7 7 7 7\n9\n1 1 1 3 3 3 5 5 5\n\n\n\nSample Output:\n\n1\n2\n0\n\n\n\nNotes:\n\n\nIn the first test case, Rami can make one square with the four 1 sticks.\n\nIn the second test case, Rami can make two squares with side length = 7, note that he can't have a square with side length=4 because he can't combine 3+1 into one side.\n\nSometimes Rami can't make any squares!\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nsamiemad\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:14 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Practical C++ and Algorithms Course, Level 1, By. Sami EMAD\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n7\n1 1 2 2 1 1 2\n14\n3 1 4 4 4 7 7 7 7 7 7 7 7 7\n9\n1 1 1 3 3 3 5 5 5\n\n\nSample Output:\n\n1\n2\n0\n\n",
    "Description": "\nProblem Statement:\n\n\nRami's birthday is today. He had so many gifts for his birthday, but one gift in particular he is very curious about.\n\nHe opened the gift and found N sticks, each with length ai . Now he is wondering how many squares can he make with these sticks. He wants his squares to be perfect, so he can't break any stick, neither can he put two sticks together in one square edge.\n\n\n",
    "Title": "182. Rami and Squares",
    "Notes": "\nNotes:\n\n\nIn the first test case, Rami can make one square with the four 1 sticks.\n\nIn the second test case, Rami can make two squares with side length = 7, note that he can't have a square with side length=4 because he can't combine 3+1 into one side.\n\nSometimes Rami can't make any squares!\n\n",
    "URL": "https://a2oj.com/p?ID=182",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single number to the output, the number of squares Rami can put together.\n\n\n"
  },
  "2081": {
    "Input Description": "\nInput Format:\n\n\nInput for this problem will be a series of test cases. Each case will consist of your opponent's final score followed by the number of pins knocked down with each roll of the ball for your first eight frames. End-of-input will be indicated by a negative number. All other values on the file will be valid game pin counts. Your opponent's score will be an integer from 0 to 300, and the numbers of pins knocked down on your rolls will all be nonnegative integers less than or equal to 10 (the 10 being the number of pins standing at the start of each frame). The sample input below is neatly formatted only to make it clear how it matches the examples that follow. You will need to process the input carefully in order to determine where one test case ends and the next begins, because you can not assume any format in terms of spacing and line breaks in the actual input file!\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n183. Bowling Score Assistant\n\n\n\n\n\nProblem Statement:\n\n\nBowling is a very popular sport in the U.S.. But projecting frames needed for winning a game is a bit painful for non-ACMers, so you are tasked with writing a program to compute this for them.\n\nFor anyone who has not bowled or has forgotten how the score is computed, there is a description of how to total a bowling score on the next couple pages, following the sample input and output. The main idea is that in order to win, you must get a higher score than your competitor.\n\nGiven your opponent's final score and the number of pins you knocked down on each ball through the eighth frame, you are to compute what you need to win (if it is even possible). If you can't possibly win, print \"impossible\", otherwise print the sequence of rolls that will allow you to win that is first in lexicographical order. That is, the one with the lowest first roll, lowest second roll given the first roll, lowest third roll given the first two, etc..\n\n\n\n\nInput Format:\n\n\nInput for this problem will be a series of test cases. Each case will consist of your opponent's final score followed by the number of pins knocked down with each roll of the ball for your first eight frames. End-of-input will be indicated by a negative number. All other values on the file will be valid game pin counts. Your opponent's score will be an integer from 0 to 300, and the numbers of pins knocked down on your rolls will all be nonnegative integers less than or equal to 10 (the 10 being the number of pins standing at the start of each frame). The sample input below is neatly formatted only to make it clear how it matches the examples that follow. You will need to process the input carefully in order to determine where one test case ends and the next begins, because you can not assume any format in terms of spacing and line breaks in the actual input file!\n\n\n\n\nOutput Format:\n\n\nFor each input case, print the rolls needed to win the game. Follow this format exactly: \"Case\", one space, the case number, a colon and one space, and the answer for that case given as either \"impossible\" or the required numbers of pins, with exactly one space between each pair of numbers and no trailing spaces.\n\n\n\n\nSample Input:\n\n80\n4 3 6 2 4 2\n8 1 4 5 6 2\n7 2 9 0\n215\n4 6 6 2 4 2\n8 1 10 6 2\n7 2 9 0\n299\n10 10 10 10\n10 10 10 10\n-1\n\n\n\nSample Output:\n\nCase 1: 0 0 0 10 6\nCase 2: impossible\nCase 3: 10 10 10 10\n\n\n\nNotes:\n\n\nHow to keep score in bowling:\n\nThere are ten pins that you attempt to knock down by rolling a ball at them.\n\nFor each set of ten pins, if you do not knock them all down with your first ball, you get a second try.\n\nThe one or two balls you roll at the set of ten pins is called a \"frame,\" and there are ten frames in a game.\n\nIf you knock all the pins down with your first roll, that is called a \"strike.\" If you knock all the pins down, but it takes both rolls, that is called a \"spare.\"\n\nThe score is computed as the sum of the pins you knock down, but there are bonuses for spares and strikes which are computed as described below. If you never get a spare or a strike, your score is simply the total of your twenty rolls.\n\nIf you get a strike, you double count the score of the next two rolls. If you get a spare, you double count the next one roll.\n\nThe tenth frame is special in that the \"next\" roll(s) would not normally exist for a strike or a spare in the tenth frame. If you get a spare in the tenth frame, you get one more roll at a fresh set of ten pins which is simply added to the 10 for your spare. If you get a strike in the tenth frame, you get two more rolls. If the first of these is also a strike, you get your second roll at another fresh set of ten pins. Note, however, that you don't go forever if you keep getting strikes. You only get the two rolls after the first strike in the tenth frame, and they are simply added to the 10 for the first strike, making a maximum score of 30 for the tenth frame (and for any other frame).\n\nThus, you can have three rolls in the tenth frame, so the maximum number of rolls in a game is 2 * 9 + 3 = 21. The minimum number of rolls occurs if you get a strike for each of the first nine frames, but then do not get a strike or a spare in the tenth. This results in 9 + 2 = 11 rolls.\n\nExamples:\nWe give the number of pins knocked down for each roll for ten frames and then compute the score.\nExample 1:\n\n\n\nSince there are no spares or strikes, the score is simply the sum of all these numbers which is 79.\nExample 2:\n\n\n\nThis is similar to example 1, but there is a spare in frame 1 and a strike in frame 5. Note that we have a total of 10 in frame 1 before double counting the 6 (first roll) in frame 3. Also, because of the strike in frame 5, we double count the two rolls in frame 6. The final score is 97.\nExample 3:\n\n\n\nThis is similar to example 2, but there is a strike in frame 6. Note that we have added two more pins being knocked down, so the base score is 85, instead of 83 as in example 2. As before, we double count the first roll in frame 2, which gives us 91. Next, we double count the two rolls after the strike in frame 5 which are 10 and 7. This gives us 108. Finally we double count the two rolls in frame 7, which gives us 117.\nExample 4:\n\n\n\nThis is similar to example 3, but there is a spare in frame 10. The extra pin on the second roll in the tenth frame would boost the score to 118 (same computations as in example 3), but we get to add the 7 on the last roll to the spare, so the total is 125.\nExample 5 (maximum score, a \"perfect game\"):\n\n\n\nThe total score for each frame is 30 since we get the 10 for the strike and the next two rolls which are both 10.\nThis gives us the maximum score of 300.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n80\n4 3 6 2 4 2\n8 1 4 5 6 2\n7 2 9 0\n215\n4 6 6 2 4 2\n8 1 10 6 2\n7 2 9 0\n299\n10 10 10 10\n10 10 10 10\n-1\n\n\nSample Output:\n\nCase 1: 0 0 0 10 6\nCase 2: impossible\nCase 3: 10 10 10 10\n\n",
    "Description": "\nProblem Statement:\n\n\nBowling is a very popular sport in the U.S.. But projecting frames needed for winning a game is a bit painful for non-ACMers, so you are tasked with writing a program to compute this for them.\n\nFor anyone who has not bowled or has forgotten how the score is computed, there is a description of how to total a bowling score on the next couple pages, following the sample input and output. The main idea is that in order to win, you must get a higher score than your competitor.\n\nGiven your opponent's final score and the number of pins you knocked down on each ball through the eighth frame, you are to compute what you need to win (if it is even possible). If you can't possibly win, print \"impossible\", otherwise print the sequence of rolls that will allow you to win that is first in lexicographical order. That is, the one with the lowest first roll, lowest second roll given the first roll, lowest third roll given the first two, etc..\n\n\n",
    "Title": "183. Bowling Score Assistant",
    "Notes": "\nNotes:\n\n\nHow to keep score in bowling:\n\nThere are ten pins that you attempt to knock down by rolling a ball at them.\n\nFor each set of ten pins, if you do not knock them all down with your first ball, you get a second try.\n\nThe one or two balls you roll at the set of ten pins is called a \"frame,\" and there are ten frames in a game.\n\nIf you knock all the pins down with your first roll, that is called a \"strike.\" If you knock all the pins down, but it takes both rolls, that is called a \"spare.\"\n\nThe score is computed as the sum of the pins you knock down, but there are bonuses for spares and strikes which are computed as described below. If you never get a spare or a strike, your score is simply the total of your twenty rolls.\n\nIf you get a strike, you double count the score of the next two rolls. If you get a spare, you double count the next one roll.\n\nThe tenth frame is special in that the \"next\" roll(s) would not normally exist for a strike or a spare in the tenth frame. If you get a spare in the tenth frame, you get one more roll at a fresh set of ten pins which is simply added to the 10 for your spare. If you get a strike in the tenth frame, you get two more rolls. If the first of these is also a strike, you get your second roll at another fresh set of ten pins. Note, however, that you don't go forever if you keep getting strikes. You only get the two rolls after the first strike in the tenth frame, and they are simply added to the 10 for the first strike, making a maximum score of 30 for the tenth frame (and for any other frame).\n\nThus, you can have three rolls in the tenth frame, so the maximum number of rolls in a game is 2 * 9 + 3 = 21. The minimum number of rolls occurs if you get a strike for each of the first nine frames, but then do not get a strike or a spare in the tenth. This results in 9 + 2 = 11 rolls.\n\nExamples:\nWe give the number of pins knocked down for each roll for ten frames and then compute the score.\nExample 1:\n\n\n\nSince there are no spares or strikes, the score is simply the sum of all these numbers which is 79.\nExample 2:\n\n\n\nThis is similar to example 1, but there is a spare in frame 1 and a strike in frame 5. Note that we have a total of 10 in frame 1 before double counting the 6 (first roll) in frame 3. Also, because of the strike in frame 5, we double count the two rolls in frame 6. The final score is 97.\nExample 3:\n\n\n\nThis is similar to example 2, but there is a strike in frame 6. Note that we have added two more pins being knocked down, so the base score is 85, instead of 83 as in example 2. As before, we double count the first roll in frame 2, which gives us 91. Next, we double count the two rolls after the strike in frame 5 which are 10 and 7. This gives us 108. Finally we double count the two rolls in frame 7, which gives us 117.\nExample 4:\n\n\n\nThis is similar to example 3, but there is a spare in frame 10. The extra pin on the second roll in the tenth frame would boost the score to 118 (same computations as in example 3), but we get to add the 7 on the last roll to the spare, so the total is 125.\nExample 5 (maximum score, a \"perfect game\"):\n\n\n\nThe total score for each frame is 30 since we get the 10 for the strike and the next two rolls which are both 10.\nThis gives us the maximum score of 300.\n\n",
    "URL": "https://a2oj.com/p?ID=183",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each input case, print the rolls needed to win the game. Follow this format exactly: \"Case\", one space, the case number, a colon and one space, and the answer for that case given as either \"impossible\" or the required numbers of pins, with exactly one space between each pair of numbers and no trailing spaces.\n\n\n"
  },
  "2082": {
    "Input Description": "\nInput Format:\n\n\nInput to be processed will be pairs of lines containing nonempty strings of lower-case letters. All input will be valid until the end of file indicator. End of file will be signaled by two lines that contain just the word \"END\" in upper case. No input line will be longer than 1,000 characters.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n184. Strings with Same Letters\n\n\n\n\n\nProblem Statement:\n\n\nA professor assigned a program to his class for which the output is a string of lower-case letters.\nUnfortunately, he did not specify an ordering of the characters in the string, so he is having difficulty grading student submissions. Because of that, he has requested that ICPC teams help by writing a program that inputs pairs of strings of lower-case letters and determines whether or not the strings have the same letters, though possibly in different orders. Note that repeated letters are important; the string \"abc\" and \"aabbbcccc\" are not viewed as having the same letters since the second one has more copies of each letter.\n\n\n\n\nInput Format:\n\n\nInput to be processed will be pairs of lines containing nonempty strings of lower-case letters. All input will be valid until the end of file indicator. End of file will be signaled by two lines that contain just the word \"END\" in upper case. No input line will be longer than 1,000 characters.\n\n\n\n\nOutput Format:\n\n\nReport whether pairs of strings have the same letters or not. Follow the format exactly: \"Case\", a space, the case number, a colon and one space, and the result given as \"same\" or \"different\" (lower-case, no punctuation). Do not print any trailing spaces.\n\n\n\n\nSample Input:\n\ntesting\nintestg\nabc\naabbbcccc\nabcabcbcc\naabbbcccc\nabc\nxyz\nEND\nEND\n\n\n\nSample Output:\n\nCase 1: same\nCase 2: different\nCase 3: same\nCase 4: different\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-08-06 07:00:01 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\ntesting\nintestg\nabc\naabbbcccc\nabcabcbcc\naabbbcccc\nabc\nxyz\nEND\nEND\n\n\nSample Output:\n\nCase 1: same\nCase 2: different\nCase 3: same\nCase 4: different\n\n",
    "Description": "\nProblem Statement:\n\n\nA professor assigned a program to his class for which the output is a string of lower-case letters.\nUnfortunately, he did not specify an ordering of the characters in the string, so he is having difficulty grading student submissions. Because of that, he has requested that ICPC teams help by writing a program that inputs pairs of strings of lower-case letters and determines whether or not the strings have the same letters, though possibly in different orders. Note that repeated letters are important; the string \"abc\" and \"aabbbcccc\" are not viewed as having the same letters since the second one has more copies of each letter.\n\n\n",
    "Title": "184. Strings with Same Letters",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=184",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nReport whether pairs of strings have the same letters or not. Follow the format exactly: \"Case\", a space, the case number, a colon and one space, and the result given as \"same\" or \"different\" (lower-case, no punctuation). Do not print any trailing spaces.\n\n\n"
  },
  "2083": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains a single integer N, (1 \u2264 N \u2264 1000) which is the number of data sets that follow. Each data set consists of two lines of input. The first line is the encoded message. The second line is a 26 character string of upper case letters giving the character mapping for each letter of the alphabet: the first character gives the mapping for A, the second for B and so on. Only upper case letters will be used. Spaces may appear in the encoded message, and should be preserved in the output string.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n186. Cryptoquote\n\n\n\n\n\nProblem Statement:\n\n\nA cryptoquote is a simple encoded message where one letter is simply replaced by another throughout the message. For example:\n\nEncoded: HPC PJVYMIY\nDecoded: ACM CONTEST\n\nIn the example above, H=A, P=C, C=M, J=O, V=N, Y=T, M=E and I=S. For this problem, you will decode messages.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains a single integer N, (1 \u2264 N \u2264 1000) which is the number of data sets that follow. Each data set consists of two lines of input. The first line is the encoded message. The second line is a 26 character string of upper case letters giving the character mapping for each letter of the alphabet: the first character gives the mapping for A, the second for B and so on. Only upper case letters will be used. Spaces may appear in the encoded message, and should be preserved in the output string.\n\n\n\n\nOutput Format:\n\n\nFor each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space and the decoded message.\n\n\n\n\nSample Input:\n\n2\nHPC PJVYMIY\nBLMRGJIASOPZEFDCKWYHUNXQTV\nFDY GAI BG UKMY\nKIMHOTSQYRLCUZPAGWJNBVDXEF\n\n\n\nSample Output:\n\n1 ACM CONTEST\n2 THE SKY IS BLUE\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-08-06 07:00:03 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\nHPC PJVYMIY\nBLMRGJIASOPZEFDCKWYHUNXQTV\nFDY GAI BG UKMY\nKIMHOTSQYRLCUZPAGWJNBVDXEF\n\n\nSample Output:\n\n1 ACM CONTEST\n2 THE SKY IS BLUE\n\n",
    "Description": "\nProblem Statement:\n\n\nA cryptoquote is a simple encoded message where one letter is simply replaced by another throughout the message. For example:\n\nEncoded: HPC PJVYMIY\nDecoded: ACM CONTEST\n\nIn the example above, H=A, P=C, C=M, J=O, V=N, Y=T, M=E and I=S. For this problem, you will decode messages.\n\n\n",
    "Title": "186. Cryptoquote",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=186",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space and the decoded message.\n\n\n"
  },
  "2084": {
    "Input Description": "\nInput Format:\n\n\nInput will be sets of points. Each set will be specified by the number of points n in the set followed by n lines of three numbers representing xi, yi, and mi values for i = 1 to n. All these numbers will be integers from 1 to 5000. That is, n will be from 1 to 5000 and all the coordinates and masses will also be from 1 to 5000, just to make input easier. End of input will be marked by a negative value of n. There will be extra white space in input so that judges can read the input cases easily. Do not assume any particular number of spaces before, between, or after the input values, and do not assume a particular number of blank lines between cases.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n187. Centroid of Point Masses\n\n\n\n\n\nProblem Statement:\n\n\nThe \"centroid\" of a region in two dimensions can be thought of as the point at which the region would balance on the end of a pencil. Computing this would require a bit more effort than we have in mind for this problem, so we restrict our attention to finding the centroid of a collection of point masses.\n\nIn this case, we could view the plane as being a thin, massless sheet with a few heavy points on it and ask where the plane would balance. To be more rigorous, we present a mathematical definition of the centroid for this case.\n\nGiven the coordinates (xi, yi) of a set of n points and the mass mi at each point, we define the x-moment of that set of points relative to a given point (a, b) as follows (note the x-moment is defined in terms of y differences, but we will need both moments, so it doesn't really matter which way this is done for this particular problem)\n\n\n\n\n\nSimilarly, the y-moment is defined as\n\n\n\n\n\nThe centroid of that set of points is defined to be the point (a, b) for which both moments are zero.\n\n\n\n\nInput Format:\n\n\nInput will be sets of points. Each set will be specified by the number of points n in the set followed by n lines of three numbers representing xi, yi, and mi values for i = 1 to n. All these numbers will be integers from 1 to 5000. That is, n will be from 1 to 5000 and all the coordinates and masses will also be from 1 to 5000, just to make input easier. End of input will be marked by a negative value of n. There will be extra white space in input so that judges can read the input cases easily. Do not assume any particular number of spaces before, between, or after the input values, and do not assume a particular number of blank lines between cases.\n\n\n\n\nOutput Format:\n\n\nPrint the coordinates of the centroid. Follow the format exactly: \"Case\", a space, the case number, a colon and one space, and the values of a and b rounded to two decimal places separated by one space. Input will be constructed so that rounding will not cause problems for values that are sufficiently close to correct. Do not print any trailing spaces.\n\n\n\n\nSample Input:\n\n3\n1 1 10\n22 1 10\n1 31 10\n\n3\n10 10 100\n20 20 50\n10 40 30\n\n-4\n\n\n\nSample Output:\n\nCase 1: 8.00 11.00\nCase 2: 12.78 17.78\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1 1 10\n22 1 10\n1 31 10\n\n3\n10 10 100\n20 20 50\n10 40 30\n\n-4\n\n\nSample Output:\n\nCase 1: 8.00 11.00\nCase 2: 12.78 17.78\n\n",
    "Description": "\nProblem Statement:\n\n\nThe \"centroid\" of a region in two dimensions can be thought of as the point at which the region would balance on the end of a pencil. Computing this would require a bit more effort than we have in mind for this problem, so we restrict our attention to finding the centroid of a collection of point masses.\n\nIn this case, we could view the plane as being a thin, massless sheet with a few heavy points on it and ask where the plane would balance. To be more rigorous, we present a mathematical definition of the centroid for this case.\n\nGiven the coordinates (xi, yi) of a set of n points and the mass mi at each point, we define the x-moment of that set of points relative to a given point (a, b) as follows (note the x-moment is defined in terms of y differences, but we will need both moments, so it doesn't really matter which way this is done for this particular problem)\n\n\n\n\n\nSimilarly, the y-moment is defined as\n\n\n\n\n\nThe centroid of that set of points is defined to be the point (a, b) for which both moments are zero.\n\n\n",
    "Title": "187. Centroid of Point Masses",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=187",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nPrint the coordinates of the centroid. Follow the format exactly: \"Case\", a space, the case number, a colon and one space, and the values of a and b rounded to two decimal places separated by one space. Input will be constructed so that rounding will not cause problems for values that are sufficiently close to correct. Do not print any trailing spaces.\n\n\n"
  },
  "2085": {
    "Input Description": "\nInput Format:\n\n\nEach case on the input file begins with two integers m and n (1 \u2264 m, n \u2264 30), indicating the size of board. The next m lines describe the initial setting of the board. Each line contains n characters, either \"*\" or \".\", indicating if the corresponding square is an obstacle or empty, respectively. [For example, see below for the input file corresponding to the case in the figure above.] It is guaranteed that the initial board is not fully covered by obstacles. Process until end-of-file; there is no end of data flag.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n191. Full Board\n\n\n\n\n\nProblem Statement:\n\n\nA game starts with an M \u00d7 N board with some squares marked as \"obstacles\" (drawn as dark squares in the figure below). The player chooses a starting position for a ball (drawn as solid gray dot) and chooses a direction (up, down, left, or right) to advance. Once the direction is chosen, the ball will advance in that direction until it hits an obstacle, the boundary of the board, or its own trajectory. When it hits one of these, the ball stops. Then the player is allowed to choose another direction, and the ball will advance in the same manner. The game ends when no legal move can be made. The player wins if and only if the trajectory includes all the empty squares on the board. The figure below traces a trajectory that shows one way to win the game in 10 steps.\n\n\n\n\n\nGiven an initial setting of a board, write a program to calculate the minimum number of steps to win the game.\n\n\n\n\nInput Format:\n\n\nEach case on the input file begins with two integers m and n (1 \u2264 m, n \u2264 30), indicating the size of board. The next m lines describe the initial setting of the board. Each line contains n characters, either \"*\" or \".\", indicating if the corresponding square is an obstacle or empty, respectively. [For example, see below for the input file corresponding to the case in the figure above.] It is guaranteed that the initial board is not fully covered by obstacles. Process until end-of-file; there is no end of data flag.\n\n\n\n\nOutput Format:\n\n\nOutput the minimum number of steps to cover the board. Follow the format exactly: \"Case\", one space, the case number, a colon and one space, and one integer indicating the minimum number of steps to win the game, or if there is no way to win, the number -1. Do not print any trailing spaces.\n\n\n\n\nSample Input:\n\n5 5\n**...\n.....\n....*\n..*..\n.....\n\n\n\nSample Output:\n\nCase 1: 10\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n5 5\n**...\n.....\n....*\n..*..\n.....\n\n\nSample Output:\n\nCase 1: 10\n\n",
    "Description": "\nProblem Statement:\n\n\nA game starts with an M \u00d7 N board with some squares marked as \"obstacles\" (drawn as dark squares in the figure below). The player chooses a starting position for a ball (drawn as solid gray dot) and chooses a direction (up, down, left, or right) to advance. Once the direction is chosen, the ball will advance in that direction until it hits an obstacle, the boundary of the board, or its own trajectory. When it hits one of these, the ball stops. Then the player is allowed to choose another direction, and the ball will advance in the same manner. The game ends when no legal move can be made. The player wins if and only if the trajectory includes all the empty squares on the board. The figure below traces a trajectory that shows one way to win the game in 10 steps.\n\n\n\n\n\nGiven an initial setting of a board, write a program to calculate the minimum number of steps to win the game.\n\n\n",
    "Title": "191. Full Board",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=191",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nOutput the minimum number of steps to cover the board. Follow the format exactly: \"Case\", one space, the case number, a colon and one space, and one integer indicating the minimum number of steps to win the game, or if there is no way to win, the number -1. Do not print any trailing spaces.\n\n\n"
  },
  "2086": {
    "Input Description": "\nInput Format:\n\n\nInput consists of many road maps. Each map description begins with two non-negative\nintegers N and M, separated by a space on a line by themselves, that represent the number\nof intersections and the number of roads, respectively. 0 < N, M <= 10000. A value of both\nN and M equal to zero denotes the end of input data.\n\nEach of the next N lines contains three integers, separated by single spaces, which\nrepresent the x-, y- and z-coordinates of an intersection. The integers have values between 0\nand 10000, inclusive. Intersections are numbered in order of their appearance starting with\nthe value one. Each of the following M lines contains two integers that represent start and\nend intersections of a road.\n\nFinally, three integers s, t and d that represents the desired starting intersection number\ns, the finishing intersection number t and the level of difficulty d for a training route are\ngiven on line by themselves. A valid training route must have at least one road with a\ndifficulty level of d, and no road with a difficulty level greater than d. 0 <= d <= 10. If the\ntraining route is meant to form a closed circuit, then s and t are the same intersection\nnumbers.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n216. Difficult Routes\n\n\n\n\n\nProblem Statement:\n\n\nIn preparation for the coming Olympics, you have been asked to propose bicycle training\nroutes for your country's team. The training committee wants to identify routes for traveling\nbetween pairs of locations in multiple sites around the country. Each route must have a\ndesired level of difficulty based on the steepness of its hills.\n\nYou will be given a road map with the elevation data superimposed upon it. Each\nintersection, where two or more roads meet, is identified by its x- , y- , and z-coordinates.\nEach road starts and ends at an intersection, is straight, and does not contain bridges over or\ntunnels under other roads. The difficulty level, d, of cycling a road is 0 if the road is level or\ntravelled in the downhill direction. The difficulty of a non-level road when travelled in the\nuphill direction is \u230a 100*rise / run \u230b . Here rise is the absolute value of change in elevation\nand run is the distance between its two intersection points in its horizontal projection to the\n2D-plane at elevation zero. Note that the level of difficulty for cycling a descending road is\nzero.\n\nA route, which is a sequence of roads such that a successor road continues from the\nsame intersection where its predecessor road finishes, has a level of difficulty d if the\nmaximum level of difficulty for cycling among all its roads equals d. The committee is\nalso interested in the chosen route between two selected locations, if such a route with the\ndesired difficulty level exists, being the one with the shortest possible distance to travel.\n\nReminder: The floor function \u230aX\u230b means X truncated to an integer.\n\nThe figure shows a road map with three intersections for the three sample inputs.\n\n\n\n\n\nThe edge labels of the darker shaded surface give the level of difficulty of going up hill. The\nlighter shaded surface is the horizontal projection to the 2D-plane at elevation zero.\n\n\n\n\nInput Format:\n\n\nInput consists of many road maps. Each map description begins with two non-negative\nintegers N and M, separated by a space on a line by themselves, that represent the number\nof intersections and the number of roads, respectively. 0 < N, M <= 10000. A value of both\nN and M equal to zero denotes the end of input data.\n\nEach of the next N lines contains three integers, separated by single spaces, which\nrepresent the x-, y- and z-coordinates of an intersection. The integers have values between 0\nand 10000, inclusive. Intersections are numbered in order of their appearance starting with\nthe value one. Each of the following M lines contains two integers that represent start and\nend intersections of a road.\n\nFinally, three integers s, t and d that represents the desired starting intersection number\ns, the finishing intersection number t and the level of difficulty d for a training route are\ngiven on line by themselves. A valid training route must have at least one road with a\ndifficulty level of d, and no road with a difficulty level greater than d. 0 <= d <= 10. If the\ntraining route is meant to form a closed circuit, then s and t are the same intersection\nnumbers.\n\n\n\n\nOutput Format:\n\n\nFor each road map and desired route, the output consists of a single line that contains:\n1. number denoting the shortest length of a training route rounded to three\ndecimal places (where trailing zeros may be omitted), or\n2. the single word ?None? if no feasible route exists.\n\nReminder: Rounding a positive number R.xxxy to three decimal places\n* If the fourth decimal place is less than 5, then the rounded value is R.xxx\n* Otherwise, the rounded value is R.xxx + 0.001\nExamples are: for the value of 10.3463 the output should be 10.346, and for the value of\n10.3695 the output is either 10.37 or 10.370\n\n\n\n\nSample Input:\n\n3 3\n0 0 0\n100 100 6\n200 0 7\n1 2\n2 3\n3 1\n1 2 3\n3 3\n0 0 0\n100 100 6\n200 0 7\n1 2\n2 3\n3 1\n1 1 4\n3 3\n0 0 0\n100 100 6\n200 0 7\n1 2\n2 3\n3 1\n2 1 5\n0 0\n\n\n\n\nSample Output:\n\n341.547\n283.097\nNone\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3 3\n0 0 0\n100 100 6\n200 0 7\n1 2\n2 3\n3 1\n1 2 3\n3 3\n0 0 0\n100 100 6\n200 0 7\n1 2\n2 3\n3 1\n1 1 4\n3 3\n0 0 0\n100 100 6\n200 0 7\n1 2\n2 3\n3 1\n2 1 5\n0 0\n\n\n\nSample Output:\n\n341.547\n283.097\nNone\n\n",
    "Description": "\nProblem Statement:\n\n\nIn preparation for the coming Olympics, you have been asked to propose bicycle training\nroutes for your country's team. The training committee wants to identify routes for traveling\nbetween pairs of locations in multiple sites around the country. Each route must have a\ndesired level of difficulty based on the steepness of its hills.\n\nYou will be given a road map with the elevation data superimposed upon it. Each\nintersection, where two or more roads meet, is identified by its x- , y- , and z-coordinates.\nEach road starts and ends at an intersection, is straight, and does not contain bridges over or\ntunnels under other roads. The difficulty level, d, of cycling a road is 0 if the road is level or\ntravelled in the downhill direction. The difficulty of a non-level road when travelled in the\nuphill direction is \u230a 100*rise / run \u230b . Here rise is the absolute value of change in elevation\nand run is the distance between its two intersection points in its horizontal projection to the\n2D-plane at elevation zero. Note that the level of difficulty for cycling a descending road is\nzero.\n\nA route, which is a sequence of roads such that a successor road continues from the\nsame intersection where its predecessor road finishes, has a level of difficulty d if the\nmaximum level of difficulty for cycling among all its roads equals d. The committee is\nalso interested in the chosen route between two selected locations, if such a route with the\ndesired difficulty level exists, being the one with the shortest possible distance to travel.\n\nReminder: The floor function \u230aX\u230b means X truncated to an integer.\n\nThe figure shows a road map with three intersections for the three sample inputs.\n\n\n\n\n\nThe edge labels of the darker shaded surface give the level of difficulty of going up hill. The\nlighter shaded surface is the horizontal projection to the 2D-plane at elevation zero.\n\n\n",
    "Title": "216. Difficult Routes",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=216",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each road map and desired route, the output consists of a single line that contains:\n1. number denoting the shortest length of a training route rounded to three\ndecimal places (where trailing zeros may be omitted), or\n2. the single word ?None? if no feasible route exists.\n\nReminder: Rounding a positive number R.xxxy to three decimal places\n* If the fourth decimal place is less than 5, then the rounded value is R.xxx\n* Otherwise, the rounded value is R.xxx + 0.001\nExamples are: for the value of 10.3463 the output should be 10.346, and for the value of\n10.3695 the output is either 10.37 or 10.370\n\n\n"
  },
  "2087": {
    "Input Description": "\nInput Format:\n\n\nInput consists of sets for many inmates. The description for each inmate\nbegins with two integers N and K, separated by a single space on a line by\nthemselves, that represent the number of people and the maximum allowed\nminutes. 0 < N <= 200 and 0 < K <= 6000. Each of the following N lines\ncontains two integers, separated by a single space, which represent the\npenalty and time duration one person to be assisted. All integers have values\nbetween 0 and 10000, inclusive. Input terminates with two zeros on a line by\nthemselves.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n219. Help-or-else\n\n\n\n\n\nProblem Statement:\n\n\nA penal colony for finance professionals will soon be holding its annual\ncommunity service activity with some rules that are considered suitable for\na penal colony. Every inmate is assigned a set P of N people to help with\ntheir finances and a limit of K minutes. In addition to the circumstances of\nthe jth person, 1 <= j <= N, a time penalty of ej for choosing not to give\nadvice and the time duration of dj minutes allotted to provide the advice are\nalso made clear to the inmate.\n\nAn inmate starts his community service at time T equal to zero. If the\ninmate started working with the jth person at time T, then he must\nterminate his work no later than T+dj. Regardless of the validity of the\nadvice and time of completion, a value of Cj ( = T+ dj ) is deducted from\nthe inmate's alloted minutes. Also the inmate is not permitted to work with\nanother person until the time T+ dj.\n\nIf S is the set of people helped by an inmate, then the total number of\nused minutes is calculated as\n\n  \n\nYour task is to write a program to calculate the maximum number of\npersons that can be helped by an inmate without exceeding his K minutes\nlimit.\n\n\n\n\nInput Format:\n\n\nInput consists of sets for many inmates. The description for each inmate\nbegins with two integers N and K, separated by a single space on a line by\nthemselves, that represent the number of people and the maximum allowed\nminutes. 0 < N <= 200 and 0 < K <= 6000. Each of the following N lines\ncontains two integers, separated by a single space, which represent the\npenalty and time duration one person to be assisted. All integers have values\nbetween 0 and 10000, inclusive. Input terminates with two zeros on a line by\nthemselves.\n\n\n\n\nOutput Format:\n\n\nFor each inmate, the output consists of a single line that contains the\nmaximum number of persons to be helped within the given time limit using\nthe format shown. \"Mission Impossible\" is entered where not exceeding the\ngiven time limit is not possible.\n\n\n\n\nSample Input:\n\n1 1000\n100 1000\n2 100\n1000 1000\n20 10\n1 1\n0 10000\n4 293\n61 30\n295 39\n206 27\n94 85\n0 0\n\n\n\nSample Output:\n\n1: 1\n2: Mission Impossible\n3: 0\n4: 3\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-07-26 09:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n1 1000\n100 1000\n2 100\n1000 1000\n20 10\n1 1\n0 10000\n4 293\n61 30\n295 39\n206 27\n94 85\n0 0\n\n\nSample Output:\n\n1: 1\n2: Mission Impossible\n3: 0\n4: 3\n\n",
    "Description": "\nProblem Statement:\n\n\nA penal colony for finance professionals will soon be holding its annual\ncommunity service activity with some rules that are considered suitable for\na penal colony. Every inmate is assigned a set P of N people to help with\ntheir finances and a limit of K minutes. In addition to the circumstances of\nthe jth person, 1 <= j <= N, a time penalty of ej for choosing not to give\nadvice and the time duration of dj minutes allotted to provide the advice are\nalso made clear to the inmate.\n\nAn inmate starts his community service at time T equal to zero. If the\ninmate started working with the jth person at time T, then he must\nterminate his work no later than T+dj. Regardless of the validity of the\nadvice and time of completion, a value of Cj ( = T+ dj ) is deducted from\nthe inmate's alloted minutes. Also the inmate is not permitted to work with\nanother person until the time T+ dj.\n\nIf S is the set of people helped by an inmate, then the total number of\nused minutes is calculated as\n\n  \n\nYour task is to write a program to calculate the maximum number of\npersons that can be helped by an inmate without exceeding his K minutes\nlimit.\n\n\n",
    "Title": "219. Help-or-else",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=219",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each inmate, the output consists of a single line that contains the\nmaximum number of persons to be helped within the given time limit using\nthe format shown. \"Mission Impossible\" is entered where not exceeding the\ngiven time limit is not possible.\n\n\n"
  },
  "2088": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T lines, each line is a test case which consists of two integers separated by a single space N and M (1\u2009\u2264\u2009N\u2009\u2264\u2009104) and (N\u2009-\u20091\u2009\u2264\u2009M\u2009\u2264\u2009105) denoting the number of computers and the number of cables in the contest hall, respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n67. Abdelrahman\n\n\n\n\n\nProblem Statement:\n\n\nIn an ICPC national contest after the operations team had arrived to the site, they discovered that a mistake had been made in connecting the network of computers that the contestants will use, and many unneeded cables has been installed between the computers. So Abdelrahman Mostafa (the regional director of operations in the ACPC) wants to remove as much as he can of the cables to minimize the possibility of a runner tripping on a cable, and all the computers should be able to reach each other after removing these cables (they are all initially reachable from each other), can you help him?\n\nA computer is reachable from another computer if there is a direct cable between them, or if both are reachable from another third computer.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T lines, each line is a test case which consists of two integers separated by a single space N and M (1\u2009\u2264\u2009N\u2009\u2264\u2009104) and (N\u2009-\u20091\u2009\u2264\u2009M\u2009\u2264\u2009105) denoting the number of computers and the number of cables in the contest hall, respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then R which is the maximum number of cables that can be removed.\n\n\n\n\nSample Input:\n\n1\n4 5\n\n\n\nSample Output:\n\nCase 1: 2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:51:45 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Tunisian Collegiate Programming Contest 2013 & ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4 5\n\n\nSample Output:\n\nCase 1: 2\n\n",
    "Description": "\nProblem Statement:\n\n\nIn an ICPC national contest after the operations team had arrived to the site, they discovered that a mistake had been made in connecting the network of computers that the contestants will use, and many unneeded cables has been installed between the computers. So Abdelrahman Mostafa (the regional director of operations in the ACPC) wants to remove as much as he can of the cables to minimize the possibility of a runner tripping on a cable, and all the computers should be able to reach each other after removing these cables (they are all initially reachable from each other), can you help him?\n\nA computer is reachable from another computer if there is a direct cable between them, or if both are reachable from another third computer.\n\n\n",
    "Title": "67. Abdelrahman",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=67",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then R which is the maximum number of cables that can be removed.\n\n\n"
  },
  "2089": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1  \u2264  T  \u2264  100). Followed by T lines, each test case is a single line containing an equation in the following format \"X O Y = Z\", where X, Y and Z are positive integers (1  \u2264  X,Y,Z  \u2264  100) and O is either `+' or `-' (without the quotes).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n72. Ahmed Aly\n\n\n\n\n\nProblem Statement:\n\n\nAhmed Aly was the chief judge for the last Arab Collegiate Programming Contest, and he will be the chief judge for the next one also. He was an ACM ICPC world finalist in Oralndo 2011, and currently he is a software engineer at Google.During the last ACPC contest, it was the first time that the chief judge didn't not attend the contest, and this was because his son Omar was expected to be born a few days before or after the contest (he was born 10 days after the contest), so he could not travel to Jordan.Now his son Omar is old enough (9 months old) to start learning programming. His first program was very simple, just a program to add or subtract two numbers, and he needs your help to check if his program is correct or not.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1  \u2264  T  \u2264  100). Followed by T lines, each test case is a single line containing an equation in the following format \"X O Y = Z\", where X, Y and Z are positive integers (1  \u2264  X,Y,Z  \u2264  100) and O is either `+' or `-' (without the quotes).\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then \"YES\" (without the quotes) if the equation is correct or \"NO\" (without the quotes) if the equation is wrong.\n\n\n\n\nSample Input:\n\n4\n1 + 23 = 22\n1 + 22 = 23\n22 - 1 = 23\n23 - 1 = 22\n\n\n\n\nSample Output:\n\nCase 1: NO\nCase 2: YES\nCase 3: NO\nCase 4: YES\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:52:12 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Tunisian Collegiate Programming Contest 2013 & ACM Morocco Collegiate Programming Contest 2013 & ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n1 + 23 = 22\n1 + 22 = 23\n22 - 1 = 23\n23 - 1 = 22\n\n\n\nSample Output:\n\nCase 1: NO\nCase 2: YES\nCase 3: NO\nCase 4: YES\n\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmed Aly was the chief judge for the last Arab Collegiate Programming Contest, and he will be the chief judge for the next one also. He was an ACM ICPC world finalist in Oralndo 2011, and currently he is a software engineer at Google.During the last ACPC contest, it was the first time that the chief judge didn't not attend the contest, and this was because his son Omar was expected to be born a few days before or after the contest (he was born 10 days after the contest), so he could not travel to Jordan.Now his son Omar is old enough (9 months old) to start learning programming. His first program was very simple, just a program to add or subtract two numbers, and he needs your help to check if his program is correct or not.\n\n\n",
    "Title": "72. Ahmed Aly",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=72",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then \"YES\" (without the quotes) if the equation is correct or \"NO\" (without the quotes) if the equation is wrong.\n\n\n"
  },
  "2090": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test-cases. The first line of the input will be a single integer T, the number of test-cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test-cases.\n\nEach test case is on a line containing N lowercase English characters, representing a possible password. The length of each string is at least 1 and at most 105\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n73. Password Patterns\n\n\n\n\n\nProblem Statement:\n\n\nAhmed M El-Sayed is the head of systems in the Arab Collegiate Programming Contest (his colleagues used to call him compiler shortened as compo, that goes back to his college days when he used to quickly predict the output of different programs without compiling and running them). Each year in the ACPC he pick some pattern or rule so that all passwords used by the teams should follow. This year the pattern is as follows: For a string S, if it can be divided into at least 2 contiguous non-overlapping substrings, so that each occurrence of a unique substring is replaced by a unique character, S would be palindrome.\n\nFor example, string \"abcdqwrtrqwabcd\" can be segmented into \"abcd-qw-r-t-r-qw-abcd\", then we replace segment \"abcd\" with character 'A', segment \"qw\" with character 'B', segment \"r\" with character 'C', and segment \"t\" with character 'D'\n\nWe would end up with a new string \"ABCDCBA\" which is palindrome, so string \"abcdqwrtrqwabcd\" can be a password.\n\nGiven some candidate strings, can you help him find out if they can be passwords or not?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test-cases. The first line of the input will be a single integer T, the number of test-cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test-cases.\n\nEach test case is on a line containing N lowercase English characters, representing a possible password. The length of each string is at least 1 and at most 105\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), followed by a space then \"YES\" or \"NO\" according to whether it can be a password or not.\n\n\n\n\nSample Input:\n\n2\nabcabc\nabcxyz\n\n\n\nSample Output:\n\nCase 1: YES\nCase 2: NO\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:51:48 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n2\nabcabc\nabcxyz\n\n\nSample Output:\n\nCase 1: YES\nCase 2: NO\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmed M El-Sayed is the head of systems in the Arab Collegiate Programming Contest (his colleagues used to call him compiler shortened as compo, that goes back to his college days when he used to quickly predict the output of different programs without compiling and running them). Each year in the ACPC he pick some pattern or rule so that all passwords used by the teams should follow. This year the pattern is as follows: For a string S, if it can be divided into at least 2 contiguous non-overlapping substrings, so that each occurrence of a unique substring is replaced by a unique character, S would be palindrome.\n\nFor example, string \"abcdqwrtrqwabcd\" can be segmented into \"abcd-qw-r-t-r-qw-abcd\", then we replace segment \"abcd\" with character 'A', segment \"qw\" with character 'B', segment \"r\" with character 'C', and segment \"t\" with character 'D'\n\nWe would end up with a new string \"ABCDCBA\" which is palindrome, so string \"abcdqwrtrqwabcd\" can be a password.\n\nGiven some candidate strings, can you help him find out if they can be passwords or not?\n\n\n",
    "Title": "73. Password Patterns",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=73",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), followed by a space then \"YES\" or \"NO\" according to whether it can be a password or not.\n\n\n"
  },
  "2091": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test-cases. The first line of the input will be a single integer T, the number of test-cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test-cases.\n\nEach test case starts with a line containing three space separated integers R X Y, representing the number of runners and the coordinates of the upper right corner of the hall, respectively. (1\u2009\u2264\u2009R\u2009\u2264\u2009100,\u20091\u2009\u2264\u2009X,\u2009Y\u2009\u2264\u2009104)\n\nR lines follow, each containing two space separated integers Xi Yi, representing the location of one runner. All runner coordinates are unique. (0\u2009\u2264\u2009 Xi \u2009\u2264\u2009X,\u2009 0\u2009\u2264\u2009 Yi \u2009\u2264\u2009Y)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n74. Runner Placement\n\n\n\n\n\nProblem Statement:\n\n\nMohamed Fouad (the deputy regional director of the ACPC) noticed that during the contests, confusion would often arise when contestants wouldn't know which runner to ask for help; so this year, he decided to try a different approach, where he'd place the runners in different positions in the contest hall and tell the contestants to always ask the closest runner for help. Assume that the contest hall is an axis-aligned rectangle, with (0,\u20090) and (X,\u2009Y) as the coordinates of its lower left corner and upper right corner respectively. You are given the locations of the runners. For each runner, can you find out how big is the area that he or she is responsible for in the contest hall (i.e. the area that he or she is closer to than any other runner in the contest hall)?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test-cases. The first line of the input will be a single integer T, the number of test-cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test-cases.\n\nEach test case starts with a line containing three space separated integers R X Y, representing the number of runners and the coordinates of the upper right corner of the hall, respectively. (1\u2009\u2264\u2009R\u2009\u2264\u2009100,\u20091\u2009\u2264\u2009X,\u2009Y\u2009\u2264\u2009104)\n\nR lines follow, each containing two space separated integers Xi Yi, representing the location of one runner. All runner coordinates are unique. (0\u2009\u2264\u2009 Xi \u2009\u2264\u2009X,\u2009 0\u2009\u2264\u2009 Yi \u2009\u2264\u2009Y)\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), then N lines follow, each containing a single decimal number rounded to 2 digits after the decimal point that represent the area of the respective runner.\n\n\n\n\nSample Input:\n\n1\n2 10 10\n0 0\n10 10\n\n\n\nSample Output:\n\nCase 1:\n50.00\n50.00\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:51:52 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n2 10 10\n0 0\n10 10\n\n\nSample Output:\n\nCase 1:\n50.00\n50.00\n\n",
    "Description": "\nProblem Statement:\n\n\nMohamed Fouad (the deputy regional director of the ACPC) noticed that during the contests, confusion would often arise when contestants wouldn't know which runner to ask for help; so this year, he decided to try a different approach, where he'd place the runners in different positions in the contest hall and tell the contestants to always ask the closest runner for help. Assume that the contest hall is an axis-aligned rectangle, with (0,\u20090) and (X,\u2009Y) as the coordinates of its lower left corner and upper right corner respectively. You are given the locations of the runners. For each runner, can you find out how big is the area that he or she is responsible for in the contest hall (i.e. the area that he or she is closer to than any other runner in the contest hall)?\n\n\n",
    "Title": "74. Runner Placement",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=74",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), then N lines follow, each containing a single decimal number rounded to 2 digits after the decimal point that represent the area of the respective runner.\n\n\n"
  },
  "2092": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases, each test case begins by two lines, the first line contains a string of lowercase and uppercase English letters representing the fish in the sea (every letter is a single fish) and the second containing two integers, K and Q where K is the number described above and Q is the number of questions Khaled is going to ask. Q lines follow, each containing a single lowercase or uppercase English letter that he Khaled wants to find about. (1\u2009\u2264\u2009Q\u2009\u2264\u200910)\n\nNote that\n\n- N, the number of fish in the string is constrained by 2\u2009\u2264\u2009N\u2009\u2264\u2009105\n- K\u2009\u2264\u2009N\n- the sea is considered to be fully occupied by fish, so Khaled can only throw his net on indices i,j where 1\u2009\u2264\u2009i,\u2009j\u2009\u2264\u2009N,\u2009i\u2009\u2264\u2009j\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n75. Fishing Soldier\n\n\n\n\n\nProblem Statement:\n\n\nKhaled Sami is a competitive programmer and a student of coach Fegla. He graduated a year ago and he's now almost done with his military service. He was assigned to some top secret navy facility working as a fisherman.\n\nThe place he's fishing at has some peculiar properties:\n\n- There is a maximum of 52 different kinds of fish, each represented by a unique upper or lower case English letter.\n- We can think of any sea area as a single row of consecutive cells that is either occupied by a fish or not.\n- All the fish in that specific area would be swimming next to each other in a single continuous block with no empty cells between any of them.\n- If a fishing net is thrown, we can think of it as covering cells from i to j. In this case, all fish in cells i till j (including cells i and j) will be caught in the net.\n\nYesterday, Khaled's commanding officer discussed with him a new fishing strategy which is targeting a specific kind of fish with the goal of catching K fishes swimming in K consecutive cells. So Khaled wants to write a program that can calculate the number of ways that he can throw his net (the number of indices i,j where i\u2009\u2264\u2009j ) to catch at least K consecutive fish of a specific kind. Since he's out in the sea, he needs you to write the program for him.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases, each test case begins by two lines, the first line contains a string of lowercase and uppercase English letters representing the fish in the sea (every letter is a single fish) and the second containing two integers, K and Q where K is the number described above and Q is the number of questions Khaled is going to ask. Q lines follow, each containing a single lowercase or uppercase English letter that he Khaled wants to find about. (1\u2009\u2264\u2009Q\u2009\u2264\u200910)\n\nNote that\n\n- N, the number of fish in the string is constrained by 2\u2009\u2264\u2009N\u2009\u2264\u2009105\n- K\u2009\u2264\u2009N\n- the sea is considered to be fully occupied by fish, so Khaled can only throw his net on indices i,j where 1\u2009\u2264\u2009i,\u2009j\u2009\u2264\u2009N,\u2009i\u2009\u2264\u2009j\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by Q lines, each containing a single integer denoting the number of ways Khaled can throw his net to catch at least K consecutive fishes of the respective type in the input.\n\n\n\n\nSample Input:\n\n1\ndfffaaafffaffff\n3 2\nf\na\n\n\n\nSample Output:\n\nCase 1:\n69\n45\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:51:55 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\ndfffaaafffaffff\n3 2\nf\na\n\n\nSample Output:\n\nCase 1:\n69\n45\n\n",
    "Description": "\nProblem Statement:\n\n\nKhaled Sami is a competitive programmer and a student of coach Fegla. He graduated a year ago and he's now almost done with his military service. He was assigned to some top secret navy facility working as a fisherman.\n\nThe place he's fishing at has some peculiar properties:\n\n- There is a maximum of 52 different kinds of fish, each represented by a unique upper or lower case English letter.\n- We can think of any sea area as a single row of consecutive cells that is either occupied by a fish or not.\n- All the fish in that specific area would be swimming next to each other in a single continuous block with no empty cells between any of them.\n- If a fishing net is thrown, we can think of it as covering cells from i to j. In this case, all fish in cells i till j (including cells i and j) will be caught in the net.\n\nYesterday, Khaled's commanding officer discussed with him a new fishing strategy which is targeting a specific kind of fish with the goal of catching K fishes swimming in K consecutive cells. So Khaled wants to write a program that can calculate the number of ways that he can throw his net (the number of indices i,j where i\u2009\u2264\u2009j ) to catch at least K consecutive fish of a specific kind. Since he's out in the sea, he needs you to write the program for him.\n\n\n",
    "Title": "75. Fishing Soldier",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=75",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by Q lines, each containing a single integer denoting the number of ways Khaled can throw his net to catch at least K consecutive fishes of the respective type in the input.\n\n\n"
  },
  "2093": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test-cases. The first line of the input will be a single integer T, the number of test-cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test-cases.\n\nEach test case starts with a line containing two space separated integers N and M representing the number of teams in need of help and the amount of money Dalia had raised. (1\u2009\u2264\u2009N\u2009\u2264\u200920,\u20091\u2009\u2264\u2009M\u2009\u2264\u2009109)\n\nN lines follow, each containing five space separated integers from, to, amount, return, interest.\n\nfrom and to represent the time interval in days at which the team can take their loan (they can take it any day within this time interval, including the first and last days of the interval)\n\namount represents the amount of money the team needs.\n\nreturn represents the day at which the team would return the loan.\n\ninterest represents the interest that the team would have to pay with the original amount.\n\n(1\u2009\u2264\u2009from\u2009\u2264\u2009to\u2009<\u2009return\u2009\u2264\u2009103,\u20090\u2009\u2264\u2009amount,\u2009interest\u2009\u2264\u2009109)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n76. Helping Teams\n\n\n\n\n\nProblem Statement:\n\n\nThis year, Dalia El-Hefny (a member in the fund raising team in the ACPC and a very close friend of Fegla's from 1998) managed to secure funding for a special aid program she hopes to start in the ACPC. The problem is that the ACPC would create a procedure to loan teams that need to go to contests but don't currently have enough money. The money will be used for paying the contest fees (registration, transportation, hotel fees) and have the team return it after a while with low interest. Given the amount of money Dalia had already raised, the number of teams in need of loans, the times at which they'll need to take the loans and the times when they would return the loans, Can you help Dalia write her proposal to the ACPC board by finding the maximum number of teams possible for her to help out with the money she currently has?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test-cases. The first line of the input will be a single integer T, the number of test-cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test-cases.\n\nEach test case starts with a line containing two space separated integers N and M representing the number of teams in need of help and the amount of money Dalia had raised. (1\u2009\u2264\u2009N\u2009\u2264\u200920,\u20091\u2009\u2264\u2009M\u2009\u2264\u2009109)\n\nN lines follow, each containing five space separated integers from, to, amount, return, interest.\n\nfrom and to represent the time interval in days at which the team can take their loan (they can take it any day within this time interval, including the first and last days of the interval)\n\namount represents the amount of money the team needs.\n\nreturn represents the day at which the team would return the loan.\n\ninterest represents the interest that the team would have to pay with the original amount.\n\n(1\u2009\u2264\u2009from\u2009\u2264\u2009to\u2009<\u2009return\u2009\u2264\u2009103,\u20090\u2009\u2264\u2009amount,\u2009interest\u2009\u2264\u2009109)\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), followed by a space then the maximum number of teams that could be helped with such a budget.\n\n\n\n\nSample Input:\n\n1\n4 100\n1 3 100 4 50\n2 5 100 7 50\n6 10 300 12 100\n8 12 200 13 20\n\n\n\nSample Output:\n\nCase 1: 3\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:51:57 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4 100\n1 3 100 4 50\n2 5 100 7 50\n6 10 300 12 100\n8 12 200 13 20\n\n\nSample Output:\n\nCase 1: 3\n\n",
    "Description": "\nProblem Statement:\n\n\nThis year, Dalia El-Hefny (a member in the fund raising team in the ACPC and a very close friend of Fegla's from 1998) managed to secure funding for a special aid program she hopes to start in the ACPC. The problem is that the ACPC would create a procedure to loan teams that need to go to contests but don't currently have enough money. The money will be used for paying the contest fees (registration, transportation, hotel fees) and have the team return it after a while with low interest. Given the amount of money Dalia had already raised, the number of teams in need of loans, the times at which they'll need to take the loans and the times when they would return the loans, Can you help Dalia write her proposal to the ACPC board by finding the maximum number of teams possible for her to help out with the money she currently has?\n\n\n",
    "Title": "76. Helping Teams",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=76",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), followed by a space then the maximum number of teams that could be helped with such a budget.\n\n\n"
  },
  "2094": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test cases.\n\nEach test case starts with a line containing two space separated integers N and K representing the number of strings given where each one represents an activity on Facebook, and the a number of friends you are required to output, respectively. There will always be at least K different friends in each test case. (1\u2009\u2264\u2009N\u2009\u2264\u2009103,\u20091\u2009\u2264\u2009K)\n\nN lines follow, each containing a string S in one of the formats given above. S will consist only of the English alphabet, spaces, and apostrophes ( ' ). S will be, at most, 103 characters.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n77. Facebook\n\n\n\n\n\nProblem Statement:\n\n\nAhmed Thabet is one of the previous ACM-ICPC contestants in Cairo University's Faculty of Computers and Information, (Winner of the 2012 ACPC, a participant in the 2013 World Finals in St. Petersburg (Russia), and currently a software engineer at Facebook). In his free time, he likes to socialize with his friends on Facebook. A few days back he wanted to analyze his activity on Facebook and find which friends he interacted with the most. Given his actions on Facebook as strings in one of two forms:\n\nEither \"liked X's photo\"\n\nor \"commented on X's photo\"\n\nwhere X is the name of friend (containing only English upper and lower case letters). Can you help him analyze his activity?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test cases.\n\nEach test case starts with a line containing two space separated integers N and K representing the number of strings given where each one represents an activity on Facebook, and the a number of friends you are required to output, respectively. There will always be at least K different friends in each test case. (1\u2009\u2264\u2009N\u2009\u2264\u2009103,\u20091\u2009\u2264\u2009K)\n\nN lines follow, each containing a string S in one of the formats given above. S will consist only of the English alphabet, spaces, and apostrophes ( ' ). S will be, at most, 103 characters.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), then K lines follow, containing the list of Thabet's friends with whom he interacts the most. Ordered in a descending order of interactions, where the first line contains the name of the Friend with the most interactions, the second line contains the name of the Friend with the second most interactions and so on.\n\n\n\n\nSample Input:\n\n1\n6 2\nliked Badr's photo\nliked Shakira's photo\nliked Badr's photo\nliked Fegla's photo\nliked Shakira's photo\ncommented on Shakira's photo\n\n\n\nSample Output:\n\nCase 1:\nShakira\nBadr\n\n\n\nNotes:\n\n\nNote that in each test-case, Thabet would have interacted with each friend a unique number of times; that is no two friends in the same test-case will have the same number of interactions.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:51:59 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n6 2\nliked Badr's photo\nliked Shakira's photo\nliked Badr's photo\nliked Fegla's photo\nliked Shakira's photo\ncommented on Shakira's photo\n\n\nSample Output:\n\nCase 1:\nShakira\nBadr\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmed Thabet is one of the previous ACM-ICPC contestants in Cairo University's Faculty of Computers and Information, (Winner of the 2012 ACPC, a participant in the 2013 World Finals in St. Petersburg (Russia), and currently a software engineer at Facebook). In his free time, he likes to socialize with his friends on Facebook. A few days back he wanted to analyze his activity on Facebook and find which friends he interacted with the most. Given his actions on Facebook as strings in one of two forms:\n\nEither \"liked X's photo\"\n\nor \"commented on X's photo\"\n\nwhere X is the name of friend (containing only English upper and lower case letters). Can you help him analyze his activity?\n\n\n",
    "Title": "77. Facebook",
    "Notes": "\nNotes:\n\n\nNote that in each test-case, Thabet would have interacted with each friend a unique number of times; that is no two friends in the same test-case will have the same number of interactions.\n\n",
    "URL": "https://a2oj.com/p?ID=77",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), then K lines follow, containing the list of Thabet's friends with whom he interacts the most. Ordered in a descending order of interactions, where the first line contains the name of the Friend with the most interactions, the second line contains the name of the Friend with the second most interactions and so on.\n\n\n"
  },
  "2095": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test cases.\n\nEach test case is a single line containing a positive integer N representing the number of children on a particular day. (1\u2009\u2264\u2009N\u2009\u2264\u2009105)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n78. Ahmed's Kindergarten\n\n\n\n\n\nProblem Statement:\n\n\nAhmed Abdelsadek is an ICPC world finalist and a previous student of coach Fegla. He is now a research assistant at Simon Fraser University in Canada. And to keep himself busy and make extra money, Ahmed runs a kindergarten in the afternoon. Every day, each child is given a number based on the order he arrived in (relative to other children). So in a given day the first child that comes to the kindergarten is given the number 1, the next child is given the number 2 and so on. One of the major problems Ahmed is facing is that children are always fighting. He also noticed a weird pattern for their fights: every 2 kids whose numbers add up to a prime number fight together. He needs to prepare for future fights, and asked for your help. Assuming that this pattern is actually true, and given the number of children arriving to the kindergarten today, Can you tell him the number of possible fights today?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test cases.\n\nEach test case is a single line containing a positive integer N representing the number of children on a particular day. (1\u2009\u2264\u2009N\u2009\u2264\u2009105)\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), followed by a space, followed by R which is the number of pairs of children that could fight on that day.\n\n\n\n\nSample Input:\n\n4\n3\n5\n57\n45\n\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 5\nCase 3: 381\nCase 4: 247\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:52:01 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n3\n5\n57\n45\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 5\nCase 3: 381\nCase 4: 247\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmed Abdelsadek is an ICPC world finalist and a previous student of coach Fegla. He is now a research assistant at Simon Fraser University in Canada. And to keep himself busy and make extra money, Ahmed runs a kindergarten in the afternoon. Every day, each child is given a number based on the order he arrived in (relative to other children). So in a given day the first child that comes to the kindergarten is given the number 1, the next child is given the number 2 and so on. One of the major problems Ahmed is facing is that children are always fighting. He also noticed a weird pattern for their fights: every 2 kids whose numbers add up to a prime number fight together. He needs to prepare for future fights, and asked for your help. Assuming that this pattern is actually true, and given the number of children arriving to the kindergarten today, Can you tell him the number of possible fights today?\n\n\n",
    "Title": "78. Ahmed's Kindergarten",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=78",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), followed by a space, followed by R which is the number of pairs of children that could fight on that day.\n\n\n"
  },
  "2096": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test-cases. The first line of the input will be a single integer T, the number of test-cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test-cases.\n\nEach test case starts with a line containing two space separated integers N Q, representing the number of towns and the number of queries in the test-case. (1\u2009\u2264\u2009N,\u2009Q\u2009\u2264\u2009105)\n\nN-1 lines follow, each containing two space separated integers Fr To, representing that there is a road between town Fr and town To. Roads are bi-directional, and the towns and roads form a tree. (1\u2009\u2264\u2009Fr,\u2009To\u2009\u2264\u2009N,\u2009Fr\u2009\u2260\u2009To)\n\nQ lines follow, each containing two space separated integers Fr To, representing a query asking about the minimum number of times she has to travel between town Fr and town To. (1\u2009\u2264\u2009Fr,\u2009To\u2009\u2264\u2009N,\u2009Fr\u2009\u2260\u2009To)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n79. On the Road to LCPC\n\n\n\n\n\nProblem Statement:\n\n\nNicole Hosh is a member in the media core team in the ACPC from Syria. She was visiting the LCPC 2012 (Lebanese Collegiate Programming Contest) and met Mohamed Mahmoud Abd El-Wahab (AKA fegla) (an ICPC world finalist himself, who participated in the 2002 ICPC in Hawaii and coached teams to the ICPC in the 2004 ICPC in Prague, 2006 ICPC in Texas, 2008 ICPC in Banff, 2010 ICPC in Harbin, 2011 ICPC in Orlando, 2012 ICPC in Warsaw and 2013 ICPC in St. Petersburg with two teams) who was the chief judge in the same contest. They became friends very quickly and are now very close to each other.\n\nThis year Nicole is attending the LCPC, but there is one problem, due to the current situation in Syria and north Lebanon, the streets aren't very safe. So she wants to minimize the number of times she has to travel from town to town (minimize the number of roads), starting from a town in Syria and ending in a town in Lebanon. She still hasn't figured out which town to start her journey from in Syria and which town should she meet with Fegla in Lebanon in.\n\nThe good news is that Nicole is quite good with data-structures, which led her to notice that the streets between the different towns in Lebanon and Syria form a tree structure, where the towns are considered the nodes in the tree, and the roads representing the edges. So given the towns and roads between them, you need to answer multiple queries each listing a starting town and a destination town and asking for the minimum number of times she has to travel between two different towns.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test-cases. The first line of the input will be a single integer T, the number of test-cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test-cases.\n\nEach test case starts with a line containing two space separated integers N Q, representing the number of towns and the number of queries in the test-case. (1\u2009\u2264\u2009N,\u2009Q\u2009\u2264\u2009105)\n\nN-1 lines follow, each containing two space separated integers Fr To, representing that there is a road between town Fr and town To. Roads are bi-directional, and the towns and roads form a tree. (1\u2009\u2264\u2009Fr,\u2009To\u2009\u2264\u2009N,\u2009Fr\u2009\u2260\u2009To)\n\nQ lines follow, each containing two space separated integers Fr To, representing a query asking about the minimum number of times she has to travel between town Fr and town To. (1\u2009\u2264\u2009Fr,\u2009To\u2009\u2264\u2009N,\u2009Fr\u2009\u2260\u2009To)\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), then Q lines follow, each containing a single integer that is the minimum number of times of travel required for each query.\n\n\n\n\nSample Input:\n\n1\n6 2\n1 6\n1 2\n1 3\n2 4\n2 5\n4 5\n5 6\n\n\n\nSample Output:\n\nCase 1:\n2\n3\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:52:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n6 2\n1 6\n1 2\n1 3\n2 4\n2 5\n4 5\n5 6\n\n\nSample Output:\n\nCase 1:\n2\n3\n\n",
    "Description": "\nProblem Statement:\n\n\nNicole Hosh is a member in the media core team in the ACPC from Syria. She was visiting the LCPC 2012 (Lebanese Collegiate Programming Contest) and met Mohamed Mahmoud Abd El-Wahab (AKA fegla) (an ICPC world finalist himself, who participated in the 2002 ICPC in Hawaii and coached teams to the ICPC in the 2004 ICPC in Prague, 2006 ICPC in Texas, 2008 ICPC in Banff, 2010 ICPC in Harbin, 2011 ICPC in Orlando, 2012 ICPC in Warsaw and 2013 ICPC in St. Petersburg with two teams) who was the chief judge in the same contest. They became friends very quickly and are now very close to each other.\n\nThis year Nicole is attending the LCPC, but there is one problem, due to the current situation in Syria and north Lebanon, the streets aren't very safe. So she wants to minimize the number of times she has to travel from town to town (minimize the number of roads), starting from a town in Syria and ending in a town in Lebanon. She still hasn't figured out which town to start her journey from in Syria and which town should she meet with Fegla in Lebanon in.\n\nThe good news is that Nicole is quite good with data-structures, which led her to notice that the streets between the different towns in Lebanon and Syria form a tree structure, where the towns are considered the nodes in the tree, and the roads representing the edges. So given the towns and roads between them, you need to answer multiple queries each listing a starting town and a destination town and asking for the minimum number of times she has to travel between two different towns.\n\n\n",
    "Title": "79. On the Road to LCPC",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=79",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1), then Q lines follow, each containing a single integer that is the minimum number of times of travel required for each query.\n\n\n"
  },
  "2097": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test cases.\n\nEach test case starts with a line containing two integers N and M denoting the number of intersections and the number of roads between them, respectively. (1\u2009\u2264\u2009N\u2009\u2264\u2009105,\u20091\u2009\u2264\u2009M\u2009\u2264\u20092\u2009*\u2009105)\n\nM lines follow, each containing three space separated integers Fr, To and W, which means that a road exists between intersections Fr and To with a length of W meters (the project can be used in both directions) . (1\u2009\u2264\u2009Fr,\u2009To\u2009\u2264\u2009N,\u20091\u2009\u2264\u2009W\u2009\u2264\u20091000)\n\nOne more line follows for the test case containing two space separated integers S and D denoting the intersection at which Refaat takes the taxi from and the intersection that Refaat is delivered to. (1\u2009\u2264\u2009S,\u2009D\u2009\u2264\u2009N)\n\nIt is safe to assume that there will neither be multiple roads between the same intersections, nor roads that start and end at the same intersection.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n80. Mohammed Refaat\n\n\n\n\n\nProblem Statement:\n\n\nMohammed Refaat is one of the previous ACM-ICPC contestants in Cairo University's Faculty of Computers and Information, (Winner of the 2009 Arab and North Africa Regional Contest, a participant in the 2010 World Finals in Harbin (China), a previous software engineer at Facebook and currently a software engineer at Google).\n\nDuring his last visit to Egypt, Refaat spent a great day with his coach Mohamed Mahmoud Abd El-Wahab (AKA fegla) (an ICPC world finalist himself, who participated in the 2002 ICPC in Hawaii and coached teams to the ICPC in the 2004 ICPC in Prague, 2006 ICPC in Texas, 2008 ICPC in Banff, 2010 ICPC in Harbin, 2011 ICPC in Orlando, 2012 ICPC in Warsaw and 2013 ICPC in St. Petersburg with two teams) and his other friends from the ICPC community in a well known cafe in Cairo. At the end of the day, Refaat had planned to meet other friends in another cafe, so he took a taxi. On his way, Refaat noticed that the taxi driver was taking many turns. After reaching his destination, he thought that the taxi driver took a longer road on purpose to take more money; Can you help Refaat determine the length of the shortest path between the two cafes so he can find out if the driver was a thief or not?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T test cases.\n\nEach test case starts with a line containing two integers N and M denoting the number of intersections and the number of roads between them, respectively. (1\u2009\u2264\u2009N\u2009\u2264\u2009105,\u20091\u2009\u2264\u2009M\u2009\u2264\u20092\u2009*\u2009105)\n\nM lines follow, each containing three space separated integers Fr, To and W, which means that a road exists between intersections Fr and To with a length of W meters (the project can be used in both directions) . (1\u2009\u2264\u2009Fr,\u2009To\u2009\u2264\u2009N,\u20091\u2009\u2264\u2009W\u2009\u2264\u20091000)\n\nOne more line follows for the test case containing two space separated integers S and D denoting the intersection at which Refaat takes the taxi from and the intersection that Refaat is delivered to. (1\u2009\u2264\u2009S,\u2009D\u2009\u2264\u2009N)\n\nIt is safe to assume that there will neither be multiple roads between the same intersections, nor roads that start and end at the same intersection.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then R which is the total length of the shortest path from intersection S to intersection D (note that the intersections themselves are very small that their their areas are not counted in the total length of the path)\n\n\n\n\nSample Input:\n\n1\n6 7\n1 2 2\n1 5 1\n2 3 10\n5 6 4\n3 4 1\n6 4 2\n2 6 3\n1 4\n\n\n\nSample Output:\n\nCase 1: 7\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:52:06 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n6 7\n1 2 2\n1 5 1\n2 3 10\n5 6 4\n3 4 1\n6 4 2\n2 6 3\n1 4\n\n\nSample Output:\n\nCase 1: 7\n\n",
    "Description": "\nProblem Statement:\n\n\nMohammed Refaat is one of the previous ACM-ICPC contestants in Cairo University's Faculty of Computers and Information, (Winner of the 2009 Arab and North Africa Regional Contest, a participant in the 2010 World Finals in Harbin (China), a previous software engineer at Facebook and currently a software engineer at Google).\n\nDuring his last visit to Egypt, Refaat spent a great day with his coach Mohamed Mahmoud Abd El-Wahab (AKA fegla) (an ICPC world finalist himself, who participated in the 2002 ICPC in Hawaii and coached teams to the ICPC in the 2004 ICPC in Prague, 2006 ICPC in Texas, 2008 ICPC in Banff, 2010 ICPC in Harbin, 2011 ICPC in Orlando, 2012 ICPC in Warsaw and 2013 ICPC in St. Petersburg with two teams) and his other friends from the ICPC community in a well known cafe in Cairo. At the end of the day, Refaat had planned to meet other friends in another cafe, so he took a taxi. On his way, Refaat noticed that the taxi driver was taking many turns. After reaching his destination, he thought that the taxi driver took a longer road on purpose to take more money; Can you help Refaat determine the length of the shortest path between the two cafes so he can find out if the driver was a thief or not?\n\n\n",
    "Title": "80. Mohammed Refaat",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=80",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then R which is the total length of the shortest path from intersection S to intersection D (note that the intersections themselves are very small that their their areas are not counted in the total length of the path)\n\n\n"
  },
  "2098": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases, each test case begins by two integers A and B denoting the number of team members in team M and team 5 respectively. (1\u2009\u2264\u2009A\u2009+\u2009B\u2009\u2264\u200912,\u2009A\u2009=\u2009B)\n\nA lines follow, each describing the position of a member in team A as two space separated integers X and Y (|X|,\u2009|Y|\u2009<\u2009105)\n\nB lines follow, each describing the position of a member in team B in the same format as the previous lines.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n81. Mohanad's Game\n\n\n\n\n\nProblem Statement:\n\n\nMohanad Al-Silk is a competitive programmer, a previous ACPC contestant and a student of coach Fegla. This year Mohanad graduated and is going to start his military service in a few days. So an outing with his friends was arranged where they would go play paintball; and since Mohanad can't really aim well, his friends decided to give him an advantage so that he can win and start his military service with a cheerful mood.\n\nPaintball is a game where the participants are divided into two or more teams, and are given guns that shoot paint balls. Whenever someone is shot, the paint ball will explode and color him with paint, and he or she would be considered as \"shot down\".\n\nAll of the participants will divide themselves in two equal teams (Mohanad's team is called team M, and the other is team 5), and then assign for each member of team M a member of the other team to shoot down. All of Mohanad's teammates will shoot their assigned targets quickly and then let Mohanad shoot the remaining adversary. This plan has a few simple rules:\n\n- All participants will stay in roughly the same place, so you can consider them as standing in their place without moving\n- A participant from team M will shoot his or her target only if the direct line of sight between them has no other participants from team 5 standing up\n- When someone is shot, he or she will fall down and would no longer be considered to block any line of sight\n- All participants in team 5 will intentionally miss their targets so no member of team M will be shot in the game\n- Each member of team M would be assigned only one member of team 5 ...\n\nMohanad's friends think that a participant would be more probable to miss a shot as the distance to his or her target increases. So they want your help to find out if an assignment that would assign for each member of team M to one member of team 5 is possible according to the above rules, and if such assignments are possible they want the assignment that minimizes the total sum of the distances between each pair of assigned participants, as they believe that such an assignment would maximize the probability of the plan succeeding.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases, each test case begins by two integers A and B denoting the number of team members in team M and team 5 respectively. (1\u2009\u2264\u2009A\u2009+\u2009B\u2009\u2264\u200912,\u2009A\u2009=\u2009B)\n\nA lines follow, each describing the position of a member in team A as two space separated integers X and Y (|X|,\u2009|Y|\u2009<\u2009105)\n\nB lines follow, each describing the position of a member in team B in the same format as the previous lines.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then either R which is the minimum sum of distances between all pairs of assigned participants as a decimal number rounded to 3 decimal places; and if such an assignment is not possible, print \"NONE\" instead of R.\n\n\n\n\nSample Input:\n\n1\n2 2\n0 0\n0 1\n0 2\n0 3\n\n\n\nSample Output:\n\nCase 1: 4.000\n\n\n\nNotes:\n\n\nNo two participants will be standing at the same point.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-04-27 04:52:09 UTC\n\n\n\n\nTime Limit:\n\n\n10 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2013\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n2 2\n0 0\n0 1\n0 2\n0 3\n\n\nSample Output:\n\nCase 1: 4.000\n\n",
    "Description": "\nProblem Statement:\n\n\nMohanad Al-Silk is a competitive programmer, a previous ACPC contestant and a student of coach Fegla. This year Mohanad graduated and is going to start his military service in a few days. So an outing with his friends was arranged where they would go play paintball; and since Mohanad can't really aim well, his friends decided to give him an advantage so that he can win and start his military service with a cheerful mood.\n\nPaintball is a game where the participants are divided into two or more teams, and are given guns that shoot paint balls. Whenever someone is shot, the paint ball will explode and color him with paint, and he or she would be considered as \"shot down\".\n\nAll of the participants will divide themselves in two equal teams (Mohanad's team is called team M, and the other is team 5), and then assign for each member of team M a member of the other team to shoot down. All of Mohanad's teammates will shoot their assigned targets quickly and then let Mohanad shoot the remaining adversary. This plan has a few simple rules:\n\n- All participants will stay in roughly the same place, so you can consider them as standing in their place without moving\n- A participant from team M will shoot his or her target only if the direct line of sight between them has no other participants from team 5 standing up\n- When someone is shot, he or she will fall down and would no longer be considered to block any line of sight\n- All participants in team 5 will intentionally miss their targets so no member of team M will be shot in the game\n- Each member of team M would be assigned only one member of team 5 ...\n\nMohanad's friends think that a participant would be more probable to miss a shot as the distance to his or her target increases. So they want your help to find out if an assignment that would assign for each member of team M to one member of team 5 is possible according to the above rules, and if such assignments are possible they want the assignment that minimizes the total sum of the distances between each pair of assigned participants, as they believe that such an assignment would maximize the probability of the plan succeeding.\n\n\n",
    "Title": "81. Mohanad's Game",
    "Notes": "\nNotes:\n\n\nNo two participants will be standing at the same point.\n\n",
    "URL": "https://a2oj.com/p?ID=81",
    "Time Limit": "10 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then either R which is the minimum sum of distances between all pairs of assigned participants as a decimal number rounded to 3 decimal places; and if such an assignment is not possible, print \"NONE\" instead of R.\n\n\n"
  },
  "2099": {
    "Input Description": "\nInput Format:\n\n\nInput will be two integers per line, k and n. End of file will be signified by a line with two zeros. All input will be valid, k and n will be positive integers with k less than 2n so that there is a kth move, and n will be at most 60 so that the answer will fit in a 64-bit integer type.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n188. One Move from Towers of Hanoi\n\n\n\n\n\nProblem Statement:\n\n\nFor this problem, we are concerned with the classic problem of Towers of Hanoi. In this problem there are three posts and a collection of circular disks. Let's call the number of disks n. The disks are of different sizes, with no two having the same radius, and the one main rule is to never put a bigger disk on top of a smaller one.\n\nWe will number the disks from 1 (smallest) to n (biggest) and name the posts A, B, and C. If all the disks start on post A, and the goal is to move the disks to post C by moving one at a time, again, never putting a bigger one on top of a smaller one, there is a well-known solution that recursively calls for moving n-1 disks from A to B, then directly moves the bottom disk from A to C, then recursively calls for moving the n-1 disks from B to C.\n\nPseudocode for a recursive solution to classic Towers of Hanoi problem:\n\n\u00a0\u00a0\u00a0\u00a0\u00a0move(num_disks, from_post, spare_post, to_post)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (num_disks == 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0move(num_disks - 1, from_post, to_post, spare_post)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Move disk \", num_disks, \" from \",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from_post, \" to \", to_post)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0move(num_disks - 1, spare_post, from_post, to_post)\n\nThe problem at hand is determining the kth move made by the above algorithm for a given k and n.\n\n\n\n\nInput Format:\n\n\nInput will be two integers per line, k and n. End of file will be signified by a line with two zeros. All input will be valid, k and n will be positive integers with k less than 2n so that there is a kth move, and n will be at most 60 so that the answer will fit in a 64-bit integer type.\n\n\n\n\nOutput Format:\n\n\nOutput the requested kth move made by the above algorithm. Follow this format exactly: \"Case\", one space, the case number, a colon and one space, and the answer for that case given as the number of the disk, the name of the from_post, and the name of the to_post with one space separating the parts of the answer. Do not print any trailing spaces.\n\n\n\n\nSample Input:\n\n1 3\n5 3\n8 4\n0 0\n\n\n\nSample Output:\n\nCase 1: 1 A C\nCase 2: 1 B A\nCase 3: 4 A C\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-08-06 07:00:05 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n1 3\n5 3\n8 4\n0 0\n\n\nSample Output:\n\nCase 1: 1 A C\nCase 2: 1 B A\nCase 3: 4 A C\n\n",
    "Description": "\nProblem Statement:\n\n\nFor this problem, we are concerned with the classic problem of Towers of Hanoi. In this problem there are three posts and a collection of circular disks. Let's call the number of disks n. The disks are of different sizes, with no two having the same radius, and the one main rule is to never put a bigger disk on top of a smaller one.\n\nWe will number the disks from 1 (smallest) to n (biggest) and name the posts A, B, and C. If all the disks start on post A, and the goal is to move the disks to post C by moving one at a time, again, never putting a bigger one on top of a smaller one, there is a well-known solution that recursively calls for moving n-1 disks from A to B, then directly moves the bottom disk from A to C, then recursively calls for moving the n-1 disks from B to C.\n\nPseudocode for a recursive solution to classic Towers of Hanoi problem:\n\n\u00a0\u00a0\u00a0\u00a0\u00a0move(num_disks, from_post, spare_post, to_post)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (num_disks == 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0move(num_disks - 1, from_post, to_post, spare_post)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Move disk \", num_disks, \" from \",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from_post, \" to \", to_post)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0move(num_disks - 1, spare_post, from_post, to_post)\n\nThe problem at hand is determining the kth move made by the above algorithm for a given k and n.\n\n\n",
    "Title": "188. One Move from Towers of Hanoi",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=188",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nOutput the requested kth move made by the above algorithm. Follow this format exactly: \"Case\", one space, the case number, a colon and one space, and the answer for that case given as the number of the disk, the name of the from_post, and the name of the to_post with one space separating the parts of the answer. Do not print any trailing spaces.\n\n\n"
  },
  "2100": {
    "Input Description": "\nInput Format:\n\n\nInput will be positive integers (n), one per line, none being larger than 1,000. For each value of n, compute the fewest number of moves for the four-tower problem. Stop processing at the end of the file. (There is no endof-data flag.)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n189. Four-Tower Towers of Hanoi\n\n\n\n\n\nProblem Statement:\n\n\nRefer to problem three for a description of the classic three-tower version of the Towers of Hanoi problem.\n\nFor this problem, we extend the Towers of Hanoi to have four towers and ask the question \"What are the fewest number of moves to solve the Towers of Hanoi problem for a given n if we allow four towers instead of the usual three?\" We keep the rules of trying to move n disks from one specified post to another and do not allow a bigger disk to be put on top of a smaller one. What is new for this problem is to have two spare posts instead of just one.\n\nFor example, to move 3 disks from post A to post D, we can move disk 1 from A to B, disk 2 from A to C, disk 3 from A to D, disk 2 from C to D, and disk 1 from B to D, making a total of 5 moves.\n\n\n\n\nInput Format:\n\n\nInput will be positive integers (n), one per line, none being larger than 1,000. For each value of n, compute the fewest number of moves for the four-tower problem. Stop processing at the end of the file. (There is no endof-data flag.)\n\n\n\n\nOutput Format:\n\n\nOutput the fewest number of moves. Follow this format exactly: \"Case\", one space, the case number, a colon and one space, and the answer for that case. You may assume the answer will fit in a 64-bit integer type. Do not print any trailing spaces.\n\n\n\n\nSample Input:\n\n1\n3\n5\n\n\n\nSample Output:\n\nCase 1: 1\nCase 2: 5\nCase 3: 13\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-08-06 07:00:06 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3\n5\n\n\nSample Output:\n\nCase 1: 1\nCase 2: 5\nCase 3: 13\n\n",
    "Description": "\nProblem Statement:\n\n\nRefer to problem three for a description of the classic three-tower version of the Towers of Hanoi problem.\n\nFor this problem, we extend the Towers of Hanoi to have four towers and ask the question \"What are the fewest number of moves to solve the Towers of Hanoi problem for a given n if we allow four towers instead of the usual three?\" We keep the rules of trying to move n disks from one specified post to another and do not allow a bigger disk to be put on top of a smaller one. What is new for this problem is to have two spare posts instead of just one.\n\nFor example, to move 3 disks from post A to post D, we can move disk 1 from A to B, disk 2 from A to C, disk 3 from A to D, disk 2 from C to D, and disk 1 from B to D, making a total of 5 moves.\n\n\n",
    "Title": "189. Four-Tower Towers of Hanoi",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=189",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nOutput the fewest number of moves. Follow this format exactly: \"Case\", one space, the case number, a colon and one space, and the answer for that case. You may assume the answer will fit in a 64-bit integer type. Do not print any trailing spaces.\n\n\n"
  },
  "2101": {
    "Input Description": "\nInput Format:\n\n\nInput to your program will be multiple lines each containing the number of bulbs, N, the time since they were turned on, t, and the bulb number we are interested in, b, separated by spaces. Read until at end of file, there is no end of data indicator.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n190. Light Switches\n\n\n\n\n\nProblem Statement:\n\n\nYou are given a string of synchronized blinking lights with N bulbs. This string of lights is interesting in that instead of blinking on and off in unison, they follow a very specific pattern. Assume that at time t = 0 all bulbs are off. At each subsequent (integral) time t, bulbs toggle from on to off or off to on depending on their current configuration. When a bulb will toggle on or off depends on its position from the beginning of the string. If its position is a multiple of time t, it will toggle. So at time t = 1 all bulbs will toggle on (1, 2, 3, 4, etc.). At time t = 2 only even numbered bulbs (2, 4, 6, 8, etc.) will toggle again. At time t = 3 every third bulb (3, 6, 9, 12, etc.) toggles. This continues up to time t = N, at which point all bulbs are reset to off and the blinking pattern restarts at time t = N+1. (Thus time t = N+1 is viewed as equivalent to time t = 1: all bulbs are toggled on.)\n\nQuality Control is having a hard time verifying that the bulbs are turning on and off at the appropriate times. Your team has been asked to write a verification program that can be given the number of bulbs N on the strand, a particular time t, and bulb position b, then determines if that bulb is on or off at time t + epsilon. In other words, if the bulb is on at time t + epsilon, then the bulb either toggled on at time t or was already on at time t.\n\nThe following limits hold for n, t, and b:\n3 \u2264 N < 2^54\n1 \u2264 t, b < 2^54\nb \u2264 N\n\n[The judge's largest test case involves 17-digit numbers that start 123, so they are indeed < 2^54.]\n\n\n\n\nInput Format:\n\n\nInput to your program will be multiple lines each containing the number of bulbs, N, the time since they were turned on, t, and the bulb number we are interested in, b, separated by spaces. Read until at end of file, there is no end of data indicator.\n\n\n\n\nOutput Format:\n\n\nIndicate if the specified bulb is on or off at the end of the requested time. Follow this format exactly: \"Case\", a space, the case number, a colon and one space, and the answer which is either \"On\" or \"Off\". Do not print any trailing spaces.\n\n\n\n\nSample Input:\n\n55 10 24\n55 68 24\n20 70 5\n\n\n\nSample Output:\n\nCase 1: Off\nCase 2: On\nCase 3: Off\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-08-06 07:00:07 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n55 10 24\n55 68 24\n20 70 5\n\n\nSample Output:\n\nCase 1: Off\nCase 2: On\nCase 3: Off\n\n",
    "Description": "\nProblem Statement:\n\n\nYou are given a string of synchronized blinking lights with N bulbs. This string of lights is interesting in that instead of blinking on and off in unison, they follow a very specific pattern. Assume that at time t = 0 all bulbs are off. At each subsequent (integral) time t, bulbs toggle from on to off or off to on depending on their current configuration. When a bulb will toggle on or off depends on its position from the beginning of the string. If its position is a multiple of time t, it will toggle. So at time t = 1 all bulbs will toggle on (1, 2, 3, 4, etc.). At time t = 2 only even numbered bulbs (2, 4, 6, 8, etc.) will toggle again. At time t = 3 every third bulb (3, 6, 9, 12, etc.) toggles. This continues up to time t = N, at which point all bulbs are reset to off and the blinking pattern restarts at time t = N+1. (Thus time t = N+1 is viewed as equivalent to time t = 1: all bulbs are toggled on.)\n\nQuality Control is having a hard time verifying that the bulbs are turning on and off at the appropriate times. Your team has been asked to write a verification program that can be given the number of bulbs N on the strand, a particular time t, and bulb position b, then determines if that bulb is on or off at time t + epsilon. In other words, if the bulb is on at time t + epsilon, then the bulb either toggled on at time t or was already on at time t.\n\nThe following limits hold for n, t, and b:\n3 \u2264 N < 2^54\n1 \u2264 t, b < 2^54\nb \u2264 N\n\n[The judge's largest test case involves 17-digit numbers that start 123, so they are indeed < 2^54.]\n\n\n",
    "Title": "190. Light Switches",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=190",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nIndicate if the specified bulb is on or off at the end of the requested time. Follow this format exactly: \"Case\", a space, the case number, a colon and one space, and the answer which is either \"On\" or \"Off\". Do not print any trailing spaces.\n\n\n"
  },
  "2102": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T , the number of test cases (1 <= T <= 100). Followed by the test cases, each test case is described in two lines. The first line will contain 2 integers y1 and m1 (1 <= y1 <= 3000) (1 <= m1 <= 12) which represent Abdelkarim's birth year and month respectively, the second line will contain 2 integers y2 and m2 (1 <= y2 <= 3000) (1 <= m2 <= 12) which means Abdelkarim is y2 years and m2 months old.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n192. The Missing Date\n\n\n\n\n\nProblem Statement:\n\n\nAbdelkarim has been lost in the desert after falling down from a plane, and he couldn't remember anything except his date of birth and his age.\n\nAbdelkarim knows some magical rules of the stars, and he can get the correct direction by looking at the stars if he knows the current month and year.\n\nGiven the month and year of Abdelkarim's date of birth and his age (how many years and how many months), print the current year and month.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T , the number of test cases (1 <= T <= 100). Followed by the test cases, each test case is described in two lines. The first line will contain 2 integers y1 and m1 (1 <= y1 <= 3000) (1 <= m1 <= 12) which represent Abdelkarim's birth year and month respectively, the second line will contain 2 integers y2 and m2 (1 <= y2 <= 3000) (1 <= m2 <= 12) which means Abdelkarim is y2 years and m2 months old.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains 2 integers, y3 and M3 which represent the current year and month respectively.\n\n\n\n\nSample Input:\n\n3\n1993 6\n21 2\n2012 12\n1 8\n3000 12\n3000 12\n\n\n\nSample Output:\n\n2014 8\n2014 8\n6001 12\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-08-09 14:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Qualification Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1993 6\n21 2\n2012 12\n1 8\n3000 12\n3000 12\n\n\nSample Output:\n\n2014 8\n2014 8\n6001 12\n\n",
    "Description": "\nProblem Statement:\n\n\nAbdelkarim has been lost in the desert after falling down from a plane, and he couldn't remember anything except his date of birth and his age.\n\nAbdelkarim knows some magical rules of the stars, and he can get the correct direction by looking at the stars if he knows the current month and year.\n\nGiven the month and year of Abdelkarim's date of birth and his age (how many years and how many months), print the current year and month.\n\n\n",
    "Title": "192. The Missing Date",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=192",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains 2 integers, y3 and M3 which represent the current year and month respectively.\n\n\n"
  },
  "2103": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 100 letters, each letter is a lower case English letter (from 'a' to 'z'). This string represents all candies in the store, each candy is described using 1 character, so if the string is \"abac\" this means the store contains 2 candies of type 'a', 1 candy of type 'b' and 1 candy of type 'c'.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n193. Omar Loves Candies, Again\n\n\n\n\n\nProblem Statement:\n\n\nOmar loves to eat a lot of candies, but unfortunately most of the candies are not healthy. So his parents told him that he can go to the candies store, and get as much as he wants but everything should be of the same type.\n\nOmar is a smart boy, so he decided to find which type has the biggest quantity in the store and he will get all candies of that type.\n\nBut he is still young and it might be hard for him to do this, can you help him by writing a program to tell him which candy type to get?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 100 letters, each letter is a lower case English letter (from 'a' to 'z'). This string represents all candies in the store, each candy is described using 1 character, so if the string is \"abac\" this means the store contains 2 candies of type 'a', 1 candy of type 'b' and 1 candy of type 'c'.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the maximum number of candies that Omar can get followed by a space then a letter which represents the kind of that candy, if there are multiple candies with the same number, print the one which is represented by the smallest letter in the English alphabet.\n\n\n\n\nSample Input:\n\n3\nabac\nabc\nzzz\n\n\n\nSample Output:\n\n2 a\n1 a\n3 z\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-09 14:00:01 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Qualification Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\nabac\nabc\nzzz\n\n\nSample Output:\n\n2 a\n1 a\n3 z\n\n",
    "Description": "\nProblem Statement:\n\n\nOmar loves to eat a lot of candies, but unfortunately most of the candies are not healthy. So his parents told him that he can go to the candies store, and get as much as he wants but everything should be of the same type.\n\nOmar is a smart boy, so he decided to find which type has the biggest quantity in the store and he will get all candies of that type.\n\nBut he is still young and it might be hard for him to do this, can you help him by writing a program to tell him which candy type to get?\n\n\n",
    "Title": "193. Omar Loves Candies, Again",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=193",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the maximum number of candies that Omar can get followed by a space then a letter which represents the kind of that candy, if there are multiple candies with the same number, print the one which is represented by the smallest letter in the English alphabet.\n\n\n"
  },
  "2104": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case starts with a line containing one integer N (1 <= N <= 100) representing the number of ropes, followed by a line which contains N integers separated by a single space, representing the ropes' lengths. Each rope length will not be less than 2 and will not be greater than 100.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n194. Connecting Ropes\n\n\n\n\n\nProblem Statement:\n\n\nOmar is a smart boy who likes to play with anything around him. One day his father got some ropes. Unfortunately, Omar found these ropes and decided to play with them by connecting all of the ropes with each other to get one rope.\n\nWhen Omar connects 2 ropes with each other he loses one unit from each rope, so he wonders what is the length of the resulting final rope.\n\nFor example if he got 3 ropes of lengths 3, 4 and 6. He can connect 3 and 4 to get a rope of length 5, then he can connect the ropes of length 5 and 6 to get the final rope of length 9.\n\nHe will keep selecting any pair of ropes and will connect them together until there is only 1 rope left. Which ropes to connect first and which order doesn't really matter, at the end the resulting rope will be the same length regardless his decisions.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case starts with a line containing one integer N (1 <= N <= 100) representing the number of ropes, followed by a line which contains N integers separated by a single space, representing the ropes' lengths. Each rope length will not be less than 2 and will not be greater than 100.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the length of the final resulting rope.\n\n\n\n\nSample Input:\n\n3\n3\n3 4 6\n2\n2 2\n3\n10 11 12\n\n\n\nSample Output:\n\n9\n2\n29\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nabdelkarim\n\n\n\n\nAdded at:\n\n\n2014-08-09 14:00:02 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Qualification Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3\n3 4 6\n2\n2 2\n3\n10 11 12\n\n\nSample Output:\n\n9\n2\n29\n\n",
    "Description": "\nProblem Statement:\n\n\nOmar is a smart boy who likes to play with anything around him. One day his father got some ropes. Unfortunately, Omar found these ropes and decided to play with them by connecting all of the ropes with each other to get one rope.\n\nWhen Omar connects 2 ropes with each other he loses one unit from each rope, so he wonders what is the length of the resulting final rope.\n\nFor example if he got 3 ropes of lengths 3, 4 and 6. He can connect 3 and 4 to get a rope of length 5, then he can connect the ropes of length 5 and 6 to get the final rope of length 9.\n\nHe will keep selecting any pair of ropes and will connect them together until there is only 1 rope left. Which ropes to connect first and which order doesn't really matter, at the end the resulting rope will be the same length regardless his decisions.\n\n\n",
    "Title": "194. Connecting Ropes",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=194",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the length of the final resulting rope.\n\n\n"
  },
  "2105": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case starts with a line containing one integer N (1 <= N <= 100) representing the number of trainees, followed by a line which contains N non-negative integers separated by a single space, representing how many days each trainee trained in Fegla's house. Each trainee trained at most 100 days in Fegla's house.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n195. The Great Coach, Fegla\n\n\n\n\n\nProblem Statement:\n\n\nAhmed Aly has a great coach, his name is Fegla (also known as Mohamed Abdelwahab). Fegla created a Facebook group for his trainees, and he wrote the following description for the group: \"Only for members who trained one day for ACM-ICPC in my house\".\n\nAhmed found this description ambiguous, because it might mean \"exactly one day\" or \"at least one day\". But sometimes both statements will be true for the same set of trainees, and in that case it doesn't matter to say \"one day\", \"exactly one day\" or \"at least one day\", because all of them will be true for the same set of trainees.\n\nGiven how many days each trainee trained in Fegla's house, find out if the 3 statements will be true for the same set of people or not.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case starts with a line containing one integer N (1 <= N <= 100) representing the number of trainees, followed by a line which contains N non-negative integers separated by a single space, representing how many days each trainee trained in Fegla's house. Each trainee trained at most 100 days in Fegla's house.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which will be \"ambiguous\" if it will be ambiguous to just say \"one day\" (if the above 3 statements will be true for different sets of trainees), or \"not ambiguous\" otherwise.\n\n\n\n\nSample Input:\n\n3\n3\n1 2 3\n1\n2\n1\n1\n\n\n\nSample Output:\n\nambiguous\nambiguous\nnot ambiguous\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-09 14:00:03 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Qualification Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3\n1 2 3\n1\n2\n1\n1\n\n\nSample Output:\n\nambiguous\nambiguous\nnot ambiguous\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmed Aly has a great coach, his name is Fegla (also known as Mohamed Abdelwahab). Fegla created a Facebook group for his trainees, and he wrote the following description for the group: \"Only for members who trained one day for ACM-ICPC in my house\".\n\nAhmed found this description ambiguous, because it might mean \"exactly one day\" or \"at least one day\". But sometimes both statements will be true for the same set of trainees, and in that case it doesn't matter to say \"one day\", \"exactly one day\" or \"at least one day\", because all of them will be true for the same set of trainees.\n\nGiven how many days each trainee trained in Fegla's house, find out if the 3 statements will be true for the same set of people or not.\n\n\n",
    "Title": "195. The Great Coach, Fegla",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=195",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which will be \"ambiguous\" if it will be ambiguous to just say \"one day\" (if the above 3 statements will be true for different sets of trainees), or \"not ambiguous\" otherwise.\n\n\n"
  },
  "2106": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case starts with a line containing one integer N (1 <= N <= 100) representing the number of problemsets and the number of trainees, followed by a line which contains N non-negative integers separated by a single space, representing the number of problems in each problemset. Each problemset will contain at most 100 problems.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n196. Fair Fegla\n\n\n\n\n\nProblem Statement:\n\n\nFegla wants to give his trainees some problems to solve, he has N different problemsets and N trainees, and each problemset contains zero or more problems. He will give each trainee exactly one problemset. But the probelmsets might contain different number of problems in each one, which looks unfair.\n\nSince Fegla is a fair coach, he decided to move some problems from problemset to another problemset (he can do this multiple times), until all problemsets contain the same number of problems.\n\nSometimes it's impossible to do so, and he might need to delete some problems completely before moving any problem, then he will start moving the problems. Your task is to write a program to calculate the minimum number of problems to be deleted, and the minimum number of problems to be moved.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case starts with a line containing one integer N (1 <= N <= 100) representing the number of problemsets and the number of trainees, followed by a line which contains N non-negative integers separated by a single space, representing the number of problems in each problemset. Each problemset will contain at most 100 problems.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which will contain the minimum number of problems to be deleted, followed by a space then the minimum number of problems to be moved.\n\n\n\n\nSample Input:\n\n3\n3\n3 3 3\n3\n1 2 3\n4\n6 4 5 3\n\n\n\nSample Output:\n\n0 0\n0 1\n2 1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-09 14:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Qualification Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3\n3 3 3\n3\n1 2 3\n4\n6 4 5 3\n\n\nSample Output:\n\n0 0\n0 1\n2 1\n\n",
    "Description": "\nProblem Statement:\n\n\nFegla wants to give his trainees some problems to solve, he has N different problemsets and N trainees, and each problemset contains zero or more problems. He will give each trainee exactly one problemset. But the probelmsets might contain different number of problems in each one, which looks unfair.\n\nSince Fegla is a fair coach, he decided to move some problems from problemset to another problemset (he can do this multiple times), until all problemsets contain the same number of problems.\n\nSometimes it's impossible to do so, and he might need to delete some problems completely before moving any problem, then he will start moving the problems. Your task is to write a program to calculate the minimum number of problems to be deleted, and the minimum number of problems to be moved.\n\n\n",
    "Title": "196. Fair Fegla",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=196",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which will contain the minimum number of problems to be deleted, followed by a space then the minimum number of problems to be moved.\n\n\n"
  },
  "2107": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by T lines, each line represents one test case, and consists of an integer i (1 <= i <= 100) which is the index in the sequence of the number you are required to print.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n197. The Mystery Sequence\n\n\n\n\n\nProblem Statement:\n\n\nWhile preparing the problems for this tournament, we found a piece of paper somewhere with a sequence of 10 numbers. It took us long time to understand this sequence, and finally we figured out how to get the ith number in this sequence (the index of the first number is 1). So we decided to make a problem based on this sequence.\n\nHere are the first 10 numbers in this sequence (which we found on the paper): 2, 5, 10, 17, 18, 21, 28, 37, 43, 61\n\nYour task in this problem is to find some numbers in this sequence.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by T lines, each line represents one test case, and consists of an integer i (1 <= i <= 100) which is the index in the sequence of the number you are required to print.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line one integer, the ith number in this sequence.\n\n\n\n\nSample Input:\n\n11\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n100\n\n\n\nSample Output:\n\n2\n5\n10\n17\n18\n21\n28\n37\n43\n61\n4599\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-09 14:00:05 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Qualification Round\n\n\n\n",
    "Example": "\nSample Input:\n\n11\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n100\n\n\nSample Output:\n\n2\n5\n10\n17\n18\n21\n28\n37\n43\n61\n4599\n\n",
    "Description": "\nProblem Statement:\n\n\nWhile preparing the problems for this tournament, we found a piece of paper somewhere with a sequence of 10 numbers. It took us long time to understand this sequence, and finally we figured out how to get the ith number in this sequence (the index of the first number is 1). So we decided to make a problem based on this sequence.\n\nHere are the first 10 numbers in this sequence (which we found on the paper): 2, 5, 10, 17, 18, 21, 28, 37, 43, 61\n\nYour task in this problem is to find some numbers in this sequence.\n\n\n",
    "Title": "197. The Mystery Sequence",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=197",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line one integer, the ith number in this sequence.\n\n\n"
  },
  "2108": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). The first line of each test case contains two integers, N the number of girls around him (1 <= N <= 1000), R the radius of the circle (1 <= R <= 1000). Following are N lines containing the location of each of the N girls. The i-th line consists of two integers: the x,y coordinates of the i-th girl (0 <= x,y <= 1000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n201. Flirt With Girls\n\n\n\n\n\nProblem Statement:\n\n\nEsso (aka multisystem) is a naughty boy. He once was walking and noticed that there are N girls around him. Being naughty, he decided to send them some flirting messages via bluetooth.\n\nUnfortunately, after checking his phone manual, he found that the range bluetooth can reach is within a circle of radius R. In other words, he can only flirt with girls who are close enough to be within a circle of radius R of him (he can flirt with a girl exactly on the boundary of that circle). So he made up his mind and checked the locations of the N girls via GPS. He now has their locations in terms of (x,y) points. Esso's position is point (0,0).\n\nUnfortunately, being naughty he didn't pay much attention to his programming courses. That's why he sucks at programming and needs your help. Write a program that takes as input the number of girls around him, their locations and the range his phone bluetooth can work with, and print the number of girls he can flirt with.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). The first line of each test case contains two integers, N the number of girls around him (1 <= N <= 1000), R the radius of the circle (1 <= R <= 1000). Following are N lines containing the location of each of the N girls. The i-th line consists of two integers: the x,y coordinates of the i-th girl (0 <= x,y <= 1000).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line one integer, the number of girls he can flirt with.\n\n\n\n\nSample Input:\n\n3\n2 2\n1 1\n2 2\n1 1\n2 2\n3 1\n1 0\n0 1\n1 1\n\n\n\nSample Output:\n\n1\n0\n2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-23 14:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Final Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n2 2\n1 1\n2 2\n1 1\n2 2\n3 1\n1 0\n0 1\n1 1\n\n\nSample Output:\n\n1\n0\n2\n\n",
    "Description": "\nProblem Statement:\n\n\nEsso (aka multisystem) is a naughty boy. He once was walking and noticed that there are N girls around him. Being naughty, he decided to send them some flirting messages via bluetooth.\n\nUnfortunately, after checking his phone manual, he found that the range bluetooth can reach is within a circle of radius R. In other words, he can only flirt with girls who are close enough to be within a circle of radius R of him (he can flirt with a girl exactly on the boundary of that circle). So he made up his mind and checked the locations of the N girls via GPS. He now has their locations in terms of (x,y) points. Esso's position is point (0,0).\n\nUnfortunately, being naughty he didn't pay much attention to his programming courses. That's why he sucks at programming and needs your help. Write a program that takes as input the number of girls around him, their locations and the range his phone bluetooth can work with, and print the number of girls he can flirt with.\n\n\n",
    "Title": "201. Flirt With Girls",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=201",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line one integer, the number of girls he can flirt with.\n\n\n"
  },
  "2109": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Each test case consists of one line with four integers. S the speed of Agent R, N how many meters Agent R is away from the main point, K the speed of Detective H's shot, M how many meters Detective H is away from the main point. (1 <= S,N,K,M <= 10,000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n202. Detective H\n\n\n\n\n\nProblem Statement:\n\n\nDetective H is a professional hitman. He can hunt his victim with a single shot of his gun. Today he wants to perform an assassination of Agent R. The assassination is planned to take place in the main point of the town.\n\nAgent R drives his motorcycle at speed S meters per second. He starts riding his motorcycle N meters away from the main point. Detective H is standing M meters away from the main point in a perpendicular street of Agent R's street.\n\nYou can consider the location of Agent R as point (N,0), the location of Detective H as point (0,M), the location of the main point as point (0,0).\n\nDetective H's gun shoots a bullet at speed of K meters per second. Now he wonders how many seconds he should wait to shoot his victim so that the bullet reaches his victim at the same time he arrives at the main point. Note that if he shoots too early or too late he'll miss his fast moving victim.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Each test case consists of one line with four integers. S the speed of Agent R, N how many meters Agent R is away from the main point, K the speed of Detective H's shot, M how many meters Detective H is away from the main point. (1 <= S,N,K,M <= 10,000).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print on a single line, a single number representing the number of seconds Detective H should wait, rounded to five decimal places, or print -1 if it's impossible for Detective H to shoot Agent R (he is moving too fast).\n\n\n\n\nSample Input:\n\n3\n1 1 1 1\n2 1 1 1\n3 10 7 17\n\n\n\nSample Output:\n\n0.00000\n-1\n0.90476\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-23 14:00:01 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Final Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1 1 1 1\n2 1 1 1\n3 10 7 17\n\n\nSample Output:\n\n0.00000\n-1\n0.90476\n\n",
    "Description": "\nProblem Statement:\n\n\nDetective H is a professional hitman. He can hunt his victim with a single shot of his gun. Today he wants to perform an assassination of Agent R. The assassination is planned to take place in the main point of the town.\n\nAgent R drives his motorcycle at speed S meters per second. He starts riding his motorcycle N meters away from the main point. Detective H is standing M meters away from the main point in a perpendicular street of Agent R's street.\n\nYou can consider the location of Agent R as point (N,0), the location of Detective H as point (0,M), the location of the main point as point (0,0).\n\nDetective H's gun shoots a bullet at speed of K meters per second. Now he wonders how many seconds he should wait to shoot his victim so that the bullet reaches his victim at the same time he arrives at the main point. Note that if he shoots too early or too late he'll miss his fast moving victim.\n\n\n",
    "Title": "202. Detective H",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=202",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print on a single line, a single number representing the number of seconds Detective H should wait, rounded to five decimal places, or print -1 if it's impossible for Detective H to shoot Agent R (he is moving too fast).\n\n\n"
  },
  "2110": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 100 letters, each letter is 'A', 'B', 'C' or 'D'. Each letter in this string represents one of the answers.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n203. MCQ Exam\n\n\n\n\n\nProblem Statement:\n\n\nYou have an exam coming soon, and unfortunately you didn't study at all, so you can't answer any question. The exam will consist of only MCQ questions (multiple choices questions). Each question has 4 choices, and only 1 of them is the correct answer, for simplicity we will represent the answers using the letters A, B, C or D.\n\nSomehow you managed to get the answers for all questions, but the answers were shuffled. You got only the answers, each answer is one of the 4 letters, but you don't know which answer is for which question.\n\nSo you decided that you will select just 1 letter, and answer all questions using that letter. Based on the answers you got, you want to select the letter which will guarantee the maximum number of correct answers. Your task is to write a program to find out which letter(s) will guarantee the maximum number of correct answers.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 100 letters, each letter is 'A', 'B', 'C' or 'D'. Each letter in this string represents one of the answers.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the maximum number of correct answers you can guarantee by answering all questions using the same answer, followed by a space then a string of all possible answers that guarantee that maximum number (the letters of this string should be sorted in increasing order).\n\n\n\n\nSample Input:\n\n3\nABCA\nDDD\nCCAABD\n\n\n\nSample Output:\n\n2 A\n3 D\n2 AC\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-23 14:00:02 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Final Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\nABCA\nDDD\nCCAABD\n\n\nSample Output:\n\n2 A\n3 D\n2 AC\n\n",
    "Description": "\nProblem Statement:\n\n\nYou have an exam coming soon, and unfortunately you didn't study at all, so you can't answer any question. The exam will consist of only MCQ questions (multiple choices questions). Each question has 4 choices, and only 1 of them is the correct answer, for simplicity we will represent the answers using the letters A, B, C or D.\n\nSomehow you managed to get the answers for all questions, but the answers were shuffled. You got only the answers, each answer is one of the 4 letters, but you don't know which answer is for which question.\n\nSo you decided that you will select just 1 letter, and answer all questions using that letter. Based on the answers you got, you want to select the letter which will guarantee the maximum number of correct answers. Your task is to write a program to find out which letter(s) will guarantee the maximum number of correct answers.\n\n\n",
    "Title": "203. MCQ Exam",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=203",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the maximum number of correct answers you can guarantee by answering all questions using the same answer, followed by a space then a string of all possible answers that guarantee that maximum number (the letters of this string should be sorted in increasing order).\n\n\n"
  },
  "2111": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 100,000 letters, each letter is a digit from '0' to '9'. This string is the given string for the game.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n204. Game of Digits\n\n\n\n\n\nProblem Statement:\n\n\nThe game of digits is a very popular game, which you used to play with your friends. In this game you are given a very long string of digits (all letters are digits from '0' to '9'). Your task is to count the number of substrings which satisfy the following condition: All digits from '0' to N (inclusive) appears exactly once in that substring, and no other digits appear in that substring, for any given N. The digits can appear in any order.\n\nFor example if the given string is \"03210\", the following substrings satisfy the above condition: \"0\", \"0321\", \"3210\", \"210\", \"10\", \"0\". Note that the substring \"0\" was counted twice because it appeared twice in the original string.\n\nYour task is to write a program to solve this game.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, each test case is described in one line which contains a non-empty string which consists of up to 100,000 letters, each letter is a digit from '0' to '9'. This string is the given string for the game.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the number of substrings which satisfy the above condition.\n\n\n\n\nSample Input:\n\n3\n03210\n123\n0101010\n\n\n\nSample Output:\n\n6\n0\n10\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-23 14:00:03 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Final Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n03210\n123\n0101010\n\n\nSample Output:\n\n6\n0\n10\n\n",
    "Description": "\nProblem Statement:\n\n\nThe game of digits is a very popular game, which you used to play with your friends. In this game you are given a very long string of digits (all letters are digits from '0' to '9'). Your task is to count the number of substrings which satisfy the following condition: All digits from '0' to N (inclusive) appears exactly once in that substring, and no other digits appear in that substring, for any given N. The digits can appear in any order.\n\nFor example if the given string is \"03210\", the following substrings satisfy the above condition: \"0\", \"0321\", \"3210\", \"210\", \"10\", \"0\". Note that the substring \"0\" was counted twice because it appeared twice in the original string.\n\nYour task is to write a program to solve this game.\n\n\n",
    "Title": "204. Game of Digits",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=204",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer representing the number of substrings which satisfy the above condition.\n\n\n"
  },
  "2112": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, the first line of each test case contains 2 integers separated by a single space N C (1 <= N <= 8) and (0 <= C <= 100,000,000) representing the number of candies and the number of coins Omar initially has, respectively. Followed by N lines, each line contains 2 integers separated by a single space A B (0 <= A,B <= 100,000,000) which represent the price of a candy and the number of coins inside its box, respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n205. Omar Loves Candies, Again and Again\n\n\n\n\n\nProblem Statement:\n\n\nOmar always loves to eat candies, this time he found some interesting candies. Each candy has a price (in terms of coins), and each candy is in a separate box, inside the box of each candy there might be some coins.\n\nOmar found N candies, and he has C coins initially, at any moment he can buy any candy as long as he has enough coins to buy it. For example if a candy's price is 5 coins, and he has 6 coins, and the candy's box contains 2 coins. First he will pay 5 coins to buy the candy, and will get the 2 coins inside the box, so he will have 3 coins after buying this candy.\n\nNote that he can't buy the same candy more than once, and he can't use the coins inside the box of a candy to buy this candy (he must have enough coins before buying it).\n\nSo, the order of buying the candies matters here. Your task is to find the best order to buy some candies, which will let him buy the maximum number of candies.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, the first line of each test case contains 2 integers separated by a single space N C (1 <= N <= 8) and (0 <= C <= 100,000,000) representing the number of candies and the number of coins Omar initially has, respectively. Followed by N lines, each line contains 2 integers separated by a single space A B (0 <= A,B <= 100,000,000) which represent the price of a candy and the number of coins inside its box, respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer which is the maximum number of candies that Omar can buy.\n\n\n\n\nSample Input:\n\n3\n3 3\n3 1\n3 2\n3 0\n1 1\n2 3\n2 0\n3 0\n0 3\n\n\n\nSample Output:\n\n1\n0\n2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-23 14:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Final Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3 3\n3 1\n3 2\n3 0\n1 1\n2 3\n2 0\n3 0\n0 3\n\n\nSample Output:\n\n1\n0\n2\n\n",
    "Description": "\nProblem Statement:\n\n\nOmar always loves to eat candies, this time he found some interesting candies. Each candy has a price (in terms of coins), and each candy is in a separate box, inside the box of each candy there might be some coins.\n\nOmar found N candies, and he has C coins initially, at any moment he can buy any candy as long as he has enough coins to buy it. For example if a candy's price is 5 coins, and he has 6 coins, and the candy's box contains 2 coins. First he will pay 5 coins to buy the candy, and will get the 2 coins inside the box, so he will have 3 coins after buying this candy.\n\nNote that he can't buy the same candy more than once, and he can't use the coins inside the box of a candy to buy this candy (he must have enough coins before buying it).\n\nSo, the order of buying the candies matters here. Your task is to find the best order to buy some candies, which will let him buy the maximum number of candies.\n\n\n",
    "Title": "205. Omar Loves Candies, Again and Again",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=205",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer which is the maximum number of candies that Omar can buy.\n\n\n"
  },
  "2113": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, the first line of each test case contains 1 integer N (1 <= N <= 15) representing the number of rooms. Followed by N lines, the ith line starts with an integer X (0 <= X <= 60) which is the number of required keys to open the ith room followed by a space then X space-separated integers which are the identifiers of these keys. Followed by N lines, the ith line starts with an integer Y (0 <= Y <= 60) which is the number of keys inside the ith room followed by a space then Y space-separated integers which are the identifiers of these keys. Followed by N lines, each line consists of N characters, the jth character in the ith line will be 'Y' if there is a road from the ith room to the jth room, otherwise this character will be 'N' (the ith character of the ith line will always be 'N').\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n206. Connected Rooms\n\n\n\n\n\nProblem Statement:\n\n\nYou have just entered a huge maze, the maze consists of N rooms, and there might be some roads between some pairs of rooms, the roads are directed, which means if there is a road from room A to room B, it's not necessary to have a road from room B to room A.\n\nEach room has a door, and each door requires some keys to open it, and once you enter a room you will find some keys inside that room and you will keep them with you (before opening the door of any room, you must have the required keys to open it).\n\nYou can not enter the same room more than once, and you can move from room A to room B only if all the following conditions are true:\n\n- There is a road from room A to room B.\n\n- You have at least one of each required key to open the door of room B.\n\n- You didn't enter room B before.\n\nInitially you don't have any keys, and you can select any room to start your tour from it (even if it requires some keys that you don't have), and you will keep the keys inside that starting room.\n\nEach room has 0 or more keys, but at most 1 key of each kind, and the door of each room requires 0 or more keys to open it, but at most 1 key of each kind. Each key will be identified by an integer from 1 to 60 (inclusive).\n\nYour task is to select the starting room and make some valid moves, which allows you to visit the maximum number of rooms.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, the first line of each test case contains 1 integer N (1 <= N <= 15) representing the number of rooms. Followed by N lines, the ith line starts with an integer X (0 <= X <= 60) which is the number of required keys to open the ith room followed by a space then X space-separated integers which are the identifiers of these keys. Followed by N lines, the ith line starts with an integer Y (0 <= Y <= 60) which is the number of keys inside the ith room followed by a space then Y space-separated integers which are the identifiers of these keys. Followed by N lines, each line consists of N characters, the jth character in the ith line will be 'Y' if there is a road from the ith room to the jth room, otherwise this character will be 'N' (the ith character of the ith line will always be 'N').\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer which is the maximum number of rooms that you can enter.\n\n\n\n\nSample Input:\n\n3\n1\n0\n0\nN\n2\n2 5 6\n2 1 2\n2 3 4\n2 5 6\nNY\nYN\n2\n2 5 6\n2 1 2\n2 3 4\n2 5 6\nNY\nNN\n\n\n\nSample Output:\n\n1\n2\n1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-23 14:00:05 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Final Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1\n0\n0\nN\n2\n2 5 6\n2 1 2\n2 3 4\n2 5 6\nNY\nYN\n2\n2 5 6\n2 1 2\n2 3 4\n2 5 6\nNY\nNN\n\n\nSample Output:\n\n1\n2\n1\n\n",
    "Description": "\nProblem Statement:\n\n\nYou have just entered a huge maze, the maze consists of N rooms, and there might be some roads between some pairs of rooms, the roads are directed, which means if there is a road from room A to room B, it's not necessary to have a road from room B to room A.\n\nEach room has a door, and each door requires some keys to open it, and once you enter a room you will find some keys inside that room and you will keep them with you (before opening the door of any room, you must have the required keys to open it).\n\nYou can not enter the same room more than once, and you can move from room A to room B only if all the following conditions are true:\n\n- There is a road from room A to room B.\n\n- You have at least one of each required key to open the door of room B.\n\n- You didn't enter room B before.\n\nInitially you don't have any keys, and you can select any room to start your tour from it (even if it requires some keys that you don't have), and you will keep the keys inside that starting room.\n\nEach room has 0 or more keys, but at most 1 key of each kind, and the door of each room requires 0 or more keys to open it, but at most 1 key of each kind. Each key will be identified by an integer from 1 to 60 (inclusive).\n\nYour task is to select the starting room and make some valid moves, which allows you to visit the maximum number of rooms.\n\n\n",
    "Title": "206. Connected Rooms",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=206",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line which contains a single integer which is the maximum number of rooms that you can enter.\n\n\n"
  },
  "2114": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, the first line of each test case contains 1 integer N (1 <= N <= 50) representing the number of nodes in the graph. Followed by N lines, each line consists of N space-separated integers, the jth integer in the ith line will be -1 if there is no edge from the ith node to the jth node, otherwise it will be a non-negative integer not greater than 1000 which is the length of the edge going from the ith node to the jth node (the ith integer of the ith line will always be -1).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n207. Best Edges\n\n\n\n\n\nProblem Statement:\n\n\nHere is a direct problem without any story, we all love such problems.\n\nGiven a directed and weighted graph, for each edge in this graph find out the number of ordered pairs (A, B) such that you can make a shortest path from A to B and this path includes that edge (A and B should be 2 different nodes).\n\nA shortest path from A to B is a path which starts from node A and ends at node B and moves along the given edges, and the sum of the lengths of all edges in this path is the minimum possible sum, and it's okay if such path will visit a node more than once.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 <= T <= 100). Followed by the test cases, the first line of each test case contains 1 integer N (1 <= N <= 50) representing the number of nodes in the graph. Followed by N lines, each line consists of N space-separated integers, the jth integer in the ith line will be -1 if there is no edge from the ith node to the jth node, otherwise it will be a non-negative integer not greater than 1000 which is the length of the edge going from the ith node to the jth node (the ith integer of the ith line will always be -1).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print N lines, each line consists of N space-separated integers, the jth integer in the ith line will be -1 if there was no edge from the ith node to the jth node, otherwise it should be the number of pairs as described above.\n\n\n\n\nSample Input:\n\n3\n3\n-1 1 1\n1 -1 1\n1 1 -1\n3\n-1 1 2\n1 -1 1\n1 2 -1\n3\n-1 3 1\n1 -1 1\n3 1 -1\n\n\n\nSample Output:\n\n-1 1 1\n1 -1 1\n1 1 -1\n-1 3 1\n1 -1 2\n2 1 -1\n-1 0 2\n2 -1 1\n0 3 -1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-23 14:00:06 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Final Round\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3\n-1 1 1\n1 -1 1\n1 1 -1\n3\n-1 1 2\n1 -1 1\n1 2 -1\n3\n-1 3 1\n1 -1 1\n3 1 -1\n\n\nSample Output:\n\n-1 1 1\n1 -1 1\n1 1 -1\n-1 3 1\n1 -1 2\n2 1 -1\n-1 0 2\n2 -1 1\n0 3 -1\n\n",
    "Description": "\nProblem Statement:\n\n\nHere is a direct problem without any story, we all love such problems.\n\nGiven a directed and weighted graph, for each edge in this graph find out the number of ordered pairs (A, B) such that you can make a shortest path from A to B and this path includes that edge (A and B should be 2 different nodes).\n\nA shortest path from A to B is a path which starts from node A and ends at node B and moves along the given edges, and the sum of the lengths of all edges in this path is the minimum possible sum, and it's okay if such path will visit a node more than once.\n\n\n",
    "Title": "207. Best Edges",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=207",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print N lines, each line consists of N space-separated integers, the jth integer in the ith line will be -1 if there was no edge from the ith node to the jth node, otherwise it should be the number of pairs as described above.\n\n\n"
  },
  "2115": {
    "Input Description": "\nInput Format:\n\n\n78 111 32 105 110 112 117 116 46\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n208. 87 84 72 63 33\n\n\n\n\n\nProblem Statement:\n\n\n67 111 110 103 114 97 116 117 108 97 116 105 111 110 115 44 32 121 111 117 32 107 110 101 119 32 116 104 97 116 32 105 116 32 119 97 115 32 115 111 109 101 32 65 83 67 73 73 32 99 111 100 101 115 46 32 66 117 116 32 116 104 105 115 32 105 115 32 110 111 116 32 116 104 101 32 101 110 100 44 32 121 111 117 32 104 97 118 101 32 106 117 115 116 32 115 111 108 118 101 100 32 116 104 101 32 102 105 114 115 116 32 112 117 122 122 108 101 46 32 71 111 32 104 101 114 101 32 116 111 32 115 111 108 118 101 32 116 104 101 32 110 101 120 116 32 112 117 122 122 108 101 58 32 104 116 116 112 58 47 47 97 50 111 106 46 99 111 109 47 112 117 122 122 108 101 46 106 115 112\n\n\n\n\nInput Format:\n\n\n78 111 32 105 110 112 117 116 46\n\n\n\n\nOutput Format:\n\n\n89 111 117 32 119 105 108 108 32 107 110 111 119 32 119 104 97 116 32 116 111 32 111 117 116 112 117 116 32 111 110 99 101 32 121 111 117 32 115 111 108 118 101 32 97 108 108 32 112 117 122 122 108 101 115 46\n\n\n\n\nSample Input:\n\n78 111 32 115 97 109 112 108 101 32 105 110 112 117 116 46\n\n\n\nSample Output:\n\n78 111 32 115 97 109 112 108 101 32 111 117 116 112 117 116 46\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-08-23 14:00:07 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ FCI-CU Tournament 2014 - Final Round\n\n\n\n",
    "Example": "\nSample Input:\n\n78 111 32 115 97 109 112 108 101 32 105 110 112 117 116 46\n\n\nSample Output:\n\n78 111 32 115 97 109 112 108 101 32 111 117 116 112 117 116 46\n\n",
    "Description": "\nProblem Statement:\n\n\n67 111 110 103 114 97 116 117 108 97 116 105 111 110 115 44 32 121 111 117 32 107 110 101 119 32 116 104 97 116 32 105 116 32 119 97 115 32 115 111 109 101 32 65 83 67 73 73 32 99 111 100 101 115 46 32 66 117 116 32 116 104 105 115 32 105 115 32 110 111 116 32 116 104 101 32 101 110 100 44 32 121 111 117 32 104 97 118 101 32 106 117 115 116 32 115 111 108 118 101 100 32 116 104 101 32 102 105 114 115 116 32 112 117 122 122 108 101 46 32 71 111 32 104 101 114 101 32 116 111 32 115 111 108 118 101 32 116 104 101 32 110 101 120 116 32 112 117 122 122 108 101 58 32 104 116 116 112 58 47 47 97 50 111 106 46 99 111 109 47 112 117 122 122 108 101 46 106 115 112\n\n\n",
    "Title": "208. 87 84 72 63 33",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=208",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\n89 111 117 32 119 105 108 108 32 107 110 111 119 32 119 104 97 116 32 116 111 32 111 117 116 112 117 116 32 111 110 99 101 32 121 111 117 32 115 111 108 118 101 32 97 108 108 32 112 117 122 122 108 101 115 46\n\n\n"
  },
  "2116": {
    "Input Description": "\nInput Format:\n\n\ntupni on\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n212. Don't Give Up!\n\n\n\n\n\nProblem Statement:\n\n\n72 97 104 97 46 32 68 105 100 32 121 111 117 32 101 120 112 101 99 116 32 116 111 32 115 101 101 32 116 104 101 32 115 97 109 101 32 116 114 105 99 107 32 97 103 97 105 110 63 32 83 101 114 105 111 117 115 108 121 63 33 32 78 105 99 101 32 116 114 121 46 32 84 114 121 32 104 97 114 100 101 114 33 32 58 45 80\n\nWelcome back! ;-) As you see in the problem name, just don't give up and keep trying. You will find the first hint here in this page, just make sure to read everything and look everywhere (the hint might be hidden somewhere). Good luck!\n\n\n\n\n\nInput Format:\n\n\ntupni on\n\n\n\n\nOutput Format:\n\n\nselzzup lla evlos uoy ecno tuptuo ot tahw wonk lliw uoy\n\n\n\n\nSample Input:\n\ntupni elpmas on\n\n\n\nSample Output:\n\ntuptuo elpmas on\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-09-05 17:00:31 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\ntupni elpmas on\n\n\nSample Output:\n\ntuptuo elpmas on\n\n",
    "Description": "\nProblem Statement:\n\n\n72 97 104 97 46 32 68 105 100 32 121 111 117 32 101 120 112 101 99 116 32 116 111 32 115 101 101 32 116 104 101 32 115 97 109 101 32 116 114 105 99 107 32 97 103 97 105 110 63 32 83 101 114 105 111 117 115 108 121 63 33 32 78 105 99 101 32 116 114 121 46 32 84 114 121 32 104 97 114 100 101 114 33 32 58 45 80\n\nWelcome back! ;-) As you see in the problem name, just don't give up and keep trying. You will find the first hint here in this page, just make sure to read everything and look everywhere (the hint might be hidden somewhere). Good luck!\n\n\n",
    "Title": "212. Don't Give Up!",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=212",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nselzzup lla evlos uoy ecno tuptuo ot tahw wonk lliw uoy\n\n\n"
  },
  "2117": {
    "Input Description": "\nInput Format:\n\n\nThe input starts with an integer K (1 < K < 100) indicating the number of classes on a\nline by itself. Each of the following K lines gives a class's data, which starts with an\ninteger N (2 < N < 50) indicating the number of pupils in the class. The number of pupils\nis followed by their marks, given as integers, in the range of zero to one hundred, separated\nby single spaces.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n213. Class Statistics\n\n\n\n\n\nProblem Statement:\n\n\nThe new principal of Woop Woop Public plans to meet the teaching team to discuss the\nperformance of the classes/teachers and, being a bean counting fundamentalist, he wants to\narm himself with some statistics for the meetings.\n\nYour task is to write a program that reads the pupils' marks in each class and generates\nperformance reports for the principal prior to the meetings.\n\n\n\n\nInput Format:\n\n\nThe input starts with an integer K (1 < K < 100) indicating the number of classes on a\nline by itself. Each of the following K lines gives a class's data, which starts with an\ninteger N (2 < N < 50) indicating the number of pupils in the class. The number of pupils\nis followed by their marks, given as integers, in the range of zero to one hundred, separated\nby single spaces.\n\n\n\n\nOutput Format:\n\n\nThe report for each class consists of two lines.\n- The first line consists of the sentence: \"Class X\", where X indicates the class number\nstarting with the value of one.\n- The second line reports the maximum class mark, minimum class mark and the largest\ndifference between consecutive marks (when sorted in non-decreasing order) in the\nclass using the formats shown in the sample below.\n\n\n\n\nSample Input:\n\n2\n5 30 25 76 23 78\n6 25 50 70 99 70 90\n\n\n\nSample Output:\n\nClass 1\nMax 78, Min 23, Largest gap 46\nClass 2\nMax 99, Min 25, Largest gap 25\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-09-07 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 30 25 76 23 78\n6 25 50 70 99 70 90\n\n\nSample Output:\n\nClass 1\nMax 78, Min 23, Largest gap 46\nClass 2\nMax 99, Min 25, Largest gap 25\n\n",
    "Description": "\nProblem Statement:\n\n\nThe new principal of Woop Woop Public plans to meet the teaching team to discuss the\nperformance of the classes/teachers and, being a bean counting fundamentalist, he wants to\narm himself with some statistics for the meetings.\n\nYour task is to write a program that reads the pupils' marks in each class and generates\nperformance reports for the principal prior to the meetings.\n\n\n",
    "Title": "213. Class Statistics",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=213",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nThe report for each class consists of two lines.\n- The first line consists of the sentence: \"Class X\", where X indicates the class number\nstarting with the value of one.\n- The second line reports the maximum class mark, minimum class mark and the largest\ndifference between consecutive marks (when sorted in non-decreasing order) in the\nclass using the formats shown in the sample below.\n\n\n"
  },
  "2118": {
    "Input Description": "\nInput Format:\n\n\nThe input begins with an integer T indicating the number of cases that follow (0 < T\n< 100). Each of the following T lines contains one test case, made up of three readings,\nseparated by single space characters: H1:M1 H2:M2 H3:M3 In each reading\nH1,H2,H3 represent the hours displayed (0 < H1,H2,H3 < 13), and M1,M2,M3 represent\nthe minutes displayed (0 < M1,M2,M3 < 60).\nIf the number of minutes is less than 10, a leading 0 is added.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n214. Avoiding a disaster\n\n\n\n\n\nProblem Statement:\n\n\nPercy likes to be punctual. So much so that he always keeps three watches with him,\nso that he can be sure exactly what the time is. However, Percy's having a bad day. He\nfound out that one of his watches was giving the wrong time. What's worse, when he\nwent to correct the watch, he corrected the wrong one! That is, one watch was running\nx minutes behind (where x <= 480) and he wound one of the other watches x minutes\nforward. He now has three watches reading three different times, and hence is in\nserious danger of being tardy. Can you help Percy by writing a program that takes in the\nthree times displayed on the watches and returns the correct time?\n\n\n\n\nInput Format:\n\n\nThe input begins with an integer T indicating the number of cases that follow (0 < T\n< 100). Each of the following T lines contains one test case, made up of three readings,\nseparated by single space characters: H1:M1 H2:M2 H3:M3 In each reading\nH1,H2,H3 represent the hours displayed (0 < H1,H2,H3 < 13), and M1,M2,M3 represent\nthe minutes displayed (0 < M1,M2,M3 < 60).\nIf the number of minutes is less than 10, a leading 0 is added.\n\n\n\n\nOutput Format:\n\n\nFor each test case, one line should be produced, formatted exactly as follows: \"The\ncorrect time is Hi:Mi\". If the number of minutes is less than 10, a leading 0 should be\nadded. If the number of hours is less than 10, a leading 0 should NOT be added. If it is\nimpossible to tell the time from the three readings, print the string: \"Look at the sun\".\n\n\n\n\nSample Input:\n\n3 \n5:00 12:00 10:00\n11:59 12:30 1:01\n12:00 4:00 8:00\n\n\n\nSample Output:\n\nThe correct time is 5:00\nThe correct time is 12:30\nLook at the sun\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-09-07 07:00:01 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3 \n5:00 12:00 10:00\n11:59 12:30 1:01\n12:00 4:00 8:00\n\n\nSample Output:\n\nThe correct time is 5:00\nThe correct time is 12:30\nLook at the sun\n\n",
    "Description": "\nProblem Statement:\n\n\nPercy likes to be punctual. So much so that he always keeps three watches with him,\nso that he can be sure exactly what the time is. However, Percy's having a bad day. He\nfound out that one of his watches was giving the wrong time. What's worse, when he\nwent to correct the watch, he corrected the wrong one! That is, one watch was running\nx minutes behind (where x <= 480) and he wound one of the other watches x minutes\nforward. He now has three watches reading three different times, and hence is in\nserious danger of being tardy. Can you help Percy by writing a program that takes in the\nthree times displayed on the watches and returns the correct time?\n\n\n",
    "Title": "214. Avoiding a disaster",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=214",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, one line should be produced, formatted exactly as follows: \"The\ncorrect time is Hi:Mi\". If the number of minutes is less than 10, a leading 0 should be\nadded. If the number of hours is less than 10, a leading 0 should NOT be added. If it is\nimpossible to tell the time from the three readings, print the string: \"Look at the sun\".\n\n\n"
  },
  "2119": {
    "Input Description": "\nInput Format:\n\n\nThe input starts with an integer K (1 <= K <= 100) indicating the number of classes.\nEach class starts with an integer N (1 <= N <= 50) indicating the number of pupils in\nthe class. Each of the following N lines starts with a pupil's name followed by up-to\nfive assessments of his/her answers. An assessment of 'yes' or 'y' indicates a correct\nanswer and an assessment of 'n' or 'no' indicates a wrong answer. A pupil's name\nconsists of a single string with no white spaces.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n215. Roll-call in Woop Woop High\n\n\n\n\n\nProblem Statement:\n\n\nThe new principal of Woop Woop High is not satisfied with her pupils performance.\nShe introduced a new roll-call process to get a daily measure of the pupils' learning,\nwhich proceeds as follows:\n\nAt the beginning of the daily roll-call period each pupil is handed a question, which\nthey must attempt to answer, before proceeding to their classes. A pupil stops after the\nquestion is answered correctly. Each pupil is allowed up to five attempts to answer the\nquestion correctly.\n\nPupils who answer correctly on the first attempt are marked present. Pupils who\nanswer correctly after more than one attempt are encouraged to work at home. Pupils\nwho fail to develop a correct answer within five attempts are given remedial classes\nafter school. Pupils who do not give any answer are marked as abscent.\n\nYour task is to write a program that reads the pupils' assessments and generates\nperformance reports for the principal to proceed with appropriate actions.\n\n\n\n\nInput Format:\n\n\nThe input starts with an integer K (1 <= K <= 100) indicating the number of classes.\nEach class starts with an integer N (1 <= N <= 50) indicating the number of pupils in\nthe class. Each of the following N lines starts with a pupil's name followed by up-to\nfive assessments of his/her answers. An assessment of 'yes' or 'y' indicates a correct\nanswer and an assessment of 'n' or 'no' indicates a wrong answer. A pupil's name\nconsists of a single string with no white spaces.\n\n\n\n\nOutput Format:\n\n\nThe attendance report for each class consists of five lines.\n- The first line consists of the sentence: \"Roll-call: X\", where X indicates the class\nnumber starting with the value of one.\n- The second line consists of the sentence: ''Present: Y1 out of N'', where Y1 is the\nnumber of pupils who did not submit a wrong answer.\n- The third line consists of the sentence: ''Needs to study at home: Y2 out of N'', where\nY2 is the number of pupils who submitted a number of wrong answers before\nsubmitting the correct answer.\n- The fourth line consists of the sentence: ''Needs remedial work after school: Y3 out of\nN'', where Y3 indicates the number of pupils whose submitted five wrong answers.\n- The fifth line consists of the sentence: ''Absent: Y4 out of N'', where Y4 indicates the\nnumber of absent pupils.\n\n\n\n\nSample Input:\n\n2\n5\nDoc n y\nsneezy n n no yes\nprincecharming no n no no n\ngoofy yes\ngrumpy n y\n5\nevilemperor n y\nprincesslia\nr2d2 no no y\nobeyonecanopy n no y\ndarthvedar y\n\n\n\n\nSample Output:\n\nRoll-call: 1\nPresent: 1 out of 5\nNeeds to study at home: 3 out of 5\nNeeds remedial work after school: 1 out of 5\nAbsent: 0 out of 5\nRoll-call: 2\nPresent: 1 out of 5\nNeeds to study at home: 3 out of 5\nNeeds remedial work after school: 0 out of 5\nAbsent: 1 out of 5\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-09-07 07:00:02 UTC\n\n\n\n\nTime Limit:\n\n\n10 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5\nDoc n y\nsneezy n n no yes\nprincecharming no n no no n\ngoofy yes\ngrumpy n y\n5\nevilemperor n y\nprincesslia\nr2d2 no no y\nobeyonecanopy n no y\ndarthvedar y\n\n\n\nSample Output:\n\nRoll-call: 1\nPresent: 1 out of 5\nNeeds to study at home: 3 out of 5\nNeeds remedial work after school: 1 out of 5\nAbsent: 0 out of 5\nRoll-call: 2\nPresent: 1 out of 5\nNeeds to study at home: 3 out of 5\nNeeds remedial work after school: 0 out of 5\nAbsent: 1 out of 5\n\n",
    "Description": "\nProblem Statement:\n\n\nThe new principal of Woop Woop High is not satisfied with her pupils performance.\nShe introduced a new roll-call process to get a daily measure of the pupils' learning,\nwhich proceeds as follows:\n\nAt the beginning of the daily roll-call period each pupil is handed a question, which\nthey must attempt to answer, before proceeding to their classes. A pupil stops after the\nquestion is answered correctly. Each pupil is allowed up to five attempts to answer the\nquestion correctly.\n\nPupils who answer correctly on the first attempt are marked present. Pupils who\nanswer correctly after more than one attempt are encouraged to work at home. Pupils\nwho fail to develop a correct answer within five attempts are given remedial classes\nafter school. Pupils who do not give any answer are marked as abscent.\n\nYour task is to write a program that reads the pupils' assessments and generates\nperformance reports for the principal to proceed with appropriate actions.\n\n\n",
    "Title": "215. Roll-call in Woop Woop High",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=215",
    "Time Limit": "10 seconds",
    "Output Description": "\nOutput Format:\n\n\nThe attendance report for each class consists of five lines.\n- The first line consists of the sentence: \"Roll-call: X\", where X indicates the class\nnumber starting with the value of one.\n- The second line consists of the sentence: ''Present: Y1 out of N'', where Y1 is the\nnumber of pupils who did not submit a wrong answer.\n- The third line consists of the sentence: ''Needs to study at home: Y2 out of N'', where\nY2 is the number of pupils who submitted a number of wrong answers before\nsubmitting the correct answer.\n- The fourth line consists of the sentence: ''Needs remedial work after school: Y3 out of\nN'', where Y3 indicates the number of pupils whose submitted five wrong answers.\n- The fifth line consists of the sentence: ''Absent: Y4 out of N'', where Y4 indicates the\nnumber of absent pupils.\n\n\n"
  },
  "2120": {
    "Input Description": "\nInput Format:\n\n\nThe input starts with an integer K (1 <= K <= 1000) that represents the number of cases on\na line by itself. Each of the following K lines describes one of the cases and consists of a\nfraction formatted as two integers, A and B, separated by \"/\" such that:\n1. B is a 32 bit integer strictly greater than 2, and\n2. 0 < A < B\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n217. RealPhobia\n\n\n\n\n\nProblem Statement:\n\n\nBert is a programmer with a real fear of floating point arithmetic. Bert has quite\nsuccessfully used rational numbers to write his programs but he does not like it when the\ndenominator grows large.\n\nYour task is to help Bert by writing a program that decreases the denominator of a\nrational number, whilst introducing the smallest error possible. For a rational number A/B,\nwhere B > 2 and 0 < A < B, your program needs to identify a rational number C/D such\nthat:\n\n1. 0 < C < D < B, and\n2. the error |A/B - C/D| is the minimum over all possible values of C and D, and\n3. D is the smallest such positive integer.\n\n\n\n\nInput Format:\n\n\nThe input starts with an integer K (1 <= K <= 1000) that represents the number of cases on\na line by itself. Each of the following K lines describes one of the cases and consists of a\nfraction formatted as two integers, A and B, separated by \"/\" such that:\n1. B is a 32 bit integer strictly greater than 2, and\n2. 0 < A < B\n\n\n\n\nOutput Format:\n\n\nFor each case, the output consists of a fraction on a line by itself. The fraction should\nbe formatted as two integers separated by \"/\".\n\n\n\n\nSample Input:\n\n3 \n1/4\n2/3\n13/21\n\n\n\nSample Output:\n\n1/3\n1/2\n8/13\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-09-07 07:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3 \n1/4\n2/3\n13/21\n\n\nSample Output:\n\n1/3\n1/2\n8/13\n\n",
    "Description": "\nProblem Statement:\n\n\nBert is a programmer with a real fear of floating point arithmetic. Bert has quite\nsuccessfully used rational numbers to write his programs but he does not like it when the\ndenominator grows large.\n\nYour task is to help Bert by writing a program that decreases the denominator of a\nrational number, whilst introducing the smallest error possible. For a rational number A/B,\nwhere B > 2 and 0 < A < B, your program needs to identify a rational number C/D such\nthat:\n\n1. 0 < C < D < B, and\n2. the error |A/B - C/D| is the minimum over all possible values of C and D, and\n3. D is the smallest such positive integer.\n\n\n",
    "Title": "217. RealPhobia",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=217",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each case, the output consists of a fraction on a line by itself. The fraction should\nbe formatted as two integers separated by \"/\".\n\n\n"
  },
  "2121": {
    "Input Description": "\nInput Format:\n\n\nThe input consists of multiple cases where one dictionary is used for each case. A case\nstarts with an integer W (1 <= W < 100,000) that indicates the number of words in the\ndictionary on a line by itself. Each of the following W lines contains a single word. The\nwords are in no particular order, and they are all distinct within a test case. Each word is a\nstring that consists of L lowercase letters and contains no spaces. 1 <= L <= 30. The input is\nterminated by a zero on a line by itself.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n218. Insidious Branding\n\n\n\n\n\nProblem Statement:\n\n\nA brand designer came up with a strategy that you think will be the key to the success\nof your company, and therefore, you. The strategy is to use a brand name that has two\npossible decompositions into a pair of frequently used everyday words, and then expose the\nconsumer to the four words repeatedly in brief episodes of sensory bombardment. The\nfeeble mind of the consumer will jar, and the brand will then ease its way into the victim's\nlong-term memory.\n\nYour task is to write a program that sifts through a dictionary for combinations of four\nwords (not necessarily distinct), say A, B, C and D, which satisfy the equation\n\nA + B = C + D\nwhere '+' denotes concatenation, '=' denotes an exact string match, the length of the word A\nis strictly less than the length of the word C, and all four strings are not empty.\n\n\n\n\nInput Format:\n\n\nThe input consists of multiple cases where one dictionary is used for each case. A case\nstarts with an integer W (1 <= W < 100,000) that indicates the number of words in the\ndictionary on a line by itself. Each of the following W lines contains a single word. The\nwords are in no particular order, and they are all distinct within a test case. Each word is a\nstring that consists of L lowercase letters and contains no spaces. 1 <= L <= 30. The input is\nterminated by a zero on a line by itself.\n\n\n\n\nOutput Format:\n\n\nThe output consists of a single integer, on a line by itself, that represents the number of\nequations that can be formed.\n\n\n\n\nSample Input:\n\n4\ncatchment\nally\ncatch\nmentally\n0\n\n\n\nSample Output:\n\n1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-09-07 07:00:05 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n4\ncatchment\nally\ncatch\nmentally\n0\n\n\nSample Output:\n\n1\n\n",
    "Description": "\nProblem Statement:\n\n\nA brand designer came up with a strategy that you think will be the key to the success\nof your company, and therefore, you. The strategy is to use a brand name that has two\npossible decompositions into a pair of frequently used everyday words, and then expose the\nconsumer to the four words repeatedly in brief episodes of sensory bombardment. The\nfeeble mind of the consumer will jar, and the brand will then ease its way into the victim's\nlong-term memory.\n\nYour task is to write a program that sifts through a dictionary for combinations of four\nwords (not necessarily distinct), say A, B, C and D, which satisfy the equation\n\nA + B = C + D\nwhere '+' denotes concatenation, '=' denotes an exact string match, the length of the word A\nis strictly less than the length of the word C, and all four strings are not empty.\n\n\n",
    "Title": "218. Insidious Branding",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=218",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nThe output consists of a single integer, on a line by itself, that represents the number of\nequations that can be formed.\n\n\n"
  },
  "2122": {
    "Input Description": "\nInput Format:\n\n\nThe input starts with an integer K (1 < K <= 50) indicating the number of scenarios on a\nline by itself. The description for each scenario starts with an integer N (2 <= N <= 300)\nindicating the number of pads, on a line by itself, followed by N lines that describe the\ncolors, locations and sizes of the N pads. Each line contains the frequency, followed by\nthe x- and y-coordinates of the pad's center and then the radius. The frequency is given as\na real value with no more than three decimal places. The coordinates and radius are given,\nin meters, as integers.\n\nAll values are separated by a single space. All integer values are in the range of\n-10,000 to 10,000 inclusive.\n\nIn each scenario, all frequencies are in the range of 400.0 to 789.0 inclusive. Exactly\none pad will have a frequency of \"400.0\" and exactly one pad will have a frequency of\n\"789.0\".\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n220. Pahom on Water\n\n\n\n\n\nProblem Statement:\n\n\nPahom on Water is an interactive computer game inspired by a short story of Leo\nTolstoy about a poor man who, in his lust for land, forfeits everything.\n\nThe game's starting screen displays a number of circular pads painted with\ncolours from the visible light spectrum. More than one pad may be painted\nwith the same colour (defined by a certain frequency) except for the two\ncolours red and violet. The display contains only one red pad (the lowest\nfrequency of 400 THz) and one violet pad (the highest frequency of 789 THz).\nA pad may intersect, or even contain another pad with a different colour but\nnever merely touch its boundary. The display also shows a figure representing\nPahom standing on the red pad.\n\nThe game's objective is to walk the figure of Pahom from the red pad to the\nviolet pad and return back to the red pad. The walk must observe the following\nrules:\n\n1. If pad \u03b1 and pad \u03b2 have a common intersection and the\nfrequency of the colour of pad \u03b1 is strictly smaller than the\nfrequency of the colour of pad \u03b2, then Pahom figure can walk\nfrom \u03b1 to \u03b2 during the walk from the red pad to the violet pad\n2. If pad \u03b1 and pad \u03b2 have a common intersection and the\nfrequency of the colour of pad \u03b1 is strictly greater than the\nfrequency of the colour of pad \u03b2, then Pahom figure can walk\nfrom \u03b1 to \u03b2 during the walk from the violet pad to the red pad\n3. A coloured pad, with the exception of the red pad, disappears\nfrom display when the Pahom figure walks away from it.\n\nThe developer of the game has programmed all the whizzbang features of the game.\nAll that is left is to ensure that Pahom has a chance to succeed in each instance of the\ngame (that is, there is at least one valid walk from the red pad to the violet pad and then\nback again to the red pad.) Your task is to write a program to check whether at least one\nvalid path exists in each instance of the game.\n\n\n\n\nInput Format:\n\n\nThe input starts with an integer K (1 < K <= 50) indicating the number of scenarios on a\nline by itself. The description for each scenario starts with an integer N (2 <= N <= 300)\nindicating the number of pads, on a line by itself, followed by N lines that describe the\ncolors, locations and sizes of the N pads. Each line contains the frequency, followed by\nthe x- and y-coordinates of the pad's center and then the radius. The frequency is given as\na real value with no more than three decimal places. The coordinates and radius are given,\nin meters, as integers.\n\nAll values are separated by a single space. All integer values are in the range of\n-10,000 to 10,000 inclusive.\n\nIn each scenario, all frequencies are in the range of 400.0 to 789.0 inclusive. Exactly\none pad will have a frequency of \"400.0\" and exactly one pad will have a frequency of\n\"789.0\".\n\n\n\n\nOutput Format:\n\n\nThe output for each scenario consists of a single line that contains:\n- Game is VALID, or\n- Game is NOT VALID\n\n\n\n\nSample Input:\n\n2\n2\n400.0 0 0 4\n789.0 7 0 2\n4\n400.0 0 0 4\n789.0 7 0 2\n500.35 5 0 2\n500.32 5 0 3\n\n\n\n\nSample Output:\n\nGame is NOT VALID\nGame is VALID\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-09-07 07:00:07 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2\n400.0 0 0 4\n789.0 7 0 2\n4\n400.0 0 0 4\n789.0 7 0 2\n500.35 5 0 2\n500.32 5 0 3\n\n\n\nSample Output:\n\nGame is NOT VALID\nGame is VALID\n\n",
    "Description": "\nProblem Statement:\n\n\nPahom on Water is an interactive computer game inspired by a short story of Leo\nTolstoy about a poor man who, in his lust for land, forfeits everything.\n\nThe game's starting screen displays a number of circular pads painted with\ncolours from the visible light spectrum. More than one pad may be painted\nwith the same colour (defined by a certain frequency) except for the two\ncolours red and violet. The display contains only one red pad (the lowest\nfrequency of 400 THz) and one violet pad (the highest frequency of 789 THz).\nA pad may intersect, or even contain another pad with a different colour but\nnever merely touch its boundary. The display also shows a figure representing\nPahom standing on the red pad.\n\nThe game's objective is to walk the figure of Pahom from the red pad to the\nviolet pad and return back to the red pad. The walk must observe the following\nrules:\n\n1. If pad \u03b1 and pad \u03b2 have a common intersection and the\nfrequency of the colour of pad \u03b1 is strictly smaller than the\nfrequency of the colour of pad \u03b2, then Pahom figure can walk\nfrom \u03b1 to \u03b2 during the walk from the red pad to the violet pad\n2. If pad \u03b1 and pad \u03b2 have a common intersection and the\nfrequency of the colour of pad \u03b1 is strictly greater than the\nfrequency of the colour of pad \u03b2, then Pahom figure can walk\nfrom \u03b1 to \u03b2 during the walk from the violet pad to the red pad\n3. A coloured pad, with the exception of the red pad, disappears\nfrom display when the Pahom figure walks away from it.\n\nThe developer of the game has programmed all the whizzbang features of the game.\nAll that is left is to ensure that Pahom has a chance to succeed in each instance of the\ngame (that is, there is at least one valid walk from the red pad to the violet pad and then\nback again to the red pad.) Your task is to write a program to check whether at least one\nvalid path exists in each instance of the game.\n\n\n",
    "Title": "220. Pahom on Water",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=220",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nThe output for each scenario consists of a single line that contains:\n- Game is VALID, or\n- Game is NOT VALID\n\n\n"
  },
  "2123": {
    "Input Description": "\nInput Format:\n\n\nInput starts with an integer, on a line by itself, that represents the number of tracks to\nbe shortened. The description of each track begins with a positive integer N, on a line by\nitself, representing the number of recorded points that define the track. Each of the\nfollowing N lines contains two integers, separated by a single space, that define the xand\ny-coordinates of a point on the track in metres. The points are listed in order of\ntheir appearance on the track.\n\nTwo successive points, which form a segment, will be no more than thirty metres\napart and a segment will not intersect more than twenty other segments. All x- and ycoordinates\nhave values between -10,000,000 and 10,000,000, inclusive. N has values\nbetween 1 and 100,000, inclusive.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n221. Detour Buster\n\n\n\n\n\nProblem Statement:\n\n\nThe Green Parcel Services company employs cyclists to deliver parcels across a\nlarge metropolitan city, and employees are paid according to the distances they must\ntravel to deliver parcels. Each company bicycle has been equipped with a global\npositioning system that records its position once every couple of seconds. The sequence\nof positions for one delivery is called a track and the length of a track, which is the sum\nof euclidean distances between consecutive pairs of recorded points, is used to calculate\nthe employee's payment.\n\nA recent audit of the recorded tracks revealed that some tracks self-intersect, which\nindicates that some employees are making unnecessary detours. Your task is to write a\nprogram to process a given track and calculate the length of the shortest possible track\nfrom the first to the last point of the original track. The shortest possible track must be\npart of the original track and may include travelling in the same or opposite direction\nalong the original track.\n\n\n\n\nInput Format:\n\n\nInput starts with an integer, on a line by itself, that represents the number of tracks to\nbe shortened. The description of each track begins with a positive integer N, on a line by\nitself, representing the number of recorded points that define the track. Each of the\nfollowing N lines contains two integers, separated by a single space, that define the xand\ny-coordinates of a point on the track in metres. The points are listed in order of\ntheir appearance on the track.\n\nTwo successive points, which form a segment, will be no more than thirty metres\napart and a segment will not intersect more than twenty other segments. All x- and ycoordinates\nhave values between -10,000,000 and 10,000,000, inclusive. N has values\nbetween 1 and 100,000, inclusive.\n\n\n\n\nOutput Format:\n\n\nFor each input track, the output consists of a single integer, on a line by itself, which\nis the length of the shortest track in metres. The answer must be rounded to the nearest\ninteger value.\n\nReminder: Rounding a positive number R.xyz to the nearest integer\n- If the first decimal place (that is x) is less than 5, then the rounded value is R\n- Otherwise, the rounded value is R+1\n\n\n\n\nSample Input:\n\n2\n5\n0 0\n12 0\n20 0\n10 10\n10 -10\n6\n0 0\n15 0\n10 -5\n4 1\n10 1\n10 -10\n\n\n\n\nSample Output:\n\n20\n17\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-09-07 07:00:08 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5\n0 0\n12 0\n20 0\n10 10\n10 -10\n6\n0 0\n15 0\n10 -5\n4 1\n10 1\n10 -10\n\n\n\nSample Output:\n\n20\n17\n\n",
    "Description": "\nProblem Statement:\n\n\nThe Green Parcel Services company employs cyclists to deliver parcels across a\nlarge metropolitan city, and employees are paid according to the distances they must\ntravel to deliver parcels. Each company bicycle has been equipped with a global\npositioning system that records its position once every couple of seconds. The sequence\nof positions for one delivery is called a track and the length of a track, which is the sum\nof euclidean distances between consecutive pairs of recorded points, is used to calculate\nthe employee's payment.\n\nA recent audit of the recorded tracks revealed that some tracks self-intersect, which\nindicates that some employees are making unnecessary detours. Your task is to write a\nprogram to process a given track and calculate the length of the shortest possible track\nfrom the first to the last point of the original track. The shortest possible track must be\npart of the original track and may include travelling in the same or opposite direction\nalong the original track.\n\n\n",
    "Title": "221. Detour Buster",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=221",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each input track, the output consists of a single integer, on a line by itself, which\nis the length of the shortest track in metres. The answer must be rounded to the nearest\ninteger value.\n\nReminder: Rounding a positive number R.xyz to the nearest integer\n- If the first decimal place (that is x) is less than 5, then the rounded value is R\n- Otherwise, the rounded value is R+1\n\n\n"
  },
  "2124": {
    "Input Description": "\nInput Format:\n\n\nThe input starts with an integer K (1 <= K <= 100) indicating the number of cases.\nEach case starts with an integer N (1 <= N <= 600) indicating the size of the square grid.\nEach of the following N lines contains N characters that represent the cells of a row in\nthe grid. A character of '#' represents an oily cell, and a character of '.' represents a pure\nwater cell.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n222. Oil Skimming\n\n\n\n\n\nProblem Statement:\n\n\nThanks to a certain \"green\" resources company, there is a new profitable industry of\noil skimming. There are large slicks of crude oil floating in the Gulf of Mexico just\nwaiting to be scooped up by enterprising oil barons. One such oil baron has a special\nplane that can skim the surface of the water collecting oil on the water's surface.\nHowever, each scoop covers a 10m by 20m rectangle (going either east/west or\nnorth/south). It also requires that the rectangle be completely covered in oil, otherwise\nthe product is contaminated by pure ocean water and thus unprofitable!\n\nGiven a map of an oil slick, the oil baron would like you to compute the maximum\nnumber of scoops that may be extracted. The map is an NxN grid where each cell\nrepresents a 10m square of water, and each cell is marked as either being covered in oil\nor pure water.\n\n\n\n\nInput Format:\n\n\nThe input starts with an integer K (1 <= K <= 100) indicating the number of cases.\nEach case starts with an integer N (1 <= N <= 600) indicating the size of the square grid.\nEach of the following N lines contains N characters that represent the cells of a row in\nthe grid. A character of '#' represents an oily cell, and a character of '.' represents a pure\nwater cell.\n\n\n\n\nOutput Format:\n\n\nFor each case, one line should be produced, formatted exactly as follows: \"Case X:\nM\" where X is the case number (starting from 1) and M is the maximum number of\nscoops of oil that may be extracted.\n\n\n\n\nSample Input:\n\n1\n6\n......\n.##...\n.##...\n....#.\n....##\n......\n\n\n\nSample Output:\n\nCase 1: 3\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-09-07 07:00:09 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n6\n......\n.##...\n.##...\n....#.\n....##\n......\n\n\nSample Output:\n\nCase 1: 3\n\n",
    "Description": "\nProblem Statement:\n\n\nThanks to a certain \"green\" resources company, there is a new profitable industry of\noil skimming. There are large slicks of crude oil floating in the Gulf of Mexico just\nwaiting to be scooped up by enterprising oil barons. One such oil baron has a special\nplane that can skim the surface of the water collecting oil on the water's surface.\nHowever, each scoop covers a 10m by 20m rectangle (going either east/west or\nnorth/south). It also requires that the rectangle be completely covered in oil, otherwise\nthe product is contaminated by pure ocean water and thus unprofitable!\n\nGiven a map of an oil slick, the oil baron would like you to compute the maximum\nnumber of scoops that may be extracted. The map is an NxN grid where each cell\nrepresents a 10m square of water, and each cell is marked as either being covered in oil\nor pure water.\n\n\n",
    "Title": "222. Oil Skimming",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=222",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each case, one line should be produced, formatted exactly as follows: \"Case X:\nM\" where X is the case number (starting from 1) and M is the maximum number of\nscoops of oil that may be extracted.\n\n\n"
  },
  "2125": {
    "Input Description": "\nInput Format:\n\n\nThe input consists of many games. The description for each game is given on two lines.\nThe first line contains two integers T and N, separated by a single space, that represent the\ntarget integer and the number of given integers. -700,000 <= T <= 700,000 and 4 <= N <= 7.\nThe second line contains N integers separated by single spaces. All integers have values\nbetween -1,000,000 and 1,000,000 inclusive.\n\nTwo zeros on a line by themselves, separated by a single space, terminate the input.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n223. Numbers Game\n\n\n\n\n\nProblem Statement:\n\n\nThe objective of the numbers game is to use the basic arithmetic operations (+, -, * and /)\nand a number of given integers (4 to 7 integers) to get as close as possible to a given target\ninteger. Each of the operations can be used multiple times, but each of the integers can be\nused at-most once. A player wins if he/she manages to calculate the closest possible value to\nthe target integer. For example, the closest possible value to a target of 20 using the integers\n{2,3,5} can be achieved by the expression (2+5) * 3.\n\nYour task is to write a program to calculate the answer for each game. Note that \"/\"\nstands for integer division (examples are: 5/4 equals 1, 8/9 equals 0.)\n\n\n\n\nInput Format:\n\n\nThe input consists of many games. The description for each game is given on two lines.\nThe first line contains two integers T and N, separated by a single space, that represent the\ntarget integer and the number of given integers. -700,000 <= T <= 700,000 and 4 <= N <= 7.\nThe second line contains N integers separated by single spaces. All integers have values\nbetween -1,000,000 and 1,000,000 inclusive.\n\nTwo zeros on a line by themselves, separated by a single space, terminate the input.\n\n\n\n\nOutput Format:\n\n\nFor each game, the output consists of a single line that contains the closest possible\ninteger to the target. Any answer with the smallest distance to the target is correct.\n\n\n\n\nSample Input:\n\n30 5\n1 2 3 4 5\n10000 5\n11 2 3 7 5\n0 0\n\n\n\nSample Output:\n\n30\n2310\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nferas_kassar\n\n\n\n\nAdded at:\n\n\n2014-09-07 07:00:10 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n30 5\n1 2 3 4 5\n10000 5\n11 2 3 7 5\n0 0\n\n\nSample Output:\n\n30\n2310\n\n",
    "Description": "\nProblem Statement:\n\n\nThe objective of the numbers game is to use the basic arithmetic operations (+, -, * and /)\nand a number of given integers (4 to 7 integers) to get as close as possible to a given target\ninteger. Each of the operations can be used multiple times, but each of the integers can be\nused at-most once. A player wins if he/she manages to calculate the closest possible value to\nthe target integer. For example, the closest possible value to a target of 20 using the integers\n{2,3,5} can be achieved by the expression (2+5) * 3.\n\nYour task is to write a program to calculate the answer for each game. Note that \"/\"\nstands for integer division (examples are: 5/4 equals 1, 8/9 equals 0.)\n\n\n",
    "Title": "223. Numbers Game",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=223",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each game, the output consists of a single line that contains the closest possible\ninteger to the target. Any answer with the smallest distance to the target is correct.\n\n\n"
  },
  "2126": {
    "Input Description": "\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first and only line of input contains three integers separated by single spaces: M(0 \u2264 M\u2264 100), the number of girls, N(0 \u2264 N\u2264 100), the number of boys, and K (0 \u2264 K\u2264 M+N), the number of competitors which have to be sent on an internship.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n224. Competition\n\n\n\n\n\nProblem Statement:\n\n\nEvery year, the University of Zagreb organizes a student team competition in informatics. Each team consists of three students. Traditionally, the best competitors from the university are girls, and they outnumber boys significantly. This year, boys have raised their voice and a rule was made that each team must consist of exactly one boy and two girls.\n\nTo make competitors' lives a little more difficult, the dean of the university has decided to send K of the competitors on an internship in a distant country. Those competitors will not be able to compete. Given the number of female competitors M, the number of male competitors N, and the number of competitors which have to be sent on an internship K, the dean has to create the maximum number of teams which will be able to attend the competition.\n\nFor example, if M is 6, N is 3 and K is 2, the dean can send one girl and one boy on an internship, which leaves him with 5 girls and 2 boys. He can then create two teams from them (one girl is left without a team).\n\n\n\n\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first and only line of input contains three integers separated by single spaces: M(0 \u2264 M\u2264 100), the number of girls, N(0 \u2264 N\u2264 100), the number of boys, and K (0 \u2264 K\u2264 M+N), the number of competitors which have to be sent on an internship.\n\n\n\n\nOutput Format:\n\n\nFor each test case, the first and only line of output must contain only one number: the maximum number of teams which can be formed.\n\n\n\n\nSample Input:\n\n3\n6 3 2\n2 1 1\n6 10 3\n\n\n\nSample Output:\n\n2\n0\n3\n\n\n\nNotes:\n\n\nOriginal source: COCI\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-10 22:08:11 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #1\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n6 3 2\n2 1 1\n6 10 3\n\n\nSample Output:\n\n2\n0\n3\n\n",
    "Description": "\nProblem Statement:\n\n\nEvery year, the University of Zagreb organizes a student team competition in informatics. Each team consists of three students. Traditionally, the best competitors from the university are girls, and they outnumber boys significantly. This year, boys have raised their voice and a rule was made that each team must consist of exactly one boy and two girls.\n\nTo make competitors' lives a little more difficult, the dean of the university has decided to send K of the competitors on an internship in a distant country. Those competitors will not be able to compete. Given the number of female competitors M, the number of male competitors N, and the number of competitors which have to be sent on an internship K, the dean has to create the maximum number of teams which will be able to attend the competition.\n\nFor example, if M is 6, N is 3 and K is 2, the dean can send one girl and one boy on an internship, which leaves him with 5 girls and 2 boys. He can then create two teams from them (one girl is left without a team).\n\n\n",
    "Title": "224. Competition",
    "Notes": "\nNotes:\n\n\nOriginal source: COCI\n\n",
    "URL": "https://a2oj.com/p?ID=224",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, the first and only line of output must contain only one number: the maximum number of teams which can be formed.\n\n\n"
  },
  "2127": {
    "Input Description": "\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T.\n\nOn each test case, the starting game position is described in the first 4 lines of input. There are 4 symbols in each line, which define the color of each stone in the row from the left to the right. The lines describe the rows of the chessboard from the top to the bottom. Symbol `0' means a white stone and symbol `1' a black one. There is no space symbol separating the symbols in the line. The fifth line is empty. The next 4 following lines describe the final game position in the same way.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n225. A Game on the Chessboard\n\n\n\n\n\nProblem Statement:\n\n\nOn the chessboard of size 4x4 there are 8 white and 8 black stones, i.e. one stone on each field. Such a configuration of stones is called a game position. Two stones are adjacent if they are on fields with a common side (i.e. they are adjacent in either horizontal or vertical direction but not diagonal). It means that each stone has at most 4 neighbors. The only legal move in our game is exchanging any two adjacent stones. Your task is to find the shortest number of moves transforming a given starting game position into a given final game position.\n\n\n\n\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T.\n\nOn each test case, the starting game position is described in the first 4 lines of input. There are 4 symbols in each line, which define the color of each stone in the row from the left to the right. The lines describe the rows of the chessboard from the top to the bottom. Symbol `0' means a white stone and symbol `1' a black one. There is no space symbol separating the symbols in the line. The fifth line is empty. The next 4 following lines describe the final game position in the same way.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print one line that contains the number of the moves.\n\n\n\n\nSample Input:\n\n1\n1111\n0000\n1110\n0010\n\n1010\n0101\n1010\n0101\n\n\n\nSample Output:\n\n4\n\n\n\nNotes:\n\n\nOriginal source: CEOI\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-10 22:08:14 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #1\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n1111\n0000\n1110\n0010\n\n1010\n0101\n1010\n0101\n\n\nSample Output:\n\n4\n\n",
    "Description": "\nProblem Statement:\n\n\nOn the chessboard of size 4x4 there are 8 white and 8 black stones, i.e. one stone on each field. Such a configuration of stones is called a game position. Two stones are adjacent if they are on fields with a common side (i.e. they are adjacent in either horizontal or vertical direction but not diagonal). It means that each stone has at most 4 neighbors. The only legal move in our game is exchanging any two adjacent stones. Your task is to find the shortest number of moves transforming a given starting game position into a given final game position.\n\n\n",
    "Title": "225. A Game on the Chessboard",
    "Notes": "\nNotes:\n\n\nOriginal source: CEOI\n\n",
    "URL": "https://a2oj.com/p?ID=225",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print one line that contains the number of the moves.\n\n\n"
  },
  "2128": {
    "Input Description": "\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains four integers, N, M, K, and L. N (1 \u2264 N \u2264 100 000) is the number of nodes of the network, M (1 \u2264 M \u2264 1 000 000) is the number of direct communication lines, K (1 \u2264 K \u2264 N) is the number of the nodes that provide service A, and L (1 \u2264 L \u2264 N) is the number of the nodes that provide service B. The nodes are identified by the numbers from 1 to N. The second line contains K integers, the identifiers of the nodes that provide service A. The third line contains L integers, the identifiers of the nodes that provide service B. Each of the following M lines contains a pair of integers, p q (1 \u2264 p, q \u2264 N, p \u2260 q); the pair defines a direct communication line. There is at most one direct communication line between any two nodes.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n226. Critical Network Lines\n\n\n\n\n\nProblem Statement:\n\n\nConsider a communication network that consists of a set of nodes and a set of two-way direct communication lines between pairs of nodes. It is known that the investigated network is connected, that is, there is a communication path between every pair of nodes. Some nodes provide service type A to all nodes (including itself), while some nodes provide service type B to all nodes (including itself). The same node may provide both types of services. Every node must have access to both types of services.\n\nIf a direct line falls out, it might happen that a service becomes unavailable to some node; a direct line with this property is called a critical network line.\n\nYou are to write a program that determines the number of critical network lines.\n\n\n\n\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains four integers, N, M, K, and L. N (1 \u2264 N \u2264 100 000) is the number of nodes of the network, M (1 \u2264 M \u2264 1 000 000) is the number of direct communication lines, K (1 \u2264 K \u2264 N) is the number of the nodes that provide service A, and L (1 \u2264 L \u2264 N) is the number of the nodes that provide service B. The nodes are identified by the numbers from 1 to N. The second line contains K integers, the identifiers of the nodes that provide service A. The third line contains L integers, the identifiers of the nodes that provide service B. Each of the following M lines contains a pair of integers, p q (1 \u2264 p, q \u2264 N, p \u2260 q); the pair defines a direct communication line. There is at most one direct communication line between any two nodes.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single integer, S, the number of the critical lines of the network.\n\n\n\n\nSample Input:\n\n1\n9 10 3 4\n2 4 5\n4 9 8 3\n1 2\n4 1\n2 3\n4 2\n1 5\n5 6\n6 7\n6 8\n7 9\n8 7\n\n\n\nSample Output:\n\n3\n\n\n\nNotes:\n\n\nOriginal source: CEOI\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-10 22:08:18 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #1\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n9 10 3 4\n2 4 5\n4 9 8 3\n1 2\n4 1\n2 3\n4 2\n1 5\n5 6\n6 7\n6 8\n7 9\n8 7\n\n\nSample Output:\n\n3\n\n",
    "Description": "\nProblem Statement:\n\n\nConsider a communication network that consists of a set of nodes and a set of two-way direct communication lines between pairs of nodes. It is known that the investigated network is connected, that is, there is a communication path between every pair of nodes. Some nodes provide service type A to all nodes (including itself), while some nodes provide service type B to all nodes (including itself). The same node may provide both types of services. Every node must have access to both types of services.\n\nIf a direct line falls out, it might happen that a service becomes unavailable to some node; a direct line with this property is called a critical network line.\n\nYou are to write a program that determines the number of critical network lines.\n\n\n",
    "Title": "226. Critical Network Lines",
    "Notes": "\nNotes:\n\n\nOriginal source: CEOI\n\n",
    "URL": "https://a2oj.com/p?ID=226",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single integer, S, the number of the critical lines of the network.\n\n\n"
  },
  "2129": {
    "Input Description": "\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, it contains a single line with all labels of the requested goods (in random order). Each kind of goods is represented by the starting letter of its label. Only small letters of the English alphabet are used. The number of orders doesn't exceed 200.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n227. Orders\n\n\n\n\n\nProblem Statement:\n\n\nThe store's manager has sorted all kinds of goods in an alphabetical order of their labels. All the kinds having labels starting with the same letter are stored in the same warehouse (i.e. in the same building) labelled with this letter. During the day the store's manager receives and books the orders of goods which are to be delivered from the store. Each order requires only one kind of goods. The store's manager processes the requests in the order of their booking. You know in advance all the orders which will have to be processed by the store's manager today, but you do not know their booking order. Compute all possible ways of the visits of warehouses for the store's manager to settle all the demands piece after piece during the day.\n\n\n\n\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, it contains a single line with all labels of the requested goods (in random order). Each kind of goods is represented by the starting letter of its label. Only small letters of the English alphabet are used. The number of orders doesn't exceed 200.\n\n\n\n\nOutput Format:\n\n\nFor each test case, the output will contain all possible orderings in which the store?s manager may visit his warehouses. Every warehouse is represented by a single small letter of the English alphabet ? the starting letter of the label of the goods. Each ordering of warehouses is written in the output file only once on a separate line and all the lines containing orderings have to be sorted in an alphabetical order (see the example). No output will exceed 2 megabytes.\n\n\n\n\nSample Input:\n\n1\nbbjd\n\n\n\nSample Output:\n\nbbdj\nbbjd\nbdbj\nbdjb\nbjbd\nbjdb\ndbbj\ndbjb\ndjbb\njbbd\njbdb\njdbb\n\n\n\nNotes:\n\n\nOriginal source: CEOI\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-10 22:08:21 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #1\n\n\n\n",
    "Example": "\nSample Input:\n\n1\nbbjd\n\n\nSample Output:\n\nbbdj\nbbjd\nbdbj\nbdjb\nbjbd\nbjdb\ndbbj\ndbjb\ndjbb\njbbd\njbdb\njdbb\n\n",
    "Description": "\nProblem Statement:\n\n\nThe store's manager has sorted all kinds of goods in an alphabetical order of their labels. All the kinds having labels starting with the same letter are stored in the same warehouse (i.e. in the same building) labelled with this letter. During the day the store's manager receives and books the orders of goods which are to be delivered from the store. Each order requires only one kind of goods. The store's manager processes the requests in the order of their booking. You know in advance all the orders which will have to be processed by the store's manager today, but you do not know their booking order. Compute all possible ways of the visits of warehouses for the store's manager to settle all the demands piece after piece during the day.\n\n\n",
    "Title": "227. Orders",
    "Notes": "\nNotes:\n\n\nOriginal source: CEOI\n\n",
    "URL": "https://a2oj.com/p?ID=227",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, the output will contain all possible orderings in which the store?s manager may visit his warehouses. Every warehouse is represented by a single small letter of the English alphabet ? the starting letter of the label of the goods. Each ordering of warehouses is written in the output file only once on a separate line and all the lines containing orderings have to be sorted in an alphabetical order (see the example). No output will exceed 2 megabytes.\n\n\n"
  },
  "2130": {
    "Input Description": "\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. The first line of each test case contains one number, which is the length of the sequence of zeroes and ones. This length is less or equal to 1000000000. In the second line, there is one positive integer which is the number of questions asked and answers to them. The number of questions and answers is less or equal to 5000. The remaining lines specify questions and answers. Each line contains one question and the answer to this question: two integers (the position of the first and last digit in the chosen subsequence) and one word which is either `even' or `odd' (the answer, i.e. the parity of the number of ones in the chosen subsequence, where `even' means an even number of ones and `odd' means an odd number).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n228. Parity Game\n\n\n\n\n\nProblem Statement:\n\n\nNow and then you play the following game with your friend. Your friend writes down a sequence consisting of zeroes and ones. You choose a continuous subsequence (for example the subsequence from the third to the fifth digit inclusively) and ask him, whether this subsequence contains even or odd number of ones. Your friend answers your question and you can ask him about another subsequence and so on. Your task is to guess the entire sequence of numbers. You suspect some of your friend's answers may not be correct and you want to convict him of falsehood. Thus you have decided to write a program to help you in this matter. The program will receive a series of your questions together with the answers you have received from your friend. The aim of this program is to find the first answer which is provably wrong, i.e. that there exists a sequence satisfying answers to all the previous questions, but no such sequence satisfies this answer.\n\n\n\n\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. The first line of each test case contains one number, which is the length of the sequence of zeroes and ones. This length is less or equal to 1000000000. In the second line, there is one positive integer which is the number of questions asked and answers to them. The number of questions and answers is less or equal to 5000. The remaining lines specify questions and answers. Each line contains one question and the answer to this question: two integers (the position of the first and last digit in the chosen subsequence) and one word which is either `even' or `odd' (the answer, i.e. the parity of the number of ones in the chosen subsequence, where `even' means an even number of ones and `odd' means an odd number).\n\n\n\n\nOutput Format:\n\n\nFor each case, there is only one line containing one integer X. Number X says that there exists a sequence of zeroes and ones satisfying first X parity conditions, but there exists none satisfying X+1 conditions. If there exists a sequence of zeroes and ones satisfying all the given conditions, then number X should be the number of all the questions asked.\n\n\n\n\nSample Input:\n\n2\n10\n5\n1 2 even\n3 4 odd\n5 6 even\n1 6 even\n7 10 odd\n10\n5\n1 2 even\n1 4 even\n2 4 odd\n1 10 even\n3 10 even\n\n\n\nSample Output:\n\n3\n5\n\n\n\nNotes:\n\n\nOriginal source: CEOI\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-10 22:08:24 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #1\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n10\n5\n1 2 even\n3 4 odd\n5 6 even\n1 6 even\n7 10 odd\n10\n5\n1 2 even\n1 4 even\n2 4 odd\n1 10 even\n3 10 even\n\n\nSample Output:\n\n3\n5\n\n",
    "Description": "\nProblem Statement:\n\n\nNow and then you play the following game with your friend. Your friend writes down a sequence consisting of zeroes and ones. You choose a continuous subsequence (for example the subsequence from the third to the fifth digit inclusively) and ask him, whether this subsequence contains even or odd number of ones. Your friend answers your question and you can ask him about another subsequence and so on. Your task is to guess the entire sequence of numbers. You suspect some of your friend's answers may not be correct and you want to convict him of falsehood. Thus you have decided to write a program to help you in this matter. The program will receive a series of your questions together with the answers you have received from your friend. The aim of this program is to find the first answer which is provably wrong, i.e. that there exists a sequence satisfying answers to all the previous questions, but no such sequence satisfies this answer.\n\n\n",
    "Title": "228. Parity Game",
    "Notes": "\nNotes:\n\n\nOriginal source: CEOI\n\n",
    "URL": "https://a2oj.com/p?ID=228",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case, there is only one line containing one integer X. Number X says that there exists a sequence of zeroes and ones satisfying first X parity conditions, but there exists none satisfying X+1 conditions. If there exists a sequence of zeroes and ones satisfying all the given conditions, then number X should be the number of all the questions asked.\n\n\n"
  },
  "2131": {
    "Input Description": "\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains the call number, the transcription of which you have to find. The number consists of at most 100 digits. The second line contains the total number of the words in the dictionary (maximum is 50000). Each of the remaining lines contains one word, which consists of maximally 50 small letters of the English alphabet. The total size of each test case doesn't exceed 300KB.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n229. Phone Numbers\n\n\n\n\n\nProblem Statement:\n\n\nIn the present world you frequently meet a lot of call numbers and they are going to be longer and longer. You need to remember such a kind of numbers. One method how to do it in an easy way is to assign letters to digits as shown in the following picture:\n\nThis way every word or a group of words can be assigned a unique number, so you can remember words instead of call numbers. It is evident that it has its own charm if it is possible to find some simple relationship between the word and the person itself. So you can learn that the call number 941837296 of a chess playing friend of yours can be read as WHITEPAWN, and the call number 2855304 of your favorite teacher is read BULLDOG.\n\nWrite a program to find the number of words in the shortest sequence of words (i.e. one having the smallest possible number of words) which corresponds to a given number and a given list of words. The correspondence is described by the picture above.\n\n\n\n\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains the call number, the transcription of which you have to find. The number consists of at most 100 digits. The second line contains the total number of the words in the dictionary (maximum is 50000). Each of the remaining lines contains one word, which consists of maximally 50 small letters of the English alphabet. The total size of each test case doesn't exceed 300KB.\n\n\n\n\nOutput Format:\n\n\nFor each test case, the only line of output contains the number of words in the shortest sequence of words which has been found by your program. If there is no solution to the input data, the line contains text `No solution.?.\n\n\n\n\nSample Input:\n\n2\n7325189087\n5\nit\nyour\nreality\nreal\nour\n4294967296\n5\nit\nyour\nreality\nreal\nour\n\n\n\nSample Output:\n\n2\nNo solution.\n\n\n\nNotes:\n\n\nIn the first test case, the shortest sequence of words is: ?reality our? which consists of 2 words. In the second test case, the answer is ?No solution.? because no given word contains letters g and h which are necessary to obtain the digit 4.\n\nOriginal source: CEOI\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-10 22:08:27 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #1\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n7325189087\n5\nit\nyour\nreality\nreal\nour\n4294967296\n5\nit\nyour\nreality\nreal\nour\n\n\nSample Output:\n\n2\nNo solution.\n\n",
    "Description": "\nProblem Statement:\n\n\nIn the present world you frequently meet a lot of call numbers and they are going to be longer and longer. You need to remember such a kind of numbers. One method how to do it in an easy way is to assign letters to digits as shown in the following picture:\n\nThis way every word or a group of words can be assigned a unique number, so you can remember words instead of call numbers. It is evident that it has its own charm if it is possible to find some simple relationship between the word and the person itself. So you can learn that the call number 941837296 of a chess playing friend of yours can be read as WHITEPAWN, and the call number 2855304 of your favorite teacher is read BULLDOG.\n\nWrite a program to find the number of words in the shortest sequence of words (i.e. one having the smallest possible number of words) which corresponds to a given number and a given list of words. The correspondence is described by the picture above.\n\n\n",
    "Title": "229. Phone Numbers",
    "Notes": "\nNotes:\n\n\nIn the first test case, the shortest sequence of words is: ?reality our? which consists of 2 words. In the second test case, the answer is ?No solution.? because no given word contains letters g and h which are necessary to obtain the digit 4.\n\nOriginal source: CEOI\n\n",
    "URL": "https://a2oj.com/p?ID=229",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, the only line of output contains the number of words in the shortest sequence of words which has been found by your program. If there is no solution to the input data, the line contains text `No solution.?.\n\n\n"
  },
  "2132": {
    "Input Description": "\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains two integers, C and N. C (1 \u2264 C \u2264 1 000 000) is the number of columns and N (1 \u2264 N \u2264 3 000 000) is the number of sort operations. The second line contains N integers, ki (1 \u2264 ki \u2264 C). It defines the sequence of sort operations Sort(k1); ...; Sort(kN).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n230. Multi-key Sorting\n\n\n\n\n\nProblem Statement:\n\n\nConsider a table with rows and columns. The columns are numbered from 1 to C. For simplicity's sake, the items in the table are strings consisting of lower case letters.\n\n\nYou are given the operation Sort(k) on such tables: Sort(k) sorts the rows of a table in the order of the values in column k (while the order of the columns does not change). The sort is stable, that is, rows that have equal values in column k, remain in their original order. For example, applying Sort(2) to Table 1 yields Table 2.\n\nWe are interested in sequences of such sort operations. These operations are successively applied to the same table. For example, applying the sequence Sort(2); Sort(1) to Table 1 yields Table 3.\n\nTwo sequences of sort operations are called equivalent if, for any table, they have the same effect. For example, Sort(2); Sort(2); Sort(1) is equivalent to Sort(2); Sort(1). However, it is not equivalent to Sort(1); Sort(2), because the effect on Table 1 is different.\n\nGiven a sequence of sort operations, determine a shortest equivalent sequence.\n\n\n\n\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains two integers, C and N. C (1 \u2264 C \u2264 1 000 000) is the number of columns and N (1 \u2264 N \u2264 3 000 000) is the number of sort operations. The second line contains N integers, ki (1 \u2264 ki \u2264 C). It defines the sequence of sort operations Sort(k1); ...; Sort(kN).\n\n\n\n\nOutput Format:\n\n\nFor each test case, the first line contains one integer, M, the length of the shortest sequence of sort operations equivalent to the input sequence. The second line contains exactly M integers, representing a shortest sequence.\n\n\n\n\nSample Input:\n\n1\n4 6\n1 2 1 2 3 3\n\n\n\nSample Output:\n\n3\n1 2 3\n\n\n\nNotes:\n\n\nOriginal source: CEOI\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-10 22:08:29 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #1\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4 6\n1 2 1 2 3 3\n\n\nSample Output:\n\n3\n1 2 3\n\n",
    "Description": "\nProblem Statement:\n\n\nConsider a table with rows and columns. The columns are numbered from 1 to C. For simplicity's sake, the items in the table are strings consisting of lower case letters.\n\n\nYou are given the operation Sort(k) on such tables: Sort(k) sorts the rows of a table in the order of the values in column k (while the order of the columns does not change). The sort is stable, that is, rows that have equal values in column k, remain in their original order. For example, applying Sort(2) to Table 1 yields Table 2.\n\nWe are interested in sequences of such sort operations. These operations are successively applied to the same table. For example, applying the sequence Sort(2); Sort(1) to Table 1 yields Table 3.\n\nTwo sequences of sort operations are called equivalent if, for any table, they have the same effect. For example, Sort(2); Sort(2); Sort(1) is equivalent to Sort(2); Sort(1). However, it is not equivalent to Sort(1); Sort(2), because the effect on Table 1 is different.\n\nGiven a sequence of sort operations, determine a shortest equivalent sequence.\n\n\n",
    "Title": "230. Multi-key Sorting",
    "Notes": "\nNotes:\n\n\nOriginal source: CEOI\n\n",
    "URL": "https://a2oj.com/p?ID=230",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, the first line contains one integer, M, the length of the shortest sequence of sort operations equivalent to the input sequence. The second line contains exactly M integers, representing a shortest sequence.\n\n\n"
  },
  "2133": {
    "Input Description": "\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains two integers, M and L. M (1 \u2264 M \u2264 30 000) is the number of seats and L (1 \u2264 L \u2264 100) is the number of consecutive seats in every bunch. Seats are numbered from 1 to M. The second line contains an integer, N (1 \u2264 N \u2264 100 000), the number of purchase orders. The third line contains N integers, defining the purchase orders. The ith number in the line, z (1 \u2264 z \u2264 M-L+1), means that the ith purchaser requests the bunch of seats starting at seat z and ending at seat z+L-1.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n231. Ticket Office\n\n\n\n\n\nProblem Statement:\n\n\nA ticket office sells tickets for concerts. Instead of selling tickets for single seats it sells bunches of tickets for a fixed number of consecutive seats. The office has received a great number of purchase orders. A purchase order for one bunch of seats specifies the lowest seat number in the bunch.\n\nThe office may not be able to fulfill all of the purchase orders. Moreover, if it only allocates seats exactly as requested in the purchase orders then a great number of seats could remain empty. Therefore, the office applies the following allocation and pricing strategy. If a purchase order is accepted and the allocated seats are exactly those that are requested then the purchaser pays full-price (2 petaks for the bunch). If a purchase order is accepted, but the allocated seats differ from the requested ones (on at least one position) then the purchaser pays half-price (1 petak for the bunch).\n\nThe goal is to maximize the total income. You are to write a program that computes the maximal income that can be achieved.\n\n\n\n\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains two integers, M and L. M (1 \u2264 M \u2264 30 000) is the number of seats and L (1 \u2264 L \u2264 100) is the number of consecutive seats in every bunch. Seats are numbered from 1 to M. The second line contains an integer, N (1 \u2264 N \u2264 100 000), the number of purchase orders. The third line contains N integers, defining the purchase orders. The ith number in the line, z (1 \u2264 z \u2264 M-L+1), means that the ith purchaser requests the bunch of seats starting at seat z and ending at seat z+L-1.\n\n\n\n\nOutput Format:\n\n\nFor each test case, the only line contains an integer, S, the maximal income.\n\n\n\n\nSample Input:\n\n1\n20 3\n7\n4 2 10 9 16 15 17\n\n\n\nSample Output:\n\n9\n\n\n\nNotes:\n\n\nOriginal source: CEOI\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-10 22:08:32 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #1\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n20 3\n7\n4 2 10 9 16 15 17\n\n\nSample Output:\n\n9\n\n",
    "Description": "\nProblem Statement:\n\n\nA ticket office sells tickets for concerts. Instead of selling tickets for single seats it sells bunches of tickets for a fixed number of consecutive seats. The office has received a great number of purchase orders. A purchase order for one bunch of seats specifies the lowest seat number in the bunch.\n\nThe office may not be able to fulfill all of the purchase orders. Moreover, if it only allocates seats exactly as requested in the purchase orders then a great number of seats could remain empty. Therefore, the office applies the following allocation and pricing strategy. If a purchase order is accepted and the allocated seats are exactly those that are requested then the purchaser pays full-price (2 petaks for the bunch). If a purchase order is accepted, but the allocated seats differ from the requested ones (on at least one position) then the purchaser pays half-price (1 petak for the bunch).\n\nThe goal is to maximize the total income. You are to write a program that computes the maximal income that can be achieved.\n\n\n",
    "Title": "231. Ticket Office",
    "Notes": "\nNotes:\n\n\nOriginal source: CEOI\n\n",
    "URL": "https://a2oj.com/p?ID=231",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, the only line contains an integer, S, the maximal income.\n\n\n"
  },
  "2134": {
    "Input Description": "\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains two positive integers K, L -- the width and the length of the table (expressed as numbers of bricks). Neither the width nor the length of the table is greater than 100000 bricks. The following lines of the input file contain the description of the front view of the town. The description consists of a series of heights of visible buildings on each square from the left to the right (the height is measured by the number of the blocks, too). There is only one number on each line, i.e. the number of the lines with the front view description of the town equals K -- the width of the table. Similarly the next L lines contain the right sight view of the town. The heights of the wooden block towers are now specified from the front line to the back line. You may suppose there is no building in the town with height exceeding 5000 blocks. The maximal number of blocks needed for building the entire town does not exceed 2000000000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n232. Block Town\n\n\n\n\n\nProblem Statement:\n\n\nChildren like playing with blocks (cube wooden bricks). They usually build high towers, but small Johny dreams of different plans. He is going to build a big town. His daddy has bought him a rectangular table; its width is K blocks and its length is L blocks exactly. Johny decided to project a plan of such a town before he starts building the town itself. He has drawn a square-shaped network on the table consisting of K x L squares. He wants to place the towers consisting of one or more blocks on some of the squares of the network drawn; the remaining squares will be empty. Because of the table being so large, Johny is not going to plan exactly for every square how many blocks he will put on it. He only wants to decide about front and right sight shapes of his town. He drew these two views (two-dimensional projections of the planned town) on a paper. You can see an example of these drawings and the adequate town made of wooden bricks in the pictures:\n\n\n\nJohny's daddy is afraid they don't have enough blocks to finish building Johny's planned town. You are asked for writing a program to compute the minimal and maximal amount of blocks with which a town corresponding to Johny's plans can be built. Moreover the program can decide about the possibility of building a town satisfying the views.\n\n\n\n\nInput Format:\n\n\nThe input contains T test cases. The first line of the input contains the integer T. For each test case, the first line contains two positive integers K, L -- the width and the length of the table (expressed as numbers of bricks). Neither the width nor the length of the table is greater than 100000 bricks. The following lines of the input file contain the description of the front view of the town. The description consists of a series of heights of visible buildings on each square from the left to the right (the height is measured by the number of the blocks, too). There is only one number on each line, i.e. the number of the lines with the front view description of the town equals K -- the width of the table. Similarly the next L lines contain the right sight view of the town. The heights of the wooden block towers are now specified from the front line to the back line. You may suppose there is no building in the town with height exceeding 5000 blocks. The maximal number of blocks needed for building the entire town does not exceed 2000000000.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print only one line. If it is not possible to build a town with the front and right sight views given, only a text `No solution.' Is written there. In the other case two numbers will be written on the line and separated by a single space. The first one is the minimal and the second one is the maximal amount of blocks small Johny can use to build his town in accordance with his project.\n\n\n\n\nSample Input:\n\n2\n4 3\n1\n3\n4\n2\n1\n4\n2\n2 2\n4\n1\n1\n3\n\n\n\nSample Output:\n\n10 21\nNo solution.\n\n\n\nNotes:\n\n\nOriginal source: CEOI\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-10 22:08:34 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #1\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n4 3\n1\n3\n4\n2\n1\n4\n2\n2 2\n4\n1\n1\n3\n\n\nSample Output:\n\n10 21\nNo solution.\n\n",
    "Description": "\nProblem Statement:\n\n\nChildren like playing with blocks (cube wooden bricks). They usually build high towers, but small Johny dreams of different plans. He is going to build a big town. His daddy has bought him a rectangular table; its width is K blocks and its length is L blocks exactly. Johny decided to project a plan of such a town before he starts building the town itself. He has drawn a square-shaped network on the table consisting of K x L squares. He wants to place the towers consisting of one or more blocks on some of the squares of the network drawn; the remaining squares will be empty. Because of the table being so large, Johny is not going to plan exactly for every square how many blocks he will put on it. He only wants to decide about front and right sight shapes of his town. He drew these two views (two-dimensional projections of the planned town) on a paper. You can see an example of these drawings and the adequate town made of wooden bricks in the pictures:\n\n\n\nJohny's daddy is afraid they don't have enough blocks to finish building Johny's planned town. You are asked for writing a program to compute the minimal and maximal amount of blocks with which a town corresponding to Johny's plans can be built. Moreover the program can decide about the possibility of building a town satisfying the views.\n\n\n",
    "Title": "232. Block Town",
    "Notes": "\nNotes:\n\n\nOriginal source: CEOI\n\n",
    "URL": "https://a2oj.com/p?ID=232",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print only one line. If it is not possible to build a town with the front and right sight views given, only a text `No solution.' Is written there. In the other case two numbers will be written on the line and separated by a single space. The first one is the minimal and the second one is the maximal amount of blocks small Johny can use to build his town in accordance with his project.\n\n\n"
  },
  "2135": {
    "Input Description": "\nInput Format:\n\n\nThere are multiple test cases in the input. The first line of each test case is n (1 \uf0a3 n \uf0a3 100), the number of words. Each of the next n lines contains a string of at most 100 lower case characters.\nThe input terminates with a line containing 0.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n233. String LD\n\n\n\n\n\nProblem Statement:\n\n\nStringld (left delete) is a function that gets a string and deletes its leftmost character (for instance Stringld(?acm?) returns ?cm?).\nYou are given a list of distinct words, and at each step, we apply stringld on every word in the list. Write a program that determines the number of steps that can be applied until at least one of the conditions become true:\n1) A word becomes empty string, or\n2) a duplicate word is generated.\nFor example, having the list of words aab, abac, and caac, applying the function on the input for the first time results in ab, bac, and aac. For the second time, we get b, ac, and ac. Since in the second step, we have two ac strings, the condition 2 is true, and the output of your program should be 1. Note that we do not count the last step that has resulted in duplicate string. More examples are found in the sample input and output section.\n\n\n\n\nInput Format:\n\n\nThere are multiple test cases in the input. The first line of each test case is n (1 \uf0a3 n \uf0a3 100), the number of words. Each of the next n lines contains a string of at most 100 lower case characters.\nThe input terminates with a line containing 0.\n\n\n\n\nOutput Format:\n\n\nFor each test case, write a single line containing the maximum number of stringld we can call.\n\n\n\n\nSample Input:\n\n4\naaba\naaca\nbaabcd\ndcba\n3\naaa\nbbbb\nccccc\n0\n\n\n\nSample Output:\n\n1 \n2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n4\naaba\naaca\nbaabcd\ndcba\n3\naaa\nbbbb\nccccc\n0\n\n\nSample Output:\n\n1 \n2\n\n",
    "Description": "\nProblem Statement:\n\n\nStringld (left delete) is a function that gets a string and deletes its leftmost character (for instance Stringld(?acm?) returns ?cm?).\nYou are given a list of distinct words, and at each step, we apply stringld on every word in the list. Write a program that determines the number of steps that can be applied until at least one of the conditions become true:\n1) A word becomes empty string, or\n2) a duplicate word is generated.\nFor example, having the list of words aab, abac, and caac, applying the function on the input for the first time results in ab, bac, and aac. For the second time, we get b, ac, and ac. Since in the second step, we have two ac strings, the condition 2 is true, and the output of your program should be 1. Note that we do not count the last step that has resulted in duplicate string. More examples are found in the sample input and output section.\n\n\n",
    "Title": "233. String LD",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=233",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, write a single line containing the maximum number of stringld we can call.\n\n\n"
  },
  "2136": {
    "Input Description": "\nInput Format:\n\n\nThere are multiple test cases in the input. The first line of each test case contains two integers m and n, the size of the board (0< m, n <100). Following the first line, there are m lines with n integers denoting the color in each cell. All the colors are positive integer numbers less than 10000. The input is terminated with\na single line containing two consecutive zeros.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n234. Painting\n\n\n\n\n\nProblem Statement:\n\n\nEthan wants to draw a painting on an m\u00d7n board. He can draw some strips on the board using a paintbrush of width one. In each step, he must choose a new color and paint a full column or a full row.\nHe has a great image to be drawn on the board, but he doesn?t know which color to use first. You must help him in finding out the order of colors.\n\n\n\n\n\n\nInput Format:\n\n\nThere are multiple test cases in the input. The first line of each test case contains two integers m and n, the size of the board (0< m, n <100). Following the first line, there are m lines with n integers denoting the color in each cell. All the colors are positive integer numbers less than 10000. The input is terminated with\na single line containing two consecutive zeros.\n\n\n\n\nOutput Format:\n\n\nFor each test case, write a single line containing the order of colors used to paint the board. If there are several answers, output the one which is lexicographically smallest (considering each number as a symbol).\n\n\n\n\nSample Input:\n\n4 4 \n1 5 4 3 \n6 5 6 6 \n2 2 2 2 \n1 5 4 3 \n3 2\n1 1\n2 3\n2 3\n0 0\n\n\n\nSample Output:\n\n1 3 4 6 5 2 \n2 3 1 \n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n4 4 \n1 5 4 3 \n6 5 6 6 \n2 2 2 2 \n1 5 4 3 \n3 2\n1 1\n2 3\n2 3\n0 0\n\n\nSample Output:\n\n1 3 4 6 5 2 \n2 3 1 \n\n",
    "Description": "\nProblem Statement:\n\n\nEthan wants to draw a painting on an m\u00d7n board. He can draw some strips on the board using a paintbrush of width one. In each step, he must choose a new color and paint a full column or a full row.\nHe has a great image to be drawn on the board, but he doesn?t know which color to use first. You must help him in finding out the order of colors.\n\n\n\n\n",
    "Title": "234. Painting",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=234",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, write a single line containing the order of colors used to paint the board. If there are several answers, output the one which is lexicographically smallest (considering each number as a symbol).\n\n\n"
  },
  "2137": {
    "Input Description": "\nInput Format:\n\n\nThere are multiple test cases in the input. Each test case consists of a single line, \"M N\" (1 \u2264 M, N \u2264 100) where M and N indicate the height and width (in units), respectively, of the input wall.\nEach of the next M lines is a string of N digits which specifies a row in the wall. Each brick in a row is represented by a substring of the row (like s) such that every digit in s is the same, which is equal to the length of s too. For example, 333 and 22 are two bricks of length 3 and 2 respectively, but 111 specifies three bricks of length one. A 0 in a row means there is no brick in that place of wall. Note that the height of each brick is one. The input terminates with a line containing 0 0. You may assume that the input is correct. This means:\n1) There is no brick such that the length of the brick does not conform to the digits in the brick (like 222 in the row 12221).\n2) No brick can fall initially.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n235. Another Brick in the Wall\n\n\n\n\n\nProblem Statement:\n\n\nAfter years as a brick-layer, you've been called upon to analyze the instability of brick walls. The instability of a wall can be approximated by the maximum damage to a wall in case of taking one brick out. A brick will fall if all bricks that are directly underneath it are removed. Note that if the space underneath a brick is partially empty, it does not fall. You are given the description of all bricks in a wall, and must determine the instability of the wall as described in the following sections.\n\n\n\n\nInput Format:\n\n\nThere are multiple test cases in the input. Each test case consists of a single line, \"M N\" (1 \u2264 M, N \u2264 100) where M and N indicate the height and width (in units), respectively, of the input wall.\nEach of the next M lines is a string of N digits which specifies a row in the wall. Each brick in a row is represented by a substring of the row (like s) such that every digit in s is the same, which is equal to the length of s too. For example, 333 and 22 are two bricks of length 3 and 2 respectively, but 111 specifies three bricks of length one. A 0 in a row means there is no brick in that place of wall. Note that the height of each brick is one. The input terminates with a line containing 0 0. You may assume that the input is correct. This means:\n1) There is no brick such that the length of the brick does not conform to the digits in the brick (like 222 in the row 12221).\n2) No brick can fall initially.\n\n\n\n\nOutput Format:\n\n\nFor each test case, write a single line containing maximum sum of the bricks? lengths that will fall if we take one brick out (including that brick).\n\n\n\n\nSample Input:\n\n4 5 \n33322 \n22333 \n33322 \n22333 \n4 6 \n122333 \n444422 \n111111 \n333333 \n3 3 \n022 \n220 \n111 \n0 0\n\n\n\nSample Output:\n\n5\n8\n4\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n4 5 \n33322 \n22333 \n33322 \n22333 \n4 6 \n122333 \n444422 \n111111 \n333333 \n3 3 \n022 \n220 \n111 \n0 0\n\n\nSample Output:\n\n5\n8\n4\n\n\n",
    "Description": "\nProblem Statement:\n\n\nAfter years as a brick-layer, you've been called upon to analyze the instability of brick walls. The instability of a wall can be approximated by the maximum damage to a wall in case of taking one brick out. A brick will fall if all bricks that are directly underneath it are removed. Note that if the space underneath a brick is partially empty, it does not fall. You are given the description of all bricks in a wall, and must determine the instability of the wall as described in the following sections.\n\n\n",
    "Title": "235. Another Brick in the Wall",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=235",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, write a single line containing maximum sum of the bricks? lengths that will fall if we take one brick out (including that brick).\n\n\n"
  },
  "2138": {
    "Input Description": "\nInput Format:\n\n\nInput contains multiple independent scenarios. There is an empty line after each scenario. The input ends with an ?exit? command. There is a ?>? sign before each command in the input (with no spaces in between). The length of each file name does not exceed 50. You may assume that the input is correct.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n236. deltree\n\n\n\n\n\nProblem Statement:\n\n\nYou have just run out of disk space and decided to delete some of your directories. Rationally, you will first have an exploration of what you have in your file system. And more rationally, you will do this exploration through a command line interface. The interface used in this problem is called \"MSDOS--\", since it is something like MSDOS with fewer features. The commands of MSDOS-- are as follows:\n1. cd <directory>\nAssuming <directory> to be the name of a relative descendant of current directory, this command changes the current directory to <directory>. For example, when the current directory is \"\\A\\B\\\" and one of its descendants is \"C\\D\", the execution of \"cd C\\D\" will change the current directory to \"\\A\\B\\C\\D\\\".\n2. cd\\\nThis command changes the current directory to \"\\\" (the root of the file system). For example, when the current\ndirectory is \"\\A\\B\\\", the execution of \"cd \\\" will change the current directory to \"\\\".\n3. cd..\nAssuming the current directory to be anything except \"\\\", this command changes the current directory to its parent directory. For example, when the current directory is \"\\A\\B\\\", the execution of \"cd ..\" will change the current directory to \"\\A\\\".\n4. cd \\<directory>\nThis command is equivalent to the execution of the following two commands:\ncd \\\ncd <directory>\n5. dir\nThis command lists the name of files and directories directly in the current directory, each on a separate line. These file/directory names are made up of (lowercase and uppercase) letters, digits, and dots (\".\"). Directory names precede the file names in the list, and each one, comes alone in a single line. On the contrary, each file name is accompanied by its size separated by a space. A sample output of \"dir\" is as follows:\n      HW1\n      HW1.old\n      Syllab.pdf 10000\n      notes.txt 3241\n6. deltree <directory>\nAssuming <directory> to be the name of a relative descendant of current directory, this command tries to delete <directory> and all its descendant files and subdirectories (and thus, freeing that much of space). For example, when the current directory is \"\\A\\B\\\" and one of its descendants is \"C\\D\", the execution of \"deltree C\\D\" will try to delete directory \"\\A\\B\\C\\D\\\" and all of its descendant files and directories.\n7. deltree \\<directory>\nThis command is equivalent to the execution of the following two commands:\ncd \\\ndeltree <directory>\n8. exit\nThis command terminates the command line interface.\nA \"scenario\" is an exploration (a consistent series of \"cd\" and \"dir\" commands and their results, starting from root) followed by exactly one \"deltree\" command. Given a scenario, you are to find the maximum space guaranteed to be freed by executing its \"deltree\" command.\n\n\n\n\nInput Format:\n\n\nInput contains multiple independent scenarios. There is an empty line after each scenario. The input ends with an ?exit? command. There is a ?>? sign before each command in the input (with no spaces in between). The length of each file name does not exceed 50. You may assume that the input is correct.\n\n\n\n\nOutput Format:\n\n\nWrite the result of the ith scenario as a single integer on the ith line of output.\n\n\n\n\nSample Input:\n\n>cd A \n>dir \nB\nC\nd 12\ne 62\n>cd B\n>cd ..\n>cd ..\n>deltree A\n\n>dir\nG\ns2\n>cd G \n>dir\n>cd \\ \n>deltree G\n\n>dir \nA\nB \nx 3 \n>cd A \n>dir \nAA\nAB\nax 10\nay 12\n>cd AA\n>dir\nd 32\na 28\n>cd ..\n>cd AB\n>dir\nF\nx 100\n>cd F\n>dir\nG\n>cd \\\n>deltree A\n\n>cd D1\\D2\n>dir\nD3\na 32\n>cd D3\n>dir\nb 31\n>cd \\D1\\D3\n>dir\nd 7 \n>deltree \\D1\n\n>exit\n\n\n\nSample Output:\n\n74 \n0 \n182 \n70\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n>cd A \n>dir \nB\nC\nd 12\ne 62\n>cd B\n>cd ..\n>cd ..\n>deltree A\n\n>dir\nG\ns2\n>cd G \n>dir\n>cd \\ \n>deltree G\n\n>dir \nA\nB \nx 3 \n>cd A \n>dir \nAA\nAB\nax 10\nay 12\n>cd AA\n>dir\nd 32\na 28\n>cd ..\n>cd AB\n>dir\nF\nx 100\n>cd F\n>dir\nG\n>cd \\\n>deltree A\n\n>cd D1\\D2\n>dir\nD3\na 32\n>cd D3\n>dir\nb 31\n>cd \\D1\\D3\n>dir\nd 7 \n>deltree \\D1\n\n>exit\n\n\nSample Output:\n\n74 \n0 \n182 \n70\n\n",
    "Description": "\nProblem Statement:\n\n\nYou have just run out of disk space and decided to delete some of your directories. Rationally, you will first have an exploration of what you have in your file system. And more rationally, you will do this exploration through a command line interface. The interface used in this problem is called \"MSDOS--\", since it is something like MSDOS with fewer features. The commands of MSDOS-- are as follows:\n1. cd <directory>\nAssuming <directory> to be the name of a relative descendant of current directory, this command changes the current directory to <directory>. For example, when the current directory is \"\\A\\B\\\" and one of its descendants is \"C\\D\", the execution of \"cd C\\D\" will change the current directory to \"\\A\\B\\C\\D\\\".\n2. cd\\\nThis command changes the current directory to \"\\\" (the root of the file system). For example, when the current\ndirectory is \"\\A\\B\\\", the execution of \"cd \\\" will change the current directory to \"\\\".\n3. cd..\nAssuming the current directory to be anything except \"\\\", this command changes the current directory to its parent directory. For example, when the current directory is \"\\A\\B\\\", the execution of \"cd ..\" will change the current directory to \"\\A\\\".\n4. cd \\<directory>\nThis command is equivalent to the execution of the following two commands:\ncd \\\ncd <directory>\n5. dir\nThis command lists the name of files and directories directly in the current directory, each on a separate line. These file/directory names are made up of (lowercase and uppercase) letters, digits, and dots (\".\"). Directory names precede the file names in the list, and each one, comes alone in a single line. On the contrary, each file name is accompanied by its size separated by a space. A sample output of \"dir\" is as follows:\n      HW1\n      HW1.old\n      Syllab.pdf 10000\n      notes.txt 3241\n6. deltree <directory>\nAssuming <directory> to be the name of a relative descendant of current directory, this command tries to delete <directory> and all its descendant files and subdirectories (and thus, freeing that much of space). For example, when the current directory is \"\\A\\B\\\" and one of its descendants is \"C\\D\", the execution of \"deltree C\\D\" will try to delete directory \"\\A\\B\\C\\D\\\" and all of its descendant files and directories.\n7. deltree \\<directory>\nThis command is equivalent to the execution of the following two commands:\ncd \\\ndeltree <directory>\n8. exit\nThis command terminates the command line interface.\nA \"scenario\" is an exploration (a consistent series of \"cd\" and \"dir\" commands and their results, starting from root) followed by exactly one \"deltree\" command. Given a scenario, you are to find the maximum space guaranteed to be freed by executing its \"deltree\" command.\n\n\n",
    "Title": "236. deltree",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=236",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nWrite the result of the ith scenario as a single integer on the ith line of output.\n\n\n"
  },
  "2139": {
    "Input Description": "\nInput Format:\n\n\nThe input has multiple test cases. Each test case starts with a line containing an integer n (number of already landed spacecrafts), and a real number R. The land is small enough for us to be modeled by a two-dimensional plane, and (0,0) is conventionally the best point for us to land. Each of the next n lines specifies the location of a landed flying saucer by giving two real numbers x and y as the coordinates of its center.\nThe input ends with a case of n = R = 0 which must not be processed. Assume n \u2264 100, R > 0, and their absolute value does not exceed 1000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n237. Solar Eclipse\n\n\n\n\n\nProblem Statement:\n\n\nA new Solar Eclipse is going to happen in Mars. Scientists from different parts of the world are travelling to Mars to watch and study this phenomenon. You just managed to calculate exactly the best point of Mars lands for your study of the eclipse, and want to land your flying saucer on that place. But, you notice that there are already other spacecrafts landed on near that area.\nIn the bird?s eye view, all the spacecrafts (including yours) are circles with constant radius R. Logically, you hate to land your spacecraft on the others (no intersection of areas is allowed, but touching the other crafts is acceptable), though, the other saucers did not obey this rule on their own landings (i.e. their circles might have positive-area intersections with each other). In order to land your own craft on Mars, you want to find the place which minimizes the distance between the center of your flying saucer and your already calculated best point (and obeys the no-intersection rule). That?s what you should do in this problem.\n\n\n\n\nInput Format:\n\n\nThe input has multiple test cases. Each test case starts with a line containing an integer n (number of already landed spacecrafts), and a real number R. The land is small enough for us to be modeled by a two-dimensional plane, and (0,0) is conventionally the best point for us to land. Each of the next n lines specifies the location of a landed flying saucer by giving two real numbers x and y as the coordinates of its center.\nThe input ends with a case of n = R = 0 which must not be processed. Assume n \u2264 100, R > 0, and their absolute value does not exceed 1000.\n\n\n\n\nOutput Format:\n\n\nWrite the result of the i_th test case on the i_th line of the output. You should just write the minimum possible distance between the center of your landed craft and the origin of the plane, rounded to exactly 6 digits after the decimal point.\n\n\n\n\nSample Input:\n\n1 1.234 \n2.468 0 \n1 2\n2 2\n2 1 \n1 1 \n-1 -1 \n0 0\n\n\n\nSample Output:\n\n0.000000\n1.171573\n1.414214\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n1 1.234 \n2.468 0 \n1 2\n2 2\n2 1 \n1 1 \n-1 -1 \n0 0\n\n\nSample Output:\n\n0.000000\n1.171573\n1.414214\n\n",
    "Description": "\nProblem Statement:\n\n\nA new Solar Eclipse is going to happen in Mars. Scientists from different parts of the world are travelling to Mars to watch and study this phenomenon. You just managed to calculate exactly the best point of Mars lands for your study of the eclipse, and want to land your flying saucer on that place. But, you notice that there are already other spacecrafts landed on near that area.\nIn the bird?s eye view, all the spacecrafts (including yours) are circles with constant radius R. Logically, you hate to land your spacecraft on the others (no intersection of areas is allowed, but touching the other crafts is acceptable), though, the other saucers did not obey this rule on their own landings (i.e. their circles might have positive-area intersections with each other). In order to land your own craft on Mars, you want to find the place which minimizes the distance between the center of your flying saucer and your already calculated best point (and obeys the no-intersection rule). That?s what you should do in this problem.\n\n\n",
    "Title": "237. Solar Eclipse",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=237",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nWrite the result of the i_th test case on the i_th line of the output. You should just write the minimum possible distance between the center of your landed craft and the origin of the plane, rounded to exactly 6 digits after the decimal point.\n\n\n"
  },
  "2140": {
    "Input Description": "\nInput Format:\n\n\nThe input contains multiple test cases. Each test case starts with a line containing two integers n and t. The integer n is the number of line segments (n \u2264 1000) and t is the time-limit (t \u2264 10^6). Each of the next n lines specifies a line segment by giving three integers y, xs, and xt. Integer y indicates the row of that line segment (0 \u2264 y \u2264 2000), and xs and xt are the x-coordinates of its end points (0 \u2264 xs \u2264 xt \u2264 10^6). The line segments are disjoint and do not have any intersections. A case of n = t = 0 shows the end of input and should not be processed.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n238. Hurry Plotter\n\n\n\n\n\nProblem Statement:\n\n\nA plotter is a vector graphics printing device that connects to a computer to print graphical plots. There are two types of plotters: pen plotters and electrostatic plotters. Pen plotters print by moving a pen across the surface of a piece of paper. They can draw complex line art, including text, but do so very slowly because of the mechanical movement of the pens. In this problem, we are considering this matter of slowness for our special type of pen plotter. A discrete horizontal pen plotter can draw only horizontal line segments whose end points have discrete coordinates (integer x and y?s). The drawing method is quite simple. The pen starts its journey from the upper left corner of the page (x=y=0) and moves only right while drawing the specified lines on that row. Then, it moves back completely to the left, moves one row down (y \u2190 y+1), and repeats this task for the second row. The same is done for the next rows. In other words, the pen can move down only when it is far on the left side (i.e. when x=0), and can have at most one left-to-right pass and at most one right-to-left pass on each row.\nIt takes one unit of time to move the pen one unit of length to the left (x \u2190 x-1), or to the right (x \u2190 x+1). This time is doubled if the pen is on the paper and is drawing a line segment. It takes no time to move one row down (when x=0).\nSince it might take a long time for the plotter to draw all the given line segments, we have decided to add a new feature to our plotter: drawing time-limit. By specifying the time-limit, the plotter should draw the maximum number of lines (using the same drawing method given above) that can be drawn within that time-limit. Given the time-limit and line segments, you should find this maximum number.\n\n\n\n\nInput Format:\n\n\nThe input contains multiple test cases. Each test case starts with a line containing two integers n and t. The integer n is the number of line segments (n \u2264 1000) and t is the time-limit (t \u2264 10^6). Each of the next n lines specifies a line segment by giving three integers y, xs, and xt. Integer y indicates the row of that line segment (0 \u2264 y \u2264 2000), and xs and xt are the x-coordinates of its end points (0 \u2264 xs \u2264 xt \u2264 10^6). The line segments are disjoint and do not have any intersections. A case of n = t = 0 shows the end of input and should not be processed.\n\n\n\n\nOutput Format:\n\n\nWrite the result of the i_th test case on the i_th line of output. Each line should have only one integer, indicating the maximum number of line segments that can be drawn in its corresponding test case.\n\n\n\n\nSample Input:\n\n1 3 \n0 1 2 \n3 5 \n1 1 2 \n3 1 3 \n1 3 4 \n3 6 \n1 1 2\n3 1 3 \n1 3 4 \n4 11 \n1 3 4 \n1 1 2 \n2 1 2 \n2 3 4\n0 0\n\n\n\nSample Output:\n\n1\n1\n2\n3\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n1 3 \n0 1 2 \n3 5 \n1 1 2 \n3 1 3 \n1 3 4 \n3 6 \n1 1 2\n3 1 3 \n1 3 4 \n4 11 \n1 3 4 \n1 1 2 \n2 1 2 \n2 3 4\n0 0\n\n\nSample Output:\n\n1\n1\n2\n3\n\n",
    "Description": "\nProblem Statement:\n\n\nA plotter is a vector graphics printing device that connects to a computer to print graphical plots. There are two types of plotters: pen plotters and electrostatic plotters. Pen plotters print by moving a pen across the surface of a piece of paper. They can draw complex line art, including text, but do so very slowly because of the mechanical movement of the pens. In this problem, we are considering this matter of slowness for our special type of pen plotter. A discrete horizontal pen plotter can draw only horizontal line segments whose end points have discrete coordinates (integer x and y?s). The drawing method is quite simple. The pen starts its journey from the upper left corner of the page (x=y=0) and moves only right while drawing the specified lines on that row. Then, it moves back completely to the left, moves one row down (y \u2190 y+1), and repeats this task for the second row. The same is done for the next rows. In other words, the pen can move down only when it is far on the left side (i.e. when x=0), and can have at most one left-to-right pass and at most one right-to-left pass on each row.\nIt takes one unit of time to move the pen one unit of length to the left (x \u2190 x-1), or to the right (x \u2190 x+1). This time is doubled if the pen is on the paper and is drawing a line segment. It takes no time to move one row down (when x=0).\nSince it might take a long time for the plotter to draw all the given line segments, we have decided to add a new feature to our plotter: drawing time-limit. By specifying the time-limit, the plotter should draw the maximum number of lines (using the same drawing method given above) that can be drawn within that time-limit. Given the time-limit and line segments, you should find this maximum number.\n\n\n",
    "Title": "238. Hurry Plotter",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=238",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nWrite the result of the i_th test case on the i_th line of output. Each line should have only one integer, indicating the maximum number of line segments that can be drawn in its corresponding test case.\n\n\n"
  },
  "2141": {
    "Input Description": "\nInput Format:\n\n\nThe input contains multiple test cases. Each test case starts with a line containing two integers n and m. The integer n is the number of line parties (n \u2264 50) and m is the number of seats ACM party needs. The next n lines contain other parties? information, each beginning with number of seats the party has, followed by a colon, a space, and a list of demands for that party. The list of demands is in the form of triplets (a, b, c) where 0 \u2264 a \u2264 1, 0 \u2264 b \u2264 2, and 0 \u2264 c \u2264 6. The triplets are separated by the string ? or ? and are terminated with a semicolon in the end (see the sample input). The input is terminated with a line containing 0 0.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n239. ACM Coalition\n\n\n\n\n\nProblem Statement:\n\n\nIn the recent parliament election, none of the parties have vast majority of seats, so there should be a coalition to select the members of the Management Board, which are one speaker, two deputy speakers and six secretaries. The board has a special voting system: the speaker has 25 votes, deputy speakers have 8 votes and each secretary has 1 vote.\nACM party decides to take a commanding role and shape the coalition, but they are m seats short to have a majority. They know the number of seats that every other party has taken. To participate in the coalition, each party demands its share from the Management Board in the form of a triplet (a, b, c) where a, b, and c are the number of speakers, deputy speakers, and secretaries that are expected to be selected from that party. For example, if the party BDN has a demand of (1, 1, 2), it expects that the speaker, one of the deputy speakers, and two of the secretaries are selected from BDN. A party may have multiple demands, meaning that the party accepts to participate in the coalition if one of its demands is satisfied.\nKnowing the demands of all other parties, ACM wants to know how powerful it can be in Management Board. This means that ACM wants to maximize its number of votes while forming a coalition with other parties such that it overcomes its shortage of m seats.\n\n\n\n\nInput Format:\n\n\nThe input contains multiple test cases. Each test case starts with a line containing two integers n and m. The integer n is the number of line parties (n \u2264 50) and m is the number of seats ACM party needs. The next n lines contain other parties? information, each beginning with number of seats the party has, followed by a colon, a space, and a list of demands for that party. The list of demands is in the form of triplets (a, b, c) where 0 \u2264 a \u2264 1, 0 \u2264 b \u2264 2, and 0 \u2264 c \u2264 6. The triplets are separated by the string ? or ? and are terminated with a semicolon in the end (see the sample input). The input is terminated with a line containing 0 0.\n\n\n\n\nOutput Format:\n\n\nFor each test case, write a single line containing three integers, which represent speaker, deputy speaker and secretaries which ACM party can have in the coalition to have maximum votes in board?s voting system.\n\n\n\n\nSample Input:\n\n3 4\n1: (0,0,0);\n2: (1,2,0);\n3: (1,0,5) or (1,2,0) or (0,2,6); \n1 0\n1: (1,1,1);\n1 1\n1: (1,1,1);\n4 6\n6: (1,0,0) or (1,2,6);\n2: (0,2,0);\n2: (0,0,3);\n2: (0,0,3);\n0 0\n\n\n\nSample Output:\n\n1 0 0 \n1 2 6 \n0 1 5   \n1 0 0\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3 4\n1: (0,0,0);\n2: (1,2,0);\n3: (1,0,5) or (1,2,0) or (0,2,6); \n1 0\n1: (1,1,1);\n1 1\n1: (1,1,1);\n4 6\n6: (1,0,0) or (1,2,6);\n2: (0,2,0);\n2: (0,0,3);\n2: (0,0,3);\n0 0\n\n\nSample Output:\n\n1 0 0 \n1 2 6 \n0 1 5   \n1 0 0\n\n",
    "Description": "\nProblem Statement:\n\n\nIn the recent parliament election, none of the parties have vast majority of seats, so there should be a coalition to select the members of the Management Board, which are one speaker, two deputy speakers and six secretaries. The board has a special voting system: the speaker has 25 votes, deputy speakers have 8 votes and each secretary has 1 vote.\nACM party decides to take a commanding role and shape the coalition, but they are m seats short to have a majority. They know the number of seats that every other party has taken. To participate in the coalition, each party demands its share from the Management Board in the form of a triplet (a, b, c) where a, b, and c are the number of speakers, deputy speakers, and secretaries that are expected to be selected from that party. For example, if the party BDN has a demand of (1, 1, 2), it expects that the speaker, one of the deputy speakers, and two of the secretaries are selected from BDN. A party may have multiple demands, meaning that the party accepts to participate in the coalition if one of its demands is satisfied.\nKnowing the demands of all other parties, ACM wants to know how powerful it can be in Management Board. This means that ACM wants to maximize its number of votes while forming a coalition with other parties such that it overcomes its shortage of m seats.\n\n\n",
    "Title": "239. ACM Coalition",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=239",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, write a single line containing three integers, which represent speaker, deputy speaker and secretaries which ACM party can have in the coalition to have maximum votes in board?s voting system.\n\n\n"
  },
  "2142": {
    "Input Description": "\nInput Format:\n\n\nThe input contains multiple test cases. Each test case starts with a line containing n, which is the number of given comparisons. Each of the next n lines gives a comparison in the form of ?a X b Y? meaning that ?a X \u2264 b Y?. The last line of each test case contains the comparison query in the same form of ?a X b Y? inquiring the comparison of ?a X? and ?b Y?.\nA case of n = 0 shows the end of input and should not be processed. All integers in the input (except the last n which is 0) are positive and are not greater than 100. Fruit names are case-sensitive strings of (lowercase and uppercase) letters with length no more than 50.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n240. Fruit Weights\n\n\n\n\n\nProblem Statement:\n\n\nHave you ever thought about comparing the weight of fruits? That?s what you should do in this problem! Given a series of fruit weight comparisons, you should anticipate the result of another comparison. In this problem, all fruits of the same kind are identical and have the same weights. Each fruit weight comparison is something like ?aX\u2264bY? in which a and b are positive integers, and X and Y are fruit names. Such a comparison means that the weight of a fruits of type X is less than or equal to the weight of b fruits of type Y.\n\n\n\n\nInput Format:\n\n\nThe input contains multiple test cases. Each test case starts with a line containing n, which is the number of given comparisons. Each of the next n lines gives a comparison in the form of ?a X b Y? meaning that ?a X \u2264 b Y?. The last line of each test case contains the comparison query in the same form of ?a X b Y? inquiring the comparison of ?a X? and ?b Y?.\nA case of n = 0 shows the end of input and should not be processed. All integers in the input (except the last n which is 0) are positive and are not greater than 100. Fruit names are case-sensitive strings of (lowercase and uppercase) letters with length no more than 50.\n\n\n\n\nOutput Format:\n\n\nFor each test case, write one line with your result for that test case. Your result can be one of the followings (assume the comparison query was ?a X b Y?):\n1. ?<=?: meaning you are sure that ?a X \u2264 b Y?.\n2. ?>=?: meaning you are sure that ?a X \u2265 b Y?.\n3. ?==?: meaning you are sure that ?a X = b Y? (i.e. you have reached both of the above results).\n4. ?UNAVAILABLE?: meaning that you can say nothing for sure in comparing ?aX? and ?bY? (i.e. you have\nreached none of the above results).\n5. ?INCONSISTENT?: meaning that there is an inconsistency in the given comparisons (i.e. you are sure that all\nthe given comparisons for that test case cannot hold at the same time).\n\n\n\n\nSample Input:\n\n2\n2 Orange 3 Apple \n1 Apple 1 Peach \n2 Orange 3 Peach \n1\n2 Orange 3 Apple \n2 Orange 2 Apple \n2\n3 a 2 A\n2 A 3 a\n5 A 5 a\n2\n3 B 2 A\n2 A 3 B\n2 A 3 B\n3\n2 b 2 A\n2 A 2 C\n3 C 2 b\n1 A 1 b\n0\n\n\n\nSample Output:\n\n<=\nUNAVAILABLE\n>=\n==\nINCONSISTENT\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 Orange 3 Apple \n1 Apple 1 Peach \n2 Orange 3 Peach \n1\n2 Orange 3 Apple \n2 Orange 2 Apple \n2\n3 a 2 A\n2 A 3 a\n5 A 5 a\n2\n3 B 2 A\n2 A 3 B\n2 A 3 B\n3\n2 b 2 A\n2 A 2 C\n3 C 2 b\n1 A 1 b\n0\n\n\nSample Output:\n\n<=\nUNAVAILABLE\n>=\n==\nINCONSISTENT\n\n",
    "Description": "\nProblem Statement:\n\n\nHave you ever thought about comparing the weight of fruits? That?s what you should do in this problem! Given a series of fruit weight comparisons, you should anticipate the result of another comparison. In this problem, all fruits of the same kind are identical and have the same weights. Each fruit weight comparison is something like ?aX\u2264bY? in which a and b are positive integers, and X and Y are fruit names. Such a comparison means that the weight of a fruits of type X is less than or equal to the weight of b fruits of type Y.\n\n\n",
    "Title": "240. Fruit Weights",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=240",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, write one line with your result for that test case. Your result can be one of the followings (assume the comparison query was ?a X b Y?):\n1. ?<=?: meaning you are sure that ?a X \u2264 b Y?.\n2. ?>=?: meaning you are sure that ?a X \u2265 b Y?.\n3. ?==?: meaning you are sure that ?a X = b Y? (i.e. you have reached both of the above results).\n4. ?UNAVAILABLE?: meaning that you can say nothing for sure in comparing ?aX? and ?bY? (i.e. you have\nreached none of the above results).\n5. ?INCONSISTENT?: meaning that there is an inconsistency in the given comparisons (i.e. you are sure that all\nthe given comparisons for that test case cannot hold at the same time).\n\n\n"
  },
  "2143": {
    "Input Description": "\nInput Format:\n\n\nThere are multiple test cases in the input. Each test case consists of n (1 < n < 8) and m (1 < m < 8). The input terminates with a line containing 0 0.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n241. Royal Gems\n\n\n\n\n\nProblem Statement:\n\n\nIn the game of Royal Gems, you are given an n \u00d7 m board and arbitrarily large number of ruby, emerald, sapphire, and diamond gemstones. You must put one gemstone in each cell of the board according to the following rules:\n1) Every ruby has an emerald, a sapphire and a diamond in his neighbors.\n2) Every emerald has a sapphire and a diamond in her neighbors.\n3) Every sapphire has a diamond in his neighbors.\nA neighbor of a cell is one of the four cells that are directly above, below, left, or right of the cells. Write a program that finds the maximum number of ruby gemstones that could be put on the board satisfying the above rules.\n\n\n\n\nInput Format:\n\n\nThere are multiple test cases in the input. Each test case consists of n (1 < n < 8) and m (1 < m < 8). The input terminates with a line containing 0 0.\n\n\n\n\nOutput Format:\n\n\nFor each test case, write a single line containing the maximum number of ruby gemstones on the board.\n\n\n\n\nSample Input:\n\n2 2 \n2 3 \n3 3 \n0 0\n\n\n\nSample Output:\n\n0\n1\n2\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2 2 \n2 3 \n3 3 \n0 0\n\n\nSample Output:\n\n0\n1\n2\n\n\n",
    "Description": "\nProblem Statement:\n\n\nIn the game of Royal Gems, you are given an n \u00d7 m board and arbitrarily large number of ruby, emerald, sapphire, and diamond gemstones. You must put one gemstone in each cell of the board according to the following rules:\n1) Every ruby has an emerald, a sapphire and a diamond in his neighbors.\n2) Every emerald has a sapphire and a diamond in her neighbors.\n3) Every sapphire has a diamond in his neighbors.\nA neighbor of a cell is one of the four cells that are directly above, below, left, or right of the cells. Write a program that finds the maximum number of ruby gemstones that could be put on the board satisfying the above rules.\n\n\n",
    "Title": "241. Royal Gems",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=241",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, write a single line containing the maximum number of ruby gemstones on the board.\n\n\n"
  },
  "2144": {
    "Input Description": "\nInput Format:\n\n\nThere are multiple test cases in the input. Each test case consists of only one line containing n (1 \u2264 n \u2264 50), the number of teams in league. The input terminates with a line containing 0.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n242. WonderTeam\n\n\n\n\n\nProblem Statement:\n\n\nThe Brasileiro League is the most important event in Brazil. There are n football teams participating in the competitions, each team plays twice (home and away) against each other team. Each team receives three points for a win and one point for a draw. No point is awarded for a loss.\nWhen the games are finished, teams are ranked by numbers from 1 to n according to the total points. The rank of each team t having p points is one plus the number of teams having more than p points. It is possible that more than one team have the same ranks.\nIn addition to the Champion (the 1st ranked team or teams), the WonderTeam is also awarded, if there exists one. The team that has absolutely the highest number of wins (absolutely means no other teams has the same number of wins), absolutely the highest number of goals scored, and absolutely the lowest number of goals conceded, is called the WonderTeam. (WonderTeam should have all these properties.)\nYour task is to find out the worst possible rank for the WonderTeam.\n\n\n\n\nInput Format:\n\n\nThere are multiple test cases in the input. Each test case consists of only one line containing n (1 \u2264 n \u2264 50), the number of teams in league. The input terminates with a line containing 0.\n\n\n\n\nOutput Format:\n\n\nFor each test case, write a single line containing the worst possible rank for the WonderTeam.\n\n\n\n\nSample Input:\n\n1\n3\n0\n\n\n\n\nSample Output:\n\n1\n1\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nalaa.jrad\n\n\n\n\nAdded at:\n\n\n2014-09-14 07:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3\n0\n\n\n\nSample Output:\n\n1\n1\n\n\n",
    "Description": "\nProblem Statement:\n\n\nThe Brasileiro League is the most important event in Brazil. There are n football teams participating in the competitions, each team plays twice (home and away) against each other team. Each team receives three points for a win and one point for a draw. No point is awarded for a loss.\nWhen the games are finished, teams are ranked by numbers from 1 to n according to the total points. The rank of each team t having p points is one plus the number of teams having more than p points. It is possible that more than one team have the same ranks.\nIn addition to the Champion (the 1st ranked team or teams), the WonderTeam is also awarded, if there exists one. The team that has absolutely the highest number of wins (absolutely means no other teams has the same number of wins), absolutely the highest number of goals scored, and absolutely the lowest number of goals conceded, is called the WonderTeam. (WonderTeam should have all these properties.)\nYour task is to find out the worst possible rank for the WonderTeam.\n\n\n",
    "Title": "242. WonderTeam",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=242",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, write a single line containing the worst possible rank for the WonderTeam.\n\n\n"
  },
  "2145": {
    "Input Description": "\nInput Format:\n\n\nThe first line has an integer T, number of test cases.\n\nFor each test case, there are four integers, separated by single spaces, in the first line of the input: number of cities n (they are numbered from 1 to n), 1<= n <= 100, number of roads m ,0 <= m <= 300,starting city s and ending city e of the route,1 <= s,e <=n,s != e. The consecutive m lines describe the roads, one road per line. Each of these lines contains four integers separated by single spaces: two ends of a road p and r, 1 <= p,r <= n, p != r, the toll c, 0 <= c <= 100,and the traveling time t, 0 <= t <= 100. Two cities can be connected by more than one road.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n243. Bicriterial Routing\n\n\n\n\n\nProblem Statement:\n\n\nThe network of pay highways in Byteland is growing up very rapidly. It has become so dense, that the choice of the best route is a real problem. The network of highways consists of bidirectional roads connecting cities. Each such road is characterized by the traveling time and the toll to be paid.\n\nThe route is composed of consecutive roads to be traveled. The total time needed to travel the route is equal to the sum of traveling times of the roads constituting the route. The total fee for the route is equal to the sum of tolls for the roads of which the route consists. The faster one can travel the route and the lower the fee, the better the route. Strictly speaking, one route is better than the other if one can travel it faster and does not have to pay more, or vice versa: one can pay less and can travel it not slower than the other one. We will call a route connecting two cities minimal if there is no better route connecting these cities. Unfortunately, not always exists one minimal route ? there can be several incomparable routes or there can be no route at all.\n\nExample:\n\nThe picture below presents an example network of highways. Each road is accompanied by a pair of numbers: the toll and the traveling time.\n\n\n\nLet us consider four different routes from city 1 to city 4, together with their fees and traveling times: 1-2-4 (fee 4, time 5), 1-3-4 (fee 4, time 5), 1-2-3-4 (fee 6, time 4) and 1324 (fee 4, time 10).\n\nRoutes 1-3-4 and 1-2-4 are better than 1-3-2-4. There are two minimal pairs fee-time: fee 4, time 5 (roots 1-2-4 and 1-3-4) and fee 6, time 4 (root 1-2-3-4). When choosing the route we have to decide whether we prefer to travel faster but we must pay more (route 1-2-3-4), or we would rather travel slower but cheaper (route 1-3-4 or 1-2-4).\n\nYour task is to write a program, which:\n\n1) Reads the description of the highway network and starting and ending cities of the route.\n2) Computes the number of different minimal routes connecting the starting and ending city, however all the routes characterized by the same fee and traveling time count as just one route\u037e we are interested just in the number of different minimal pairs fee-time.\n3) Writes the result to the output.\n\n\n\n\nInput Format:\n\n\nThe first line has an integer T, number of test cases.\n\nFor each test case, there are four integers, separated by single spaces, in the first line of the input: number of cities n (they are numbered from 1 to n), 1<= n <= 100, number of roads m ,0 <= m <= 300,starting city s and ending city e of the route,1 <= s,e <=n,s != e. The consecutive m lines describe the roads, one road per line. Each of these lines contains four integers separated by single spaces: two ends of a road p and r, 1 <= p,r <= n, p != r, the toll c, 0 <= c <= 100,and the traveling time t, 0 <= t <= 100. Two cities can be connected by more than one road.\n\n\n\n\nOutput Format:\n\n\nFor each case, your program should write one integer, number of different minimal pairs fee-time for routes from s to e.\n\n\n\n\nSample Input:\n\n1\n4 5 1 4\n2 1 2 1\n3 4 3 1\n2 3 1 2\n3 1 1 4\n2 4 2 4\n\n\n\nSample Output:\n\n2\n\n\n\nNotes:\n\n\nOriginal Source: BOI 2002\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:28:36 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #2\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4 5 1 4\n2 1 2 1\n3 4 3 1\n2 3 1 2\n3 1 1 4\n2 4 2 4\n\n\nSample Output:\n\n2\n\n",
    "Description": "\nProblem Statement:\n\n\nThe network of pay highways in Byteland is growing up very rapidly. It has become so dense, that the choice of the best route is a real problem. The network of highways consists of bidirectional roads connecting cities. Each such road is characterized by the traveling time and the toll to be paid.\n\nThe route is composed of consecutive roads to be traveled. The total time needed to travel the route is equal to the sum of traveling times of the roads constituting the route. The total fee for the route is equal to the sum of tolls for the roads of which the route consists. The faster one can travel the route and the lower the fee, the better the route. Strictly speaking, one route is better than the other if one can travel it faster and does not have to pay more, or vice versa: one can pay less and can travel it not slower than the other one. We will call a route connecting two cities minimal if there is no better route connecting these cities. Unfortunately, not always exists one minimal route ? there can be several incomparable routes or there can be no route at all.\n\nExample:\n\nThe picture below presents an example network of highways. Each road is accompanied by a pair of numbers: the toll and the traveling time.\n\n\n\nLet us consider four different routes from city 1 to city 4, together with their fees and traveling times: 1-2-4 (fee 4, time 5), 1-3-4 (fee 4, time 5), 1-2-3-4 (fee 6, time 4) and 1324 (fee 4, time 10).\n\nRoutes 1-3-4 and 1-2-4 are better than 1-3-2-4. There are two minimal pairs fee-time: fee 4, time 5 (roots 1-2-4 and 1-3-4) and fee 6, time 4 (root 1-2-3-4). When choosing the route we have to decide whether we prefer to travel faster but we must pay more (route 1-2-3-4), or we would rather travel slower but cheaper (route 1-3-4 or 1-2-4).\n\nYour task is to write a program, which:\n\n1) Reads the description of the highway network and starting and ending cities of the route.\n2) Computes the number of different minimal routes connecting the starting and ending city, however all the routes characterized by the same fee and traveling time count as just one route\u037e we are interested just in the number of different minimal pairs fee-time.\n3) Writes the result to the output.\n\n\n",
    "Title": "243. Bicriterial Routing",
    "Notes": "\nNotes:\n\n\nOriginal Source: BOI 2002\n\n",
    "URL": "https://a2oj.com/p?ID=243",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case, your program should write one integer, number of different minimal pairs fee-time for routes from s to e.\n\n\n"
  },
  "2146": {
    "Input Description": "\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The data for each weighing is given on a line in the form:\n\nA B C D x E F G H\n\nwhere A, B, C, D, E, F, G and H are the numbers of eight different coins, and x is one of the characters <, > or =, with the following meaning:\n\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n244. Coins\n\n\n\n\n\nProblem Statement:\n\n\nYou have a balance scale and 12 coins (numbered 1, 2, ..., 12), one of which is counterfeit. The counterfeit coin is either lighter or heavier than the other, ?normal? coins. Three weighings are performed on the balance scale. Write a program coins, which attempts to identify the counterfeit coin and determines if it is heavier or lighter.\n\n\n\n\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The data for each weighing is given on a line in the form:\n\nA B C D x E F G H\n\nwhere A, B, C, D, E, F, G and H are the numbers of eight different coins, and x is one of the characters <, > or =, with the following meaning:\n\n\n\n\n\nOutput Format:\n\n\nFor each case, the program writes to the output the number of the counterfeit coin and the character ?+?, when it is heavier than the others, or the character ???, when it is lighter.\n\nIf the data of the three weighings is contradictory the program has to output ?impossible?.\n\nIf the data is not contradictory but is insufficient for determining the number of the counterfeit coin, or if it is heavier or lighter the program has to output ?indefinite?.\n\n\n\n\nSample Input:\n\n4\n1 2 3 10 > 4 5 6 11\n1 2 3 11 > 7 8 9 10\n1 4 7 10 < 2 5 8 12\n1 4 6 10 < 5 7 9 12\n2 5 4 11 > 6 8 7 10\n3 6 5 12 < 4 9 8 11\n1 2 3 4 < 5 6 7 8\n5 6 7 8 < 9 10 11 12\n9 10 11 12 < 1 2 3 4\n4 8 10 11 = 1 2 5 7\n2 4 7 12 = 8 9 10 11\n3 7 10 11 > 6 8 9 12\n\n\n\nSample Output:\n\n2+\n6-\nimpossible\nindefinite\n\n\n\nNotes:\n\n\nOriginal Source: JBOI 2009\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:28:42 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #2\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n1 2 3 10 > 4 5 6 11\n1 2 3 11 > 7 8 9 10\n1 4 7 10 < 2 5 8 12\n1 4 6 10 < 5 7 9 12\n2 5 4 11 > 6 8 7 10\n3 6 5 12 < 4 9 8 11\n1 2 3 4 < 5 6 7 8\n5 6 7 8 < 9 10 11 12\n9 10 11 12 < 1 2 3 4\n4 8 10 11 = 1 2 5 7\n2 4 7 12 = 8 9 10 11\n3 7 10 11 > 6 8 9 12\n\n\nSample Output:\n\n2+\n6-\nimpossible\nindefinite\n\n",
    "Description": "\nProblem Statement:\n\n\nYou have a balance scale and 12 coins (numbered 1, 2, ..., 12), one of which is counterfeit. The counterfeit coin is either lighter or heavier than the other, ?normal? coins. Three weighings are performed on the balance scale. Write a program coins, which attempts to identify the counterfeit coin and determines if it is heavier or lighter.\n\n\n",
    "Title": "244. Coins",
    "Notes": "\nNotes:\n\n\nOriginal Source: JBOI 2009\n\n",
    "URL": "https://a2oj.com/p?ID=244",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case, the program writes to the output the number of the counterfeit coin and the character ?+?, when it is heavier than the others, or the character ???, when it is lighter.\n\nIf the data of the three weighings is contradictory the program has to output ?impossible?.\n\nIf the data is not contradictory but is insufficient for determining the number of the counterfeit coin, or if it is heavier or lighter the program has to output ?indefinite?.\n\n\n"
  },
  "2147": {
    "Input Description": "\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The first and only line of input will contain the radius R, an integer smaller than or equal to 10000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n245. Herman\n\n\n\n\n\nProblem Statement:\n\n\nThe 19th century German mathematician Hermann Minkowski investigated a non-Euclidian geometry, called the taxicab geometry. In taxicab geometry the distance between two points T1(x1, y1) and T2(x2, y2) is defined as:\n\nD(T1,T2) = |x1 x2| + |y1 y2|\n\nAll other definitions are the same as in Euclidian geometry, including that of a circle: A circle is the set of all points in a plane at a fixed distance (the radius) from a fixed point (the centre of the circle).\n\nWe are interested in the difference of the areas of two circles with radius R, one of which is in normal (Euclidian) geometry, and the other in taxicab geometry. The burden of solving this difficult problem has fallen onto you.\n\n\n\n\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The first and only line of input will contain the radius R, an integer smaller than or equal to 10000.\n\n\n\n\nOutput Format:\n\n\nFor each case, On the first line you should output the area of a circle with radius R in normal (Euclidian) geometry. On the second line you should output the area of a circle with radius R in taxicab geometry. Output to 6 decimal places.\n\n\n\n\nSample Input:\n\n2\n1\n21\n\n\n\nSample Output:\n\n3.141593\n2.000000\n1385.442360\n882.000000\n\n\n\nNotes:\n\n\nOriginal Source: COCI 2006\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:28:47 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #2\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1\n21\n\n\nSample Output:\n\n3.141593\n2.000000\n1385.442360\n882.000000\n\n",
    "Description": "\nProblem Statement:\n\n\nThe 19th century German mathematician Hermann Minkowski investigated a non-Euclidian geometry, called the taxicab geometry. In taxicab geometry the distance between two points T1(x1, y1) and T2(x2, y2) is defined as:\n\nD(T1,T2) = |x1 x2| + |y1 y2|\n\nAll other definitions are the same as in Euclidian geometry, including that of a circle: A circle is the set of all points in a plane at a fixed distance (the radius) from a fixed point (the centre of the circle).\n\nWe are interested in the difference of the areas of two circles with radius R, one of which is in normal (Euclidian) geometry, and the other in taxicab geometry. The burden of solving this difficult problem has fallen onto you.\n\n\n",
    "Title": "245. Herman",
    "Notes": "\nNotes:\n\n\nOriginal Source: COCI 2006\n\n",
    "URL": "https://a2oj.com/p?ID=245",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case, On the first line you should output the area of a circle with radius R in normal (Euclidian) geometry. On the second line you should output the area of a circle with radius R in taxicab geometry. Output to 6 decimal places.\n\n\n"
  },
  "2148": {
    "Input Description": "\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The input will contain 10 nonnegative integers, each smaller than 1000, one per line.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n246. Modulo\n\n\n\n\n\nProblem Statement:\n\n\nGiven two integers A and B, A modulo B is the remainder when dividing A by B. For example, the numbers 7, 14, 27 and 38 become 1, 2, 0 and 2, modulo 3. Write a program that accepts 10 numbers as input and outputs the number of distinct numbers in the input, if the numbers are considered modulo 42.\n\n\n\n\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The input will contain 10 nonnegative integers, each smaller than 1000, one per line.\n\n\n\n\nOutput Format:\n\n\nFor each case, Output the number of distinct values when considered modulo 42 on a single line.\n\n\n\n\nSample Input:\n\n2\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n39\n40\n41\n42\n43\n44\n82\n83\n84\n85\n\n\n\nSample Output:\n\n10\n6\n\n\n\nNotes:\n\n\nExample Clarification:\n\nIn the first example, the numbers modulo 42 are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10.\nIn the second, the numbers modulo 42 are 39, 40, 41, 0, 1, 2, 40, 41, 0 and 1. There are 6 distinct numbers.\n\nOriginal Source: COCI 2006\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:28:51 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #2\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n39\n40\n41\n42\n43\n44\n82\n83\n84\n85\n\n\nSample Output:\n\n10\n6\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven two integers A and B, A modulo B is the remainder when dividing A by B. For example, the numbers 7, 14, 27 and 38 become 1, 2, 0 and 2, modulo 3. Write a program that accepts 10 numbers as input and outputs the number of distinct numbers in the input, if the numbers are considered modulo 42.\n\n\n",
    "Title": "246. Modulo",
    "Notes": "\nNotes:\n\n\nExample Clarification:\n\nIn the first example, the numbers modulo 42 are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10.\nIn the second, the numbers modulo 42 are 39, 40, 41, 0, 1, 2, 40, 41, 0 and 1. There are 6 distinct numbers.\n\nOriginal Source: COCI 2006\n\n",
    "URL": "https://a2oj.com/p?ID=246",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case, Output the number of distinct values when considered modulo 42 on a single line.\n\n\n"
  },
  "2149": {
    "Input Description": "\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The file contains integer N in the first line, representing the length of the board. The second line of the file contains N integers belonging to the set {0, 1, 2}, separated by one space. 0 means an empty position, 1 means a position taken by a white pawn and 2 means a position taken by a black pawn. The first number on the second line corresponds to the first position on the board, the second number corresponds to the second position and so on.\n\nConstraints:\n2 <= N <= 13\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n247. Pawns\n\n\n\n\n\nProblem Statement:\n\n\nPawns is a game that takes place on a board of a length of N and width of 1. The board is divided into N squares having the side 1, numbered 1, 2, ..., N from left to right. Each of the N squares (positions) of the board can be at some point empty or taken by a pawn. The pawns may be white or black. The initial position is given for each pawn on the board. The pawns can be moved according to the following rules:\n\nA white pawn in two ways:\n\n - it can take the left position adjacent to its current position, if it is empty\u037e\n - it can be moved two squares to the left if the left adjacent position is taken by another pawn and the next to the left is free (the pawn can jump over its left neighbour)\n\nA black pawn in two ways:\n - it can take the right position adjacent to its current position, if it is empty\u037e\n - it can be moved two squares to the right if the right adjacent position is taken by another pawn and the next to the right is free (the pawn can jump over its right neighbour)\n\nAfter a pawn is moved, its must remain on the game board. You must bear in mind that if a pawn can be moved at some point, it can be moved only in one way.\n\nTo complete the game means to bring the white pawns to the front positions of the board and the black pawns to the back positions (white pawns will take positions 1, 2, ..., without leaving any empty positions in between\u037e black pawns will take positions N, N1, ..., without leaving any empty positions in-between)\n\nTask\n\nKnowing the initial positions of the pawns on the board, you are to find the minimum number of moves needed to complete the game and the moves themselves. It is guaranteed that the initial positions are given so as to complete the game after a finite number of moves.\n\n\n\n\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The file contains integer N in the first line, representing the length of the board. The second line of the file contains N integers belonging to the set {0, 1, 2}, separated by one space. 0 means an empty position, 1 means a position taken by a white pawn and 2 means a position taken by a black pawn. The first number on the second line corresponds to the first position on the board, the second number corresponds to the second position and so on.\n\nConstraints:\n2 <= N <= 13\n\n\n\n\nOutput Format:\n\n\nFor each case, The output will contain integer X on the first line representing the number of moves needed to complete the game.\n\n\n\n\nSample Input:\n\n1\n5\n2 0 0 2 1\n\n\n\nSample Output:\n\n5\n\n\n\nNotes:\n\n\n\n\nOriginal Source: JBOI 2011\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:28:54 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #2\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n5\n2 0 0 2 1\n\n\nSample Output:\n\n5\n\n",
    "Description": "\nProblem Statement:\n\n\nPawns is a game that takes place on a board of a length of N and width of 1. The board is divided into N squares having the side 1, numbered 1, 2, ..., N from left to right. Each of the N squares (positions) of the board can be at some point empty or taken by a pawn. The pawns may be white or black. The initial position is given for each pawn on the board. The pawns can be moved according to the following rules:\n\nA white pawn in two ways:\n\n - it can take the left position adjacent to its current position, if it is empty\u037e\n - it can be moved two squares to the left if the left adjacent position is taken by another pawn and the next to the left is free (the pawn can jump over its left neighbour)\n\nA black pawn in two ways:\n - it can take the right position adjacent to its current position, if it is empty\u037e\n - it can be moved two squares to the right if the right adjacent position is taken by another pawn and the next to the right is free (the pawn can jump over its right neighbour)\n\nAfter a pawn is moved, its must remain on the game board. You must bear in mind that if a pawn can be moved at some point, it can be moved only in one way.\n\nTo complete the game means to bring the white pawns to the front positions of the board and the black pawns to the back positions (white pawns will take positions 1, 2, ..., without leaving any empty positions in between\u037e black pawns will take positions N, N1, ..., without leaving any empty positions in-between)\n\nTask\n\nKnowing the initial positions of the pawns on the board, you are to find the minimum number of moves needed to complete the game and the moves themselves. It is guaranteed that the initial positions are given so as to complete the game after a finite number of moves.\n\n\n",
    "Title": "247. Pawns",
    "Notes": "\nNotes:\n\n\n\n\nOriginal Source: JBOI 2011\n\n",
    "URL": "https://a2oj.com/p?ID=247",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case, The output will contain integer X on the first line representing the number of moves needed to complete the game.\n\n\n"
  },
  "2150": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T test cases follow. For each test case, the first line contains one positive integer n (n <= 2000), the number of triangles on a plane. The next n lines of the file describe the triangles, one triangle per line. Each line contains three integers xi, yi and mi, separated by single spaces (1 <= i <= n, 107 <= xi <= 107, 107 <= yi <= 107, 0 < mi <= 1000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n248. Triangles Area\n\n\n\n\n\nProblem Statement:\n\n\nThere are given n isosceles right triangles on a plane. Each triangle can be described by three integers x,y,m (m>0). Vertices of such a triangle are points which have coordinates (x\u037e y), (x+m\u037e y) and (x\u037e y+m).\n\nWrite a program which calculates the total area covered by triangles.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T test cases follow. For each test case, the first line contains one positive integer n (n <= 2000), the number of triangles on a plane. The next n lines of the file describe the triangles, one triangle per line. Each line contains three integers xi, yi and mi, separated by single spaces (1 <= i <= n, 107 <= xi <= 107, 107 <= yi <= 107, 0 < mi <= 1000).\n\n\n\n\nOutput Format:\n\n\nFor each case, On the first line has one number with exactly one digit after decimal point must be written ? the total area covered by triangles.\n\n\n\n\nSample Input:\n\n1\n-5 -3 6\n-1 -2 3\n0 0 2\n-2 2 1\n-4 -1 2\n\n\n\nSample Output:\n\n24.5\n\n\n\nNotes:\n\n\n\n\nOriginal Source: BOI 2002\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:28:56 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #2\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n-5 -3 6\n-1 -2 3\n0 0 2\n-2 2 1\n-4 -1 2\n\n\nSample Output:\n\n24.5\n\n",
    "Description": "\nProblem Statement:\n\n\nThere are given n isosceles right triangles on a plane. Each triangle can be described by three integers x,y,m (m>0). Vertices of such a triangle are points which have coordinates (x\u037e y), (x+m\u037e y) and (x\u037e y+m).\n\nWrite a program which calculates the total area covered by triangles.\n\n\n",
    "Title": "248. Triangles Area",
    "Notes": "\nNotes:\n\n\n\n\nOriginal Source: BOI 2002\n\n",
    "URL": "https://a2oj.com/p?ID=248",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case, On the first line has one number with exactly one digit after decimal point must be written ? the total area covered by triangles.\n\n\n"
  },
  "2151": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T test cases follow. For each case, the input has 2 lines. The first line has one integer, N. The next line describes A: N integers separated by one space.\n\nConstraints:\n\u25cf 1 < N < 500000\n\u25cf 1 \u2264 X \u2264 N1\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n249. Sorting\n\n\n\n\n\nProblem Statement:\n\n\nLittle P has just learned the shell-sort sorting algorithm. He was given some code that sorts an array of N integers in ascending order. Let A be the array to be sorted. where i, N,X, gap, temp, ok are integers (int for C/C++, longint for Pascal). While typing this code, little P forgot to copy line 11.\n\n\n\nTask\n\nYou are given the array to be sorted, A. A has N distinct elements, all between 1 and N. You are asked to find all the values X for which the algorithm (without line 11) sorts A. We call these X values to be valid.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T test cases follow. For each case, the input has 2 lines. The first line has one integer, N. The next line describes A: N integers separated by one space.\n\nConstraints:\n\u25cf 1 < N < 500000\n\u25cf 1 \u2264 X \u2264 N1\n\n\n\n\nOutput Format:\n\n\nFor each case, the output should have the number of valid values X on the first line. The second line should have all the valid values X, separated by one space. They should be sorted in ascending order.\n\n\n\n\nSample Input:\n\n1\n6\n4 2 6 1 5 3\n\n\n\nSample Output:\n\n2\n1 3\n\n\n\nNotes:\n\n\nN is 6 and A is: 4, 2, 6, 1, 5, 3. Valid values for X are:\n\u25cf X = 1, we swap the numbers on the following positions (1,2), (3,4), (4,5), (5,6), (2,3), (4,5), (1,2), (3,4)\u037e\n\u25cf X = 3, we swap the numbers on the following positions (1,4), (3,6).\n\nOriginal Source: JBOI 2011\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:28:59 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #2\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n6\n4 2 6 1 5 3\n\n\nSample Output:\n\n2\n1 3\n\n",
    "Description": "\nProblem Statement:\n\n\nLittle P has just learned the shell-sort sorting algorithm. He was given some code that sorts an array of N integers in ascending order. Let A be the array to be sorted. where i, N,X, gap, temp, ok are integers (int for C/C++, longint for Pascal). While typing this code, little P forgot to copy line 11.\n\n\n\nTask\n\nYou are given the array to be sorted, A. A has N distinct elements, all between 1 and N. You are asked to find all the values X for which the algorithm (without line 11) sorts A. We call these X values to be valid.\n\n\n",
    "Title": "249. Sorting",
    "Notes": "\nNotes:\n\n\nN is 6 and A is: 4, 2, 6, 1, 5, 3. Valid values for X are:\n\u25cf X = 1, we swap the numbers on the following positions (1,2), (3,4), (4,5), (5,6), (2,3), (4,5), (1,2), (3,4)\u037e\n\u25cf X = 3, we swap the numbers on the following positions (1,4), (3,6).\n\nOriginal Source: JBOI 2011\n\n",
    "URL": "https://a2oj.com/p?ID=249",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each case, the output should have the number of valid values X on the first line. The second line should have all the valid values X, separated by one space. They should be sorted in ascending order.\n\n\n"
  },
  "2152": {
    "Input Description": "\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The first line of the file contains integer R (2 \u2264 R \u2264 10) the number of robots. Then R sections of lines follow. Each section describes one robot. The first line of the section contains four integers, separated by single spaces: x, y, initial robot position (x, y), initial robot direction C (C = 0, 90, 180, or 270) and the length of robot's command sequence n (1 \u2264 n \u2264 50).\n\nThen the section contains n lines describing the sequence of commands, one command per line. The line of the step command contains single character S in the first position and the line of the turn command contains character T in the first position that is followed by turn parameter integer D (D = 90, 180 or 270) and is separated by a single space.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n250. Moving Robots\n\n\n\n\n\nProblem Statement:\n\n\nThere are several robots moving on a 2d whole grid plane. The state of every robot is defined by the current position and direction and every robot moves according to its own finite sequence of commands. Position is described by a pair of integers (x, y).\n\nThere are four possible robot's directions that are described by the number of degrees: 0, 90, 180 or 270. The commands are of two kinds: turn and move. Turn command has one parameter D which can be one of 90, 180 or 270. The command changes the robot's current direction in D degrees: direction C is changed to direction (C + D) mod 360. Step command has no parameters and makes the robot move one step in its current direction. One step in direction 0 changes robot's current position by (1, 0), in direction 90 by (0, 1), in direction 180 by (-1, 0) and in direction 270 by (0, -1).\n\nA robot performs the commands of its sequence one after another. When the whole sequence is performed the robot stops in the final position. The movement of a robot is not affected by the other robots in any way. In particular, any number of robots can share the same position.\n\nBefore the robots start to move the control center can order some robots to remove some commands from their sequences. So the control center can influence the paths of the robots as well as their final positions. The control center wants all robots to gather in the common final position for inspection. It also wants to achieve this with the minimum possible total number of removed commands.\n\nTask\n\nThere are R (2 \u2264 R \u2264 10) robots. Each robot has its own initial position, initial direction and its own sequence of commands that contains no more than 50 commands. Write a program that determines (if possible): The minimum total number of commands to be removed from some sequences that all robots would stop in the common final position.\n\n\n\n\nInput Format:\n\n\nThe first line has an integer T, number of test cases. For each test case, The first line of the file contains integer R (2 \u2264 R \u2264 10) the number of robots. Then R sections of lines follow. Each section describes one robot. The first line of the section contains four integers, separated by single spaces: x, y, initial robot position (x, y), initial robot direction C (C = 0, 90, 180, or 270) and the length of robot's command sequence n (1 \u2264 n \u2264 50).\n\nThen the section contains n lines describing the sequence of commands, one command per line. The line of the step command contains single character S in the first position and the line of the turn command contains character T in the first position that is followed by turn parameter integer D (D = 90, 180 or 270) and is separated by a single space.\n\n\n\n\nOutput Format:\n\n\nFor each test case. If it is not possible to make the robots stop in the common final position by removing any set of commands then the program should write integer -1 (minus one) to the first (and single) line of the file. Otherwise, the minimum total number of commands to be removed should be written.\n\n\n\n\nSample Input:\n\n1\n2\n2 0 270 5\nS\nT 180\nS\nS\nS\n1 1\n0 8\nS\nS\nT 90\nS\nT 270\nS\nT 90\nS\n\n\n\nSample Output:\n\n2\n\n\n\nNotes:\n\n\nOriginal Source: BOI 2002\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:06 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #2\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n2\n2 0 270 5\nS\nT 180\nS\nS\nS\n1 1\n0 8\nS\nS\nT 90\nS\nT 270\nS\nT 90\nS\n\n\nSample Output:\n\n2\n\n",
    "Description": "\nProblem Statement:\n\n\nThere are several robots moving on a 2d whole grid plane. The state of every robot is defined by the current position and direction and every robot moves according to its own finite sequence of commands. Position is described by a pair of integers (x, y).\n\nThere are four possible robot's directions that are described by the number of degrees: 0, 90, 180 or 270. The commands are of two kinds: turn and move. Turn command has one parameter D which can be one of 90, 180 or 270. The command changes the robot's current direction in D degrees: direction C is changed to direction (C + D) mod 360. Step command has no parameters and makes the robot move one step in its current direction. One step in direction 0 changes robot's current position by (1, 0), in direction 90 by (0, 1), in direction 180 by (-1, 0) and in direction 270 by (0, -1).\n\nA robot performs the commands of its sequence one after another. When the whole sequence is performed the robot stops in the final position. The movement of a robot is not affected by the other robots in any way. In particular, any number of robots can share the same position.\n\nBefore the robots start to move the control center can order some robots to remove some commands from their sequences. So the control center can influence the paths of the robots as well as their final positions. The control center wants all robots to gather in the common final position for inspection. It also wants to achieve this with the minimum possible total number of removed commands.\n\nTask\n\nThere are R (2 \u2264 R \u2264 10) robots. Each robot has its own initial position, initial direction and its own sequence of commands that contains no more than 50 commands. Write a program that determines (if possible): The minimum total number of commands to be removed from some sequences that all robots would stop in the common final position.\n\n\n",
    "Title": "250. Moving Robots",
    "Notes": "\nNotes:\n\n\nOriginal Source: BOI 2002\n\n",
    "URL": "https://a2oj.com/p?ID=250",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case. If it is not possible to make the robots stop in the common final position by removing any set of commands then the program should write integer -1 (minus one) to the first (and single) line of the file. Otherwise, the minimum total number of commands to be removed should be written.\n\n\n"
  },
  "2153": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains in T, specifying the number of test cases. T blocks comes next. Each test case contains a positive integer n is given on the first line.There are n non-negative integers on the second line: a1, a2, ... , an.\n\nConstraints\n - n <= 10000\u037e\n - 0 <= ai <= 10000 for i = 1, 2, ..., n\u037e\n - ai not equal ai+1 for i = 1, 2, ..., n1\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n251. Decreasing Sequence of Points\n\n\n\n\n\nProblem Statement:\n\n\nLet A1 (x1,y1), A2 (x2, y2), ... , An (xn, yn) be a sequence of n different points in the plane with non-negative integer coordinates. We call this sequence decreasing if for any two points Ai (xi, yi) and Ai+1 (xi+1, yi+1), it is true that x<=xi+1 and yi >= yi+1. For example, the sequence of points A1(1, 4), A2(1,3), A3(2,2), A4(2,1), A5(4,0), A6 (7,0) is decreasing.\n\n\n\nWrite program which calculates the number of decreasing sequences of points for which x1 + y1 = a1, x2 + y2 = a2, ... , xn + yn = an\n\n\n\n\nInput Format:\n\n\nThe first line contains in T, specifying the number of test cases. T blocks comes next. Each test case contains a positive integer n is given on the first line.There are n non-negative integers on the second line: a1, a2, ... , an.\n\nConstraints\n - n <= 10000\u037e\n - 0 <= ai <= 10000 for i = 1, 2, ..., n\u037e\n - ai not equal ai+1 for i = 1, 2, ..., n1\n\n\n\n\nOutput Format:\n\n\nOn a line of the standard output the program has to write by modulo 123456789 the number of the above described sequences.\n\n\n\n\nSample Input:\n\n1\n3\n4 5 3\n\n\n\nSample Output:\n\n10\n\n\n\nNotes:\n\n\nOriginal Source: INTERNATIONAL TOURNAMENT IN INFORMATICS 2013\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:08 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #2\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3\n4 5 3\n\n\nSample Output:\n\n10\n\n",
    "Description": "\nProblem Statement:\n\n\nLet A1 (x1,y1), A2 (x2, y2), ... , An (xn, yn) be a sequence of n different points in the plane with non-negative integer coordinates. We call this sequence decreasing if for any two points Ai (xi, yi) and Ai+1 (xi+1, yi+1), it is true that x<=xi+1 and yi >= yi+1. For example, the sequence of points A1(1, 4), A2(1,3), A3(2,2), A4(2,1), A5(4,0), A6 (7,0) is decreasing.\n\n\n\nWrite program which calculates the number of decreasing sequences of points for which x1 + y1 = a1, x2 + y2 = a2, ... , xn + yn = an\n\n\n",
    "Title": "251. Decreasing Sequence of Points",
    "Notes": "\nNotes:\n\n\nOriginal Source: INTERNATIONAL TOURNAMENT IN INFORMATICS 2013\n\n",
    "URL": "https://a2oj.com/p?ID=251",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nOn a line of the standard output the program has to write by modulo 123456789 the number of the above described sequences.\n\n\n"
  },
  "2154": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow.\n\nFor each test case, the first line contains three positive integers A, B and C, not necessarily in that order. All three numbers will be less than or equal to 100.\n\nThe second line contains three uppercase letters 'A', 'B' and 'C' (with no spaces between\nthem) representing the desired order.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n252. ABC\n\n\n\n\n\nProblem Statement:\n\n\nYou will be given three integers A, B and C. The numbers will not be given in that exact order, but we do know that A is less than B and B less than C.\n\nIn order to make for a more pleasant viewing, we want to rearrange them in the given order.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow.\n\nFor each test case, the first line contains three positive integers A, B and C, not necessarily in that order. All three numbers will be less than or equal to 100.\n\nThe second line contains three uppercase letters 'A', 'B' and 'C' (with no spaces between\nthem) representing the desired order.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output the A, B and C in the desired order on a single line, separated by single spaces.\n\n\n\n\nSample Input:\n\n2\n1 5 3\nABC\n6 4 2\nCAB\n\n\n\nSample Output:\n\n1 3 5\n6 2 4\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:10 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1 5 3\nABC\n6 4 2\nCAB\n\n\nSample Output:\n\n1 3 5\n6 2 4\n\n",
    "Description": "\nProblem Statement:\n\n\nYou will be given three integers A, B and C. The numbers will not be given in that exact order, but we do know that A is less than B and B less than C.\n\nIn order to make for a more pleasant viewing, we want to rearrange them in the given order.\n\n\n",
    "Title": "252. ABC",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=252",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output the A, B and C in the desired order on a single line, separated by single spaces.\n\n\n"
  },
  "2155": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow.\n\nFor each test case, the first line contains two integers N1 and N2, the numbers of ants in the first and second rows, respectively.\n\nThe next two rows contain the orders of ants in the first and second row (first to last). Each ant is uniquely determined by an uppercase letter of the English alphabet (this letter is unique between both rows). The last line of input contains the integer K (0 \u2264 K \u2264 50).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n253. Colony\n\n\n\n\n\nProblem Statement:\n\n\nWhen moving, ants form rows so that each ant except the first is behind another ant. It is not widely known what happens when two rows of ants moving in opposite directions run into each other in a passage too narrow for both rows to pass through. One theory says that, in that situation, ants will jump over each other.\n\nFrom the moment the rows meet, each second every ant jumps over (or gets jumped over, as they agree upon) the ant in front of himself so that the two ants swap places, but only if the other ant is moving in the opposite direction. Find the order of the ants after K seconds.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow.\n\nFor each test case, the first line contains two integers N1 and N2, the numbers of ants in the first and second rows, respectively.\n\nThe next two rows contain the orders of ants in the first and second row (first to last). Each ant is uniquely determined by an uppercase letter of the English alphabet (this letter is unique between both rows). The last line of input contains the integer K (0 \u2264 K \u2264 50).\n\n\n\n\nOutput Format:\n\n\nFor each test case, output the order of the ants after K seconds on a single line. Our viewpoint is such that the first row of ants comes from our left side and the other one from our right side.\n\n\n\n\nSample Input:\n\n3\n3 3\nABC\nDEF\n0\n3 3\nABC\nDEF\n2\n3 4\nJLA\nCRUO\n3\n\n\n\nSample Output:\n\nCBADEF\nCDBEAF\nCARLUJO\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:13 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3 3\nABC\nDEF\n0\n3 3\nABC\nDEF\n2\n3 4\nJLA\nCRUO\n3\n\n\nSample Output:\n\nCBADEF\nCDBEAF\nCARLUJO\n\n",
    "Description": "\nProblem Statement:\n\n\nWhen moving, ants form rows so that each ant except the first is behind another ant. It is not widely known what happens when two rows of ants moving in opposite directions run into each other in a passage too narrow for both rows to pass through. One theory says that, in that situation, ants will jump over each other.\n\nFrom the moment the rows meet, each second every ant jumps over (or gets jumped over, as they agree upon) the ant in front of himself so that the two ants swap places, but only if the other ant is moving in the opposite direction. Find the order of the ants after K seconds.\n\n\n",
    "Title": "253. Colony",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=253",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output the order of the ants after K seconds on a single line. Our viewpoint is such that the first row of ants comes from our left side and the other one from our right side.\n\n\n"
  },
  "2156": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T denoting the number of test cases. T blocks follow.\n\nFor each test case, on the first line you must read two positive integers, separated with an interval: K - competitors count and N - laps count. After that there are K rows (one for each runner). On every row there are two positive integers: msi - milliseconds for competitor i to run one lap in normal form and pi - lap count on which the runner receives his energy drinks and returns to normal form.\n\nConstraints\n - 2 \u2264 K \u2264 10,000\n - 1 \u2264 N \u2264 1,000\n - 1 \u2264 msi \u2264 1,000,000\n - 1 \u2264 pi \u2264 N\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n254. Competitions\n\n\n\n\n\nProblem Statement:\n\n\nK competitors are taking part in a competition. Each of them must finish N full laps of a round circuit. All the competitors start together from the starting line. At the start of the event every runner is in his normal form. While making his laps he is losing his stamina and he is running with lower and lower tempo. That lower tempo means that every lap is done 1 millisecond slower than the previous one. When in normal form competitor with number i is doing one lap for msi milliseconds (msi is a positive integer).\n\nThe rules of the competition allow a positive integer pi (1\u2264 pi\u2264 N) to be announced for every competitor before the start. On every full pi laps done the runner gets an energy drink (while passing the starting line) which returns him to full strength (after that his stamina is dropping again the same way as before). The drinking takes 0 time. It's obvious that while doing N laps every competitor will cross the starting line N times (we count the crossing after the last lap, but do not count the crossing of the line when they start the run).\n\nWrite program which determines the maximum number of competitors who will cross the starting line together at any point of the competition (as we are working in milliseconds together means after equal amount of milliseconds after the competition's start).\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T denoting the number of test cases. T blocks follow.\n\nFor each test case, on the first line you must read two positive integers, separated with an interval: K - competitors count and N - laps count. After that there are K rows (one for each runner). On every row there are two positive integers: msi - milliseconds for competitor i to run one lap in normal form and pi - lap count on which the runner receives his energy drinks and returns to normal form.\n\nConstraints\n - 2 \u2264 K \u2264 10,000\n - 1 \u2264 N \u2264 1,000\n - 1 \u2264 msi \u2264 1,000,000\n - 1 \u2264 pi \u2264 N\n\n\n\n\nOutput Format:\n\n\nFor each test case, on a separate line print one single integer - the determined maximum count of competitors who will cross the starting line together at some moment of the competition.\n\n\n\n\nSample Input:\n\n1\n4 3\n26 2\n39 3\n45 1\n56 2\n\n\n\nSample Output:\n\n2\n\n\n\nNotes:\n\n\nThe runners will do the following laps:\n\nRunner 1: for 26, 27 and 26 msec.; Runner 2: for 39, 40 and 41 msec.; Runner 3: for 45, 45 and 45 msec.; Runner 4: for 56, 57 and 56 msec. Respectively they will cross the starting line at: Runner 1: after 26, 53, 79 msec.; Runner 2: after 39, 79 and 120 msec; Runner 3: after 45, 90 and 135 msec; Runner 4: after 56, 113 and 169 msec. The only case when more than one runner will cross the starting line is after 79 milliseconds when runner 1 and runner 2 will be on the line together.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:15 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4 3\n26 2\n39 3\n45 1\n56 2\n\n\nSample Output:\n\n2\n\n",
    "Description": "\nProblem Statement:\n\n\nK competitors are taking part in a competition. Each of them must finish N full laps of a round circuit. All the competitors start together from the starting line. At the start of the event every runner is in his normal form. While making his laps he is losing his stamina and he is running with lower and lower tempo. That lower tempo means that every lap is done 1 millisecond slower than the previous one. When in normal form competitor with number i is doing one lap for msi milliseconds (msi is a positive integer).\n\nThe rules of the competition allow a positive integer pi (1\u2264 pi\u2264 N) to be announced for every competitor before the start. On every full pi laps done the runner gets an energy drink (while passing the starting line) which returns him to full strength (after that his stamina is dropping again the same way as before). The drinking takes 0 time. It's obvious that while doing N laps every competitor will cross the starting line N times (we count the crossing after the last lap, but do not count the crossing of the line when they start the run).\n\nWrite program which determines the maximum number of competitors who will cross the starting line together at any point of the competition (as we are working in milliseconds together means after equal amount of milliseconds after the competition's start).\n\n\n",
    "Title": "254. Competitions",
    "Notes": "\nNotes:\n\n\nThe runners will do the following laps:\n\nRunner 1: for 26, 27 and 26 msec.; Runner 2: for 39, 40 and 41 msec.; Runner 3: for 45, 45 and 45 msec.; Runner 4: for 56, 57 and 56 msec. Respectively they will cross the starting line at: Runner 1: after 26, 53, 79 msec.; Runner 2: after 39, 79 and 120 msec; Runner 3: after 45, 90 and 135 msec; Runner 4: after 56, 113 and 169 msec. The only case when more than one runner will cross the starting line is after 79 milliseconds when runner 1 and runner 2 will be on the line together.\n\n",
    "URL": "https://a2oj.com/p?ID=254",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, on a separate line print one single integer - the determined maximum count of competitors who will cross the starting line together at some moment of the competition.\n\n\n"
  },
  "2157": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, there are 9 lines of input. Each contains an integer between 1 and 99 (inclusive). All of the numbers will be distinct.\n\nNote: The test data will be such that the solution is unique.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n255. Dwarves\n\n\n\n\n\nProblem Statement:\n\n\nEvery day, while the dwarves are busy in the mines, Snow White prepares dinner for them; seven chairs, seven plates, seven forks and seven knives for seven hungry dwarves.\n\nOne day nine dwarves came from the mines instead of seven (nobody knows how or why), each of them claiming to be one of Snow White's seven dwarves.\n\nLuckily, each dwarf wears a hat with a positive integer less than 100 written on it. Snow White, a famous mathematician, realised long ago that the sum of numbers on the hats of her seven dwarves was exactly 100.\n\nWrite a program which determines which dwarves are legit, i.e. pick seven of nine numbers that add to 100.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, there are 9 lines of input. Each contains an integer between 1 and 99 (inclusive). All of the numbers will be distinct.\n\nNote: The test data will be such that the solution is unique.\n\n\n\n\nOutput Format:\n\n\nFor each test case, your program must produce exactly seven lines of output - the numbers on the hats of Snow White's seven dwarves. Output the numbers in any order.\n\n\n\n\nSample Input:\n\n2\n7\n8\n10\n13\n15\n19\n20\n23\n25\n8\n6\n5\n1\n37\n30\n28\n22\n36\n\n\n\nSample Output:\n\n7\n8\n10\n13\n19\n20\n23\n8\n6\n5\n1\n30\n28\n22\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:17 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n7\n8\n10\n13\n15\n19\n20\n23\n25\n8\n6\n5\n1\n37\n30\n28\n22\n36\n\n\nSample Output:\n\n7\n8\n10\n13\n19\n20\n23\n8\n6\n5\n1\n30\n28\n22\n\n",
    "Description": "\nProblem Statement:\n\n\nEvery day, while the dwarves are busy in the mines, Snow White prepares dinner for them; seven chairs, seven plates, seven forks and seven knives for seven hungry dwarves.\n\nOne day nine dwarves came from the mines instead of seven (nobody knows how or why), each of them claiming to be one of Snow White's seven dwarves.\n\nLuckily, each dwarf wears a hat with a positive integer less than 100 written on it. Snow White, a famous mathematician, realised long ago that the sum of numbers on the hats of her seven dwarves was exactly 100.\n\nWrite a program which determines which dwarves are legit, i.e. pick seven of nine numbers that add to 100.\n\n\n",
    "Title": "255. Dwarves",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=255",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, your program must produce exactly seven lines of output - the numbers on the hats of Snow White's seven dwarves. Output the numbers in any order.\n\n\n"
  },
  "2158": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, the first row will contain two positive integers N (N\u2264 36) and P. On the next row there are going to be N positive integers, split by a single space, which represent the points of each exam. Every number in the second row will not be greater than 1013.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n256. Exams\n\n\n\n\n\nProblem Statement:\n\n\nIvan has finally been accepted in university! After an exhausting year of preparation for the entry exams, he was determined to take a big break. Unfortunately the summer vacation was short and wasn't enough for him to take a proper rest, but he didn't get disappointed. Ivan had heard that when you are in university it isn't compulsory to attend to every single lecture. He decided to lengthen his vacation, even though the academic year had started. And so did him!\n\nBut, of course, for every plus there is a minus - as well as in secondary schools in every college or university there are exams. More precisely in Ivan's curriculum there are exactly N exams. They may vary in difficulty, and therefore two exams may give different amount of points. Ivan is not obliged to take all exams, but the points gathered from the tests are important to him, because they are part of his final grade. He quickly realized that he needs at least P points from all exams, so that eventually he has a good grade. He is sure that he can make at least P points after attending to all the exams, but he suspects that there might be different ways to do this.\n\nThe more ways there are, the more free time he has - Ivan will be able to choose which exam to take and which not to. In this manner he will decide how to distribute his leisure time - for instance which concerts or football matches to visit. Actually Ivan is completely sure in his abilities, so if he takes an exam, he will get the full score. Don't let Ivan wonder in how many ways he can manage to gather at least P points for too long, but write a program that finds out this number for him.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, the first row will contain two positive integers N (N\u2264 36) and P. On the next row there are going to be N positive integers, split by a single space, which represent the points of each exam. Every number in the second row will not be greater than 1013.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single integer - the number of ways in which Ivan can choose which exams to take and which not, so that the sum of the gathered points to be at least P.\n\n\n\n\nSample Input:\n\n2\n4 6\n1 2 5 4\n8 90\n1000 2 5 79 12 3 1 3\n\n\n\nSample Output:\n\n9\n166\n\n\n\nNotes:\n\n\nThere are nine ways in which Ivan can choose which exam to take and which not to, so that the sum of the gathered points to be at least 6: (first and third); (second and third); (first, second & third); (second & fourth); (first, second & fourth); (first, third & fourth); (second, third & fourth); (first, second, third & fourth); (third & fourth).\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:20 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n4 6\n1 2 5 4\n8 90\n1000 2 5 79 12 3 1 3\n\n\nSample Output:\n\n9\n166\n\n",
    "Description": "\nProblem Statement:\n\n\nIvan has finally been accepted in university! After an exhausting year of preparation for the entry exams, he was determined to take a big break. Unfortunately the summer vacation was short and wasn't enough for him to take a proper rest, but he didn't get disappointed. Ivan had heard that when you are in university it isn't compulsory to attend to every single lecture. He decided to lengthen his vacation, even though the academic year had started. And so did him!\n\nBut, of course, for every plus there is a minus - as well as in secondary schools in every college or university there are exams. More precisely in Ivan's curriculum there are exactly N exams. They may vary in difficulty, and therefore two exams may give different amount of points. Ivan is not obliged to take all exams, but the points gathered from the tests are important to him, because they are part of his final grade. He quickly realized that he needs at least P points from all exams, so that eventually he has a good grade. He is sure that he can make at least P points after attending to all the exams, but he suspects that there might be different ways to do this.\n\nThe more ways there are, the more free time he has - Ivan will be able to choose which exam to take and which not to. In this manner he will decide how to distribute his leisure time - for instance which concerts or football matches to visit. Actually Ivan is completely sure in his abilities, so if he takes an exam, he will get the full score. Don't let Ivan wonder in how many ways he can manage to gather at least P points for too long, but write a program that finds out this number for him.\n\n\n",
    "Title": "256. Exams",
    "Notes": "\nNotes:\n\n\nThere are nine ways in which Ivan can choose which exam to take and which not to, so that the sum of the gathered points to be at least 6: (first and third); (second and third); (first, second & third); (second & fourth); (first, second & fourth); (first, third & fourth); (second, third & fourth); (first, second, third & fourth); (third & fourth).\n\n",
    "URL": "https://a2oj.com/p?ID=256",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single integer - the number of ways in which Ivan can choose which exams to take and which not, so that the sum of the gathered points to be at least P.\n\n\n"
  },
  "2159": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T denoting the number of test cases. T blocks follow. For each test case, given a string of letters L and R, where L means a player, turned to the left at the starting moment, while R means a player turned to the right. The length of the string is 100000 at max.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n257. Handshakes\n\n\n\n\n\nProblem Statement:\n\n\nBefore sport contest event all participants are lined up, each one is turned left or right. Simultaneously, all participants in the row who at present are facing each other shake hands and then turn around to face the participant on their other side.\n\nThe time for one handshake and a turn is 1 second. The rest of the players keep their orientation. Then follow new handshakes and turnings, etc. The event will begin when the handshakes end. If they finish at all.\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T denoting the number of test cases. T blocks follow. For each test case, given a string of letters L and R, where L means a player, turned to the left at the starting moment, while R means a player turned to the right. The length of the string is 100000 at max.\n\n\n\n\nOutput Format:\n\n\nFor each test case output one line. Output 2 numbers separated by space: the time for the handshakes and all handshakes made by the players. If the handshakes never stop then output \"NEVEREND\".\n\n\n\n\nSample Input:\n\n1\nRLLRLRR\n\n\n\nSample Output:\n\n3 4\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:22 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n1\nRLLRLRR\n\n\nSample Output:\n\n3 4\n\n",
    "Description": "\nProblem Statement:\n\n\nBefore sport contest event all participants are lined up, each one is turned left or right. Simultaneously, all participants in the row who at present are facing each other shake hands and then turn around to face the participant on their other side.\n\nThe time for one handshake and a turn is 1 second. The rest of the players keep their orientation. Then follow new handshakes and turnings, etc. The event will begin when the handshakes end. If they finish at all.\n\n\n",
    "Title": "257. Handshakes",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=257",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case output one line. Output 2 numbers separated by space: the time for the handshakes and all handshakes made by the players. If the handshakes never stop then output \"NEVEREND\".\n\n\n"
  },
  "2160": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, there is a line containing a single integer N, 3 \u2264 N \u2264 100.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n258. Polygon\n\n\n\n\n\nProblem Statement:\n\n\nConsider a convex polygon with N vertices, with the additional property that no three diagonals intersect in a single point. Find the number of intersections between pairs of diagonals in such a polygon.\n\nThe figure below shows one such polygon with 6 vertices.\n\n\n\nNote: a polygon is convex if all of its interior angles are less than 180 degrees.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, there is a line containing a single integer N, 3 \u2264 N \u2264 100.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output the number of intersections on a single line.\n\n\n\n\nSample Input:\n\n3\n3\n4\n6\n\n\n\nSample Output:\n\n0\n1\n15\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:24 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3\n4\n6\n\n\nSample Output:\n\n0\n1\n15\n\n",
    "Description": "\nProblem Statement:\n\n\nConsider a convex polygon with N vertices, with the additional property that no three diagonals intersect in a single point. Find the number of intersections between pairs of diagonals in such a polygon.\n\nThe figure below shows one such polygon with 6 vertices.\n\n\n\nNote: a polygon is convex if all of its interior angles are less than 180 degrees.\n\n\n",
    "Title": "258. Polygon",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=258",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output the number of intersections on a single line.\n\n\n"
  },
  "2161": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, there is one line containing two integers R1 and S, both between -1000 and 1000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n259. R2\n\n\n\n\n\nProblem Statement:\n\n\nThe number S is called the mean of two numbers R1 and R2 if S is equal to (R1+R2) / 2. Mirko's birthday present for Slavko was two integers R1 and R2. Slavko promptly calculated their mean which also happened to be an integer but then lost R2! Help Slavko restore R2.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, there is one line containing two integers R1 and S, both between -1000 and 1000.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output R2 on a single line.\n\n\n\n\nSample Input:\n\n2\n11 15\n4 3\n\n\n\nSample Output:\n\n19\n2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:33 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n11 15\n4 3\n\n\nSample Output:\n\n19\n2\n\n",
    "Description": "\nProblem Statement:\n\n\nThe number S is called the mean of two numbers R1 and R2 if S is equal to (R1+R2) / 2. Mirko's birthday present for Slavko was two integers R1 and R2. Slavko promptly calculated their mean which also happened to be an integer but then lost R2! Help Slavko restore R2.\n\n\n",
    "Title": "259. R2",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=259",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output R2 on a single line.\n\n\n"
  },
  "2162": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow.\n\nFor each test case, the first line contains the number N of the modules (3 <= N <= 1024). Then N - 1 lines follow. On the first of these lines the distances from module 1 to modules 2, 3, ..., N are given, separated by single spaces. On the second line are given, separated by single spaces also, the distances from module 2 to modules 3, 4, ..., N, and so on. The last line contains only the distance from module N - 1 to module N. All distances are positive integers not greater than 1024.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n260. Reconstruction\n\n\n\n\n\nProblem Statement:\n\n\nThe young programmers Peter and Stancho were hired by two cosmic agencies. The agency of Peter designed a new cosmic station, composed of N modules, labelled from 1 to N. Some couples of different modules are linked by corridors in such way that it is possible to go from each module to each other module by unique path of corridors (see the Figure).\n\nThe length of each of the corridors is positive integer. There is no more than one corridor that links two modules.\n\n\nThe chiefs of Peter would like to keep in secret the project. That is why Peter encoded the topology of the station giving for each two modules the distance between them (i.e. the sum of the lengths of the corridors on the unique path between the modules).\n\nNow Stancho has a difficult task - he promised to his bosses to decrypt the coding of Peter and to reconstruct the topology of the station. Unfortunately, Stancho is not experienced enough. Help him.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow.\n\nFor each test case, the first line contains the number N of the modules (3 <= N <= 1024). Then N - 1 lines follow. On the first of these lines the distances from module 1 to modules 2, 3, ..., N are given, separated by single spaces. On the second line are given, separated by single spaces also, the distances from module 2 to modules 3, 4, ..., N, and so on. The last line contains only the distance from module N - 1 to module N. All distances are positive integers not greater than 1024.\n\n\n\n\nOutput Format:\n\n\nFor each test case, the program has to print N lines. The first line has to contain the list of the neighbours of module 1, i.e. the modules that are linked with corridors to it. The list has to start with the number L of neighbours followed by their labels, sorted in increasing order. All numbers has to be separated by single spaces. On the second row of the output, formatted in the same way, the list of the neighbours of module 2 has to be printed, and so on. The output has to finish with the list of the neighbours of module N.\n\n\n\n\nSample Input:\n\n1\n5\n5 14 3 7\n13 2 6\n11 7\n4\n\n\n\nSample Output:\n\n1 4\n1 4\n1 5\n3 1 2 5\n2 3 4\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:33 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n5\n5 14 3 7\n13 2 6\n11 7\n4\n\n\nSample Output:\n\n1 4\n1 4\n1 5\n3 1 2 5\n2 3 4\n\n",
    "Description": "\nProblem Statement:\n\n\nThe young programmers Peter and Stancho were hired by two cosmic agencies. The agency of Peter designed a new cosmic station, composed of N modules, labelled from 1 to N. Some couples of different modules are linked by corridors in such way that it is possible to go from each module to each other module by unique path of corridors (see the Figure).\n\nThe length of each of the corridors is positive integer. There is no more than one corridor that links two modules.\n\n\nThe chiefs of Peter would like to keep in secret the project. That is why Peter encoded the topology of the station giving for each two modules the distance between them (i.e. the sum of the lengths of the corridors on the unique path between the modules).\n\nNow Stancho has a difficult task - he promised to his bosses to decrypt the coding of Peter and to reconstruct the topology of the station. Unfortunately, Stancho is not experienced enough. Help him.\n\n\n",
    "Title": "260. Reconstruction",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=260",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, the program has to print N lines. The first line has to contain the list of the neighbours of module 1, i.e. the modules that are linked with corridors to it. The list has to start with the number L of neighbours followed by their labels, sorted in increasing order. All numbers has to be separated by single spaces. On the second row of the output, formatted in the same way, the list of the neighbours of module 2 has to be printed, and so on. The output has to finish with the list of the neighbours of module N.\n\n\n"
  },
  "2163": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T denoting the number of test cases. T blocks follow. For each test case, on the first line will be given one integer R - the number of riddles. Each riddle consists of two lines - on the first will be given the integers N \u2264 100,000 and K \u2264 1,000,000, and on the second - N integers \u0410i \u2264 100,000, representing the coin values.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n261. Riddles\n\n\n\n\n\nProblem Statement:\n\n\nElleonora's grandmother - Sercha loves to challenge her grandchildren with all kinds of mathematical riddles. During the last family reunion she gave them the following one:\n\n    \"In the neighboring store there are K goods with different prices from 1 to K. I have N coins in the following order: A1, A2, ..., An. I want to go to the store and be able to pay the exact price for each good. In the same time I'm an old woman and don't like carrying all coins with me, so I would like to take only the first few. How many coins should I take to be able to pay each price from 1 to K?\"\n\nElly didn't spend more than a few seconds before answering and thinking \"Ah, Baba Sercha, not these standard algorithms again!\". Can you compete with Elleonora by writing a program that solves the given task?\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T denoting the number of test cases. T blocks follow. For each test case, on the first line will be given one integer R - the number of riddles. Each riddle consists of two lines - on the first will be given the integers N \u2264 100,000 and K \u2264 1,000,000, and on the second - N integers \u0410i \u2264 100,000, representing the coin values.\n\n\n\n\nOutput Format:\n\n\nFor each test case print R lines each containing one sole integer - how many coins should Elly's grandmother take in order to be able to pay each sum from 1 to K. If this is not possible even by taking all N of them, print -1 instead.\n\n\n\n\nSample Input:\n\n1\n3\n7 10\n1 2 3 4 5 6 7\n3 3\n2 4 1\n3 6\n3 1 4\n\n\n\nSample Output:\n\n4\n3\n-1\n\n\n\nNotes:\n\n\nIn the first test we can take all coins and construct all numbers up to 28, but our requirement is 10, so the first 4 are sufficient. In the second case we must be able to construct 1, 2 and 3, but we have to take all coins in order to have a one. The third case is impossible even with all coins.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:34 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3\n7 10\n1 2 3 4 5 6 7\n3 3\n2 4 1\n3 6\n3 1 4\n\n\nSample Output:\n\n4\n3\n-1\n\n",
    "Description": "\nProblem Statement:\n\n\nElleonora's grandmother - Sercha loves to challenge her grandchildren with all kinds of mathematical riddles. During the last family reunion she gave them the following one:\n\n    \"In the neighboring store there are K goods with different prices from 1 to K. I have N coins in the following order: A1, A2, ..., An. I want to go to the store and be able to pay the exact price for each good. In the same time I'm an old woman and don't like carrying all coins with me, so I would like to take only the first few. How many coins should I take to be able to pay each price from 1 to K?\"\n\nElly didn't spend more than a few seconds before answering and thinking \"Ah, Baba Sercha, not these standard algorithms again!\". Can you compete with Elleonora by writing a program that solves the given task?\n\n\n",
    "Title": "261. Riddles",
    "Notes": "\nNotes:\n\n\nIn the first test we can take all coins and construct all numbers up to 28, but our requirement is 10, so the first 4 are sufficient. In the second case we must be able to construct 1, 2 and 3, but we have to take all coins in order to have a one. The third case is impossible even with all coins.\n\n",
    "URL": "https://a2oj.com/p?ID=261",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print R lines each containing one sole integer - how many coins should Elly's grandmother take in order to be able to pay each sum from 1 to K. If this is not possible even by taking all N of them, print -1 instead.\n\n\n"
  },
  "2164": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, the first line of input contains the integer K (1 <= K <= 10), the number of levels of the village Mirko just visited. The second line of input contains 2K integers, the sequence of house numbers on Mirko's paper. The house numbers will be unique and from the interval [1, 2K].\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n262. Tree\n\n\n\n\n\nProblem Statement:\n\n\nLittle Mirko has paid a touristic visit to a village nearby Donji Andrijevci, a town in Slavonia. As it happens, the arrangement of streets in the village looks awfully familiar to the shape of a perfect binary tree of the order K. A perfect binary tree of order K consists of 2K - 1 nodes arranged in K levels (just like in the image). Each node contains a building labeled with a house number. Moreover, all buildings but the ones in the last level have a left and right child (see the image again).\n\n\n\nMirko has visited all the buildings in a village and noted down the exact entrance order. Now he wants to describe to you how the village looks like, but he can't quite remember. Luckily, he remembers the way in which he visited the buildings:\n\n 1. in the beginning, he was standing in front of the only building in the first level\n 2. if the building which he is currently standing in front of has a left child which he hasn't visited yet, he will move in front of the left child\n 3. if the building doesn't have a left child or he has already visited it, he will enter the current building and write its house number on his paper\n 4. if he has already visited the current building and the building has a right child, he will move in front of the right child\n 5. if he has visited the current building and its left and right child, he will return to the parent of the current building\n\nAfter visiting the villages in the pictures above, the paper would look like this: 2-1-3 for the first village and 1-6-4-3-5-2-7 for the second village. Write a program to help Mirko reconstruct the order of house numbers on each level.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, the first line of input contains the integer K (1 <= K <= 10), the number of levels of the village Mirko just visited. The second line of input contains 2K integers, the sequence of house numbers on Mirko's paper. The house numbers will be unique and from the interval [1, 2K].\n\n\n\n\nOutput Format:\n\n\nFor each test case, the output must consist of K lines. The ith line must contain the sequence of house numbers in the ith level of the village.\n\n\n\n\nSample Input:\n\n2\n2\n2 1 3\n3\n1 6 4 3 5 2 7\n\n\n\nSample Output:\n\n1\n2 3\n3\n6 2\n1 4 5 7\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:41 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2\n2 1 3\n3\n1 6 4 3 5 2 7\n\n\nSample Output:\n\n1\n2 3\n3\n6 2\n1 4 5 7\n\n",
    "Description": "\nProblem Statement:\n\n\nLittle Mirko has paid a touristic visit to a village nearby Donji Andrijevci, a town in Slavonia. As it happens, the arrangement of streets in the village looks awfully familiar to the shape of a perfect binary tree of the order K. A perfect binary tree of order K consists of 2K - 1 nodes arranged in K levels (just like in the image). Each node contains a building labeled with a house number. Moreover, all buildings but the ones in the last level have a left and right child (see the image again).\n\n\n\nMirko has visited all the buildings in a village and noted down the exact entrance order. Now he wants to describe to you how the village looks like, but he can't quite remember. Luckily, he remembers the way in which he visited the buildings:\n\n 1. in the beginning, he was standing in front of the only building in the first level\n 2. if the building which he is currently standing in front of has a left child which he hasn't visited yet, he will move in front of the left child\n 3. if the building doesn't have a left child or he has already visited it, he will enter the current building and write its house number on his paper\n 4. if he has already visited the current building and the building has a right child, he will move in front of the right child\n 5. if he has visited the current building and its left and right child, he will return to the parent of the current building\n\nAfter visiting the villages in the pictures above, the paper would look like this: 2-1-3 for the first village and 1-6-4-3-5-2-7 for the second village. Write a program to help Mirko reconstruct the order of house numbers on each level.\n\n\n",
    "Title": "262. Tree",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=262",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, the output must consist of K lines. The ith line must contain the sequence of house numbers in the ith level of the village.\n\n\n"
  },
  "2165": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, the first line contains an integer N (3 \u2264 N \u2264 100), the dimension of the grid. Each of the N following lines contains N characters describing the grid - uppercase letters and the character '.', which marks an empty square.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n263. Triplets\n\n\n\n\n\nProblem Statement:\n\n\nMirko and Slavko are playing a new game, \"Trojke\" (Triplets). First they use a chalk to draw an N-by-N square grid on the road. Then they write letters into some of the squares. No letter is written more than once in the grid.\n\nThe game consists of trying to find three letters on a line as fast as possible. Three letters are considered to be on the same line if there is a line going through the centre of each of the three squares. After a while it gets harder to find new triplets. Mirko and Slavko need a program that counts all the triplets, so that they know if the game is over or they need to search further.\n\n\n\n\nInput Format:\n\n\nThe first line contains T denoting the number of test cases. T blocks follow. For each test case, the first line contains an integer N (3 \u2264 N \u2264 100), the dimension of the grid. Each of the N following lines contains N characters describing the grid - uppercase letters and the character '.', which marks an empty square.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output the number of triplets on a single line.\n\n\n\n\nSample Input:\n\n3\n4\n...D\n..C.\n.B..\nA...\n5\n..T..\nA....\n.FE.R\n....X\nS....\n10\n....AB....\n..C....D..\n.E......F.\n...G..H...\nI........J\nK........L\n...M..N...\n.O......P.\n..Q....R..\n....ST....\n\n\n\nSample Output:\n\n4\n3\n0\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahm.kam_92\n\n\n\n\nAdded at:\n\n\n2014-09-17 18:29:45 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:AAST Individuals Qualification 2014 #3\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n4\n...D\n..C.\n.B..\nA...\n5\n..T..\nA....\n.FE.R\n....X\nS....\n10\n....AB....\n..C....D..\n.E......F.\n...G..H...\nI........J\nK........L\n...M..N...\n.O......P.\n..Q....R..\n....ST....\n\n\nSample Output:\n\n4\n3\n0\n\n",
    "Description": "\nProblem Statement:\n\n\nMirko and Slavko are playing a new game, \"Trojke\" (Triplets). First they use a chalk to draw an N-by-N square grid on the road. Then they write letters into some of the squares. No letter is written more than once in the grid.\n\nThe game consists of trying to find three letters on a line as fast as possible. Three letters are considered to be on the same line if there is a line going through the centre of each of the three squares. After a while it gets harder to find new triplets. Mirko and Slavko need a program that counts all the triplets, so that they know if the game is over or they need to search further.\n\n\n",
    "Title": "263. Triplets",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=263",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output the number of triplets on a single line.\n\n\n"
  },
  "2166": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach of the following T lines contains an integer N (1\u2009\u2264\u2009N\u2009\u2264\u2009109), the number of students.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n275. EIII Extra\n\n\n\n\n\nProblem Statement:\n\n\nEIII Extra programming contest is coming soon, there are N students who want to participate in this contest, the cost of registering a team is 20 JDs, a team can hold 1, 2 or 3 members.\nAs a staff member from your university, you are asked to form the teams such that all N contestants can participate in a team with the minimum cost.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach of the following T lines contains an integer N (1\u2009\u2264\u2009N\u2009\u2264\u2009109), the number of students.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a line with the minimum cost to form the teams.\n\n\n\n\nSample Input:\n\n3\n2\n6\n12\n\n\n\nSample Output:\n\n20\n40\n80\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nHasan0540\n\n\n\n\nAdded at:\n\n\n2014-10-01 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Jordan Universities Training Contest #1\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n2\n6\n12\n\n\nSample Output:\n\n20\n40\n80\n\n",
    "Description": "\nProblem Statement:\n\n\nEIII Extra programming contest is coming soon, there are N students who want to participate in this contest, the cost of registering a team is 20 JDs, a team can hold 1, 2 or 3 members.\nAs a staff member from your university, you are asked to form the teams such that all N contestants can participate in a team with the minimum cost.\n\n\n",
    "Title": "275. EIII Extra",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=275",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a line with the minimum cost to form the teams.\n\n\n"
  },
  "2167": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach of the following T lines contains a positive integer K, followed by a space, then a non-empty string that has no more than 100000 lowercase latin letters.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n276. K-Palindrome\n\n\n\n\n\nProblem Statement:\n\n\nGiven a string, determine if you can reorder the letters to make exactly K consecutive palindromes using all the letters of the string.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach of the following T lines contains a positive integer K, followed by a space, then a non-empty string that has no more than 100000 lowercase latin letters.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print one line with \"YES\" if the letters can be reordered to fit the problem description, otherwise print \"NO\".\n\n\n\n\nSample Input:\n\n3\n2 abcabcd\n1 ammar\n3 abcd\n\n\n\n\nSample Output:\n\nYES\nYES\nNO\n\n\n\nNotes:\n\n\nA possible solution for the first test case is abbacdc, where abba is the first palindrome and cdc is the second one.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nHasan0540\n\n\n\n\nAdded at:\n\n\n2014-10-01 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Jordan Universities Training Contest #1\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n2 abcabcd\n1 ammar\n3 abcd\n\n\n\nSample Output:\n\nYES\nYES\nNO\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven a string, determine if you can reorder the letters to make exactly K consecutive palindromes using all the letters of the string.\n\n\n",
    "Title": "276. K-Palindrome",
    "Notes": "\nNotes:\n\n\nA possible solution for the first test case is abbacdc, where abba is the first palindrome and cdc is the second one.\n\n",
    "URL": "https://a2oj.com/p?ID=276",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print one line with \"YES\" if the letters can be reordered to fit the problem description, otherwise print \"NO\".\n\n\n"
  },
  "2168": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach of the following T lines contains a non-empty string that has no more than 1000 characters.\nThe characters will be either:\nA: shows that a student entered the cafeteria.\na: shows that a student left the cafeteria.\nB: shows that a university staff member entered the cafeteria.\nb: shows that a university staff member left the cafeteria.\nC: shows that a professor entered the cafeteria.\nc: shows that a professor left the cafeteria.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n277. Cafeteria\n\n\n\n\n\nProblem Statement:\n\n\nIn the university of JUTS (Jordanian University for Traveling Salesmen), the cafeteria keeps track of all the people who enter the cafeteria or leave it, this means that the system records when a person enters and when a person leaves, it can also determine the type of the person who entered.\nThere are three types allowed to enter the cafeteria: students, university staff, and professors.\nThe manager of the cafeteria suspects that the log system record files may be damaged, your task is to find out if that is true or not.\nNote that the system has been established in the cafeteria since the first opening of it (it was empty), and now the cafeteria is empty.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach of the following T lines contains a non-empty string that has no more than 1000 characters.\nThe characters will be either:\nA: shows that a student entered the cafeteria.\na: shows that a student left the cafeteria.\nB: shows that a university staff member entered the cafeteria.\nb: shows that a university staff member left the cafeteria.\nC: shows that a professor entered the cafeteria.\nc: shows that a professor left the cafeteria.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print one line with \"YES\" if there is no definite error in the log file, otherwise print \"NO\".\n\n\n\n\nSample Input:\n\n2\nABbCca\nbACac\n\n\n\nSample Output:\n\nYES\nNO\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nHasan0540\n\n\n\n\nAdded at:\n\n\n2014-10-01 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Jordan Universities Training Contest #1\n\n\n\n",
    "Example": "\nSample Input:\n\n2\nABbCca\nbACac\n\n\nSample Output:\n\nYES\nNO\n\n",
    "Description": "\nProblem Statement:\n\n\nIn the university of JUTS (Jordanian University for Traveling Salesmen), the cafeteria keeps track of all the people who enter the cafeteria or leave it, this means that the system records when a person enters and when a person leaves, it can also determine the type of the person who entered.\nThere are three types allowed to enter the cafeteria: students, university staff, and professors.\nThe manager of the cafeteria suspects that the log system record files may be damaged, your task is to find out if that is true or not.\nNote that the system has been established in the cafeteria since the first opening of it (it was empty), and now the cafeteria is empty.\n\n\n",
    "Title": "277. Cafeteria",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=277",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print one line with \"YES\" if there is no definite error in the log file, otherwise print \"NO\".\n\n\n"
  },
  "2169": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach test case begins with a line with three integers, R, C and N, represents the number of rows, the number of columns and the number of different images respectively, all images are of the same size (R\u00d7C).\nEach of the next R lines contains C characters, represents the important image.\nThen K\u00d7R lines, each R lines represent one of the images that Hasan has.\nThe characters in the image will be 0-9 or a *.\nThe digits represent a color, the * represents a damaged point.\nThe copy of the important image will not contain damaged points, other images can have zero or more damaged points.\n1 \u2264 R, C, N \u2264 50\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n278. Find the image!\n\n\n\n\n\nProblem Statement:\n\n\nHasan has a very hyperactive young brother named Tariq, Tariq spilled water on a number of N different images that Hasan has, some of them are damaged, Hasan has a very important image among those images and that important image could be damaged, he wants to try to get that image back.\n\nLuckily, Hasan is very smart so he kept a copy of that image, but he's also stubborn so he wants to try to find out which of the images is the original important one.\n\nAlthough Hasan is very smart, he does not know how to write code, your job is to write a program to determine if he can identify for sure the original important image.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach test case begins with a line with three integers, R, C and N, represents the number of rows, the number of columns and the number of different images respectively, all images are of the same size (R\u00d7C).\nEach of the next R lines contains C characters, represents the important image.\nThen K\u00d7R lines, each R lines represent one of the images that Hasan has.\nThe characters in the image will be 0-9 or a *.\nThe digits represent a color, the * represents a damaged point.\nThe copy of the important image will not contain damaged points, other images can have zero or more damaged points.\n1 \u2264 R, C, N \u2264 50\n\n\n\n\nOutput Format:\n\n\nFor each test case, print one line with \"YES\" if he can identify for sure the important image, otherwise print \"NO\".\n\n\n\n\nSample Input:\n\n2\n2 4 2\n1122\n4488\n*1**\n4488\n1123\n4488\n2 2 2\n12\n23\n*2\n23\n12\n2*\n\n\n\nSample Output:\n\nYES\nNO\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nHasan0540\n\n\n\n\nAdded at:\n\n\n2014-10-01 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Jordan Universities Training Contest #1\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 4 2\n1122\n4488\n*1**\n4488\n1123\n4488\n2 2 2\n12\n23\n*2\n23\n12\n2*\n\n\nSample Output:\n\nYES\nNO\n\n",
    "Description": "\nProblem Statement:\n\n\nHasan has a very hyperactive young brother named Tariq, Tariq spilled water on a number of N different images that Hasan has, some of them are damaged, Hasan has a very important image among those images and that important image could be damaged, he wants to try to get that image back.\n\nLuckily, Hasan is very smart so he kept a copy of that image, but he's also stubborn so he wants to try to find out which of the images is the original important one.\n\nAlthough Hasan is very smart, he does not know how to write code, your job is to write a program to determine if he can identify for sure the original important image.\n\n\n",
    "Title": "278. Find the image!",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=278",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print one line with \"YES\" if he can identify for sure the important image, otherwise print \"NO\".\n\n\n"
  },
  "2170": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach test case begins with a line that has two positive integers N and Q (1 \u2264 N, Q \u2264 10000)\n\nN is the number of molecules around the sith lord, Q is the number of actions that is happening in the battle which is:\n\u00a0\u00a0\u00a0\u00a0-\u00a0c A B, Where A and B are integers, Marah has foreseen A and B connecting.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1 \u2264 A, B \u2264 N, A \u2260 B)\n\u00a0\u00a0\u00a0\u00a0-\u00a0?, Denotes that Ahmad has requested to know how many molecules in the weakest Unit and which is the weakest molecule.\nQ lines follow with the actions that is happening in the battle.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n279. The Phantom Menace\n\n\n\n\n\nProblem Statement:\n\n\nNaboo, one of the galactic planets is at danger! a new sith lord called Osama is trying to capture Queen Amidala, Queen of Naboo! Joining his robot army to invade Naboo!\n\nOn Naboo a young Jedi knight called Ahmad swears to protect the queen at whatever cost it takes! Ahmad knows that the sith lord got a weakness... The force is not that strong around him! and it takes time to get stronger around him!\n\nWhen the sith lord uses the force he tries to connect the molecules of the force around him! each connected (directly or indirectly) molecules are called a Unit! and the more molecules in the Unit the more powerful it is!\n\nAmong our great people and warriors a friend of Ahmad a pretty girl called Marah, she has the ability to foresee the future! She knows exactly how the sith lord will join the force molecules together, using her power our young Jedi will be able to know how the force around the sith lord will act.\n\nAhmad will try to use the force against the weakest unit around the sith lord for a hope of winning the battle and save Naboo!\n\nUnfortunately with all the strong force around Ahmad he is unable to decide which Unit is the weakest and which molecule is the weakest among that Unit! So he asked you to write a software that finds how many molecules are in the weakest Unit and which molecule is the weakest among them for each time he asks for this!\n\nWe consider the weakest Unit as the Unit with the least number of molecules. There could be more than one, in this case we are interested in the Unit that has the weakest molecule.\nA weakest molecule is considered the one with the lowest number.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach test case begins with a line that has two positive integers N and Q (1 \u2264 N, Q \u2264 10000)\n\nN is the number of molecules around the sith lord, Q is the number of actions that is happening in the battle which is:\n\u00a0\u00a0\u00a0\u00a0-\u00a0c A B, Where A and B are integers, Marah has foreseen A and B connecting.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1 \u2264 A, B \u2264 N, A \u2260 B)\n\u00a0\u00a0\u00a0\u00a0-\u00a0?, Denotes that Ahmad has requested to know how many molecules in the weakest Unit and which is the weakest molecule.\nQ lines follow with the actions that is happening in the battle.\n\n\n\n\nOutput Format:\n\n\nEach time Ahmad requests information print two integers in a single line, the size of the current weakest Unit and the number of the weakest molecule within the current weakest Unit.\n\n\n\n\nSample Input:\n\n1\n4 7\n?\nc 1 2\n?\nc 4 3\n?\nc 1 4\n?\n\n\n\nSample Output:\n\n1 1\n1 3\n2 1\n4 1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nHasan0540\n\n\n\n\nAdded at:\n\n\n2014-10-01 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Jordan Universities Training Contest #1\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4 7\n?\nc 1 2\n?\nc 4 3\n?\nc 1 4\n?\n\n\nSample Output:\n\n1 1\n1 3\n2 1\n4 1\n\n",
    "Description": "\nProblem Statement:\n\n\nNaboo, one of the galactic planets is at danger! a new sith lord called Osama is trying to capture Queen Amidala, Queen of Naboo! Joining his robot army to invade Naboo!\n\nOn Naboo a young Jedi knight called Ahmad swears to protect the queen at whatever cost it takes! Ahmad knows that the sith lord got a weakness... The force is not that strong around him! and it takes time to get stronger around him!\n\nWhen the sith lord uses the force he tries to connect the molecules of the force around him! each connected (directly or indirectly) molecules are called a Unit! and the more molecules in the Unit the more powerful it is!\n\nAmong our great people and warriors a friend of Ahmad a pretty girl called Marah, she has the ability to foresee the future! She knows exactly how the sith lord will join the force molecules together, using her power our young Jedi will be able to know how the force around the sith lord will act.\n\nAhmad will try to use the force against the weakest unit around the sith lord for a hope of winning the battle and save Naboo!\n\nUnfortunately with all the strong force around Ahmad he is unable to decide which Unit is the weakest and which molecule is the weakest among that Unit! So he asked you to write a software that finds how many molecules are in the weakest Unit and which molecule is the weakest among them for each time he asks for this!\n\nWe consider the weakest Unit as the Unit with the least number of molecules. There could be more than one, in this case we are interested in the Unit that has the weakest molecule.\nA weakest molecule is considered the one with the lowest number.\n\n\n",
    "Title": "279. The Phantom Menace",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=279",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nEach time Ahmad requests information print two integers in a single line, the size of the current weakest Unit and the number of the weakest molecule within the current weakest Unit.\n\n\n"
  },
  "2171": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach of the next T lines contains two integers without leading zeros, A and B (1 \u2264 A, B < 106).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n280. Lucky Number\n\n\n\n\n\nProblem Statement:\n\n\nA number is lucky if it has an even number of digits and the first two digits are equal, the second two digits are equal, and so on...\nFor example: 886677, 11 and 6644 are lucky numbers, while 199, 2 and 77955 are not.\nGiven two positive integers A and B, determine if we can reorder the digits of these two numbers such that (A + B) is a lucky number.\n\nA and B should not have leading zeros.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach of the next T lines contains two integers without leading zeros, A and B (1 \u2264 A, B < 106).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line with \"YES\" if we can reorder the digits to fit the problem description, otherwise print \"NO\".\n\n\n\n\nSample Input:\n\n3\n12 67\n11 22\n7 14\n\n\n\nSample Output:\n\nYES\nYES\nNO\n\n\n\nNotes:\n\n\nIn the first test case, we can reorder the digits of 67 to be 76, then 12 + 76 = 88.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nHasan0540\n\n\n\n\nAdded at:\n\n\n2014-10-01 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Jordan Universities Training Contest #1\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n12 67\n11 22\n7 14\n\n\nSample Output:\n\nYES\nYES\nNO\n\n",
    "Description": "\nProblem Statement:\n\n\nA number is lucky if it has an even number of digits and the first two digits are equal, the second two digits are equal, and so on...\nFor example: 886677, 11 and 6644 are lucky numbers, while 199, 2 and 77955 are not.\nGiven two positive integers A and B, determine if we can reorder the digits of these two numbers such that (A + B) is a lucky number.\n\nA and B should not have leading zeros.\n\n\n",
    "Title": "280. Lucky Number",
    "Notes": "\nNotes:\n\n\nIn the first test case, we can reorder the digits of 67 to be 76, then 12 + 76 = 88.\n\n",
    "URL": "https://a2oj.com/p?ID=280",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line with \"YES\" if we can reorder the digits to fit the problem description, otherwise print \"NO\".\n\n\n"
  },
  "2172": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\n\nThe first line of each test case is a non-empty string that has no more than 100000 lowercase latin letters.\nThe second line will have a positive integer N, the number of information he has, followed by N strings of the form XY where X is the frequency of the character Y in the password.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n281. Ninja Hacker\n\n\n\n\n\nProblem Statement:\n\n\nGood guy Greg, the ninja, wants to break into a terrorist facility, he was able to retrieve a large string that contains the password of the back door of the facility.\n\nGreg was also able to retrieve some information on the password, like the exact number of certain characters the password must hold.\n\nYour job is to find the smallest substring that fits all the information of the password.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\n\nThe first line of each test case is a non-empty string that has no more than 100000 lowercase latin letters.\nThe second line will have a positive integer N, the number of information he has, followed by N strings of the form XY where X is the frequency of the character Y in the password.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print -1 if such substring doesn't exist, otherwise print the size of the smallest substring that fits all the information of the password.\n\n\n\n\nSample Input:\n\n2\natwooj\n3 2o 1w 1a\nbahosain\n3 2a 1h 2o\n\n\n\nSample Output:\n\n5\n-1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nHasan0540\n\n\n\n\nAdded at:\n\n\n2014-10-01 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Jordan Universities Training Contest #1\n\n\n\n",
    "Example": "\nSample Input:\n\n2\natwooj\n3 2o 1w 1a\nbahosain\n3 2a 1h 2o\n\n\nSample Output:\n\n5\n-1\n\n",
    "Description": "\nProblem Statement:\n\n\nGood guy Greg, the ninja, wants to break into a terrorist facility, he was able to retrieve a large string that contains the password of the back door of the facility.\n\nGreg was also able to retrieve some information on the password, like the exact number of certain characters the password must hold.\n\nYour job is to find the smallest substring that fits all the information of the password.\n\n\n",
    "Title": "281. Ninja Hacker",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=281",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print -1 if such substring doesn't exist, otherwise print the size of the smallest substring that fits all the information of the password.\n\n\n"
  },
  "2173": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach test case begins with a positive integer N, the number of the problems (1 \u2264 N \u2264 100000).\nEach of the following N lines describes a problem with three integers: P, S and D, the points score of the problem, the number of points it loses per minute and the minutes Abdullah took solving the problem, respectively.\n\n1 \u2264 P \u2264 2\u00d7109\n1 \u2264 S, D \u2264 128\nIt's guaranteed that all problems will have a positive score if solved in any order.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n282. Maximum Score\n\n\n\n\n\nProblem Statement:\n\n\nAbdullah and Osama always participate in online programming contests, and they're always competing against each other.\n\nIn the last competition, they were both able to solve all of the problems, yet Osama was able to win Abdullah by a huge difference.\n\nOsama tells Abdullah why he won, he says: \"It's not just about solving all the problems, each problem has rewarding points, and also each problem loses some points every minute before solving it\".\n\nNow Abdullah understands where he had done wrong, write a program to calculate the best score he would have been able to get knowing the new rules.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains an integer T, the number of test cases.\nEach test case begins with a positive integer N, the number of the problems (1 \u2264 N \u2264 100000).\nEach of the following N lines describes a problem with three integers: P, S and D, the points score of the problem, the number of points it loses per minute and the minutes Abdullah took solving the problem, respectively.\n\n1 \u2264 P \u2264 2\u00d7109\n1 \u2264 S, D \u2264 128\nIt's guaranteed that all problems will have a positive score if solved in any order.\n\n\n\n\nOutput Format:\n\n\nFor each test case print in a single line, the maximum score he would have been able to get.\n\n\n\n\nSample Input:\n\n1\n4\n500 2 2\n1000 4 1\n1500 6 7\n2000 8 19\n\n\n\nSample Output:\n\n4698\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nHasan0540\n\n\n\n\nAdded at:\n\n\n2014-10-01 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Jordan Universities Training Contest #1\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4\n500 2 2\n1000 4 1\n1500 6 7\n2000 8 19\n\n\nSample Output:\n\n4698\n\n",
    "Description": "\nProblem Statement:\n\n\nAbdullah and Osama always participate in online programming contests, and they're always competing against each other.\n\nIn the last competition, they were both able to solve all of the problems, yet Osama was able to win Abdullah by a huge difference.\n\nOsama tells Abdullah why he won, he says: \"It's not just about solving all the problems, each problem has rewarding points, and also each problem loses some points every minute before solving it\".\n\nNow Abdullah understands where he had done wrong, write a program to calculate the best score he would have been able to get knowing the new rules.\n\n\n",
    "Title": "282. Maximum Score",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=282",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print in a single line, the maximum score he would have been able to get.\n\n\n"
  },
  "2174": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100,000). Followed by T test cases. Each test case will consist of a single line, containing 3 integers separated by a single space: S, F, M (0 \u2009\u2264\u2009 S, F, M \u2009\u2264\u2009 104) representing Saad's money, his father's money, and his mother's money, respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n283. iPhone 6!\n\n\n\n\n\nProblem Statement:\n\n\niPhone 6 was released a few days ago. It has 4.7 inches touch screen, 1 GB RAM, NFC, 8 MP camera, dual core CPU and of course iOS 8. It costs 6666 EGP, which is a huge price, given that these specifications were released in Android phones years ago. But Apple fans do not care, and want to buy it even if they can not afford it. The famous Saad Nabiha is no exception!\n\nAs a fan of Apple products, Saad owns almost all of them (Mac, iPad, iPod, ...). This has put a lot of strain on Saad's budget, and he will have to ask his parents again to lend him some money. Since Saad asked them for a lot of money last year (to buy iPhone 5S), only one of them will have enough money this time. Saad has exactly S EGP, his father has F EGP, and his mother has M EGP. Saad will ask only one of them for the minimum amount of money he needs (in addition to his money) to buy the phone. Tell us whether he will ask his father or mother?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100,000). Followed by T test cases. Each test case will consist of a single line, containing 3 integers separated by a single space: S, F, M (0 \u2009\u2264\u2009 S, F, M \u2009\u2264\u2009 104) representing Saad's money, his father's money, and his mother's money, respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by \"dad\" if he will ask his father for the money or \"mom\" if he will ask his mother for the money. It is guaranteed that exactly one solution will exist.\n\n\n\n\nSample Input:\n\n2\n200 1234 6543\n200 6543 1234\n\n\n\nSample Output:\n\nCase 1: mom\nCase 2: dad\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n200 1234 6543\n200 6543 1234\n\n\nSample Output:\n\nCase 1: mom\nCase 2: dad\n\n",
    "Description": "\nProblem Statement:\n\n\niPhone 6 was released a few days ago. It has 4.7 inches touch screen, 1 GB RAM, NFC, 8 MP camera, dual core CPU and of course iOS 8. It costs 6666 EGP, which is a huge price, given that these specifications were released in Android phones years ago. But Apple fans do not care, and want to buy it even if they can not afford it. The famous Saad Nabiha is no exception!\n\nAs a fan of Apple products, Saad owns almost all of them (Mac, iPad, iPod, ...). This has put a lot of strain on Saad's budget, and he will have to ask his parents again to lend him some money. Since Saad asked them for a lot of money last year (to buy iPhone 5S), only one of them will have enough money this time. Saad has exactly S EGP, his father has F EGP, and his mother has M EGP. Saad will ask only one of them for the minimum amount of money he needs (in addition to his money) to buy the phone. Tell us whether he will ask his father or mother?\n\n\n",
    "Title": "283. iPhone 6!",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=283",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by \"dad\" if he will ask his father for the money or \"mom\" if he will ask his mother for the money. It is guaranteed that exactly one solution will exist.\n\n\n"
  },
  "2175": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases. Each test case will consist of a single line, containing five integers separated by a single space: N, M, V, A, B (1 \u2009\u2264\u2009 N, M \u2009\u2264\u2009 104 , 1 \u2009\u2264\u2009 N \u2009\u00d7\u2009 M \u2009\u2264\u2009 107 , 1 \u2009\u2264\u2009 V, A, B \u2009\u2264\u2009 104) representing the dimensions of the grid and parameters to generate the values in the grid.\n\nThe top-most left-most value will equal V, then the grid will be generated one cell at a time in row major order with the following formula: Vi\u2009=\u2009(A\u2009\u00d7\u2009Vi\u2009-\u20091\u2009+\u2009B) modulo (104\u2009+\u20097).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n284. Snakes\n\n\n\n\n\nProblem Statement:\n\n\nRemember before smartphones, Snake was the coolest mobile game ever. It required speed, accuracy and practice, and only a few managed to win this game at its highest difficulty.\n\nThe game's purpose is to guide a snake to collect randomly appearing dots in the maze. Each turn the snake's head either moves forward in the same direction, or turns left or right. The snake dies if it intersects its own body.\n\nSaad Nabiha has a much simpler version of the game to win. Given a 2d grid (N rows and M columns), with each cell containing a non-negative integer. He wants to guide a snake with infinite length from the top-most left-most cell in the grid to the bottom-most right-most cell, and maximize the sum of the values of the visited cells. Since the snake has infinite length, it can only visit a cell once. Simple, right?!\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases. Each test case will consist of a single line, containing five integers separated by a single space: N, M, V, A, B (1 \u2009\u2264\u2009 N, M \u2009\u2264\u2009 104 , 1 \u2009\u2264\u2009 N \u2009\u00d7\u2009 M \u2009\u2264\u2009 107 , 1 \u2009\u2264\u2009 V, A, B \u2009\u2264\u2009 104) representing the dimensions of the grid and parameters to generate the values in the grid.\n\nThe top-most left-most value will equal V, then the grid will be generated one cell at a time in row major order with the following formula: Vi\u2009=\u2009(A\u2009\u00d7\u2009Vi\u2009-\u20091\u2009+\u2009B) modulo (104\u2009+\u20097).\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the maximum sum of values.\n\n\n\n\nSample Input:\n\n1\n2 3 1 2 3\n\n\n\nSample Output:\n\nCase 1: 234\n\n\n\nNotes:\n\n\nFor the input test case, the grid is:\n\n1 5 13\n29 61 125\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:01 UTC\n\n\n\n\nTime Limit:\n\n\n7 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n2 3 1 2 3\n\n\nSample Output:\n\nCase 1: 234\n\n",
    "Description": "\nProblem Statement:\n\n\nRemember before smartphones, Snake was the coolest mobile game ever. It required speed, accuracy and practice, and only a few managed to win this game at its highest difficulty.\n\nThe game's purpose is to guide a snake to collect randomly appearing dots in the maze. Each turn the snake's head either moves forward in the same direction, or turns left or right. The snake dies if it intersects its own body.\n\nSaad Nabiha has a much simpler version of the game to win. Given a 2d grid (N rows and M columns), with each cell containing a non-negative integer. He wants to guide a snake with infinite length from the top-most left-most cell in the grid to the bottom-most right-most cell, and maximize the sum of the values of the visited cells. Since the snake has infinite length, it can only visit a cell once. Simple, right?!\n\n\n",
    "Title": "284. Snakes",
    "Notes": "\nNotes:\n\n\nFor the input test case, the grid is:\n\n1 5 13\n29 61 125\n\n",
    "URL": "https://a2oj.com/p?ID=284",
    "Time Limit": "7 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the maximum sum of values.\n\n\n"
  },
  "2176": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases. Each test case will consist of several lines. The first line will contain two integers, separated by a single space: N, M (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 500, 0 \u2009\u2264\u2009 M \u2009\u2264\u2009 [N * (N - 1)] / 2), the number of events to attend, and number of hate relationship between the children respectively. The next line will contain N integers, separated by a single space: ki (1 \u2009\u2264\u2009 ki \u2009\u2264\u2009 N) the type costume you have to wear for i-th event. The next M lines will contain two integers separated by space: ai and bi (1 \u2009\u2264\u2009 ai, bi \u2009\u2264\u2009 N, ai \u2009\u2260\u2009 bi), which means the child in event ai hates the child in event bi, and you must go to the first event before the second event.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n285. Omar the clown\n\n\n\n\n\nProblem Statement:\n\n\nOmar El-Mohandes decided to leave his career in programming and pursue his dream to become a children party entertainer (a.k.a. a clown). Each day he visits birthdays and parties, wearing colorful costumes (clown, batman, spiderman ...) , and makes children happy!\n\nAs usual, he excelled in his new job, and became very famous very quickly. Lots of children want him to attend their event each day, and Omar hates refusing a child's request. Each child requests two things from him in his/her event:\n\n- to wear a certain costume (e.g. batman)\n- to come to their event at any time, as long as it's before a list of events of children they hate.\n\nFortunately, there are no circles of hate, and he can always attend all events. But he takes his costumes very seriously, preparing every small detail. If two consecutive events require the same costume, Omar will not need to change between them. Otherwise, Omar will have to change. He never wears the same copy of the costume twice, meaning that he might have to buy several copies of the same costume type depending on the order of the events he will attend. As you might expect, this can be really expensive, but it is always one costume type only that is expensive, and the rest are really cheap. But he doesn't know which one will be the most expensive yet. Could you help him prepare for all possible scenarios? In particular, can you help him find the minimum number of copies of each costume type he needs to buy if it was the most expensive one?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases. Each test case will consist of several lines. The first line will contain two integers, separated by a single space: N, M (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 500, 0 \u2009\u2264\u2009 M \u2009\u2264\u2009 [N * (N - 1)] / 2), the number of events to attend, and number of hate relationship between the children respectively. The next line will contain N integers, separated by a single space: ki (1 \u2009\u2264\u2009 ki \u2009\u2264\u2009 N) the type costume you have to wear for i-th event. The next M lines will contain two integers separated by space: ai and bi (1 \u2009\u2264\u2009 ai, bi \u2009\u2264\u2009 N, ai \u2009\u2260\u2009 bi), which means the child in event ai hates the child in event bi, and you must go to the first event before the second event.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1). Then K lines follow (where K is the number of unique costume types in the input). For each line, output the minimum number of costumes of type ki. The lines must be ordered by the custom type.\n\n\n\n\nSample Input:\n\n1\n10 10\n1 2 1 2 3 1 1 2 3 1\n1 2\n1 3\n2 4\n2 5\n5 10\n4 6\n7 8\n8 9\n9 10\n3 5\n\n\n\nSample Output:\n\nCase 1:\n2\n1\n1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:02 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n10 10\n1 2 1 2 3 1 1 2 3 1\n1 2\n1 3\n2 4\n2 5\n5 10\n4 6\n7 8\n8 9\n9 10\n3 5\n\n\nSample Output:\n\nCase 1:\n2\n1\n1\n\n",
    "Description": "\nProblem Statement:\n\n\nOmar El-Mohandes decided to leave his career in programming and pursue his dream to become a children party entertainer (a.k.a. a clown). Each day he visits birthdays and parties, wearing colorful costumes (clown, batman, spiderman ...) , and makes children happy!\n\nAs usual, he excelled in his new job, and became very famous very quickly. Lots of children want him to attend their event each day, and Omar hates refusing a child's request. Each child requests two things from him in his/her event:\n\n- to wear a certain costume (e.g. batman)\n- to come to their event at any time, as long as it's before a list of events of children they hate.\n\nFortunately, there are no circles of hate, and he can always attend all events. But he takes his costumes very seriously, preparing every small detail. If two consecutive events require the same costume, Omar will not need to change between them. Otherwise, Omar will have to change. He never wears the same copy of the costume twice, meaning that he might have to buy several copies of the same costume type depending on the order of the events he will attend. As you might expect, this can be really expensive, but it is always one costume type only that is expensive, and the rest are really cheap. But he doesn't know which one will be the most expensive yet. Could you help him prepare for all possible scenarios? In particular, can you help him find the minimum number of copies of each costume type he needs to buy if it was the most expensive one?\n\n\n",
    "Title": "285. Omar the clown",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=285",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1). Then K lines follow (where K is the number of unique costume types in the input). For each line, output the minimum number of costumes of type ki. The lines must be ordered by the custom type.\n\n\n"
  },
  "2177": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input contains a single integer T (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100) the number of test cases. Followed by T test cases. Each test case consists of two lines. The first line contains a single integer N (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 100), the number of Akeeds in Haret Aldabe'a. The next line consists of N integers separated by a single space: pi (1 \u2009\u2264\u2009 pi \u2009\u2264\u2009 109) which refers to the power of the i-th Akeed.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n286. Bab Al hara\n\n\n\n\n\nProblem Statement:\n\n\nBab Alhara is the most famous T.V Show in the arab world in the last 7 years (I remember that streets of many Arabian cities were empty during the show). Anyway, people of Haret Aldabe'a have a lot of troubles with the French enemy, as the French threatened they will break into Alhara and arrest the Akeed (Colonel) Abo Shhab and his men. \"Ya Batel\": Abo Shhab said, he has to lock the door (bab alharra) before the French come. The door has a special password to lock which he doesn't know, but they have intel from inside the French army confirming that this password is the sum of the divisors of a very big number X. This number is the product of the strengths of the Akeeds in the Hara. Now, Abo Shhab has no time to waste so he asks for your help. Can you help him find the password of bab alharra? Can you help him and his men to protect their Hara?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input contains a single integer T (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100) the number of test cases. Followed by T test cases. Each test case consists of two lines. The first line contains a single integer N (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 100), the number of Akeeds in Haret Aldabe'a. The next line consists of N integers separated by a single space: pi (1 \u2009\u2264\u2009 pi \u2009\u2264\u2009 109) which refers to the power of the i-th Akeed.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the (sum of divisors of X) modulo (109\u2009+\u20097).\n\n\n\n\nSample Input:\n\n2\n5\n1 2 3 4 5\n3\n1000 500 10\n\n\n\nSample Output:\n\nCase 1: 360\nCase 2: 12402312\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:03 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5\n1 2 3 4 5\n3\n1000 500 10\n\n\nSample Output:\n\nCase 1: 360\nCase 2: 12402312\n\n",
    "Description": "\nProblem Statement:\n\n\nBab Alhara is the most famous T.V Show in the arab world in the last 7 years (I remember that streets of many Arabian cities were empty during the show). Anyway, people of Haret Aldabe'a have a lot of troubles with the French enemy, as the French threatened they will break into Alhara and arrest the Akeed (Colonel) Abo Shhab and his men. \"Ya Batel\": Abo Shhab said, he has to lock the door (bab alharra) before the French come. The door has a special password to lock which he doesn't know, but they have intel from inside the French army confirming that this password is the sum of the divisors of a very big number X. This number is the product of the strengths of the Akeeds in the Hara. Now, Abo Shhab has no time to waste so he asks for your help. Can you help him find the password of bab alharra? Can you help him and his men to protect their Hara?\n\n\n",
    "Title": "286. Bab Al hara",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=286",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the (sum of divisors of X) modulo (109\u2009+\u20097).\n\n\n"
  },
  "2178": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Each test case starts with a line that contains an integer N (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 50,000) , the number of pages. Then N lines follow. Each line will contain an integer Ap (1 \u2009\u2264\u2009 Ap \u2009\u2264\u2009 10,000) the revenue, and an integer M, the number of hyperlinks in the current page, followed by M integers. The list of indices of the webpages themselves. No page links to itself, and no page has more than one link to the same page.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n287. Ad revenue\n\n\n\n\n\nProblem Statement:\n\n\nSaad Nabiha has built his own website, and he is about to launch it. This is really exciting!\n\nBut first he has to convince investors how important his website is, and how much ad revenue it can generate. But they are not convinced easily; they want numbers. Investors want to know what is the largest revenue Saad can get from a single user in a single session. Here is how ads on Saad's website work: Saad has N pages in his website, each one containing zero or more hyperlinks pointing to other pages. A user starts his session from any page, and navigates Saad's website by following the hyperlinks (but unfortunately no back button) for a while, and then leaves. When a user visits a page p of Saad's website, Saad receives Ap cents of revenue. A user might visit the same webpage multiple times, but Saad will receive the revenue of a page once only per session.\n\nCould you help Saad find the maximum revenue he can get?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Each test case starts with a line that contains an integer N (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 50,000) , the number of pages. Then N lines follow. Each line will contain an integer Ap (1 \u2009\u2264\u2009 Ap \u2009\u2264\u2009 10,000) the revenue, and an integer M, the number of hyperlinks in the current page, followed by M integers. The list of indices of the webpages themselves. No page links to itself, and no page has more than one link to the same page.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the maximum revenue from a single user in a single session.\n\n\n\n\nSample Input:\n\n2\n3\n10 0\n10 2 0 2\n10 1 1\n5\n5 0\n5 2 0 3\n8 1 1\n7 0\n3 0\n\n\n\nSample Output:\n\nCase 1: 30\nCase 2: 20\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:04 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3\n10 0\n10 2 0 2\n10 1 1\n5\n5 0\n5 2 0 3\n8 1 1\n7 0\n3 0\n\n\nSample Output:\n\nCase 1: 30\nCase 2: 20\n\n",
    "Description": "\nProblem Statement:\n\n\nSaad Nabiha has built his own website, and he is about to launch it. This is really exciting!\n\nBut first he has to convince investors how important his website is, and how much ad revenue it can generate. But they are not convinced easily; they want numbers. Investors want to know what is the largest revenue Saad can get from a single user in a single session. Here is how ads on Saad's website work: Saad has N pages in his website, each one containing zero or more hyperlinks pointing to other pages. A user starts his session from any page, and navigates Saad's website by following the hyperlinks (but unfortunately no back button) for a while, and then leaves. When a user visits a page p of Saad's website, Saad receives Ap cents of revenue. A user might visit the same webpage multiple times, but Saad will receive the revenue of a page once only per session.\n\nCould you help Saad find the maximum revenue he can get?\n\n\n",
    "Title": "287. Ad revenue",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=287",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the maximum revenue from a single user in a single session.\n\n\n"
  },
  "2179": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Each test case will consist of two lines. The first line will contain an integer N, number of days of operation for the bus (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 10000), the next line will contain N days separated by a single space, (1 \u2009\u2264\u2009 day \u2009\u2264\u2009 10000), the list of days of operation. Assume that day 1 is a Saturday.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n288. The Pattern Lover\n\n\n\n\n\nProblem Statement:\n\n\nYou love patterns! They make things predictable and organized. Everything for you (food, exercise, routine) must follow a pattern. The perfect week for you is when you do exactly the same thing as you did the week before.\n\nBut unfortunately your perfect life is about to end, after the bus schedule came out without any patterns! Just a list of days on which the bus operates. \"This is insane!\" you said, and you decided to take the matter into your hand. You will try to convert the new schedule to the old format: a single weekly pattern.\n\nA weekly pattern consists of several things:\n\n- The subset of week days for which the bus operates.\n- The start and end for this weekly pattern.The start and end can be any two days (as long as start \u2009\u2264\u2009 end).\n- For days with the bus active but the weekly pattern not active, you will add an \"add exception\".\n- For days with the bus not active, but the weekly pattern active, you will add a \"remove exception\".\n\nAs you can see, exceptions are not very pleasing for you, so you decided to write a program to find the schedule that minimizes them.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Each test case will consist of two lines. The first line will contain an integer N, number of days of operation for the bus (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 10000), the next line will contain N days separated by a single space, (1 \u2009\u2264\u2009 day \u2009\u2264\u2009 10000), the list of days of operation. Assume that day 1 is a Saturday.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the minimum number of exceptions.\n\n\n\n\nSample Input:\n\n2\n11\n1 8 15 22 29 36 43 50 57 64 65\n9\n1 8 15 22 36 43 50 57 64\n\n\n\nSample Output:\n\nCase 1: 1\nCase 2: 1\n\n\n\nNotes:\n\n\nFor the first case, the optimal solution is to have weekly pattern of Saturdays from day 1 to day 64, with an add exception for day 65.\n\nFor the second case, the optimal solution is to have a weekly pattern of Saturdays from day 1 to day 64, with a remove exception for day 29.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:05 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n11\n1 8 15 22 29 36 43 50 57 64 65\n9\n1 8 15 22 36 43 50 57 64\n\n\nSample Output:\n\nCase 1: 1\nCase 2: 1\n\n",
    "Description": "\nProblem Statement:\n\n\nYou love patterns! They make things predictable and organized. Everything for you (food, exercise, routine) must follow a pattern. The perfect week for you is when you do exactly the same thing as you did the week before.\n\nBut unfortunately your perfect life is about to end, after the bus schedule came out without any patterns! Just a list of days on which the bus operates. \"This is insane!\" you said, and you decided to take the matter into your hand. You will try to convert the new schedule to the old format: a single weekly pattern.\n\nA weekly pattern consists of several things:\n\n- The subset of week days for which the bus operates.\n- The start and end for this weekly pattern.The start and end can be any two days (as long as start \u2009\u2264\u2009 end).\n- For days with the bus active but the weekly pattern not active, you will add an \"add exception\".\n- For days with the bus not active, but the weekly pattern active, you will add a \"remove exception\".\n\nAs you can see, exceptions are not very pleasing for you, so you decided to write a program to find the schedule that minimizes them.\n\n\n",
    "Title": "288. The Pattern Lover",
    "Notes": "\nNotes:\n\n\nFor the first case, the optimal solution is to have weekly pattern of Saturdays from day 1 to day 64, with an add exception for day 65.\n\nFor the second case, the optimal solution is to have a weekly pattern of Saturdays from day 1 to day 64, with a remove exception for day 29.\n\n",
    "URL": "https://a2oj.com/p?ID=288",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the minimum number of exceptions.\n\n\n"
  },
  "2180": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases. Each test case will consist of several lines. The first line will contain four integers, separated by a single space: X (1 \u2009\u2264\u2009 X \u2009\u2264\u2009 200,000), Y (1 \u2009\u2264\u2009 Y \u2009\u2264\u2009 200,000), N (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 1,000) and d (1 \u2009\u2264\u2009 d \u2009\u2264\u2009 1,000), field dimensions as explained above, the number of vertices in the polygon and the new distance from the wall, respectively. Each line of the next N lines will contain two space separated integers xi, yi coordinates of the i-th vertex in anti-clockwise order.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n289. 9 meters rule\n\n\n\n\n\nProblem Statement:\n\n\nSmoking is not permitted in university buildings. It's even not permitted within 9 meters from the building walls (not euclidean distance, but rather max(dx,dy) >= 9 from the walls). Smokers are complaining that they don't have enough space! You want to know if they are right, and decided to experiment with different distances other than 9, and measure the area of land on which they can smoke in the campus.\n\nThe campus is a rectangle from (0,0) to (X, Y). The university building is a simple rectilinear polygon (vertical or horizontal sides only). Can you return the area left for smokers?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases. Each test case will consist of several lines. The first line will contain four integers, separated by a single space: X (1 \u2009\u2264\u2009 X \u2009\u2264\u2009 200,000), Y (1 \u2009\u2264\u2009 Y \u2009\u2264\u2009 200,000), N (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 1,000) and d (1 \u2009\u2264\u2009 d \u2009\u2264\u2009 1,000), field dimensions as explained above, the number of vertices in the polygon and the new distance from the wall, respectively. Each line of the next N lines will contain two space separated integers xi, yi coordinates of the i-th vertex in anti-clockwise order.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the area left for smokers.\n\n\n\n\nSample Input:\n\n2\n100 100 4 9\n50 50\n51 50\n51 51\n50 51\n1500 1500 12 9\n100 100\n1100 100\n1100 200\n700 200\n700 500\n1000 500\n1000 600\n300 600\n300 500\n500 500\n500 200\n100 200\n\n\n\nSample Output:\n\nCase 1: 9639\nCase 2: 1983676\n\n\n\nNotes:\n\n\nSmoking kills!\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:06 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n100 100 4 9\n50 50\n51 50\n51 51\n50 51\n1500 1500 12 9\n100 100\n1100 100\n1100 200\n700 200\n700 500\n1000 500\n1000 600\n300 600\n300 500\n500 500\n500 200\n100 200\n\n\nSample Output:\n\nCase 1: 9639\nCase 2: 1983676\n\n",
    "Description": "\nProblem Statement:\n\n\nSmoking is not permitted in university buildings. It's even not permitted within 9 meters from the building walls (not euclidean distance, but rather max(dx,dy) >= 9 from the walls). Smokers are complaining that they don't have enough space! You want to know if they are right, and decided to experiment with different distances other than 9, and measure the area of land on which they can smoke in the campus.\n\nThe campus is a rectangle from (0,0) to (X, Y). The university building is a simple rectilinear polygon (vertical or horizontal sides only). Can you return the area left for smokers?\n\n\n",
    "Title": "289. 9 meters rule",
    "Notes": "\nNotes:\n\n\nSmoking kills!\n\n",
    "URL": "https://a2oj.com/p?ID=289",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by the area left for smokers.\n\n\n"
  },
  "2181": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases. Each test case will start with N, the number of cubes (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 10,000). Each of the following N lines will contain 3 integer coordinates separated by a single space Xi, Yi, Zi of the top, front, right corner of the i-th cube (0 \u2009\u2264\u2009 Xi, Yi, Zi \u2009\u2264\u2009 100)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n290. Berliner\n\n\n\n\n\nProblem Statement:\n\n\nA berliner is the most amazing dessert you can taste. It looks like a doughnut, but without a hole. It is circular piece of soft dough, covered with sugar on the outside, and filled with jam in the center. You are served a berliner (possibly an irregular looking one) and you want to know exactly how much jam and sugar are in it. It is represented as a set of connected 1\u2009\u00d7\u20091\u2009\u00d7\u20091 cubes, with exactly one connected hole completely inside the shape (i.e. not connected to the outside). The amount of jam is measured by the volume of the hole, and the amount of sugar is measured by the surface area on the outside of the berliner.\n\nBy connected we mean there is a path between any 2 cubes such that any two consecutive cubes share a common face.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases. Each test case will start with N, the number of cubes (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 10,000). Each of the following N lines will contain 3 integer coordinates separated by a single space Xi, Yi, Zi of the top, front, right corner of the i-th cube (0 \u2009\u2264\u2009 Xi, Yi, Zi \u2009\u2264\u2009 100)\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by two lines containing \"jam = j\" and \"sugar = s\" (without the quotes) where j is the amount of jam and s is the amount of sugar.\n\n\n\n\nSample Input:\n\n1\n26\n1 1 1\n1 1 2\n1 1 3\n1 2 1\n1 2 2\n1 2 3\n1 3 1\n1 3 2\n1 3 3\n2 1 1\n2 1 2\n2 1 3\n2 2 1\n2 2 3\n2 3 1\n2 3 2\n2 3 3\n3 1 1\n3 1 2\n3 1 3\n3 2 1\n3 2 2\n3 2 3\n3 3 1\n3 3 2\n3 3 3\n\n\n\nSample Output:\n\nCase 1:\njam = 1\nsugar = 54\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:07 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n26\n1 1 1\n1 1 2\n1 1 3\n1 2 1\n1 2 2\n1 2 3\n1 3 1\n1 3 2\n1 3 3\n2 1 1\n2 1 2\n2 1 3\n2 2 1\n2 2 3\n2 3 1\n2 3 2\n2 3 3\n3 1 1\n3 1 2\n3 1 3\n3 2 1\n3 2 2\n3 2 3\n3 3 1\n3 3 2\n3 3 3\n\n\nSample Output:\n\nCase 1:\njam = 1\nsugar = 54\n\n",
    "Description": "\nProblem Statement:\n\n\nA berliner is the most amazing dessert you can taste. It looks like a doughnut, but without a hole. It is circular piece of soft dough, covered with sugar on the outside, and filled with jam in the center. You are served a berliner (possibly an irregular looking one) and you want to know exactly how much jam and sugar are in it. It is represented as a set of connected 1\u2009\u00d7\u20091\u2009\u00d7\u20091 cubes, with exactly one connected hole completely inside the shape (i.e. not connected to the outside). The amount of jam is measured by the volume of the hole, and the amount of sugar is measured by the surface area on the outside of the berliner.\n\nBy connected we mean there is a path between any 2 cubes such that any two consecutive cubes share a common face.\n\n\n",
    "Title": "290. Berliner",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=290",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by two lines containing \"jam = j\" and \"sugar = s\" (without the quotes) where j is the amount of jam and s is the amount of sugar.\n\n\n"
  },
  "2182": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100,000). Followed by T test cases. Each test case will consist of a single line, containing integer N (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 1018).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n291. Fibonacci 2.0\n\n\n\n\n\nProblem Statement:\n\n\nFibonacci sequence is a sequence of numbers where F(n)\u2009=\u2009F(n\u2009-\u20091)\u2009+\u2009F(n\u2009-\u20092) and the sequence starts with 0, and 1. As Fibonacci sequence is very old, we are going to invent a new one, Fibonacci 2.0 also known as Y(n).\n\nY(n)\u2009=\u2009Y(n\u2009-\u20091)\u2009+\u2009Y(n\u2009-\u20092) as well but this time this sequence doesn't have to start with 0 and 1 but can start with any two numbers A and B where 0 \u2009\u2264\u2009 A \u2009\u2264\u2009 B \u2009\u2264\u2009 100.\n\nWe are interested in the Fibonacci 2.0 sequence which starts with A and B and Y(X) is the closest value to a given integer N. Since the answer is not unique, we are interested in the sequence with the smallest A. If the answer is not unique yet, we are interested in the sequence with the smallest B. If the answer is not unique yet, we are interested in the smallest X.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100,000). Followed by T test cases. Each test case will consist of a single line, containing integer N (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 1018).\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by 3 integers separated by a single space representing A, B and X.\n\n\n\n\nSample Input:\n\n3\n10\n20\n30\n\n\n\nSample Output:\n\nCase 1: 0 2 5\nCase 2: 0 4 5\nCase 3: 0 6 5\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:08 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n10\n20\n30\n\n\nSample Output:\n\nCase 1: 0 2 5\nCase 2: 0 4 5\nCase 3: 0 6 5\n\n",
    "Description": "\nProblem Statement:\n\n\nFibonacci sequence is a sequence of numbers where F(n)\u2009=\u2009F(n\u2009-\u20091)\u2009+\u2009F(n\u2009-\u20092) and the sequence starts with 0, and 1. As Fibonacci sequence is very old, we are going to invent a new one, Fibonacci 2.0 also known as Y(n).\n\nY(n)\u2009=\u2009Y(n\u2009-\u20091)\u2009+\u2009Y(n\u2009-\u20092) as well but this time this sequence doesn't have to start with 0 and 1 but can start with any two numbers A and B where 0 \u2009\u2264\u2009 A \u2009\u2264\u2009 B \u2009\u2264\u2009 100.\n\nWe are interested in the Fibonacci 2.0 sequence which starts with A and B and Y(X) is the closest value to a given integer N. Since the answer is not unique, we are interested in the sequence with the smallest A. If the answer is not unique yet, we are interested in the sequence with the smallest B. If the answer is not unique yet, we are interested in the smallest X.\n\n\n",
    "Title": "291. Fibonacci 2.0",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=291",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a single space, followed by 3 integers separated by a single space representing A, B and X.\n\n\n"
  },
  "2183": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 50). Followed by T test cases. Each test case will consist of a single line, containing 2 integers separated by a single space: x, y (1 \u2009\u2264\u2009 x \u2009\u2264\u2009 100, 1 \u2009\u2264\u2009 y \u2009\u2264\u2009 1000) representing the size of the sets X and Y respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n292. Functions\n\n\n\n\n\nProblem Statement:\n\n\nGiven 2 sets X and Y, A good function is a function F:A \u2009\u2192\u2009 B, that can be constructed such that A is a non-empty subset from X, and B is a non-empty subset from Y.\n\n- A function from A to B is an assignment for each element of A to exactly one element from B.\n- An injective function is a function when every element in B is assigned to at most one element from A.\n- An surjective function is a function when every element in B is assigned to at least one element from A.\n- A bijective function is a function that is both injective and surjective.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 50). Followed by T test cases. Each test case will consist of a single line, containing 2 integers separated by a single space: x, y (1 \u2009\u2264\u2009 x \u2009\u2264\u2009 100, 1 \u2009\u2264\u2009 y \u2009\u2264\u2009 1000) representing the size of the sets X and Y respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by 4 integers separated by single spaces representing the total possible number of injective good functions, surjective good functions, bijective good functions and the total number of possible good functions respectively. The values should be be printed modulo 109\u2009+\u20097.\n\n\n\n\nSample Input:\n\n4\n1 1\n1 3\n3 1\n2 2\n\n\n\nSample Output:\n\nCase 1: 1 1 1 1\nCase 2: 12 3 3 12\nCase 3: 3 7 3 7\nCase 4: 10 8 6 14\n\n\n\nNotes:\n\n\nExplanation of the \"2 2\" test case. Assume that X = (1, 2) and Y = (a, b).\n\nOnly Injective:\n\nA = (1), B = (a, b), functions = (1 : a), (1 : b)\n\nA = (2), B = (a, b), functions = (2 : a), (2 : b)\n\nOnly Surjective:\n\nA = (1, 2), B = (a), functions = (1 : a, 2 : a)\n\nA = (1, 2), B = (b), functions = (1 : b, 2 : b)\n\nBijective:\n\nA = (1), B = (a), functions = (1 : a)\n\nA = (1), B = (b), functions = (1 : b)\n\nA = (2), B = (a), functions = (2 : a)\n\nA = (2), B = (b), functions = (2 : b)\n\nA = (1, 2), B = (a, b), functions = (1 : a, 2 : b), (1 : b, 2 : a)\n\nNeither Injective nor Surjective:\n\nA = (1, 2), B = (a, b), functions = (1 : a, 2 : a), (1 : b, 2 : b)\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:09 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n1 1\n1 3\n3 1\n2 2\n\n\nSample Output:\n\nCase 1: 1 1 1 1\nCase 2: 12 3 3 12\nCase 3: 3 7 3 7\nCase 4: 10 8 6 14\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven 2 sets X and Y, A good function is a function F:A \u2009\u2192\u2009 B, that can be constructed such that A is a non-empty subset from X, and B is a non-empty subset from Y.\n\n- A function from A to B is an assignment for each element of A to exactly one element from B.\n- An injective function is a function when every element in B is assigned to at most one element from A.\n- An surjective function is a function when every element in B is assigned to at least one element from A.\n- A bijective function is a function that is both injective and surjective.\n\n\n",
    "Title": "292. Functions",
    "Notes": "\nNotes:\n\n\nExplanation of the \"2 2\" test case. Assume that X = (1, 2) and Y = (a, b).\n\nOnly Injective:\n\nA = (1), B = (a, b), functions = (1 : a), (1 : b)\n\nA = (2), B = (a, b), functions = (2 : a), (2 : b)\n\nOnly Surjective:\n\nA = (1, 2), B = (a), functions = (1 : a, 2 : a)\n\nA = (1, 2), B = (b), functions = (1 : b, 2 : b)\n\nBijective:\n\nA = (1), B = (a), functions = (1 : a)\n\nA = (1), B = (b), functions = (1 : b)\n\nA = (2), B = (a), functions = (2 : a)\n\nA = (2), B = (b), functions = (2 : b)\n\nA = (1, 2), B = (a, b), functions = (1 : a, 2 : b), (1 : b, 2 : a)\n\nNeither Injective nor Surjective:\n\nA = (1, 2), B = (a, b), functions = (1 : a, 2 : a), (1 : b, 2 : b)\n\n",
    "URL": "https://a2oj.com/p?ID=292",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by 4 integers separated by single spaces representing the total possible number of injective good functions, surjective good functions, bijective good functions and the total number of possible good functions respectively. The values should be be printed modulo 109\u2009+\u20097.\n\n\n"
  },
  "2184": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases, the first line of each test case contains an integer and 2 strings separated by single spaces N F L (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 100) representing the number of candidates, the first name and the last name of a coach, respectively. Followed by N lines, each line contains a single string which represents the first name of a candidate. All the strings in the input are non-empty strings of at least 1 and at most 100 upper case or lower case English letters (from 'A' to 'Z' and from 'a' to 'z').\n\nNote: lower case letters and upper case letters are considered equivalent (e.g. 'a' and 'A' are equivalent).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n293. CodeZilla\n\n\n\n\n\nProblem Statement:\n\n\nCodeZilla team is the winner of the Second Oman Collegiate Programming Contest (OCPC 2014). It is the first team includes only female students to win a national programming contest. After winning the contest, the coach of the team (Mr. Alhussain Aly) noticed that all members of the team (Asma Yasin, Marwa Maghnie and Yusra Abu Jaradeh) have a common thing: the first name of all of them includes the letter 'a' which is the first letter in both his first and last names. So, he is currently thinking to accept only new members to join the programming team if their first names include the letter 'a'. Could you help him?\n\nIn this problem, you will be given the first and last names of a coach and the first names of the candidates for the programming team. Then, you should decide for each member if he can join the team or no. The candidate can join the team in 2 cases:\n\n1. Either his/her first name contains the first letter of both the first and last names of the coach if the first letter is the same for both names.\n2. The first letters of the first and last names of the coach are not the same.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2009\u2264\u2009 T \u2009\u2264\u2009 100). Followed by T test cases, the first line of each test case contains an integer and 2 strings separated by single spaces N F L (1 \u2009\u2264\u2009 N \u2009\u2264\u2009 100) representing the number of candidates, the first name and the last name of a coach, respectively. Followed by N lines, each line contains a single string which represents the first name of a candidate. All the strings in the input are non-empty strings of at least 1 and at most 100 upper case or lower case English letters (from 'A' to 'Z' and from 'a' to 'z').\n\nNote: lower case letters and upper case letters are considered equivalent (e.g. 'a' and 'A' are equivalent).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by one line for each candidate in the test case which contains the word \"YES\" if the candidate can join the programming team, or the word \"NO\" otherwise.\n\n\n\n\nSample Input:\n\n1\n4 Alhussain Aly\nAsma\nMarwa\nYusra\nZohdi\n\n\n\nSample Output:\n\nCase 1:\nYES\nYES\nYES\nNO\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-11 15:00:10 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Egyptian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4 Alhussain Aly\nAsma\nMarwa\nYusra\nZohdi\n\n\nSample Output:\n\nCase 1:\nYES\nYES\nYES\nNO\n\n",
    "Description": "\nProblem Statement:\n\n\nCodeZilla team is the winner of the Second Oman Collegiate Programming Contest (OCPC 2014). It is the first team includes only female students to win a national programming contest. After winning the contest, the coach of the team (Mr. Alhussain Aly) noticed that all members of the team (Asma Yasin, Marwa Maghnie and Yusra Abu Jaradeh) have a common thing: the first name of all of them includes the letter 'a' which is the first letter in both his first and last names. So, he is currently thinking to accept only new members to join the programming team if their first names include the letter 'a'. Could you help him?\n\nIn this problem, you will be given the first and last names of a coach and the first names of the candidates for the programming team. Then, you should decide for each member if he can join the team or no. The candidate can join the team in 2 cases:\n\n1. Either his/her first name contains the first letter of both the first and last names of the coach if the first letter is the same for both names.\n2. The first letters of the first and last names of the coach are not the same.\n\n\n",
    "Title": "293. CodeZilla",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=293",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by one line for each candidate in the test case which contains the word \"YES\" if the candidate can join the programming team, or the word \"NO\" otherwise.\n\n\n"
  },
  "2185": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with one line containing two integers N and X, represents the number of nodes (1 \u2264 N \u2264 2000) and the number of the starting node (1 \u2264 X \u2264 N). Followed by N lines each one contains N characters. Each character is '0' or '1'. The j-th character of the i-th line is '1' if there is an edge from node i to node j, and '0' if there is no edge.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n294. Shortest Path\n\n\n\n\n\nProblem Statement:\n\n\nYou are given a directed and unweighted graph which consists of N nodes (the nodes are numbered from 1 to N), and your task is to find the length of the shortest path from the node with the number X to all the nodes in the graph (the path with minimum number of edges).\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by the test cases, each test case starts with one line containing two integers N and X, represents the number of nodes (1 \u2264 N \u2264 2000) and the number of the starting node (1 \u2264 X \u2264 N). Followed by N lines each one contains N characters. Each character is '0' or '1'. The j-th character of the i-th line is '1' if there is an edge from node i to node j, and '0' if there is no edge.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print one line containing N space separated integers, the ith integer is -1 if there is no path from node X to node i, otherwise it should be the number of edges in the shortest path from node X to node i.\n\n\n\n\nSample Input:\n\n3\n3 1\n000\n000\n000\n4 1\n1111\n1111\n1111\n1111\n6 1\n011010\n000100\n000011\n000001\n000001\n000000\n\n\n\nSample Output:\n\n0 -1 -1\n0 1 1 1\n0 1 1 2 1 2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-15 20:04:28 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3 1\n000\n000\n000\n4 1\n1111\n1111\n1111\n1111\n6 1\n011010\n000100\n000011\n000001\n000001\n000000\n\n\nSample Output:\n\n0 -1 -1\n0 1 1 1\n0 1 1 2 1 2\n\n",
    "Description": "\nProblem Statement:\n\n\nYou are given a directed and unweighted graph which consists of N nodes (the nodes are numbered from 1 to N), and your task is to find the length of the shortest path from the node with the number X to all the nodes in the graph (the path with minimum number of edges).\n\n\n",
    "Title": "294. Shortest Path",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=294",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print one line containing N space separated integers, the ith integer is -1 if there is no path from node X to node i, otherwise it should be the number of edges in the shortest path from node X to node i.\n\n\n"
  },
  "2186": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains two non-negative integers 1 \u2264 n, m \u2264 200 000, giving the number of airports and routes in the Amanda Catalog respectively. Thereafter follow m lines, each describing a route by three non-negative integers 1 \u2264 a, b \u2264 n and c \u2208 {0, 1, 2}, where a and b are the airports the route connects and c is the number of lounges. No route connects any airport with itself, and for any two airports at most one requirement for that route is given. As one would expect, 0 is a request for no lounge, 1 for a lounge at exactly one of the two airports and 2 for lounges at both airports.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n296. Amanda Lounges\n\n\n\n\n\nProblem Statement:\n\n\nAMANDA AIR has routes between many different airports, and has asked their most important frequent flyers, members of the AA Frequent Flyer program, which routes they most often fly. Based on this survey, Amanda, the CEO and owner, has concluded that AMANDA AIR will place lounges at some of the airports at which they operate. However, since there are so many routes going between a wide variety of airports, she has hired you to determine how many lounges she needs to build, if at all possible, given the constraints set by her. This calculation is to be provided by you, before any lounges are built. Her requirements specifies that for some routes, there must be lounges at both airports, for other routes, there must be lounges at exactly one of the airports, and for some routes, there will be no lounges at the airports. She is very economically minded and is demanding the absolute minimum number of lounges to be built.\n\n\n\n\nInput Format:\n\n\nThe first line contains two non-negative integers 1 \u2264 n, m \u2264 200 000, giving the number of airports and routes in the Amanda Catalog respectively. Thereafter follow m lines, each describing a route by three non-negative integers 1 \u2264 a, b \u2264 n and c \u2208 {0, 1, 2}, where a and b are the airports the route connects and c is the number of lounges. No route connects any airport with itself, and for any two airports at most one requirement for that route is given. As one would expect, 0 is a request for no lounge, 1 for a lounge at exactly one of the two airports and 2 for lounges at both airports.\n\n\n\n\nOutput Format:\n\n\nIf it is possible to satisfy the requirements, give the minimum number of lounges necessary to do so. If it is not possible, output impossible.\n\n\n\n\nSample Input:\n\n4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n4 5\n1 2 1\n2 3 0\n2 4 1\n3 1 1\n3 4 1\n\n\n\n\nSample Output:\n\n3\nimpossible\n2\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3-5 second(s)\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n4 5\n1 2 1\n2 3 0\n2 4 1\n3 1 1\n3 4 1\n\n\n\nSample Output:\n\n3\nimpossible\n2\n\n\n",
    "Description": "\nProblem Statement:\n\n\nAMANDA AIR has routes between many different airports, and has asked their most important frequent flyers, members of the AA Frequent Flyer program, which routes they most often fly. Based on this survey, Amanda, the CEO and owner, has concluded that AMANDA AIR will place lounges at some of the airports at which they operate. However, since there are so many routes going between a wide variety of airports, she has hired you to determine how many lounges she needs to build, if at all possible, given the constraints set by her. This calculation is to be provided by you, before any lounges are built. Her requirements specifies that for some routes, there must be lounges at both airports, for other routes, there must be lounges at exactly one of the airports, and for some routes, there will be no lounges at the airports. She is very economically minded and is demanding the absolute minimum number of lounges to be built.\n\n\n",
    "Title": "296. Amanda Lounges",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=296",
    "Time Limit": "3-5 second(s)",
    "Output Description": "\nOutput Format:\n\n\nIf it is possible to satisfy the requirements, give the minimum number of lounges necessary to do so. If it is not possible, output impossible.\n\n\n"
  },
  "2187": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer k (0 \u0014\u2264 k \u2264\u0014 15), giving the number of drones to position. Then follows one line with 1 \u2264\u0014 n \u2264\u0014 100000, the total number of intersections in BASIN CITY. Finally follow n lines describing consecutive intersections. The i-th line describes the i-th intersection in the following format: The line starts with one integer d (0 \u2264\u0014 d \u2264\u0014 4) describing the number of intersections neighbouring the i-th one. Then follow d integers denoting the indices of these neighbouring intersections. They will be all distinct and different from i. The intersections are numbered from 1 to n.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n297. Basin City Surveillance\n\n\n\n\n\nProblem Statement:\n\n\nBASIN CITY is known for her incredibly high crime rates. The police see no option but to tighten security. They want to install traffic drones at different intersections to observe who?s running on a red light. If a car runs a red light, the drone will chase and stop the car to give the driver an appropriate ticket. The drones are quite stupid, however, and a drone will stop before it comes to the next intersection as it might otherwise lose its way home, its home being the traffic light to which it is assigned. The drones are not able to detect the presence of other drones, so the police?s R&D department found out that if a drone was placed at some intersection, then it was best not to put any drones at any of the neighbouring intersections. As is usual in many cities, there are no intersections in BASIN CITY with more than four other neighbouring intersections. The drones are government funded, so the police force would like to buy as many drones as they are allowed to. Being the programmer-go-to for the BASIN CITY POLICE DEPARTMENT, they ask you to decide, for a given number of drones, whether it is feasible to position exactly this number of drones.\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer k (0 \u0014\u2264 k \u2264\u0014 15), giving the number of drones to position. Then follows one line with 1 \u2264\u0014 n \u2264\u0014 100000, the total number of intersections in BASIN CITY. Finally follow n lines describing consecutive intersections. The i-th line describes the i-th intersection in the following format: The line starts with one integer d (0 \u2264\u0014 d \u2264\u0014 4) describing the number of intersections neighbouring the i-th one. Then follow d integers denoting the indices of these neighbouring intersections. They will be all distinct and different from i. The intersections are numbered from 1 to n.\n\n\n\n\nOutput Format:\n\n\nIf it is possible to position k drones such that no two neighbouring intersections have been assigned a drone, output a single line containing possible. Otherwise, output a single line containing impossible.\n\n\n\n\nSample Input:\n\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n4\n8\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 8\n2 8 5\n2 7 6\n\n\n\nSample Output:\n\nimpossible\npossible\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n1-2 second(s)\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n4\n8\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 8\n2 8 5\n2 7 6\n\n\nSample Output:\n\nimpossible\npossible\n\n\n",
    "Description": "\nProblem Statement:\n\n\nBASIN CITY is known for her incredibly high crime rates. The police see no option but to tighten security. They want to install traffic drones at different intersections to observe who?s running on a red light. If a car runs a red light, the drone will chase and stop the car to give the driver an appropriate ticket. The drones are quite stupid, however, and a drone will stop before it comes to the next intersection as it might otherwise lose its way home, its home being the traffic light to which it is assigned. The drones are not able to detect the presence of other drones, so the police?s R&D department found out that if a drone was placed at some intersection, then it was best not to put any drones at any of the neighbouring intersections. As is usual in many cities, there are no intersections in BASIN CITY with more than four other neighbouring intersections. The drones are government funded, so the police force would like to buy as many drones as they are allowed to. Being the programmer-go-to for the BASIN CITY POLICE DEPARTMENT, they ask you to decide, for a given number of drones, whether it is feasible to position exactly this number of drones.\n\n\n",
    "Title": "297. Basin City Surveillance",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=297",
    "Time Limit": "1-2 second(s)",
    "Output Description": "\nOutput Format:\n\n\nIf it is possible to position k drones such that no two neighbouring intersections have been assigned a drone, output a single line containing possible. Otherwise, output a single line containing impossible.\n\n\n"
  },
  "2188": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains four integers a1, b1, a2, b2 that describe Gunnar's dice. Die number i contains numbers ai, ai + 1, . . . , bi on its sides. You may assume that 1 \u0014\u2264 ai \u2264\u0014 bi \u2264\u0014 100. You can further assume that each die has at least four sides, so ai + 3 \u2264\u0014 bi. The second line contains the description of Emma's dice in the same format.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n298. Dice Game\n\n\n\n\n\nProblem Statement:\n\n\nGunnar and Emma play a lot of board games at home, so they own many dice that are not normal 6 sided dice. For example they own a die that has 10 sides with numbers 47, 48, . . . , 56 on it. There has been a big storm in Stockholm, so Gunnar and Emma have been stuck at home without electricity for a couple of hours. They have finished playing all the games they have, so they came up with a new one. Each player has 2 dice which he or she rolls. The player with a bigger sum wins. If both sums are the same, the game ends in a tie.\n\nTask\n\nGiven the description of Gunnar's and Emma's dice, which player has higher chances of winning? All of their dice have the following property: each die contains numbers a, a + 1, . . . , b, where a and b are the lowest and highest numbers respectively on the die. Each number appears exactly on one side, so the die has b - a + 1 sides.\n\n\n\n\nInput Format:\n\n\nThe first line contains four integers a1, b1, a2, b2 that describe Gunnar's dice. Die number i contains numbers ai, ai + 1, . . . , bi on its sides. You may assume that 1 \u0014\u2264 ai \u2264\u0014 bi \u2264\u0014 100. You can further assume that each die has at least four sides, so ai + 3 \u2264\u0014 bi. The second line contains the description of Emma's dice in the same format.\n\n\n\n\nOutput Format:\n\n\nOutput the name of the player that has higher probability of winning. Output \"Tie\" if both players have same probability of winning.\n\n\n\n\nSample Input:\n\n1 4 1 4\n1 6 1 6\n\n1 8 1 8\n1 10 2 5\n\n2 5 2 7\n1 5 2 5\n\n\n\nSample Output:\n\nEmma\nTie\nGunnar\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n1 4 1 4\n1 6 1 6\n\n1 8 1 8\n1 10 2 5\n\n2 5 2 7\n1 5 2 5\n\n\nSample Output:\n\nEmma\nTie\nGunnar\n\n\n",
    "Description": "\nProblem Statement:\n\n\nGunnar and Emma play a lot of board games at home, so they own many dice that are not normal 6 sided dice. For example they own a die that has 10 sides with numbers 47, 48, . . . , 56 on it. There has been a big storm in Stockholm, so Gunnar and Emma have been stuck at home without electricity for a couple of hours. They have finished playing all the games they have, so they came up with a new one. Each player has 2 dice which he or she rolls. The player with a bigger sum wins. If both sums are the same, the game ends in a tie.\n\nTask\n\nGiven the description of Gunnar's and Emma's dice, which player has higher chances of winning? All of their dice have the following property: each die contains numbers a, a + 1, . . . , b, where a and b are the lowest and highest numbers respectively on the die. Each number appears exactly on one side, so the die has b - a + 1 sides.\n\n\n",
    "Title": "298. Dice Game",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=298",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nOutput the name of the player that has higher probability of winning. Output \"Tie\" if both players have same probability of winning.\n\n\n"
  },
  "2189": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains the number of blocks n, where 2 \u0014\u2264 n \u2264\u0014 100000. The second line contains n consecutive block heights hi for i = 1, 2, . . . , n, where 1 \u0014\u2264 hi \u0014\u2264 1000000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n299. Opening Ceremony\n\n\n\n\n\nProblem Statement:\n\n\nFor the grand opening of the algorithmic games in NlogNsglow, a row of tower blocks is set to be demolished in a grand demonstration of renewal. Originally the plan was to accomplish this with controlled explosions, one for each tower block, but time constraints now require a hastier solution. To help you remove the blocks more rapidly you have been given the use of a Universal Kinetic / Incandescent Energy Particle Cannon (UKIEPC). On a single charge, this cutting-edge contraption can remove either all of the floors in a single tower block, or all the x-th floors in all the blocks simultaneously, for user's choice of the floor number x. In the latter case, the blocks that are less than x floors high are left untouched, while for blocks having more than x floors, all the floors above the removed x-th one fall down by one level.\nTask\nGiven the number of floors of all towers, output the minimum number of charges needed to eliminate all floors of all blocks.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains the number of blocks n, where 2 \u0014\u2264 n \u2264\u0014 100000. The second line contains n consecutive block heights hi for i = 1, 2, . . . , n, where 1 \u0014\u2264 hi \u0014\u2264 1000000.\n\n\n\n\nOutput Format:\n\n\nOutput one line containing one integer: the minimum number of charges needed to tear down all the blocks.\n\n\n\n\nSample Input:\n\n6\n2 1 8 8 2 3\n5\n1 1 1 1 10\n\n\n\nSample Output:\n\n5\n2\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n6\n2 1 8 8 2 3\n5\n1 1 1 1 10\n\n\nSample Output:\n\n5\n2\n\n\n",
    "Description": "\nProblem Statement:\n\n\nFor the grand opening of the algorithmic games in NlogNsglow, a row of tower blocks is set to be demolished in a grand demonstration of renewal. Originally the plan was to accomplish this with controlled explosions, one for each tower block, but time constraints now require a hastier solution. To help you remove the blocks more rapidly you have been given the use of a Universal Kinetic / Incandescent Energy Particle Cannon (UKIEPC). On a single charge, this cutting-edge contraption can remove either all of the floors in a single tower block, or all the x-th floors in all the blocks simultaneously, for user's choice of the floor number x. In the latter case, the blocks that are less than x floors high are left untouched, while for blocks having more than x floors, all the floors above the removed x-th one fall down by one level.\nTask\nGiven the number of floors of all towers, output the minimum number of charges needed to eliminate all floors of all blocks.\n\n\n",
    "Title": "299. Opening Ceremony",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=299",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nOutput one line containing one integer: the minimum number of charges needed to tear down all the blocks.\n\n\n"
  },
  "2190": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input contains a single integer n (1 \u2264\u0014 n \u2264\u0014 500), denoting the number of nodes in the system. Then follow n lines, each containing two integers x, y (-10 000 \u0014 x, y \u0014 10 000); the numbers in the i-th line denote the coordinates on the plate of the i-th node. No two nodes are located at the same point. The next line of the input contains a single integer m (0 \u2264\u0014 m \u2264\u0014 2000), denoting the number of wires in the system. Then follow m lines; each line contains a description of a wire as a pair of integers a, b (1 \u0014\u2264 a, b \u2264\u0014 n, a \u2260 b), denoting the indices of the nodes that are connected by the wire. You may assume that no two nodes are connected by more than one wire, and no wire connects a node with itself. \nThe next line of the input contains a single integer l (1 \u0014\u2264 l \u2264\u0014 nC2\u0001), denoting the length of the list of potential initial positions prepared by the physicists. Then follow ` lines, each containing two integers a, b (1 \u0014\u2264 a, b \u2264\u0014 n, a \u2260 b), denoting the indices of the initial nodes A and B, respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n300. Particle Swapping\n\n\n\n\n\nProblem Statement:\n\n\nThe research team of prof. Feynmansson is preparing a new groundbreaking experiment in particle physics. On a special plate they have prepared a system consisting of a number of nodes connected via wires1. In the beginning of the experiment a pair of particles appears at two different nodes of the system: one normal particle of matter appears at some node A, and one corresponding particle of antimatter appears at some node B. The goal of the experiment is to swap these particles, i.e., to arrive at a state where the normal particle is at node B and the antiparticle is at node A. This state should be reached by a sequence of moves, where each move consists of transmitting one of the particles from its current location to a neighbouring node via a wire.\n\nAs you probably remember from popular science TV programmes, playing with matter and antimatter is usually not that safe. In particular, if particles of matter and antimatter get too close to each other, they will annihilate each other blowing up the whole experiment. Therefore, the research team would like to swap the locations of the particles in such a manner that the minimum Euclidean distance between them during the experiment is as large as possible. This minimum distance is called the safeness of the experiment. For simplicity, we assume that while a particle is transmitted via a wire we do not consider its location; in other words, the only risky moments during the experiment are when both particles are at some nodes. You may assume that it is always possible to swap the particles with positive safeness, that is, so that the particles are never placed at the same node during swapping. Another catch is that the physicists do not know precisely where the particles will appear. They have made a list of potential pairs of initial locations (A,B), and for each of them they would like to know the maximum possible safeness of swapping the particles. Help them in this task.\n\n\n\n\nInput Format:\n\n\nThe first line of the input contains a single integer n (1 \u2264\u0014 n \u2264\u0014 500), denoting the number of nodes in the system. Then follow n lines, each containing two integers x, y (-10 000 \u0014 x, y \u0014 10 000); the numbers in the i-th line denote the coordinates on the plate of the i-th node. No two nodes are located at the same point. The next line of the input contains a single integer m (0 \u2264\u0014 m \u2264\u0014 2000), denoting the number of wires in the system. Then follow m lines; each line contains a description of a wire as a pair of integers a, b (1 \u0014\u2264 a, b \u2264\u0014 n, a \u2260 b), denoting the indices of the nodes that are connected by the wire. You may assume that no two nodes are connected by more than one wire, and no wire connects a node with itself. \nThe next line of the input contains a single integer l (1 \u0014\u2264 l \u2264\u0014 nC2\u0001), denoting the length of the list of potential initial positions prepared by the physicists. Then follow ` lines, each containing two integers a, b (1 \u0014\u2264 a, b \u2264\u0014 n, a \u2260 b), denoting the indices of the initial nodes A and B, respectively.\n\n\n\n\nOutput Format:\n\n\nOutput exactly ` lines. The i-th line of the output should contain a single floating point number, being the maximum possible safeness for the i-th pair of initial positions listed by the physicists. Absolute or relative errors of value at most 10-6 will be tolerated.\n\n\n\n\nSample Input:\n\n6\n0 0\n-1 3\n-1 0\n-1 -3\n3 0\n0 1\n6\n1 2\n2 3\n3 4\n4 1\n1 5\n5 6\n5\n6 5\n2 4\n2 6\n3 6\n4 6\n\n\n\n\nSample Output:\n\n1.00000000\n3.16227766\n2.23606798\n1.41421356\n3.16227766\n\n\n\n\nNotes:\n\n\n1The wires may cross each other on the plate.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3-10 second(s)\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n6\n0 0\n-1 3\n-1 0\n-1 -3\n3 0\n0 1\n6\n1 2\n2 3\n3 4\n4 1\n1 5\n5 6\n5\n6 5\n2 4\n2 6\n3 6\n4 6\n\n\n\nSample Output:\n\n1.00000000\n3.16227766\n2.23606798\n1.41421356\n3.16227766\n\n\n",
    "Description": "\nProblem Statement:\n\n\nThe research team of prof. Feynmansson is preparing a new groundbreaking experiment in particle physics. On a special plate they have prepared a system consisting of a number of nodes connected via wires1. In the beginning of the experiment a pair of particles appears at two different nodes of the system: one normal particle of matter appears at some node A, and one corresponding particle of antimatter appears at some node B. The goal of the experiment is to swap these particles, i.e., to arrive at a state where the normal particle is at node B and the antiparticle is at node A. This state should be reached by a sequence of moves, where each move consists of transmitting one of the particles from its current location to a neighbouring node via a wire.\n\nAs you probably remember from popular science TV programmes, playing with matter and antimatter is usually not that safe. In particular, if particles of matter and antimatter get too close to each other, they will annihilate each other blowing up the whole experiment. Therefore, the research team would like to swap the locations of the particles in such a manner that the minimum Euclidean distance between them during the experiment is as large as possible. This minimum distance is called the safeness of the experiment. For simplicity, we assume that while a particle is transmitted via a wire we do not consider its location; in other words, the only risky moments during the experiment are when both particles are at some nodes. You may assume that it is always possible to swap the particles with positive safeness, that is, so that the particles are never placed at the same node during swapping. Another catch is that the physicists do not know precisely where the particles will appear. They have made a list of potential pairs of initial locations (A,B), and for each of them they would like to know the maximum possible safeness of swapping the particles. Help them in this task.\n\n\n",
    "Title": "300. Particle Swapping",
    "Notes": "\nNotes:\n\n\n1The wires may cross each other on the plate.\n\n",
    "URL": "https://a2oj.com/p?ID=300",
    "Time Limit": "3-10 second(s)",
    "Output Description": "\nOutput Format:\n\n\nOutput exactly ` lines. The i-th line of the output should contain a single floating point number, being the maximum possible safeness for the i-th pair of initial positions listed by the physicists. Absolute or relative errors of value at most 10-6 will be tolerated.\n\n\n"
  },
  "2191": {
    "Input Description": "\nInput Format:\n\n\nThe first line of input contains two integers n and k (1 \u2264\u0014 k \u0014\u2264 n \u0014\u2264 1000), where n denotes the\ntotal number of participants and k denotes the number of places on the bus. The second line contains n integers xi for i = 1, 2, . . . , n, where 1 \u2264\u0014 xi \u2264\u0014 n. The meaning of xi is that the i-th participant will refuse to join the excursion unless the xi-th participant also joins.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n302. Outing\n\n\n\n\n\nProblem Statement:\n\n\nOrganising a group trip for the elderly can be a daunting task... Not least because of the fussy participants, each of whom will only make the trip on condition that some other participant also comes. After some effort, you have taken from each of your participants a number, indicating that this participant will refuse to join the excursion unless the participant with that number also joins? the less choosy simply give their own number. This would be easy enough to resolve (just send all of them) but the bus you are going to use during the trip has only a fixed number of places.\n\nTask\n\nGiven the preferences of all participants, find the maximum number of participants that can join.\n\n\n\n\nInput Format:\n\n\nThe first line of input contains two integers n and k (1 \u2264\u0014 k \u0014\u2264 n \u0014\u2264 1000), where n denotes the\ntotal number of participants and k denotes the number of places on the bus. The second line contains n integers xi for i = 1, 2, . . . , n, where 1 \u2264\u0014 xi \u2264\u0014 n. The meaning of xi is that the i-th participant will refuse to join the excursion unless the xi-th participant also joins.\n\n\n\n\nOutput Format:\n\n\nOutput one integer: the maximum number of participants that can join the excursion, so that all\nthe participants? preferences are obeyed and the capacity of the bus is not exceeded.\n\n\n\n\nSample Input:\n\n4 4\n1 2 3 4\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n5 4\n2 3 1 5 4\n\n\n\nSample Output:\n\n4\n2\n3\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n4 4\n1 2 3 4\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n5 4\n2 3 1 5 4\n\n\nSample Output:\n\n4\n2\n3\n\n\n",
    "Description": "\nProblem Statement:\n\n\nOrganising a group trip for the elderly can be a daunting task... Not least because of the fussy participants, each of whom will only make the trip on condition that some other participant also comes. After some effort, you have taken from each of your participants a number, indicating that this participant will refuse to join the excursion unless the participant with that number also joins? the less choosy simply give their own number. This would be easy enough to resolve (just send all of them) but the bus you are going to use during the trip has only a fixed number of places.\n\nTask\n\nGiven the preferences of all participants, find the maximum number of participants that can join.\n\n\n",
    "Title": "302. Outing",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=302",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nOutput one integer: the maximum number of participants that can join the excursion, so that all\nthe participants? preferences are obeyed and the capacity of the bus is not exceeded.\n\n\n"
  },
  "2192": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains a single integer n (2 \u2264\u0014 n \u2264\u0014 200000), the number of hands on the clock. Each of the next two lines contains n integers ai (0 \u0014\u2264 ai < 360000), representing the angles of the hands of the clock on one of the images, in thousandths of a degree. The first line represents the position of the hands on the first image, whereas the second line corresponds to the second image. The number ai denotes the angle between the recorded position of some hand and the upward direction in the image, measured clockwise. Angles of the same clock are distinct and are not given in any specific order.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n303. Clock Pictures\n\n\n\n\n\nProblem Statement:\n\n\nYou have two pictures of an unusual kind of clock. The clock has n hands, each having the same length and no kind of marking whatsoever. Also, the numbers on the clock are so faded that you can?t even tell anymore what direction is up in the picture. So the only thing that you see on the pictures, are n shades of the n hands, and nothing else. You?d like to know if both images might have been taken at exactly the same time of the day, possibly with the camera rotated at different angles.\n\nTask\n\nGiven the description of the two images, determine whether it is possible that these two pictures could be showing the same clock displaying the same time.\n\n\n\n\nInput Format:\n\n\nThe first line contains a single integer n (2 \u2264\u0014 n \u2264\u0014 200000), the number of hands on the clock. Each of the next two lines contains n integers ai (0 \u0014\u2264 ai < 360000), representing the angles of the hands of the clock on one of the images, in thousandths of a degree. The first line represents the position of the hands on the first image, whereas the second line corresponds to the second image. The number ai denotes the angle between the recorded position of some hand and the upward direction in the image, measured clockwise. Angles of the same clock are distinct and are not given in any specific order.\n\n\n\n\nOutput Format:\n\n\nOutput one line containing one word: \"possible\" if the clocks could be showing the same time, \"impossible\" otherwise.\n\n\n\n\nSample Input:\n\n6\n1 2 3 4 5 6\n7 6 5 4 3 1\n2\n0 270000\n180000 270000\n7\n140 130 110 120 125 100 105\n235 205 215 220 225 200 240\n\n\n\nSample Output:\n\nimpossible\npossible\nimpossible\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3-5 second(s)\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n6\n1 2 3 4 5 6\n7 6 5 4 3 1\n2\n0 270000\n180000 270000\n7\n140 130 110 120 125 100 105\n235 205 215 220 225 200 240\n\n\nSample Output:\n\nimpossible\npossible\nimpossible\n\n",
    "Description": "\nProblem Statement:\n\n\nYou have two pictures of an unusual kind of clock. The clock has n hands, each having the same length and no kind of marking whatsoever. Also, the numbers on the clock are so faded that you can?t even tell anymore what direction is up in the picture. So the only thing that you see on the pictures, are n shades of the n hands, and nothing else. You?d like to know if both images might have been taken at exactly the same time of the day, possibly with the camera rotated at different angles.\n\nTask\n\nGiven the description of the two images, determine whether it is possible that these two pictures could be showing the same clock displaying the same time.\n\n\n",
    "Title": "303. Clock Pictures",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=303",
    "Time Limit": "3-5 second(s)",
    "Output Description": "\nOutput Format:\n\n\nOutput one line containing one word: \"possible\" if the clocks could be showing the same time, \"impossible\" otherwise.\n\n\n"
  },
  "2193": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input contains a single integer n (1 \u2264\u0014 n \u2264\u0014 2000), denoting the number of lines in the input picture. Then follow n lines, each containing a description of one line in the input picture. The line is given as a pair of distinct points lying on it. That is, the description consists of four integers x1, y1, x2, y2, each of them of absolute value at most 10000, such that the line passes through points (x1, y1) and (x2, y2). You may assume that points (x1, y1) and (x2, y2) are different, and also that all the lines in the picture are pairwise different.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n304. How many squares?\n\n\n\n\n\nProblem Statement:\n\n\nWhile browsing the internet, of course using Internet Explorer without any adblocker, you have noticed a number of interesting competitions advertised in the panels on various webpages. In most of these competitions you need to answer a simple question, like how many triangles/squares/rectangles there are in a picture, or even choose the right answer out of three possibilities. Despite the simplicity of the task, it seems that there are many valuable prizes to be won. So there is definitely something to compete for! In order to increase your chances, you decided to write a simple program that will solve the problem for you. You decided to focus first on the question ?How many squares are there in the picture??, and to simplify the problem even more, you assume that the input picture consists only of a number of lines that are infinite in both directions. To be precise, we say that four lines l1, l2, l3, l4 in the picture form a square if lines l1 and l3 are parallel to each other and perpendicular to l2 and l4, and moreover the distance between l1 and l3 is the same as the distance between l2 and l4.\n\n\n\n\nInput Format:\n\n\nThe first line of the input contains a single integer n (1 \u2264\u0014 n \u2264\u0014 2000), denoting the number of lines in the input picture. Then follow n lines, each containing a description of one line in the input picture. The line is given as a pair of distinct points lying on it. That is, the description consists of four integers x1, y1, x2, y2, each of them of absolute value at most 10000, such that the line passes through points (x1, y1) and (x2, y2). You may assume that points (x1, y1) and (x2, y2) are different, and also that all the lines in the picture are pairwise different.\n\n\n\n\nOutput Format:\n\n\nOutput exactly one line with one integer, denoting the total number of squares formed by the lines in the picture.\n\n\n\n\nSample Input:\n\n10\n0 0 1 0\n0 1 1 1\n0 2 2 2\n0 0 0 4\n1 -1 1 0\n2 -2 2 2\n1 1 2 2\n1 1 0 2\n3 1 2 2\n1 3 0 2\n\n\n\nSample Output:\n\n6\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n10\n0 0 1 0\n0 1 1 1\n0 2 2 2\n0 0 0 4\n1 -1 1 0\n2 -2 2 2\n1 1 2 2\n1 1 0 2\n3 1 2 2\n1 3 0 2\n\n\nSample Output:\n\n6\n\n\n",
    "Description": "\nProblem Statement:\n\n\nWhile browsing the internet, of course using Internet Explorer without any adblocker, you have noticed a number of interesting competitions advertised in the panels on various webpages. In most of these competitions you need to answer a simple question, like how many triangles/squares/rectangles there are in a picture, or even choose the right answer out of three possibilities. Despite the simplicity of the task, it seems that there are many valuable prizes to be won. So there is definitely something to compete for! In order to increase your chances, you decided to write a simple program that will solve the problem for you. You decided to focus first on the question ?How many squares are there in the picture??, and to simplify the problem even more, you assume that the input picture consists only of a number of lines that are infinite in both directions. To be precise, we say that four lines l1, l2, l3, l4 in the picture form a square if lines l1 and l3 are parallel to each other and perpendicular to l2 and l4, and moreover the distance between l1 and l3 is the same as the distance between l2 and l4.\n\n\n",
    "Title": "304. How many squares?",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=304",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nOutput exactly one line with one integer, denoting the total number of squares formed by the lines in the picture.\n\n\n"
  },
  "2194": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input contains two integers t and n (4 \u0014\u2264 t <\u2264 180 and 1 \u2264\u0014 n \u2264\u0014 250), where t is the time in seconds needed for a car to pass the segment under maintenance, and n is the total number of cars arriving at the segment. The following n lines describe the cars. The i-th line contains the description of the i-th car in the following format:\n\n\u000f- one character d, being W for cars arriving at the west endpoint of the segment, and E for the ones that arrive at the east endpoint; and\n-\u000f two integers a and r (0 \u2264\u0014 a < 86400 and 0 \u2264\u0014 r \u2264\u0014 3600), where a denotes the arrival time in seconds after midnight, and r denotes the time in seconds it takes for the driver to get irritated. \n\nThe cars arrive in the order specified in the input and they cannot overtake each other. In particular, a car whose driver is already irritated has to stay in the queue until eventually receiving the \"go\" and passing the maintained segment.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n305. Road Work\n\n\n\n\n\nProblem Statement:\n\n\nPer is repairing roads. The job is concentrated on roads with one lane in each direction. Thus, when Per closes down the lane in one direction, all traffic has to go through the other lane. This is done by allowing only one direction of travel at any time. Per is often assigned the task of directing the traffic through this lane.\n\nNo car drives before being given a \"go\" signal from Per, and all the cars drive through the maintained segment at the same speed. Because there is only one lane, cars in one direction must leave the segment before cars in the other direction can enter. For safety reasons, cars driving in the same direction have to keep a distance of at least 3 seconds between each other. For example, if cars A and B arrive at the west endpoint at second 10, Per can let them go at earliest second 10 and 13 in the order they arrived. If it, in this example, takes 8 seconds to pass and car C arrives at the east endpoint at second 17, then car C has to wait 4 seconds until Per lets it go at second 21.\n\nThere is a problem of drivers getting irritated with Per; they think they have to stop for too long. Per has been logging how long they can bear to wait before they get irritated. One day, to be able to evaluate his work, Per noted down when the cars arrived at the two endpoints of the segment. Per?s question is the following: what is the least number of drivers that can be irritated? We assume that a driver gets irritated if the time between the moment he arrives at the maintained segment and the moment he is actually given the \"go\" exceeds his irritation time limit.\n\n\n\n\nInput Format:\n\n\nThe first line of the input contains two integers t and n (4 \u0014\u2264 t <\u2264 180 and 1 \u2264\u0014 n \u2264\u0014 250), where t is the time in seconds needed for a car to pass the segment under maintenance, and n is the total number of cars arriving at the segment. The following n lines describe the cars. The i-th line contains the description of the i-th car in the following format:\n\n\u000f- one character d, being W for cars arriving at the west endpoint of the segment, and E for the ones that arrive at the east endpoint; and\n-\u000f two integers a and r (0 \u2264\u0014 a < 86400 and 0 \u2264\u0014 r \u2264\u0014 3600), where a denotes the arrival time in seconds after midnight, and r denotes the time in seconds it takes for the driver to get irritated. \n\nThe cars arrive in the order specified in the input and they cannot overtake each other. In particular, a car whose driver is already irritated has to stay in the queue until eventually receiving the \"go\" and passing the maintained segment.\n\n\n\n\nOutput Format:\n\n\nOutput one line with the least possible number of irritated drivers.\n\n\n\n\nSample Input:\n\n8 3\nW 10 0\nW 10 3\nE 17 4\n100 5\nW 0 200\nW 5 201\nE 95 1111\nE 95 1\nE 95 11\n\n\n\nSample Output:\n\n0\n1\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n8 3\nW 10 0\nW 10 3\nE 17 4\n100 5\nW 0 200\nW 5 201\nE 95 1111\nE 95 1\nE 95 11\n\n\nSample Output:\n\n0\n1\n\n\n",
    "Description": "\nProblem Statement:\n\n\nPer is repairing roads. The job is concentrated on roads with one lane in each direction. Thus, when Per closes down the lane in one direction, all traffic has to go through the other lane. This is done by allowing only one direction of travel at any time. Per is often assigned the task of directing the traffic through this lane.\n\nNo car drives before being given a \"go\" signal from Per, and all the cars drive through the maintained segment at the same speed. Because there is only one lane, cars in one direction must leave the segment before cars in the other direction can enter. For safety reasons, cars driving in the same direction have to keep a distance of at least 3 seconds between each other. For example, if cars A and B arrive at the west endpoint at second 10, Per can let them go at earliest second 10 and 13 in the order they arrived. If it, in this example, takes 8 seconds to pass and car C arrives at the east endpoint at second 17, then car C has to wait 4 seconds until Per lets it go at second 21.\n\nThere is a problem of drivers getting irritated with Per; they think they have to stop for too long. Per has been logging how long they can bear to wait before they get irritated. One day, to be able to evaluate his work, Per noted down when the cars arrived at the two endpoints of the segment. Per?s question is the following: what is the least number of drivers that can be irritated? We assume that a driver gets irritated if the time between the moment he arrives at the maintained segment and the moment he is actually given the \"go\" exceeds his irritation time limit.\n\n\n",
    "Title": "305. Road Work",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=305",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nOutput one line with the least possible number of irritated drivers.\n\n\n"
  },
  "2195": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains two integers C and n (1 \u2264\u0014 C \u2264\u0014 109, 2 \u2264\u0014 n \u2264\u0014 100), the total capacity and the number of stations the train stops in. The next n lines contain three integers each, the number of people that left the train, entered the train, and had to stay at a station. Lines are given in the same order as the train visits each station. All integers are between 0 and 109 inclusive.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n306. Train Passengers\n\n\n\n\n\nProblem Statement:\n\n\nThe Nordic Company of Passing Carriages is losing money at an alarming rate because most of their trains are empty. However, on some lines the passengers are complaining that they cannot fit in the cars and have to wait for the next train! The authorities want to fix this situation. They asked their station masters to write down, for a given train, how many people left the train at their station, how many went in, and how many had to wait. Then they hired your company of highly paid consultants to assign properly sized trains to their routes.\n\nYou just received the measurements for a train, but before feeding them to your optimisation algorithm you remembered that they were collected on a snowy day, so any sensible station master would have preferred to stay inside their cabin and make up the numbers instead of going outside and counting. \n\nVerify your hunch by checking whether the input is inconsistent, i.e., at every time the number of people in the train did not exceed the capacity nor was below 0 and no passenger waited in vain. The train should start and finish the journey empty, in particular passengers should not wait for the train at the last station. At each station passengers first leave, then others enter.\n\n\n\n\nInput Format:\n\n\nThe first line contains two integers C and n (1 \u2264\u0014 C \u2264\u0014 109, 2 \u2264\u0014 n \u2264\u0014 100), the total capacity and the number of stations the train stops in. The next n lines contain three integers each, the number of people that left the train, entered the train, and had to stay at a station. Lines are given in the same order as the train visits each station. All integers are between 0 and 109 inclusive.\n\n\n\n\nOutput Format:\n\n\nOne line containing one word: \"possible\" if the measurements are consistent, \"impossible\" otherwise.\n\n\n\n\nSample Input:\n\n1 2\n0 1 1\n1 0 0\n1 2\n1 0 0\n0 1 0\n1 2\n0 1 0\n1 0 1\n1 2\n0 1 1\n0 0 0\n\n\n\n\nSample Output:\n\npossible\nimpossible\nimpossible\nimpossible\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-10-21 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Nordic Collegiate Programming Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n1 2\n0 1 1\n1 0 0\n1 2\n1 0 0\n0 1 0\n1 2\n0 1 0\n1 0 1\n1 2\n0 1 1\n0 0 0\n\n\n\nSample Output:\n\npossible\nimpossible\nimpossible\nimpossible\n\n\n",
    "Description": "\nProblem Statement:\n\n\nThe Nordic Company of Passing Carriages is losing money at an alarming rate because most of their trains are empty. However, on some lines the passengers are complaining that they cannot fit in the cars and have to wait for the next train! The authorities want to fix this situation. They asked their station masters to write down, for a given train, how many people left the train at their station, how many went in, and how many had to wait. Then they hired your company of highly paid consultants to assign properly sized trains to their routes.\n\nYou just received the measurements for a train, but before feeding them to your optimisation algorithm you remembered that they were collected on a snowy day, so any sensible station master would have preferred to stay inside their cabin and make up the numbers instead of going outside and counting. \n\nVerify your hunch by checking whether the input is inconsistent, i.e., at every time the number of people in the train did not exceed the capacity nor was below 0 and no passenger waited in vain. The train should start and finish the journey empty, in particular passengers should not wait for the train at the last station. At each station passengers first leave, then others enter.\n\n\n",
    "Title": "306. Train Passengers",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=306",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nOne line containing one word: \"possible\" if the measurements are consistent, \"impossible\" otherwise.\n\n\n"
  },
  "2196": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T lines, each line is a test case which consists of two integers separated by a single space X and Y (1\u2009\u2264\u2009X,\u2009Y\u2009\u2264\u2009106) denoting the numbers described in the problem statement.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n307. Buses To Sharm\n\n\n\n\n\nProblem Statement:\n\n\nThe ACM Arab Collegiate Programming Contest (ACPC) 2013 was held in Sharm el-Sheikh at the end of November 2013. Teams from Cairo and Alexandria traveled to the region by bus, and due to the security checks, the trip took 10 hours (4 hours more than normal). Khaled Sami Mohamed, one of the contestants in that region, was also serving in the Egyptian Army his mandatory military service at that time. Since he already spends long periods of time in the army guarding (or as its called \"Khedma\"), Khaled invented a game to play during these periods so he won't get bored. Seeing that the other contestants were also bored in the bus, he decided to tell them his game. The game is as follows: given two numbers X and Y, skip X letters from the beginning of the string \"ACM-ACPC-2013\" (without quotes), then skip another Y letters after that (wrapping around to the beginning if you reach the end of the string) and print the letter that appears first after skipping both times.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T lines, each line is a test case which consists of two integers separated by a single space X and Y (1\u2009\u2264\u2009X,\u2009Y\u2009\u2264\u2009106) denoting the numbers described in the problem statement.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then C which is the letter described in the problem statement.\n\n\n\n\nSample Input:\n\n4\n1 1\n11 5\n20 3\n10000 21991\n\n\n\nSample Output:\n\nCase 1: M\nCase 2: -\nCase 3: 0\nCase 4: 1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n1 1\n11 5\n20 3\n10000 21991\n\n\nSample Output:\n\nCase 1: M\nCase 2: -\nCase 3: 0\nCase 4: 1\n\n",
    "Description": "\nProblem Statement:\n\n\nThe ACM Arab Collegiate Programming Contest (ACPC) 2013 was held in Sharm el-Sheikh at the end of November 2013. Teams from Cairo and Alexandria traveled to the region by bus, and due to the security checks, the trip took 10 hours (4 hours more than normal). Khaled Sami Mohamed, one of the contestants in that region, was also serving in the Egyptian Army his mandatory military service at that time. Since he already spends long periods of time in the army guarding (or as its called \"Khedma\"), Khaled invented a game to play during these periods so he won't get bored. Seeing that the other contestants were also bored in the bus, he decided to tell them his game. The game is as follows: given two numbers X and Y, skip X letters from the beginning of the string \"ACM-ACPC-2013\" (without quotes), then skip another Y letters after that (wrapping around to the beginning if you reach the end of the string) and print the letter that appears first after skipping both times.\n\n\n",
    "Title": "307. Buses To Sharm",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=307",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then C which is the letter described in the problem statement.\n\n\n"
  },
  "2197": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T lines, each line is a test case which consists of C characters denoting the the blocks for each team as described in the problem statement (1\u2009\u2264\u2009C\u2009\u2264\u2009106).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n308. Enter The Contest\n\n\n\n\n\nProblem Statement:\n\n\nDuring the ACPC 2013, the contest floor was divided into 26 blocks. Each block contained a set of tables for teams. Loubna Benguit (Maghreb Area Coordinator at ACM ACPC Arab Collegiate Programming Contest, Publicity Committee Chair at IEEE ENSIAS Student Branch. and Vice Chair of Executive Committee at ACM-Morocco) was responsible for making the teams enter the contest floor. To start the contest on time, she needed to estimate the total time for all the teams to reach their table. The time needed for a team to reach their table depends on which block it's in, which is equal to (in minutes) the row number of the block plus the column number of the block.\n\n\n\nFor example: a team can reach their table located in block A in 2 minutes and their table in block Z in 7 minutes. For each team in the contest, you know the block in which their table is located, please help Loubna to compute the time needed for all the teams to reach their tables to be able to start the contest on time. Remember only one team can be moving on the contest floor at a time.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Followed by T lines, each line is a test case which consists of C characters denoting the the blocks for each team as described in the problem statement (1\u2009\u2264\u2009C\u2009\u2264\u2009106).\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then X which is the the time needed to all teams to reach their blocks.\n\n\n\n\nSample Input:\n\n4\nAZB\nAAA\nZJF\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n\n\nSample Output:\n\nCase 1: 12\nCase 2: 6\nCase 3: 17\nCase 4: 157\n\n\n\nNotes:\n\n\nIn the first test-case the first team needs 2 minutes to reach block A, the second team needs 7 minutes to reach block Z and the last team needs 3 minutes to reach block B, so the total time is 12.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n4\nAZB\nAAA\nZJF\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n\nSample Output:\n\nCase 1: 12\nCase 2: 6\nCase 3: 17\nCase 4: 157\n\n",
    "Description": "\nProblem Statement:\n\n\nDuring the ACPC 2013, the contest floor was divided into 26 blocks. Each block contained a set of tables for teams. Loubna Benguit (Maghreb Area Coordinator at ACM ACPC Arab Collegiate Programming Contest, Publicity Committee Chair at IEEE ENSIAS Student Branch. and Vice Chair of Executive Committee at ACM-Morocco) was responsible for making the teams enter the contest floor. To start the contest on time, she needed to estimate the total time for all the teams to reach their table. The time needed for a team to reach their table depends on which block it's in, which is equal to (in minutes) the row number of the block plus the column number of the block.\n\n\n\nFor example: a team can reach their table located in block A in 2 minutes and their table in block Z in 7 minutes. For each team in the contest, you know the block in which their table is located, please help Loubna to compute the time needed for all the teams to reach their tables to be able to start the contest on time. Remember only one team can be moving on the contest floor at a time.\n\n\n",
    "Title": "308. Enter The Contest",
    "Notes": "\nNotes:\n\n\nIn the first test-case the first team needs 2 minutes to reach block A, the second team needs 7 minutes to reach block Z and the last team needs 3 minutes to reach block B, so the total time is 12.\n\n",
    "URL": "https://a2oj.com/p?ID=308",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then X which is the the time needed to all teams to reach their blocks.\n\n\n"
  },
  "2198": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Each test case consists of two lines. The first line is the word itself with length A (7 \u2264 A \u2264 20). The second line is the sequence of guessed characters with length B (1 \u2264 B \u2264 100). Input consists only of lowercase alphabets. It's guaranteed that the string of guessed characters doesn't continue after the game ends.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n309. Hangman\n\n\n\n\n\nProblem Statement:\n\n\nAhmed Adel Badr Mohamed El-Sayed, Marwan Mostafa Fahmy Naggar and Mohamed Ossama Saleh Ahmed (AKA Badr, Marwan and Mosa are contestants in Bugs Factory team that qualified to ACM-ICPC World Finals in Ekaterinburg, Russia 2014, and the first two are interns in Facebook) were playing with each other hangman. Hangman is a paper and pencil guessing game. One player thinks of a word and the other tries to guess it by suggesting letters. The word to guess is represented by a row of asterisks, giving the number of letters. If the guessing player suggests a letter, which occurs in the word, the other player writes it in all its correct positions. If the suggested letter does not occur in the word, the other player draws one element of the hanged man stick figure.\n\nThe following example game illustrates a player trying to guess the word hangman.\n\n\n\nGuesser loses =  the answer was \"hangman\".\nThe game is over when:\n1. The guessing player completes the word, or guesses the whole word correctly.\n\n2. The other player completes the diagram of the hanged man.\n\nMosa told them enough playing let's start training, but Badr and Marwan challenged him to write a program to simulate the game of Hangman: Given the secret word of hangman and the sequence of guessed letters, it outputs the final state of hangman using ASCII art as shown in the diagrams above. Can you help Mosa write this program?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Each test case consists of two lines. The first line is the word itself with length A (7 \u2264 A \u2264 20). The second line is the sequence of guessed characters with length B (1 \u2264 B \u2264 100). Input consists only of lowercase alphabets. It's guaranteed that the string of guessed characters doesn't continue after the game ends.\n\n\n\n\nOutput Format:\n\n\nFollow the output format in the output section. Separate between test cases by an empty line.\n\n\n\n\nSample Input:\n\n2\nhangman\ncbnahe\nentkhbo\nel\n\n\n\nSample Output:\n\n+=====================+\n|Word:  h a n * * a n |\n|Misses: c,b,e        |\n|  +===+              |\n|  |   |              |\n|  O   |              |\n| /|   |              |\n|      |              |\n|      |              |\n|=======              |\n+=====================+\n\n+=====================+\n|Word:  e * * * * * * |\n|Misses: l            |\n|  +===+              |\n|  |   |              |\n|  O   |              |\n|      |              |\n|      |              |\n|      |              |\n|=======              |\n+=====================+\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\nhangman\ncbnahe\nentkhbo\nel\n\n\nSample Output:\n\n+=====================+\n|Word:  h a n * * a n |\n|Misses: c,b,e        |\n|  +===+              |\n|  |   |              |\n|  O   |              |\n| /|   |              |\n|      |              |\n|      |              |\n|=======              |\n+=====================+\n\n+=====================+\n|Word:  e * * * * * * |\n|Misses: l            |\n|  +===+              |\n|  |   |              |\n|  O   |              |\n|      |              |\n|      |              |\n|      |              |\n|=======              |\n+=====================+\n\n",
    "Description": "\nProblem Statement:\n\n\nAhmed Adel Badr Mohamed El-Sayed, Marwan Mostafa Fahmy Naggar and Mohamed Ossama Saleh Ahmed (AKA Badr, Marwan and Mosa are contestants in Bugs Factory team that qualified to ACM-ICPC World Finals in Ekaterinburg, Russia 2014, and the first two are interns in Facebook) were playing with each other hangman. Hangman is a paper and pencil guessing game. One player thinks of a word and the other tries to guess it by suggesting letters. The word to guess is represented by a row of asterisks, giving the number of letters. If the guessing player suggests a letter, which occurs in the word, the other player writes it in all its correct positions. If the suggested letter does not occur in the word, the other player draws one element of the hanged man stick figure.\n\nThe following example game illustrates a player trying to guess the word hangman.\n\n\n\nGuesser loses =  the answer was \"hangman\".\nThe game is over when:\n1. The guessing player completes the word, or guesses the whole word correctly.\n\n2. The other player completes the diagram of the hanged man.\n\nMosa told them enough playing let's start training, but Badr and Marwan challenged him to write a program to simulate the game of Hangman: Given the secret word of hangman and the sequence of guessed letters, it outputs the final state of hangman using ASCII art as shown in the diagrams above. Can you help Mosa write this program?\n\n\n",
    "Title": "309. Hangman",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=309",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFollow the output format in the output section. Separate between test cases by an empty line.\n\n\n"
  },
  "2199": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by 3 * T lines, 3 lines per test case , the first line contains two integers M and B, the number of available items for purchase and the maximum budget (1 \u2264 M \u2264 106), (0 \u2264 B \u2264 107), the second line contains M integers which is the prices for each prize where price[i] is the price for prize i, (1 \u2264 price[i] \u2264 103) the third line contains M integers which is the customs taxes for each prize where customs[i] is the custom taxes for prize i (1 \u2264 customs[i] \u2264 103).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n310. Prizes\n\n\n\n\n\nProblem Statement:\n\n\nMohamed Fouad is the deputy regional director of the ACPC. While planning for the region in Sharm El-Sheikh 2013 he faced a problem as the funds collected by the fundraising team is a little bit lower than what he was expecting so he decided to cancel some of the prizes he was planning to buy for the winning teams. Since prizes were bought from USA, It should pass through the custom duties to be able to enter Egypt. The custom duties of an item depends on the number of items imported so the total money paid for item i is price[i] + customs[i] * (n - 1) where n is the number of items bought. Given the prices , customs and the budget what is the maximum number of prizes he can buy for the teams.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by 3 * T lines, 3 lines per test case , the first line contains two integers M and B, the number of available items for purchase and the maximum budget (1 \u2264 M \u2264 106), (0 \u2264 B \u2264 107), the second line contains M integers which is the prices for each prize where price[i] is the price for prize i, (1 \u2264 price[i] \u2264 103) the third line contains M integers which is the customs taxes for each prize where customs[i] is the custom taxes for prize i (1 \u2264 customs[i] \u2264 103).\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then x where x is maximum number of prizes Fouad can buy for the teams.\n\n\n\n\nSample Input:\n\n3\n6 55\n20 16 6 16 13 11\n13 1 12 16 9 16\n2 38\n14 19\n14 11\n6 1000\n19 19 7 5 3 1\n4 7 17 15 8 2\n\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 1\nCase 3: 6\n\n\n\nNotes:\n\n\n- In the first test case fouad may buy 2 prizes number 2 and 3 (1-based) with total cost (16 + 1*1) + (6+12*1) = 35\n\n- In the second test case fouad may buy only the first prize with total cost ( 14 + 14*0 )= 14 or he can buy the second prize with total cost ( 19 + 11*0 ) = 19\n\n- In the third test case due to the big budget fouad could buy all the six prizes\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n6 55\n20 16 6 16 13 11\n13 1 12 16 9 16\n2 38\n14 19\n14 11\n6 1000\n19 19 7 5 3 1\n4 7 17 15 8 2\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 1\nCase 3: 6\n\n",
    "Description": "\nProblem Statement:\n\n\nMohamed Fouad is the deputy regional director of the ACPC. While planning for the region in Sharm El-Sheikh 2013 he faced a problem as the funds collected by the fundraising team is a little bit lower than what he was expecting so he decided to cancel some of the prizes he was planning to buy for the winning teams. Since prizes were bought from USA, It should pass through the custom duties to be able to enter Egypt. The custom duties of an item depends on the number of items imported so the total money paid for item i is price[i] + customs[i] * (n - 1) where n is the number of items bought. Given the prices , customs and the budget what is the maximum number of prizes he can buy for the teams.\n\n\n",
    "Title": "310. Prizes",
    "Notes": "\nNotes:\n\n\n- In the first test case fouad may buy 2 prizes number 2 and 3 (1-based) with total cost (16 + 1*1) + (6+12*1) = 35\n\n- In the second test case fouad may buy only the first prize with total cost ( 14 + 14*0 )= 14 or he can buy the second prize with total cost ( 19 + 11*0 ) = 19\n\n- In the third test case due to the big budget fouad could buy all the six prizes\n\n",
    "URL": "https://a2oj.com/p?ID=310",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then x where x is maximum number of prizes Fouad can buy for the teams.\n\n\n"
  },
  "2200": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). The first line of each test case will be a single integer N, the number of the problems and contestants (1 \u2264 N \u2264 10). Followed by a matrix of (N * N) integer numbers where element j in row i is the time (in minutes) needed for contestant i to solve problem j, (1 \u2264 cell(i,j) \u2264 103).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n311. Swim in the Red Sea\n\n\n\n\n\nProblem Statement:\n\n\nMohamed Mahmoud Abd El-Wahab (AKA Fegla) the head of the scientific committee in the ACPC, a former ICPC world finalist and a coach for many Arab teams. The coach had many teams participating in the ACPC 2013 in Sharm El-Sheikh. The contestants requested from the coach a break to swim in the Red Sea. The coach agreed but under one condition: he gave the N contestants N problems and said if each one of them solved one problem, they can take a break. Given the time needed for each contestant to solve each problem, help the contestants to assign one problem to each one of them to minimize the time needed for them to achieve the goal requested by the coach. All the contestants will start solving the problems assigned to them at the same time, so the time needed to achieve the coach's goal is the time taken by the slowest contestant to solve his/her problem.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). The first line of each test case will be a single integer N, the number of the problems and contestants (1 \u2264 N \u2264 10). Followed by a matrix of (N * N) integer numbers where element j in row i is the time (in minutes) needed for contestant i to solve problem j, (1 \u2264 cell(i,j) \u2264 103).\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then X where X is minimum time needed to solve all the problems.\n\n\n\n\nSample Input:\n\n1\n5\n1 2 3 4 5\n3 2 1 9 8\n9 8 7 6 5\n5 4 3 2 1\n4 3 2 1 5\n\n\n\nSample Output:\n\nCase 1: 5\n\n\n\nNotes:\n\n\n- The best assignment of problems to contestants is: 1 3 5 2 4 with times: 1 1 5 4 5. Therefore the minimum time is 5.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n5\n1 2 3 4 5\n3 2 1 9 8\n9 8 7 6 5\n5 4 3 2 1\n4 3 2 1 5\n\n\nSample Output:\n\nCase 1: 5\n\n",
    "Description": "\nProblem Statement:\n\n\nMohamed Mahmoud Abd El-Wahab (AKA Fegla) the head of the scientific committee in the ACPC, a former ICPC world finalist and a coach for many Arab teams. The coach had many teams participating in the ACPC 2013 in Sharm El-Sheikh. The contestants requested from the coach a break to swim in the Red Sea. The coach agreed but under one condition: he gave the N contestants N problems and said if each one of them solved one problem, they can take a break. Given the time needed for each contestant to solve each problem, help the contestants to assign one problem to each one of them to minimize the time needed for them to achieve the goal requested by the coach. All the contestants will start solving the problems assigned to them at the same time, so the time needed to achieve the coach's goal is the time taken by the slowest contestant to solve his/her problem.\n\n\n",
    "Title": "311. Swim in the Red Sea",
    "Notes": "\nNotes:\n\n\n- The best assignment of problems to contestants is: 1 3 5 2 4 with times: 1 1 5 4 5. Therefore the minimum time is 5.\n\n",
    "URL": "https://a2oj.com/p?ID=311",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then X where X is minimum time needed to solve all the problems.\n\n\n"
  },
  "2201": {
    "Input Description": "\nInput Format:\n\n\nThe first line is the number of test cases T (1 \u2264 T \u2264 100). Following T test cases each test case starts with the number of nodes N (1 \u2264 N \u2264 1000) and the number of edges E separated by space. Then E lines each line represents an undirected edge. Each line consists of 3 integers representing the two ends of the edge and the length (1 \u2264 L \u2264 10000). The last line of each test case contains two numbers, the source node (where badr currently is) and the destination node where the safari will begin. If he can't find any path print \u2009-\u20091.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n312. Safari\n\n\n\n\n\nProblem Statement:\n\n\nDuring the last day in ACPC 2013 the contestants were taken to a safari trip as a third excursion after visiting Ras Muhammad National Park and Aqua Blu Sharm Aqua Park. The contestants went to this trip using beach buggies. Omar El-Mohandes (Contestant in team S2++) challenged Ahmed Adel Badr Mohamed El-Sayed (AKA Badr a contestant in Bugs Factory team, a world finalist in The ACM-ICPC world finals in Ekaterinburg, Russia 2014 and a Facebook intern) if he can go to the safari only through roads whose length in meters is a prime number (a natural number greater than 1 that has no positive divisors other than 1 and itself). Badr accepted the challenge and said to Omar \"I will do that through the shortest trip ever\". Given the roads and the lengths of the roads can you compute the total distance traveled by Badr.\n\n\n\n\nInput Format:\n\n\nThe first line is the number of test cases T (1 \u2264 T \u2264 100). Following T test cases each test case starts with the number of nodes N (1 \u2264 N \u2264 1000) and the number of edges E separated by space. Then E lines each line represents an undirected edge. Each line consists of 3 integers representing the two ends of the edge and the length (1 \u2264 L \u2264 10000). The last line of each test case contains two numbers, the source node (where badr currently is) and the destination node where the safari will begin. If he can't find any path print \u2009-\u20091.\n\n\n\n\nOutput Format:\n\n\nThe output should be like that:\n\nCase x: y\n\nx is the case number starting from 1.\n\ny is the total distance traveled by Badr.\n\nPrint a new line after each test case.\n\n\n\n\nSample Input:\n\n2\n5 5\n1 2 3\n2 3 3\n3 4 3\n4 5 3\n1 5 9\n1 5\n6 6\n1 2 3\n1 3 2\n2 5 8\n3 4 1\n4 6 5\n5 6 7\n1 6\n\n\n\nSample Output:\n\nCase 1: 12\nCase 2: -1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 5\n1 2 3\n2 3 3\n3 4 3\n4 5 3\n1 5 9\n1 5\n6 6\n1 2 3\n1 3 2\n2 5 8\n3 4 1\n4 6 5\n5 6 7\n1 6\n\n\nSample Output:\n\nCase 1: 12\nCase 2: -1\n\n",
    "Description": "\nProblem Statement:\n\n\nDuring the last day in ACPC 2013 the contestants were taken to a safari trip as a third excursion after visiting Ras Muhammad National Park and Aqua Blu Sharm Aqua Park. The contestants went to this trip using beach buggies. Omar El-Mohandes (Contestant in team S2++) challenged Ahmed Adel Badr Mohamed El-Sayed (AKA Badr a contestant in Bugs Factory team, a world finalist in The ACM-ICPC world finals in Ekaterinburg, Russia 2014 and a Facebook intern) if he can go to the safari only through roads whose length in meters is a prime number (a natural number greater than 1 that has no positive divisors other than 1 and itself). Badr accepted the challenge and said to Omar \"I will do that through the shortest trip ever\". Given the roads and the lengths of the roads can you compute the total distance traveled by Badr.\n\n\n",
    "Title": "312. Safari",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=312",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nThe output should be like that:\n\nCase x: y\n\nx is the case number starting from 1.\n\ny is the total distance traveled by Badr.\n\nPrint a new line after each test case.\n\n\n"
  },
  "2202": {
    "Input Description": "\nInput Format:\n\n\nThe input starts with T the number of test case (1 \u2264 T \u2264 100), then follows T lines each containing a query of 2 numbers A and B (1 \u2264 A \u2264 B \u2264 1015).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n313. ACPC got TALENT\n\n\n\n\n\nProblem Statement:\n\n\nNicole Hosh is a member in the media core team in the ACPC from Syria. Since she is very keen to make the ACPC one of the most enjoyable events for the contestants, she decided to make a big surprise for the ACPC contestants this year. Lots of our contestants have many hidden talents, and this year she wanted them to share what they have at the ACPC got TALENT event during the regional.\n\nOne of the contestants had a very strange talent. Given two numbers A and B, he can compute the sum of the weights of the numbers between and including A and B. The weight of a number is the sum of its unique digits. Can you help Nicole by writing a program to verify that he is answering correctly to their queries?\n\n\n\n\nInput Format:\n\n\nThe input starts with T the number of test case (1 \u2264 T \u2264 100), then follows T lines each containing a query of 2 numbers A and B (1 \u2264 A \u2264 B \u2264 1015).\n\n\n\n\nOutput Format:\n\n\nThe output should follow this format:\n\nCase x: y\n\nx is the test case number starting from 1.\n\ny is the answer to the query.\n\nPrint a new line after each test case.\n\n\n\n\nSample Input:\n\n5\n22 22\n1 10\n20 21\n73 675\n875123 98613629346773\n\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 46\nCase 3: 5\nCase 4: 6738\nCase 5: 3421327069276318\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n5\n22 22\n1 10\n20 21\n73 675\n875123 98613629346773\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 46\nCase 3: 5\nCase 4: 6738\nCase 5: 3421327069276318\n\n",
    "Description": "\nProblem Statement:\n\n\nNicole Hosh is a member in the media core team in the ACPC from Syria. Since she is very keen to make the ACPC one of the most enjoyable events for the contestants, she decided to make a big surprise for the ACPC contestants this year. Lots of our contestants have many hidden talents, and this year she wanted them to share what they have at the ACPC got TALENT event during the regional.\n\nOne of the contestants had a very strange talent. Given two numbers A and B, he can compute the sum of the weights of the numbers between and including A and B. The weight of a number is the sum of its unique digits. Can you help Nicole by writing a program to verify that he is answering correctly to their queries?\n\n\n",
    "Title": "313. ACPC got TALENT",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=313",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nThe output should follow this format:\n\nCase x: y\n\nx is the test case number starting from 1.\n\ny is the answer to the query.\n\nPrint a new line after each test case.\n\n\n"
  },
  "2203": {
    "Input Description": "\nInput Format:\n\n\nGiven the number of test cases T (1 \u2264 T \u2264 100), each test case is as the following:\n\nN [The number of play areas] (1 \u2264 N \u2264 15)\n\nC [The number of calories Marwan initially has] (1 \u2264 C \u2264 100)\n\nN-1 numbers [the ith number (starting from 1) should be the calories required to play in play area i]\n\nN*N Matrix [The jth element in the ith row represents the minimum number of calories needed to move from play area i to play area j]\n\nThe cost of playing at any play area will be a maximum of 10 calories, and the cost of moving between any 2 play areas will be a maximum of 10 calories.\n\nYou may assume that the N*N matrix contains the smallest number of calories needed to move between each 2 play areas.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n314. Aqua Blu Sharm Aqua Park\n\n\n\n\n\nProblem Statement:\n\n\nMarwan Mostafa Fahmy Naggar (A contestant in Bugs Factory team, a world finalist in The ACM-ICPC world finals in Ekaterinburg, Russia 2014 and a Facebook intern) was very tired after qualifying to the world finals in ACPC 2013. The next day after the contest, he won a free ticket to Aqua Blu Sharm Aqua Park and a free day in the hotel, all because of his achievement. The only problem was that he was very tired and did not have enough energy to visit all the play areas, such as water slides, splash pads, spray grounds (water playgrounds), lazy rivers, or other recreational bathing, swimming, and bare-footing environments. However since he used to know exactly how much calories he has (Marwan is too professional that he can know the maximum number of calories he wants to lose) and also he knows the number of calories lost in each play area, as well as the number of calories needed to move from each play area to the other. Can you help Marwan to know the maximum number of different play areas he can visit without losing more calories than the allowed maximum?\n\nInitially Marwan will be at the entrance of the Aqua Park (play area number 0) and no games are at the entrance. Marwan should start moving from there.\n\n\n\n\nInput Format:\n\n\nGiven the number of test cases T (1 \u2264 T \u2264 100), each test case is as the following:\n\nN [The number of play areas] (1 \u2264 N \u2264 15)\n\nC [The number of calories Marwan initially has] (1 \u2264 C \u2264 100)\n\nN-1 numbers [the ith number (starting from 1) should be the calories required to play in play area i]\n\nN*N Matrix [The jth element in the ith row represents the minimum number of calories needed to move from play area i to play area j]\n\nThe cost of playing at any play area will be a maximum of 10 calories, and the cost of moving between any 2 play areas will be a maximum of 10 calories.\n\nYou may assume that the N*N matrix contains the smallest number of calories needed to move between each 2 play areas.\n\n\n\n\nOutput Format:\n\n\nThe output should be one line per test case formatted as the following:\n\nCase x: y\n\nx is the case number starting from 1.\n\ny is the maximum number of different play areas Marwan can visit.\n\n\n\n\nSample Input:\n\n2\n3 100\n100 50\n0 100 40\n10 0 20\n40 20 0\n3 82\n9 8\n0 6 2\n6 0 8\n2 8 0\n\n\n\nSample Output:\n\nCase 1: 1\nCase 2: 2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 100\n100 50\n0 100 40\n10 0 20\n40 20 0\n3 82\n9 8\n0 6 2\n6 0 8\n2 8 0\n\n\nSample Output:\n\nCase 1: 1\nCase 2: 2\n\n",
    "Description": "\nProblem Statement:\n\n\nMarwan Mostafa Fahmy Naggar (A contestant in Bugs Factory team, a world finalist in The ACM-ICPC world finals in Ekaterinburg, Russia 2014 and a Facebook intern) was very tired after qualifying to the world finals in ACPC 2013. The next day after the contest, he won a free ticket to Aqua Blu Sharm Aqua Park and a free day in the hotel, all because of his achievement. The only problem was that he was very tired and did not have enough energy to visit all the play areas, such as water slides, splash pads, spray grounds (water playgrounds), lazy rivers, or other recreational bathing, swimming, and bare-footing environments. However since he used to know exactly how much calories he has (Marwan is too professional that he can know the maximum number of calories he wants to lose) and also he knows the number of calories lost in each play area, as well as the number of calories needed to move from each play area to the other. Can you help Marwan to know the maximum number of different play areas he can visit without losing more calories than the allowed maximum?\n\nInitially Marwan will be at the entrance of the Aqua Park (play area number 0) and no games are at the entrance. Marwan should start moving from there.\n\n\n",
    "Title": "314. Aqua Blu Sharm Aqua Park",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=314",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nThe output should be one line per test case formatted as the following:\n\nCase x: y\n\nx is the case number starting from 1.\n\ny is the maximum number of different play areas Marwan can visit.\n\n\n"
  },
  "2204": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nThe first line of each test case will contains two integers N and M where N is the number of rows and M is the number of columns (1 \u2264 N, M \u2264 200).\n\nFollowed by N * M Matrix represents the gird, each cell in the matrix will contain one of the following [ . , T , H , V ] as described in the problem statement.\n\n- Note that there will be at least one runner ( at least 1 H or 1 V )\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n315. Meeting Point\n\n\n\n\n\nProblem Statement:\n\n\nUnfortunately, Abdelrahman Mostafa (the regional director of operations in the ACPC) was unable to travel to the ACPC 2013 due to personal circumstances. Therefore, Mohamed Fouad, the Executive Director of Arab Region, was the one to lead the operations team in the ACPC. One of the main problems was how he (Mohamed Fouad) was going to communicate with the runners during the five hours of the contest. Therefore, he decided to divide the contest floor to a grid of N rows by M columns each cell of this grid may be:\n\n1.\t'.', which means that the cell is empty.\n\n2.\t'T', which means that the cell contains a team.\n\n3.\t'H', which means that the cell contains a runner who can move horizontally only to neighboring empty cells in the same row.\n\n4.\t'V', which means that the cell contains a runner who can move vertically only to neighboring empty cells in the same column.\n\nYou are to help Mohamed Fouad to know the meeting point that he can select to meet the maximum number of runners without violating that horizontal runners move horizontally only, vertical runners move vertically only, and runners cannot pass through cells containing teams as the runners tend to disconnect the jammed power and network cables -unintentionally - which interrupts the contestants.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nThe first line of each test case will contains two integers N and M where N is the number of rows and M is the number of columns (1 \u2264 N, M \u2264 200).\n\nFollowed by N * M Matrix represents the gird, each cell in the matrix will contain one of the following [ . , T , H , V ] as described in the problem statement.\n\n- Note that there will be at least one runner ( at least 1 H or 1 V )\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then three integer numbers A, I, J where A is maximum number of runners could meet in one cell and I is the row number of this cell ( 0-based ) and J is the column number of this cell ( 0-based ).\n\nIf there is more than one cell contains the same answer, output the cell with the largest I. If the tie still stand, output the cell with the largest J.\n\n- Note that the meeting point could not be in a cell containing 'T'.\n\n\n\n\nSample Input:\n\n3\n3 3\n.T.\nTV.\nH.H\n5 5\n.HT.V\nV.V.T\nT..TV\n.THH.\nV.VHV\n2 4\nHHTH\nTTTT\n\n\n\nSample Output:\n\nCase 1: 3 2 1\nCase 2: 4 3 4\nCase 3: 2 0 1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3 3\n.T.\nTV.\nH.H\n5 5\n.HT.V\nV.V.T\nT..TV\n.THH.\nV.VHV\n2 4\nHHTH\nTTTT\n\n\nSample Output:\n\nCase 1: 3 2 1\nCase 2: 4 3 4\nCase 3: 2 0 1\n\n",
    "Description": "\nProblem Statement:\n\n\nUnfortunately, Abdelrahman Mostafa (the regional director of operations in the ACPC) was unable to travel to the ACPC 2013 due to personal circumstances. Therefore, Mohamed Fouad, the Executive Director of Arab Region, was the one to lead the operations team in the ACPC. One of the main problems was how he (Mohamed Fouad) was going to communicate with the runners during the five hours of the contest. Therefore, he decided to divide the contest floor to a grid of N rows by M columns each cell of this grid may be:\n\n1.\t'.', which means that the cell is empty.\n\n2.\t'T', which means that the cell contains a team.\n\n3.\t'H', which means that the cell contains a runner who can move horizontally only to neighboring empty cells in the same row.\n\n4.\t'V', which means that the cell contains a runner who can move vertically only to neighboring empty cells in the same column.\n\nYou are to help Mohamed Fouad to know the meeting point that he can select to meet the maximum number of runners without violating that horizontal runners move horizontally only, vertical runners move vertically only, and runners cannot pass through cells containing teams as the runners tend to disconnect the jammed power and network cables -unintentionally - which interrupts the contestants.\n\n\n",
    "Title": "315. Meeting Point",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=315",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then three integer numbers A, I, J where A is maximum number of runners could meet in one cell and I is the row number of this cell ( 0-based ) and J is the column number of this cell ( 0-based ).\n\nIf there is more than one cell contains the same answer, output the cell with the largest I. If the tie still stand, output the cell with the largest J.\n\n- Note that the meeting point could not be in a cell containing 'T'.\n\n\n"
  },
  "2205": {
    "Input Description": "\nInput Format:\n\n\nIn the first line, an integer T (1 \u2264 T \u2264 100), which is the number of test cases. Each test case will contains two space-separated integers, the first is R (1 \u2264 R \u2264 100) which is the radius of the demanded medals and the second is L (1 \u2264 L \u2264 100000) which is the length of the rod of gold.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n316. Medals for the winning teams\n\n\n\n\n\nProblem Statement:\n\n\nDalia El-Hefny (The fundraising director in the ACPC) agreed with one of the sponsors to the ACPC 2013 to create medals for the winning teams. The sponsor bought a rod of gold of length L, and he want to make medals from it by cutting it into smaller pieces and deforms these pieces to form circular medals. She wants to make medals of the same size from the rod. Given L, the length of the rod, and given R, the radius of the required medals, what is the maximum number of medals she can form?\n\n\n\n\nInput Format:\n\n\nIn the first line, an integer T (1 \u2264 T \u2264 100), which is the number of test cases. Each test case will contains two space-separated integers, the first is R (1 \u2264 R \u2264 100) which is the radius of the demanded medals and the second is L (1 \u2264 L \u2264 100000) which is the length of the rod of gold.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then an integer X where X is maximum number of rings the sponsor company could make.\n\n\n\n\nSample Input:\n\n5\n1 13\n3 80\n1 8\n4 90\n29 100\n\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 4\nCase 3: 1\nCase 4: 3\nCase 5: 0\n\n\n\nNotes:\n\n\n- There will be no dimensions given as floating point numbers. They are all integers.\n\n- Assume that Pi = 22/7\n\n- Circumference = 2 * pi * r\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-10-25 09:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Oman Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n5\n1 13\n3 80\n1 8\n4 90\n29 100\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 4\nCase 3: 1\nCase 4: 3\nCase 5: 0\n\n",
    "Description": "\nProblem Statement:\n\n\nDalia El-Hefny (The fundraising director in the ACPC) agreed with one of the sponsors to the ACPC 2013 to create medals for the winning teams. The sponsor bought a rod of gold of length L, and he want to make medals from it by cutting it into smaller pieces and deforms these pieces to form circular medals. She wants to make medals of the same size from the rod. Given L, the length of the rod, and given R, the radius of the required medals, what is the maximum number of medals she can form?\n\n\n",
    "Title": "316. Medals for the winning teams",
    "Notes": "\nNotes:\n\n\n- There will be no dimensions given as floating point numbers. They are all integers.\n\n- Assume that Pi = 22/7\n\n- Circumference = 2 * pi * r\n\n",
    "URL": "https://a2oj.com/p?ID=316",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without the quotes) where n is the test case number (starting from 1) followed by a space then an integer X where X is maximum number of rings the sponsor company could make.\n\n\n"
  },
  "2206": {
    "Input Description": "\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases. Each test case consists of several lines. First line contains two integers N and M representing the number of participating students and the number of relations Fegla is going to give you respectively. where (1 \u2264 N \u2264 1, 000) and (1 \u2264 M \u2264 100, 000). The following M lines each contains two integers X and Y meaning student X knows student Y (1 \u2264 X, Y \u2264 N).  The following line contains an integer Q which is the number of queries Fegla is going to ask you (1 \u2264 Q \u2264 1, 000, 000). Followed by Q lines each contains a query consisting of two integers A and B that Fegla wants to know if student A knows student B or not.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n317. Camping\n\n\n\n\n\nProblem Statement:\n\n\nNo, this is not the same camping we do when we play video games! Coach Fegla shares his knowledge - Yes, that is how great he is - So he decided to hold a knowledge camp for any university willing to participate. Fegla's reputation is sky high, which lead to a lot of universities with a lot of students wanting to attend the camp. The camp will be for a week or even more. It will be held at the AAST - Arab Academy for Science, Technology & Maritime Transport - which will manage providing rooms for the students to stay in during the camp. Because of the large number of students, they might have to share rooms with each other and roommates might neither know each other nor even belong to the same university. Fegla always pays attention to details no matter how small they might seem to be, and he is aware that it could affect the trainees spirit as they will not be happy with sharing their room with other trainees that they don't know.\n\nFegla knows some of the relations between the trainees, and he knows that if student X knows student Y that does not mean student Y necessarily knows student X. He will give you the relations between the students - as a directed relations - and will ask you to check whether student X knows student Y or not. Student X can know student Y directly or indirectly as in the case where student X knows student Z and student Z knows student Y (Student Z can know student Y directly or indirectly as well).\n\n\n\n\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases. Each test case consists of several lines. First line contains two integers N and M representing the number of participating students and the number of relations Fegla is going to give you respectively. where (1 \u2264 N \u2264 1, 000) and (1 \u2264 M \u2264 100, 000). The following M lines each contains two integers X and Y meaning student X knows student Y (1 \u2264 X, Y \u2264 N).  The following line contains an integer Q which is the number of queries Fegla is going to ask you (1 \u2264 Q \u2264 1, 000, 000). Followed by Q lines each contains a query consisting of two integers A and B that Fegla wants to know if student A knows student B or not.\n\n\n\n\nOutput Format:\n\n\nFor each test case you should output \"Case X:\" where X is the test case number starting from 1 followed by Q line each should consist of a single string, \"Yes\" if student A knows student B, and \"No\" otherwise.\n- Quotations are for clarity -\n\n\n\n\nSample Input:\n\n1\n3 3\n1 2\n2 1\n1 3\n6\n1 2\n2 1\n1 3\n3 1\n2 3\n3 2\n\n\n\n\nSample Output:\n\nCase 1:\nYes\nYes\nYes\nNo\nYes\nNo\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:24 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3 3\n1 2\n2 1\n1 3\n6\n1 2\n2 1\n1 3\n3 1\n2 3\n3 2\n\n\n\nSample Output:\n\nCase 1:\nYes\nYes\nYes\nNo\nYes\nNo\n\n\n",
    "Description": "\nProblem Statement:\n\n\nNo, this is not the same camping we do when we play video games! Coach Fegla shares his knowledge - Yes, that is how great he is - So he decided to hold a knowledge camp for any university willing to participate. Fegla's reputation is sky high, which lead to a lot of universities with a lot of students wanting to attend the camp. The camp will be for a week or even more. It will be held at the AAST - Arab Academy for Science, Technology & Maritime Transport - which will manage providing rooms for the students to stay in during the camp. Because of the large number of students, they might have to share rooms with each other and roommates might neither know each other nor even belong to the same university. Fegla always pays attention to details no matter how small they might seem to be, and he is aware that it could affect the trainees spirit as they will not be happy with sharing their room with other trainees that they don't know.\n\nFegla knows some of the relations between the trainees, and he knows that if student X knows student Y that does not mean student Y necessarily knows student X. He will give you the relations between the students - as a directed relations - and will ask you to check whether student X knows student Y or not. Student X can know student Y directly or indirectly as in the case where student X knows student Z and student Z knows student Y (Student Z can know student Y directly or indirectly as well).\n\n\n",
    "Title": "317. Camping",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=317",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you should output \"Case X:\" where X is the test case number starting from 1 followed by Q line each should consist of a single string, \"Yes\" if student A knows student B, and \"No\" otherwise.\n- Quotations are for clarity -\n\n\n"
  },
  "2207": {
    "Input Description": "\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Each test case consists of two integers, A and B where (1\u2009\u2264\u2009A\u2009\u2264\u2009B\u2009\u2264\u2009101000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n318. A Bits of Fun\n\n\n\n\n\nProblem Statement:\n\n\nCoach Fegla is teaching students the Introduction to Computer Science course in lecture hall 260 in the Confucius Institute, Cairo University. Fegla believes that if the lecture hall looks nice and decorated with relevant decorations, it will boost the students' morale and enthusiasm to study and work harder in the course. Fegla told his trainees about what he was thinking and immediately Hossam Yousef - a trainee, that's all you have to know about him for now - suggested that Fegla decorates the hall with lots and lots of binary numbers. Fegla liked the idea, he decided to decorate the hall with consecutive numbers from A to B inclusive in their binary representation using 3D figures of zeroes and ones. Now, these are a lot of numbers and lots and lots of zeroes and ones - we are talking binary here, remember? - that means we need to use small 3D figures so we can fit all the numbers on the hall's walls. Luckily, Fegla has a huge stash of small 3D zero figures but he hasn't got a single one figure that's small, all of them were quite huge. Realizing this, Hossam offered helping Fegla and get him enough figures of the number one. Your task is to help Hossam. Given two integers A and B, calculate the number of ones in the binary representation of the numbers in the range A to B inclusive.\n\n\n\n\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Each test case consists of two integers, A and B where (1\u2009\u2264\u2009A\u2009\u2264\u2009B\u2009\u2264\u2009101000).\n\n\n\n\nOutput Format:\n\n\nFor each test case you should output \"Case X: Y\" where X is the case number starting from 1, and Y is the number of the one figures needed. Print the answer modulo 1,\u2009000,\u2009000,\u2009007\n\n\n\n\nSample Input:\n\n4\n20 30\n32 60\n62 82\n30 31\n\n\n\nSample Output:\n\nCase 1: 35\nCase 2: 96\nCase 3: 67\nCase 4: 9\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:26 UTC\n\n\n\n\nTime Limit:\n\n\n30 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n20 30\n32 60\n62 82\n30 31\n\n\nSample Output:\n\nCase 1: 35\nCase 2: 96\nCase 3: 67\nCase 4: 9\n\n",
    "Description": "\nProblem Statement:\n\n\nCoach Fegla is teaching students the Introduction to Computer Science course in lecture hall 260 in the Confucius Institute, Cairo University. Fegla believes that if the lecture hall looks nice and decorated with relevant decorations, it will boost the students' morale and enthusiasm to study and work harder in the course. Fegla told his trainees about what he was thinking and immediately Hossam Yousef - a trainee, that's all you have to know about him for now - suggested that Fegla decorates the hall with lots and lots of binary numbers. Fegla liked the idea, he decided to decorate the hall with consecutive numbers from A to B inclusive in their binary representation using 3D figures of zeroes and ones. Now, these are a lot of numbers and lots and lots of zeroes and ones - we are talking binary here, remember? - that means we need to use small 3D figures so we can fit all the numbers on the hall's walls. Luckily, Fegla has a huge stash of small 3D zero figures but he hasn't got a single one figure that's small, all of them were quite huge. Realizing this, Hossam offered helping Fegla and get him enough figures of the number one. Your task is to help Hossam. Given two integers A and B, calculate the number of ones in the binary representation of the numbers in the range A to B inclusive.\n\n\n",
    "Title": "318. A Bits of Fun",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=318",
    "Time Limit": "30 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you should output \"Case X: Y\" where X is the case number starting from 1, and Y is the number of the one figures needed. Print the answer modulo 1,\u2009000,\u2009000,\u2009007\n\n\n"
  },
  "2208": {
    "Input Description": "\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u20091,\u2009000). Each test cases is described by a single line with four integers A,\u2009B,\u2009C,\u2009K separated by a single space where K is the number of bits of the control variable of the loop (1\u2009\u2264\u2009K\u2009\u2264\u200932), and A,\u2009B,\u2009 and C (0\u2009\u2264\u2009A,\u2009B,\u2009C\u2009<\u20092K) are the parameters of the loop.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n319. Loops\n\n\n\n\n\nProblem Statement:\n\n\nA Compiler Mystery: We are given a for loop of type:\n\n\nfor (variable = A; variable != B; variable += C)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement;\n\n\nI.e., a loop which starts by setting variable to value A, and while variable is not equal to B repeats statement followed by increasing the variable by C. We want to know how many times does the statement get executed for particular values of A, B and C assuming that all arithmetic is calculated in a k\u2009-\u2009bit unsigned integer type (i.e. with values (0\u2009\u2264\u2009X\u2009<\u20092K) modulo 2K.\n\n\n\n\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u20091,\u2009000). Each test cases is described by a single line with four integers A,\u2009B,\u2009C,\u2009K separated by a single space where K is the number of bits of the control variable of the loop (1\u2009\u2264\u2009K\u2009\u2264\u200932), and A,\u2009B,\u2009 and C (0\u2009\u2264\u2009A,\u2009B,\u2009C\u2009<\u20092K) are the parameters of the loop.\n\n\n\n\nOutput Format:\n\n\nFor each test case you should output \"Case X: Y\" where X is the case number and Y is the number of iterations of the for statement or \"Case X: FOREVER\" if the loop doesn't terminate.\n\n\n\n\nSample Input:\n\n4\n3 5 0 16\n3 3 0 32\n6 2 2 4\n0 3 2 2\n\n\n\nSample Output:\n\nCase 1: FOREVER\nCase 2: 0\nCase 3: 6\nCase 4: FOREVER\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:29 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n4\n3 5 0 16\n3 3 0 32\n6 2 2 4\n0 3 2 2\n\n\nSample Output:\n\nCase 1: FOREVER\nCase 2: 0\nCase 3: 6\nCase 4: FOREVER\n\n",
    "Description": "\nProblem Statement:\n\n\nA Compiler Mystery: We are given a for loop of type:\n\n\nfor (variable = A; variable != B; variable += C)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement;\n\n\nI.e., a loop which starts by setting variable to value A, and while variable is not equal to B repeats statement followed by increasing the variable by C. We want to know how many times does the statement get executed for particular values of A, B and C assuming that all arithmetic is calculated in a k\u2009-\u2009bit unsigned integer type (i.e. with values (0\u2009\u2264\u2009X\u2009<\u20092K) modulo 2K.\n\n\n",
    "Title": "319. Loops",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=319",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you should output \"Case X: Y\" where X is the case number and Y is the number of iterations of the for statement or \"Case X: FOREVER\" if the loop doesn't terminate.\n\n\n"
  },
  "2209": {
    "Input Description": "\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Each test case start with a line with 3 integers N, E, and K representing the number of nodes, number of edges, and the described K respectively where (2\u2009\u2264\u2009N\u2009\u2264\u200910,\u2009000), (1\u2009\u2264\u2009E\u2009\u2264\u200912,\u2009500), and (1\u2009\u2264\u2009K\u2009\u2264\u2009N\u2009-\u20091). Then follow E lines each of them has 3 integers U, V, and C, meaning that there's a path between nodes U and V with cost C where (1\u2009\u2264\u2009U,\u2009V\u2009\u2264\u2009N), and (1\u2009\u2264\u2009c\u2009\u2264\u2009108).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n320. Second Minimum-Maximum Edge\n\n\n\n\n\nProblem Statement:\n\n\nWith the start of this year, Goodname Good started attending IFLHT (International Fegla's Local Home Training). Part of the training was explaining solutions to each other, with the Coach explaining as well for a fair amount of time. Although the Coach is specially famous for his patience and ability to repeat and to explain from different angles, Goodname as a reader of one chapter of an unexpectedly amusing mathematics book was dissatisfied with the way everyone talked. They'd use analogies and imaginary thinking instead of solid mathematical statements! This actually makes it more difficult to understand in Goodname's opinion. (You'll know how he feels when you read this chapter). So, it was decided that this problem be written in that way for the sake of Goodname's temper. Don't worry, no special notation will be used. Define a function F1 that takes as input an integer K, and a set of unique integers S and returns integer X, such that there are exactly K\u2009-\u20091 integers in the set greater than X. Of course, the function is undefined for some values such as when K is greater than the size of the set or non-positive. In this problem, you'll be given an integer K and an undirected weighted graph where costs of edges are unique. N is the number of nodes in the graph. There could be several paths P1,\u2009P2,\u2009..Pl between node 1 and node N. Assume a function F2 that takes a path and returns the costs of its edges as a set. Output the minimum element of {F1(K, F2(P1)), F1(K, F2(P2)), .. ,F1(K, F2(Pl))}. There's always a path between node 1 and N. Consider only paths in which you don't visit a node more than once.\n\n\n\n\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Each test case start with a line with 3 integers N, E, and K representing the number of nodes, number of edges, and the described K respectively where (2\u2009\u2264\u2009N\u2009\u2264\u200910,\u2009000), (1\u2009\u2264\u2009E\u2009\u2264\u200912,\u2009500), and (1\u2009\u2264\u2009K\u2009\u2264\u2009N\u2009-\u20091). Then follow E lines each of them has 3 integers U, V, and C, meaning that there's a path between nodes U and V with cost C where (1\u2009\u2264\u2009U,\u2009V\u2009\u2264\u2009N), and (1\u2009\u2264\u2009c\u2009\u2264\u2009108).\n\n\n\n\nOutput Format:\n\n\nFor each test case you should output \"Case X: Y\" where X is the case number starting from 1, and Y is the minimum  largest edge. In other words, minimum element of {F1(K, F2(P1)), F1(K, F2(P2)), .. ,F1(K, F2(Pl))}.\n\n\n\n\nSample Input:\n\n1\n5 8 1\n2 5 6\n1 2 9\n2 4 7\n2 3 7\n3 1 9\n1 5 8\n5 3 3\n4 1 10\n\n\n\nSample Output:\n\nCase 1: 8\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:31 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n5 8 1\n2 5 6\n1 2 9\n2 4 7\n2 3 7\n3 1 9\n1 5 8\n5 3 3\n4 1 10\n\n\nSample Output:\n\nCase 1: 8\n\n",
    "Description": "\nProblem Statement:\n\n\nWith the start of this year, Goodname Good started attending IFLHT (International Fegla's Local Home Training). Part of the training was explaining solutions to each other, with the Coach explaining as well for a fair amount of time. Although the Coach is specially famous for his patience and ability to repeat and to explain from different angles, Goodname as a reader of one chapter of an unexpectedly amusing mathematics book was dissatisfied with the way everyone talked. They'd use analogies and imaginary thinking instead of solid mathematical statements! This actually makes it more difficult to understand in Goodname's opinion. (You'll know how he feels when you read this chapter). So, it was decided that this problem be written in that way for the sake of Goodname's temper. Don't worry, no special notation will be used. Define a function F1 that takes as input an integer K, and a set of unique integers S and returns integer X, such that there are exactly K\u2009-\u20091 integers in the set greater than X. Of course, the function is undefined for some values such as when K is greater than the size of the set or non-positive. In this problem, you'll be given an integer K and an undirected weighted graph where costs of edges are unique. N is the number of nodes in the graph. There could be several paths P1,\u2009P2,\u2009..Pl between node 1 and node N. Assume a function F2 that takes a path and returns the costs of its edges as a set. Output the minimum element of {F1(K, F2(P1)), F1(K, F2(P2)), .. ,F1(K, F2(Pl))}. There's always a path between node 1 and N. Consider only paths in which you don't visit a node more than once.\n\n\n",
    "Title": "320. Second Minimum-Maximum Edge",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=320",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you should output \"Case X: Y\" where X is the case number starting from 1, and Y is the minimum  largest edge. In other words, minimum element of {F1(K, F2(P1)), F1(K, F2(P2)), .. ,F1(K, F2(Pl))}.\n\n\n"
  },
  "2210": {
    "Input Description": "\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Each test case start with a line with one integer, N (1\u2009\u2264\u2009N\u2009\u2264\u20091,\u2009000). Then follow N lines, each line has 4 integers representing X, Y, Z, and V of a coin, respectively. (0\u2009\u2264\u2009X,\u2009Y,\u2009V\u2009\u2264\u2009109), and (1\u2009\u2264\u2009Z\u2009\u2264\u2009109).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n321. Dream Coins\n\n\n\n\n\nProblem Statement:\n\n\nYou won't believe what happened to Mohamed Ahmed - AKA Nesr, and TheSecretSleeper. One day some coins started to fall from the sky. Yes, I'm not lying! They just kept falling from the sky! And Mohamed Ahmed - luckily for him - was outdoors when this happened. Specifically, with his sharp eyes, he saw N coins. As these coins exist in our world (also known as three-dimensional space), each coin currently has X, Y, and Z coordinates, and each coin has a value V. Every second the Z coordinate of each coin would decrease by 1. So, Nesr had a basket. At any integer moment, if Nesr is at a point (X, Y), and a coin was at (X, Y, 1), the coin would enter the basket instantly, and he doesn't have to stand still during that or anything. Initially, Nesr can stand wherever you tell him (A true magician, isn't he?). Then he can walk or stand still between consecutive seconds. If he chooses to walk, he can choose to either change his X coordinate or Y coordinate by 1 (positively or negatively). So, I guess by now you can easily guess my goal. Find an optimal strategy with which Nesr can maximize the sum of values of coins that fall in his basket.\n\n\n\n\nInput Format:\n\n\nThe input will start with an integer T which is the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Each test case start with a line with one integer, N (1\u2009\u2264\u2009N\u2009\u2264\u20091,\u2009000). Then follow N lines, each line has 4 integers representing X, Y, Z, and V of a coin, respectively. (0\u2009\u2264\u2009X,\u2009Y,\u2009V\u2009\u2264\u2009109), and (1\u2009\u2264\u2009Z\u2009\u2264\u2009109).\n\n\n\n\nOutput Format:\n\n\nFor each test case you should output \"Case X: Y\" where X is the case number starting from 1, and Y is maximum sum of values Nesr can get.\n\n\n\n\nSample Input:\n\n1\n4\n70 58 88 52\n5 38 84 95\n35 27 68 3\n21 68 98 18\n\n\n\nSample Output:\n\nCase 1: 95\n\n\n\nNotes:\n\n\nDid I tell you that the whole above story is just a dream of Nesr during a session? I thought it was true because you can't tell if Nesr is actually sleeping or no.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:33 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4\n70 58 88 52\n5 38 84 95\n35 27 68 3\n21 68 98 18\n\n\nSample Output:\n\nCase 1: 95\n\n",
    "Description": "\nProblem Statement:\n\n\nYou won't believe what happened to Mohamed Ahmed - AKA Nesr, and TheSecretSleeper. One day some coins started to fall from the sky. Yes, I'm not lying! They just kept falling from the sky! And Mohamed Ahmed - luckily for him - was outdoors when this happened. Specifically, with his sharp eyes, he saw N coins. As these coins exist in our world (also known as three-dimensional space), each coin currently has X, Y, and Z coordinates, and each coin has a value V. Every second the Z coordinate of each coin would decrease by 1. So, Nesr had a basket. At any integer moment, if Nesr is at a point (X, Y), and a coin was at (X, Y, 1), the coin would enter the basket instantly, and he doesn't have to stand still during that or anything. Initially, Nesr can stand wherever you tell him (A true magician, isn't he?). Then he can walk or stand still between consecutive seconds. If he chooses to walk, he can choose to either change his X coordinate or Y coordinate by 1 (positively or negatively). So, I guess by now you can easily guess my goal. Find an optimal strategy with which Nesr can maximize the sum of values of coins that fall in his basket.\n\n\n",
    "Title": "321. Dream Coins",
    "Notes": "\nNotes:\n\n\nDid I tell you that the whole above story is just a dream of Nesr during a session? I thought it was true because you can't tell if Nesr is actually sleeping or no.\n\n",
    "URL": "https://a2oj.com/p?ID=321",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you should output \"Case X: Y\" where X is the case number starting from 1, and Y is maximum sum of values Nesr can get.\n\n\n"
  },
  "2211": {
    "Input Description": "\nInput Format:\n\n\nThe input will start with an integer Q which is the number of queries where (1\u2009\u2264\u2009Q\u2009\u2264\u2009105). Each query consists of two integers, A and B, the inputs to the described function. (1\u2009\u2264\u2009A\u2009\u2264\u2009B\u2009\u2264\u20091018).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n322. The Last Digit\n\n\n\n\n\nProblem Statement:\n\n\nWho doesn?t just love meaningless problems with unbelievable stories? Because I know each one of you and I know how much you love meaningless problems, here?s another one (You don?t really have to thank me).\n\nMohamed Ahmed (AKA Nesr) just LOVES intellectual challenges. I remember when he drew lots of Tower-of-Hanoi towers to the extent that he was even cutting papers and collecting them together, just to try to solve it. That was in his first year. Now, Coach Fegla has just explained some Number Theory to the cute Nesr, and to tease him, he gave him this problem. To add some excitement, Coach Fegla wrote the problem as a function in pseudo code, and he asked Nesr to write an efficient function for that.\n\nfunction LSD_FirstDigit(integer a, integer b) {\n\u00a0\u00a0\u00a0\u00a0integer sum = 0;\n\u00a0\u00a0\u00a0\u00a0for(integer i = a; i <= b; i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum += (i * i);\n\u00a0\u00a0\u00a0\u00a0return sum % 10; // '%' is the operator for getting remainder of division.\n}\n\nThe variables here are NOT 32-bit integers. They could be infinitely-long integers. Please, help Nesr to solve it. Please, I beg you!\n\n\n\n\nInput Format:\n\n\nThe input will start with an integer Q which is the number of queries where (1\u2009\u2264\u2009Q\u2009\u2264\u2009105). Each query consists of two integers, A and B, the inputs to the described function. (1\u2009\u2264\u2009A\u2009\u2264\u2009B\u2009\u2264\u20091018).\n\n\n\n\nOutput Format:\n\n\nFor each query you should output \"Case X: Y\" where X is the case number starting from 1, and Y is the correct output of the described function.\n\n\n\n\nSample Input:\n\n2\n3 5\n1 3\n\n\n\nSample Output:\n\nCase 1: 0\nCase 2: 4\n\n\n\n\nNotes:\n\n\nNote: G.H. Hardy, a Number Theorist, actually thought his work would never be of any use. You can bet how wrong he was. So, it seems like ?meaningless problems? are perhaps not all that meaningless after all.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:46 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 5\n1 3\n\n\nSample Output:\n\nCase 1: 0\nCase 2: 4\n\n\n",
    "Description": "\nProblem Statement:\n\n\nWho doesn?t just love meaningless problems with unbelievable stories? Because I know each one of you and I know how much you love meaningless problems, here?s another one (You don?t really have to thank me).\n\nMohamed Ahmed (AKA Nesr) just LOVES intellectual challenges. I remember when he drew lots of Tower-of-Hanoi towers to the extent that he was even cutting papers and collecting them together, just to try to solve it. That was in his first year. Now, Coach Fegla has just explained some Number Theory to the cute Nesr, and to tease him, he gave him this problem. To add some excitement, Coach Fegla wrote the problem as a function in pseudo code, and he asked Nesr to write an efficient function for that.\n\nfunction LSD_FirstDigit(integer a, integer b) {\n\u00a0\u00a0\u00a0\u00a0integer sum = 0;\n\u00a0\u00a0\u00a0\u00a0for(integer i = a; i <= b; i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum += (i * i);\n\u00a0\u00a0\u00a0\u00a0return sum % 10; // '%' is the operator for getting remainder of division.\n}\n\nThe variables here are NOT 32-bit integers. They could be infinitely-long integers. Please, help Nesr to solve it. Please, I beg you!\n\n\n",
    "Title": "322. The Last Digit",
    "Notes": "\nNotes:\n\n\nNote: G.H. Hardy, a Number Theorist, actually thought his work would never be of any use. You can bet how wrong he was. So, it seems like ?meaningless problems? are perhaps not all that meaningless after all.\n\n",
    "URL": "https://a2oj.com/p?ID=322",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each query you should output \"Case X: Y\" where X is the case number starting from 1, and Y is the correct output of the described function.\n\n\n"
  },
  "2212": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains one integer T which represents the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u20091,\u2009000). Each test case is represented on a single line that contains three digits.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n323. Last Fibo\n\n\n\n\n\nProblem Statement:\n\n\nMohamed Yasser is a child in primary school, he loves math so much, one day he learns about Fibonacci series; a mathematical sequence that starts with 0 and 1, each of the next elements is the sum of the two previous ones. On the first day of a holiday, Yasser wrote the first 1,000 terms of the sequence on a paper. The next day, he woke up and saw the paper split vertically and only one part exists which contains the last three digits of the Fibonacci term. Mohamed Yasser want to know the possible value of x where the last three digits of F(x) are given.\n\n\n\n\nInput Format:\n\n\nThe first line contains one integer T which represents the number of test cases where (1\u2009\u2264\u2009T\u2009\u2264\u20091,\u2009000). Each test case is represented on a single line that contains three digits.\n\n\n\n\nOutput Format:\n\n\nIf there isn't any Fibonacci number ends with these digits print \"These digits seem to be invalid\", else print all Xs in the following format: The last three digits of F(x0), F(x1), .. are [the last three digits]\n\n\n\n\nSample Input:\n\n2\n708\n709\n\n\n\nSample Output:\n\nThese digits seem to be invalid\nThe last three digits of F(691), F(809) are [709]\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:50 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n708\n709\n\n\nSample Output:\n\nThese digits seem to be invalid\nThe last three digits of F(691), F(809) are [709]\n\n",
    "Description": "\nProblem Statement:\n\n\nMohamed Yasser is a child in primary school, he loves math so much, one day he learns about Fibonacci series; a mathematical sequence that starts with 0 and 1, each of the next elements is the sum of the two previous ones. On the first day of a holiday, Yasser wrote the first 1,000 terms of the sequence on a paper. The next day, he woke up and saw the paper split vertically and only one part exists which contains the last three digits of the Fibonacci term. Mohamed Yasser want to know the possible value of x where the last three digits of F(x) are given.\n\n\n",
    "Title": "323. Last Fibo",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=323",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nIf there isn't any Fibonacci number ends with these digits print \"These digits seem to be invalid\", else print all Xs in the following format: The last three digits of F(x0), F(x1), .. are [the last three digits]\n\n\n"
  },
  "2213": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T represents the number of test cases. Each test case starts with a line containing 4 integers N, M, x, and y representing the number of teams, the number of problems the Coach has, and the secret x and y described in the statement, respectively. Then follow N lines, each of them has 3 integers, representing the skill levels of its team members. Then follows a line that has M integers separated by space, each of them representing the difficulty of a problem which the Coach has. Where (1\u2009\u2264\u2009N\u2009\u2264\u20091,\u2009000), (1\u2009\u2264\u2009M,\u2009x,\u2009y\u2009\u2264\u200910), (x\u2009\u2264\u2009y), (1\u2009\u2264\u2009 Member skill level \u2009\u2264\u2009100,\u2009000), and (1\u2009\u2264\u2009 Problem difficulty \u2009\u2264\u2009100,\u2009000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n324. Problem Set\n\n\n\n\n\nProblem Statement:\n\n\nIt's the last training contest at Coach Abd El-Wahab's training before the ACPC. The coach has a big pool of problems from which he will choose a number of problems for the contest. As it's the last contest, the coach wants to make it neither too hard so weaker teams won't get frustrated nor too easy so that stronger teams won't get cocky. Specifically, he wants to choose a subset of problems such that the weakest team, whose name is \"CodeMorning\", solves exactly x problems, and the strongest team, whose name is \"CodeName\", solves exactly y problems. x and y are secret integers he's giving to you in the input because you're so special to him. Each team consists of 3 members. Each member has a skill level that can be summarized as an integer. A team's power is equal to the summation of its members' skill levels. Each problem has a difficulty that can also be summarized as an integer (What a coincidence!). A team is able to solve a problem if the team's power is greater than or equal to the problem difficulty. Output the subset of problems that can achieve the coach's goal, or \"No Solution.\" instead. If there are several subsets that achieve the coach's goal, output the most difficult subset, where difficulty of a set of problems is defined as the summation of its problems' difficulties. If there is still a tie, sort the problems in non-decreasing order by difficulty and choose the problem set which is lexicographically smallest.\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T represents the number of test cases. Each test case starts with a line containing 4 integers N, M, x, and y representing the number of teams, the number of problems the Coach has, and the secret x and y described in the statement, respectively. Then follow N lines, each of them has 3 integers, representing the skill levels of its team members. Then follows a line that has M integers separated by space, each of them representing the difficulty of a problem which the Coach has. Where (1\u2009\u2264\u2009N\u2009\u2264\u20091,\u2009000), (1\u2009\u2264\u2009M,\u2009x,\u2009y\u2009\u2264\u200910), (x\u2009\u2264\u2009y), (1\u2009\u2264\u2009 Member skill level \u2009\u2264\u2009100,\u2009000), and (1\u2009\u2264\u2009 Problem difficulty \u2009\u2264\u2009100,\u2009000).\n\n\n\n\nOutput Format:\n\n\nFor each test case, output a line by itself containing \"Case X: \" , where X is the test case number starting from 1. Then on the same line output the difficulties of problems you chose in the subset that satisfy the Coach's goal in non-decreasing order of the difficulty separated by space if such subset exists, or \"No Solution.\" otherwise (without quotes).\n\n\n\n\nSample Input:\n\n2\n3 4 1 3\n1 2 3\n4 5 6\n7 8 9\n6 7 8 9\n2 2 1 2\n10 10 10\n20 20 20\n1 1\n\n\n\nSample Output:\n\nCase 1: 6 8 9\nCase 2: No Solution.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:53 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 4 1 3\n1 2 3\n4 5 6\n7 8 9\n6 7 8 9\n2 2 1 2\n10 10 10\n20 20 20\n1 1\n\n\nSample Output:\n\nCase 1: 6 8 9\nCase 2: No Solution.\n\n",
    "Description": "\nProblem Statement:\n\n\nIt's the last training contest at Coach Abd El-Wahab's training before the ACPC. The coach has a big pool of problems from which he will choose a number of problems for the contest. As it's the last contest, the coach wants to make it neither too hard so weaker teams won't get frustrated nor too easy so that stronger teams won't get cocky. Specifically, he wants to choose a subset of problems such that the weakest team, whose name is \"CodeMorning\", solves exactly x problems, and the strongest team, whose name is \"CodeName\", solves exactly y problems. x and y are secret integers he's giving to you in the input because you're so special to him. Each team consists of 3 members. Each member has a skill level that can be summarized as an integer. A team's power is equal to the summation of its members' skill levels. Each problem has a difficulty that can also be summarized as an integer (What a coincidence!). A team is able to solve a problem if the team's power is greater than or equal to the problem difficulty. Output the subset of problems that can achieve the coach's goal, or \"No Solution.\" instead. If there are several subsets that achieve the coach's goal, output the most difficult subset, where difficulty of a set of problems is defined as the summation of its problems' difficulties. If there is still a tie, sort the problems in non-decreasing order by difficulty and choose the problem set which is lexicographically smallest.\n\n\n",
    "Title": "324. Problem Set",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=324",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output a line by itself containing \"Case X: \" , where X is the test case number starting from 1. Then on the same line output the difficulties of problems you chose in the subset that satisfy the Coach's goal in non-decreasing order of the difficulty separated by space if such subset exists, or \"No Solution.\" otherwise (without quotes).\n\n\n"
  },
  "2214": {
    "Input Description": "\nInput Format:\n\n\nAn integer T (1\u2009\u2264\u2009T\u2009\u2264\u200910) representing the number of test cases. Each test case consists of two lines. First line contains N and M (1\u2009\u2264\u2009N\u2009\u2264\u20091,\u2009000,\u2009000) (1\u2009\u2264\u2009M\u2009\u2264\u2009100,\u2009000) where N is the number of weeks per semester and M is the number of courses per semester. Second line consists of M integers Mi (0\u2009\u2264\u2009 Mi \u2009\u2264\u2009N) where Mi is the maximum number of lectures she can attend for course i.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n325. Course Scheduling\n\n\n\n\n\nProblem Statement:\n\n\nHeba Gamal, one of the best contestants of Coach Mohamed Abd El-Wahab's (aka. Fegla) trainees. She got the 3rd place with her team in the ECPC'13. Yes, she is the strongest ACM/ACPC girl on the Arab region ever.\n\nHeba currently is working on a company besides being a contestant. She had a trouble with her CEO Amr Hussein, who was himself a contestant and the teammate of her coach Fegla at ANARC 2002. Heba is a pre-master student, and wants to register the courses of this semester without having a conflict with her working times. She reached an agreement with her CEO to give her some free times during the week to attend her lectures. Heba calculated her schedule for the semester N weeks. She has M courses(one lecture per week for each course) and for each course, she knows the maximum number of lectures she can attend. It's known that if she didn't attend at least half of the semester lectures for any course, she won't get its grade.\n\nTell Heba what's is the maximum number of courses she can register peacefully with her CEO.\n\n\n\n\nInput Format:\n\n\nAn integer T (1\u2009\u2264\u2009T\u2009\u2264\u200910) representing the number of test cases. Each test case consists of two lines. First line contains N and M (1\u2009\u2264\u2009N\u2009\u2264\u20091,\u2009000,\u2009000) (1\u2009\u2264\u2009M\u2009\u2264\u2009100,\u2009000) where N is the number of weeks per semester and M is the number of courses per semester. Second line consists of M integers Mi (0\u2009\u2264\u2009 Mi \u2009\u2264\u2009N) where Mi is the maximum number of lectures she can attend for course i.\n\n\n\n\nOutput Format:\n\n\nFor each case you should output: \"Case X: Y\" where X is the case number starting from 1, and Y is the maximum number of courses.\n\n\n\n\nSample Input:\n\n1\n13 7\n6 6 7 8 5 9 1\n\n\n\nSample Output:\n\nCase 1: 3\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:55 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n13 7\n6 6 7 8 5 9 1\n\n\nSample Output:\n\nCase 1: 3\n\n",
    "Description": "\nProblem Statement:\n\n\nHeba Gamal, one of the best contestants of Coach Mohamed Abd El-Wahab's (aka. Fegla) trainees. She got the 3rd place with her team in the ECPC'13. Yes, she is the strongest ACM/ACPC girl on the Arab region ever.\n\nHeba currently is working on a company besides being a contestant. She had a trouble with her CEO Amr Hussein, who was himself a contestant and the teammate of her coach Fegla at ANARC 2002. Heba is a pre-master student, and wants to register the courses of this semester without having a conflict with her working times. She reached an agreement with her CEO to give her some free times during the week to attend her lectures. Heba calculated her schedule for the semester N weeks. She has M courses(one lecture per week for each course) and for each course, she knows the maximum number of lectures she can attend. It's known that if she didn't attend at least half of the semester lectures for any course, she won't get its grade.\n\nTell Heba what's is the maximum number of courses she can register peacefully with her CEO.\n\n\n",
    "Title": "325. Course Scheduling",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=325",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each case you should output: \"Case X: Y\" where X is the case number starting from 1, and Y is the maximum number of courses.\n\n\n"
  },
  "2215": {
    "Input Description": "\nInput Format:\n\n\nAn integer T representing the number of test cases. Each test case consists of two lines. First line contains N where 1\u2009\u2264\u2009N\u2009\u2264\u20091,\u2009000. Second line consists of N integers Ni and 1\u2009\u2264\u2009i\u2009\u2264\u2009N.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n326. Pizzas\n\n\n\n\n\nProblem Statement:\n\n\nCoach Fegla The Great - yeah we know, that's just the way he likes to sign his formal emails - had gathered all his ECPC trainees and had been training them to enrich their problem solving skills for 29 hours non-stop! Of course, they had become extremely hungry. Ghoneim, not being able to endure anymore, shouted \"PIZZA! I want to eat pizza!\". Fegla - being great - replied \"OK, we'll pause for now. Let's order from Pizza Hut\". There were N trainees, every trainee ordered a single special pizza order which costs Ni and 1\u2009\u2264\u2009i\u2009\u2264\u2009N.\n\nFegla is going to pay the delivery man the total costs of the pizzas. He gathered all the necessary money from each trainee and he wants to make sure that the total money he has is correct. He asks you to write a program that calculates the total costs of the pizzas to make sure he has the correct amount of money.\n\n\n\n\nInput Format:\n\n\nAn integer T representing the number of test cases. Each test case consists of two lines. First line contains N where 1\u2009\u2264\u2009N\u2009\u2264\u20091,\u2009000. Second line consists of N integers Ni and 1\u2009\u2264\u2009i\u2009\u2264\u2009N.\n\n\n\n\nOutput Format:\n\n\nFor each test case you should output: \"Case X: Y\" where X is the case number starting from 1, and Y is the sum Fegla asked you to calculate.\n\n\n\n\nSample Input:\n\n2\n5\n1 2 3 4 5\n6\n11 12 19 0 2 1\n\n\n\nSample Output:\n\nCase 1: 15\nCase 2: 45\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:32:58 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5\n1 2 3 4 5\n6\n11 12 19 0 2 1\n\n\nSample Output:\n\nCase 1: 15\nCase 2: 45\n\n",
    "Description": "\nProblem Statement:\n\n\nCoach Fegla The Great - yeah we know, that's just the way he likes to sign his formal emails - had gathered all his ECPC trainees and had been training them to enrich their problem solving skills for 29 hours non-stop! Of course, they had become extremely hungry. Ghoneim, not being able to endure anymore, shouted \"PIZZA! I want to eat pizza!\". Fegla - being great - replied \"OK, we'll pause for now. Let's order from Pizza Hut\". There were N trainees, every trainee ordered a single special pizza order which costs Ni and 1\u2009\u2264\u2009i\u2009\u2264\u2009N.\n\nFegla is going to pay the delivery man the total costs of the pizzas. He gathered all the necessary money from each trainee and he wants to make sure that the total money he has is correct. He asks you to write a program that calculates the total costs of the pizzas to make sure he has the correct amount of money.\n\n\n",
    "Title": "326. Pizzas",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=326",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case you should output: \"Case X: Y\" where X is the case number starting from 1, and Y is the sum Fegla asked you to calculate.\n\n\n"
  },
  "2216": {
    "Input Description": "\nInput Format:\n\n\nInput starts with a line containing the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Then T test cases follow. each test case consists of (1\u2009\u2264\u2009N\u2009\u2264\u2009100) the number of teams in the scoreboard, (1\u2009\u2264\u2009M\u2009\u2264\u20095) the maximum number of qualified teams per college, (1\u2009\u2264\u2009K\u2009\u2264\u200920) the maximum number of qualified teams per country. Then N lines following, each line contains 2 words, team name then college name.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n327. Mission\n\n\n\n\n\nProblem Statement:\n\n\nThe contest has ended, my team manged to get only 3 AC and 2 WA. If we could get all the 5 problems AC, hopefully we would have ranked in the top 10 and surely qualified to the regional contest.\n\nhere are the qualification rules:\n\n\u00a0 \u2022 Every country has a maximum of K slots in the regional contest.\n\u00a0 \u2022 Every college has a maximum of M slots in the top K ranked teams.\n\nIt's 2 hours until the closing ceremony begins. I can't wait to hear the results. So I decided to steal the results from the judges' room to know whether we qualified or not. But, I only found the final scoreboard. could you help me find the list of the qualified teams through the scoreboard and following the rules.\n\n\n\n\nInput Format:\n\n\nInput starts with a line containing the number of test cases (1\u2009\u2264\u2009T\u2009\u2264\u2009100). Then T test cases follow. each test case consists of (1\u2009\u2264\u2009N\u2009\u2264\u2009100) the number of teams in the scoreboard, (1\u2009\u2264\u2009M\u2009\u2264\u20095) the maximum number of qualified teams per college, (1\u2009\u2264\u2009K\u2009\u2264\u200920) the maximum number of qualified teams per country. Then N lines following, each line contains 2 words, team name then college name.\n\n\n\n\nOutput Format:\n\n\nOutput list of the qualified teams on the following format: \"Case X:\" where X is the test case number starting from 1, followed by the list of the qualified teams.\n\n\n\n\nSample Input:\n\n1\n8 1 4\nTeamF U3\nTeamE U2\nTeamC U2\nTeamD U2\nTeamA U1\nTeamB U1\nTeamG U4\nTeamH U5\n\n\n\nSample Output:\n\nCase 1:\nTeamF\nTeamE\nTeamA\nTeamG\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nhossamyosef\n\n\n\n\nAdded at:\n\n\n2014-11-11 15:33:02 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Jordanian Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n8 1 4\nTeamF U3\nTeamE U2\nTeamC U2\nTeamD U2\nTeamA U1\nTeamB U1\nTeamG U4\nTeamH U5\n\n\nSample Output:\n\nCase 1:\nTeamF\nTeamE\nTeamA\nTeamG\n\n",
    "Description": "\nProblem Statement:\n\n\nThe contest has ended, my team manged to get only 3 AC and 2 WA. If we could get all the 5 problems AC, hopefully we would have ranked in the top 10 and surely qualified to the regional contest.\n\nhere are the qualification rules:\n\n\u00a0 \u2022 Every country has a maximum of K slots in the regional contest.\n\u00a0 \u2022 Every college has a maximum of M slots in the top K ranked teams.\n\nIt's 2 hours until the closing ceremony begins. I can't wait to hear the results. So I decided to steal the results from the judges' room to know whether we qualified or not. But, I only found the final scoreboard. could you help me find the list of the qualified teams through the scoreboard and following the rules.\n\n\n",
    "Title": "327. Mission",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=327",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nOutput list of the qualified teams on the following format: \"Case X:\" where X is the test case number starting from 1, followed by the list of the qualified teams.\n\n\n"
  },
  "2217": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 1,000) representing the number of test cases. Followed by T test cases. Each test case will consist of a single line, containing 4 integers separated by a single space X, N, Y and M (1 \u2264 X, Y \u2264 1,000) (0 \u2264 N \u2264 70) (N \u2264 M \u2264 100,000) which are the numbers as described above.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n328. Game of Peace\n\n\n\n\n\nProblem Statement:\n\n\nBob has learned a new magic trick that needs a very special preparation. Once he masters the trick he will be able to bring peace to the world, but if he fails, the world will be destroyed.\n\nThe preparation is performed as follows: There are two containers, initially one is empty and the other one has X marbles. Bob has a Marble Cloning Machine, it clones the marbles in the container with the larger number of marbles, then pours the new clones into the other container (e.g. if the two containers have 7 and 4 marbles, after the cloning step they will have 7 and 11 marbles). The machine does this cloning operation exactly M times. However, there is a bug in the machine, after it performs N cloning operations (N \u2264 M), it will add Y extra marbles to the container with the larger number of marbles. Then the machine will continue normally with the cloning operation exactly M - N times.\n\nDuring the cloning operations, if both containers have the same number of marbles, any of them can be considered the one with the larger number of marbles.\n\nNow, the bug in Bob's machine is threatening to destroy the world. But his nerdy friend Alice told him that she knows how to fix it. All he has to do is to calculate the greatest common divisor of the sizes of the two containers after the cloning machine is done. Can you help Bob save the world?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 1,000) representing the number of test cases. Followed by T test cases. Each test case will consist of a single line, containing 4 integers separated by a single space X, N, Y and M (1 \u2264 X, Y \u2264 1,000) (0 \u2264 N \u2264 70) (N \u2264 M \u2264 100,000) which are the numbers as described above.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the greatest common divisor of the sizes of the two containers after the machine is done.\n\n\n\n\nSample Input:\n\n2\n4 3 6 5\n5 1 15 2\n\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 5\n\n\n\nNotes:\n\n\nIn the first sample test case, the number of marbles in each container will be the following after each step: (4, 0), (4, 4), (4, 8), (12, 8), (18, 8), (18, 26), (44, 26). The greatest common divisor of 44 and 26 is 2.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:23 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n4 3 6 5\n5 1 15 2\n\n\nSample Output:\n\nCase 1: 2\nCase 2: 5\n\n",
    "Description": "\nProblem Statement:\n\n\nBob has learned a new magic trick that needs a very special preparation. Once he masters the trick he will be able to bring peace to the world, but if he fails, the world will be destroyed.\n\nThe preparation is performed as follows: There are two containers, initially one is empty and the other one has X marbles. Bob has a Marble Cloning Machine, it clones the marbles in the container with the larger number of marbles, then pours the new clones into the other container (e.g. if the two containers have 7 and 4 marbles, after the cloning step they will have 7 and 11 marbles). The machine does this cloning operation exactly M times. However, there is a bug in the machine, after it performs N cloning operations (N \u2264 M), it will add Y extra marbles to the container with the larger number of marbles. Then the machine will continue normally with the cloning operation exactly M - N times.\n\nDuring the cloning operations, if both containers have the same number of marbles, any of them can be considered the one with the larger number of marbles.\n\nNow, the bug in Bob's machine is threatening to destroy the world. But his nerdy friend Alice told him that she knows how to fix it. All he has to do is to calculate the greatest common divisor of the sizes of the two containers after the cloning machine is done. Can you help Bob save the world?\n\n\n",
    "Title": "328. Game of Peace",
    "Notes": "\nNotes:\n\n\nIn the first sample test case, the number of marbles in each container will be the following after each step: (4, 0), (4, 4), (4, 8), (12, 8), (18, 8), (18, 26), (44, 26). The greatest common divisor of 44 and 26 is 2.\n\n",
    "URL": "https://a2oj.com/p?ID=328",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the greatest common divisor of the sizes of the two containers after the machine is done.\n\n\n"
  },
  "2218": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case will consist of a single line, containing 2 integers separated by a single space a and b (1 \u2264 a, b \u2264 6) representing the number of black dots carved on the top face of each die.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n329. Let's Play Tawla\n\n\n\n\n\nProblem Statement:\n\n\nTawla is the Arabic name of the game Backgammon. In Tawla, 2 players alternate playing two 6-face dice. Each die (singular of dice) face represents a number from 1 to 6 through black dots carved on that face.\n\nTawla professionals give the numbers 1 to 6 special naming, believed to be adapted from another language. This special naming is as follows:\n\n1: \"Yakk\"\n2: \"Doh\"\n3: \"Seh\"\n4: \"Ghar\"\n5: \"Bang\"\n6: \"Sheesh\"\n\nTawla professionals have this habit of saying the dice number after they throw the dice, in order to have some sort of game commentary. The higher number is said first.\n\nSome examples:\n\n- A dice throw of 1 and 2 is: \"Doh Yakk\"\n- A dice throw of 3 and 5 is: \"Bang Seh\"\n- A dice throw of 6 and 4 is: \"Sheesh Ghar\"\n\nIf you know more about Tawla, you would know that a double (2 dice producing the same number) does not follow this rule. For some unknown reason, it doesn't rhyme to say: \"Yakk Yakk\" or \"Doh Doh\". The following are their special names:\n\n- A 1-1 dice pair is said: \"Habb Yakk\"\n- A 2-2 dice pair is said: \"Dobara\"\n- A 3-3 dice pair is said: \"Dousa\"\n- A 4-4 dice pair is said: \"Dorgy\"\n- A 5-5 dice pair is said: \"Dabash\"\n- A 6-6 dice pair is said: \"Dosh\"\n\nOne exception to all the above rules is the pair: 5-6 (or 6-5), this one is called \"Sheesh Beesh\" and not \"Sheesh Bang\"! As you may have expected, this is for some unknown reason too.\n\nWrite a program that translates dice numbers to Tawla words.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case will consist of a single line, containing 2 integers separated by a single space a and b (1 \u2264 a, b \u2264 6) representing the number of black dots carved on the top face of each die.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the Tawla words describing the given dice numbers.\n\n\n\n\nSample Input:\n\n3\n1 2\n2 3\n3 4\n\n\n\nSample Output:\n\nCase 1: Doh Yakk\nCase 2: Seh Doh\nCase 3: Ghar Seh\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:25 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n1 2\n2 3\n3 4\n\n\nSample Output:\n\nCase 1: Doh Yakk\nCase 2: Seh Doh\nCase 3: Ghar Seh\n\n",
    "Description": "\nProblem Statement:\n\n\nTawla is the Arabic name of the game Backgammon. In Tawla, 2 players alternate playing two 6-face dice. Each die (singular of dice) face represents a number from 1 to 6 through black dots carved on that face.\n\nTawla professionals give the numbers 1 to 6 special naming, believed to be adapted from another language. This special naming is as follows:\n\n1: \"Yakk\"\n2: \"Doh\"\n3: \"Seh\"\n4: \"Ghar\"\n5: \"Bang\"\n6: \"Sheesh\"\n\nTawla professionals have this habit of saying the dice number after they throw the dice, in order to have some sort of game commentary. The higher number is said first.\n\nSome examples:\n\n- A dice throw of 1 and 2 is: \"Doh Yakk\"\n- A dice throw of 3 and 5 is: \"Bang Seh\"\n- A dice throw of 6 and 4 is: \"Sheesh Ghar\"\n\nIf you know more about Tawla, you would know that a double (2 dice producing the same number) does not follow this rule. For some unknown reason, it doesn't rhyme to say: \"Yakk Yakk\" or \"Doh Doh\". The following are their special names:\n\n- A 1-1 dice pair is said: \"Habb Yakk\"\n- A 2-2 dice pair is said: \"Dobara\"\n- A 3-3 dice pair is said: \"Dousa\"\n- A 4-4 dice pair is said: \"Dorgy\"\n- A 5-5 dice pair is said: \"Dabash\"\n- A 6-6 dice pair is said: \"Dosh\"\n\nOne exception to all the above rules is the pair: 5-6 (or 6-5), this one is called \"Sheesh Beesh\" and not \"Sheesh Bang\"! As you may have expected, this is for some unknown reason too.\n\nWrite a program that translates dice numbers to Tawla words.\n\n\n",
    "Title": "329. Let's Play Tawla",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=329",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the Tawla words describing the given dice numbers.\n\n\n"
  },
  "2219": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing two integers separated by a single space S and N (1 \u2264 S \u2264 5,000) (1 \u2264 N \u2264 50) representing the total required sum and the number of different values of coins, respectively. Followed by N lines, each one will contain two integers separated by a single space Vi and Ci (1 \u2264 Vi, Ci \u2264 5,000) representing the value of a coin and the number of coins the princess has with this value, respectively. For each test case, all values of Vi will be distinct.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n330. Feast Coins\n\n\n\n\n\nProblem Statement:\n\n\nLast feast the young princess received way too many coins. Since she is very young, she doesn't know the value of each coin, if you give her a coin with the value 5 or a coin with the value 1, she will consider them both as just 1 coin, regardless of the value.\n\nHowever, she can notice that the coin with value 5 doesn't look the same as the coin with value 1, and she will be happy if she has the same number of coins of each value. Otherwise, she will not be happy.\n\nShe has a lot of coins of different values, and she needs some subset of these coins such that the sum of their values should be exactly S, and the number of coins of each value in this subset should be the same. Can you help her to count the number of different ways to do this?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing two integers separated by a single space S and N (1 \u2264 S \u2264 5,000) (1 \u2264 N \u2264 50) representing the total required sum and the number of different values of coins, respectively. Followed by N lines, each one will contain two integers separated by a single space Vi and Ci (1 \u2264 Vi, Ci \u2264 5,000) representing the value of a coin and the number of coins the princess has with this value, respectively. For each test case, all values of Vi will be distinct.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the number of different ways to make the total sum S as described above. Two ways are considered different if any coin value does not appear the same number of times in both ways.\n\nYou can assume that the result will always fit in a 64-bit signed integer.\n\n\n\n\nSample Input:\n\n2\n10 2\n2 2\n6 1\n10 4\n1 10\n2 10\n3 10\n4 10\n\n\n\nSample Output:\n\nCase 1: 0\nCase 2: 5\n\n\n\nNotes:\n\n\nIn the first test case, the only way to make the sum 10, is to use the following subset of coins (2, 2, 6), but this isn't valid because there are 2 coins with value 2 and 1 coin with value 6.\n\nIn the second test case, the following are the 5 different ways: (1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (2, 2, 2, 2, 2), (2, 2, 3, 3), (1, 1, 4, 4), (1, 2, 3, 4).\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:28 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n10 2\n2 2\n6 1\n10 4\n1 10\n2 10\n3 10\n4 10\n\n\nSample Output:\n\nCase 1: 0\nCase 2: 5\n\n",
    "Description": "\nProblem Statement:\n\n\nLast feast the young princess received way too many coins. Since she is very young, she doesn't know the value of each coin, if you give her a coin with the value 5 or a coin with the value 1, she will consider them both as just 1 coin, regardless of the value.\n\nHowever, she can notice that the coin with value 5 doesn't look the same as the coin with value 1, and she will be happy if she has the same number of coins of each value. Otherwise, she will not be happy.\n\nShe has a lot of coins of different values, and she needs some subset of these coins such that the sum of their values should be exactly S, and the number of coins of each value in this subset should be the same. Can you help her to count the number of different ways to do this?\n\n\n",
    "Title": "330. Feast Coins",
    "Notes": "\nNotes:\n\n\nIn the first test case, the only way to make the sum 10, is to use the following subset of coins (2, 2, 6), but this isn't valid because there are 2 coins with value 2 and 1 coin with value 6.\n\nIn the second test case, the following are the 5 different ways: (1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (2, 2, 2, 2, 2), (2, 2, 3, 3), (1, 1, 4, 4), (1, 2, 3, 4).\n\n",
    "URL": "https://a2oj.com/p?ID=330",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the number of different ways to make the total sum S as described above. Two ways are considered different if any coin value does not appear the same number of times in both ways.\n\nYou can assume that the result will always fit in a 64-bit signed integer.\n\n\n"
  },
  "2220": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing an integer N (3 \u2264 N \u2264 100) representing the number of vertices. Followed by N lines, each line will contain 2 integers separated by a single space, Xi and Yi (-1,000 \u2264 Xi, Yi \u2264 1,000) representing the coordinates of the i-th vertex. You can assume that no 3 consecutive vertices will lie on the same line, and the first vertex (which has the tightened nail) of each test case will be at (0, 0).\n\nIn a convex polygon, all interior angles are less than 180 degrees. It's guaranteed that all given polygons will be convex.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n331. Wedding Selfie\n\n\n\n\n\nProblem Statement:\n\n\nAt his wedding, Daryl took a beautiful selfie with his bride. In fact, the selfie was such a unique photograph that Daryl and his wife decided to hang it on their new home's wall. The selfie was shaped as a convex polygon with N vertices. Merle, Daryl's lousy brother, offered to hang the selfie for them. Merle used N nails, one for each vertex, to hang the selfie on the wall. However, only the first nail he used was tightened properly. The other nails were pretty loose and did not stay fixed for long. So, after some time Daryl found the beautiful selfie dangling awkwardly on his wall, hanging only from the tightened nail. Your job is to find out the new position of the polygon's vertices after the selfie finally settles.\n\nYou will be given the original positions of the vertices of the polygon, in counter clockwise order, and starting with the one Merle tightened properly. For simplicity, the tightened vertex will always be at (0,0). When the polygon starts dangling, it will be able to rotate freely about this vertex. The polygon will settle only when the area of the polygon to the right of the Y-axis is equal to the area to the left of the Y-axis. If there are multiple such positions, the image will settle in the position that maximizes the polygon area below the X-axis. Can you help Daryl to figure out the final position of the vertices of the picture after it settles?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing an integer N (3 \u2264 N \u2264 100) representing the number of vertices. Followed by N lines, each line will contain 2 integers separated by a single space, Xi and Yi (-1,000 \u2264 Xi, Yi \u2264 1,000) representing the coordinates of the i-th vertex. You can assume that no 3 consecutive vertices will lie on the same line, and the first vertex (which has the tightened nail) of each test case will be at (0, 0).\n\nIn a convex polygon, all interior angles are less than 180 degrees. It's guaranteed that all given polygons will be convex.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by N lines, each line should contain 2 values separated by a single space, Xi and Yi, rounded to exactly 6 decimal places after the decimal point, representing the new coordinates of the i-th vertex after the selfie had settled, in the same order as given in the input.\n\nMake sure not to print -0.000000, instead print 0.000000.\n\n\n\n\nSample Input:\n\n1\n4\n0 0\n1 0\n1 1\n0 1\n\n\n\nSample Output:\n\nCase 1:\n0.000000 0.000000\n-0.707107 -0.707107\n0.000000 -1.414214\n0.707107 -0.707107\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:30 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n4\n0 0\n1 0\n1 1\n0 1\n\n\nSample Output:\n\nCase 1:\n0.000000 0.000000\n-0.707107 -0.707107\n0.000000 -1.414214\n0.707107 -0.707107\n\n",
    "Description": "\nProblem Statement:\n\n\nAt his wedding, Daryl took a beautiful selfie with his bride. In fact, the selfie was such a unique photograph that Daryl and his wife decided to hang it on their new home's wall. The selfie was shaped as a convex polygon with N vertices. Merle, Daryl's lousy brother, offered to hang the selfie for them. Merle used N nails, one for each vertex, to hang the selfie on the wall. However, only the first nail he used was tightened properly. The other nails were pretty loose and did not stay fixed for long. So, after some time Daryl found the beautiful selfie dangling awkwardly on his wall, hanging only from the tightened nail. Your job is to find out the new position of the polygon's vertices after the selfie finally settles.\n\nYou will be given the original positions of the vertices of the polygon, in counter clockwise order, and starting with the one Merle tightened properly. For simplicity, the tightened vertex will always be at (0,0). When the polygon starts dangling, it will be able to rotate freely about this vertex. The polygon will settle only when the area of the polygon to the right of the Y-axis is equal to the area to the left of the Y-axis. If there are multiple such positions, the image will settle in the position that maximizes the polygon area below the X-axis. Can you help Daryl to figure out the final position of the vertices of the picture after it settles?\n\n\n",
    "Title": "331. Wedding Selfie",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=331",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by N lines, each line should contain 2 values separated by a single space, Xi and Yi, rounded to exactly 6 decimal places after the decimal point, representing the new coordinates of the i-th vertex after the selfie had settled, in the same order as given in the input.\n\nMake sure not to print -0.000000, instead print 0.000000.\n\n\n"
  },
  "2221": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case will start with a line containing an integer N (3 \u2264 N \u2264 8) representing the size of the board. Followed by N lines, each one consists of N digits. Each digit represents a cell, with '0' meaning it is an empty cell. It's guaranteed that there will be at least one valid solution for each test case, and all input boards will satisfy all the conditions mentioned above.\n\nFor each test case, if the board contains X distinct colors, they will be named using the digits from 1 to X, inclusive (there will be at least one color and at most 9 colors in each test case).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n332. Connect the Cells\n\n\n\n\n\nProblem Statement:\n\n\n\"Connect the Cells\" is a very famous game, you can find a version of the game on any mobile device.\n\nThe game is played on a board of N rows with N cells in each row. Each cell is either empty or colored. We represent an empty cell with '0' and colored cell with a digit from '1' to '9'. For each color that exists on the board, there will be exactly 2 cells with that color. Your task is to connect every pair of cells of the same color with each other, without leaving any empty cells.\n\nTwo cells are adjacent to each other if they share an edge, vertically or horizontally. Cells colored with the same color in each input grid will never be adjacent to each other.\n\nHere is how you can connect 2 cells of the same color: Let's say you have a pen for each color and you will use it to color the cells, and once this pen touches any cell it will color it. You will start by putting the pen on one of the 2 cells, and keep moving it from its current cell to another adjacent cell, through empty cells, until you finally move it to the second cell with the same color. Once the pen enters the second cell of that color, these 2 cells are considered connected and you should stop using this pen, and start connecting the other colors (if there are still some left). The pen can not leave the board or color the same cell more than once.\n\nThe only exception when the pen can be on an already colored cell, when it's on the starting cell or the ending cell of its color, and it can be on any of them only once.\n\nCan you write a program to solve this game?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case will start with a line containing an integer N (3 \u2264 N \u2264 8) representing the size of the board. Followed by N lines, each one consists of N digits. Each digit represents a cell, with '0' meaning it is an empty cell. It's guaranteed that there will be at least one valid solution for each test case, and all input boards will satisfy all the conditions mentioned above.\n\nFor each test case, if the board contains X distinct colors, they will be named using the digits from 1 to X, inclusive (there will be at least one color and at most 9 colors in each test case).\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by N lines, each line should contain N characters. The j-th character in the i-th line represents the direction you used to exit from the j-th cell in the i-th row in the grid ('U' for up, 'R' for right, 'D' for down, 'L' for left and 'X' if it was the last cell you entered after connecting the cells of its color). If there are multiple solutions, print any of them.\n\n\n\n\nSample Input:\n\n2\n3\n100\n001\n202\n3\n101\n000\n000\n\n\n\nSample Output:\n\nCase 1:\nRRD\nRDX\nURX\nCase 2:\nDRX\nDUL\nRRU\n\n\n\nNotes:\n\n\nHere are the 2 sample cases:\n\n\n\nAnd here is a valid solution for each one:\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:32 UTC\n\n\n\n\nTime Limit:\n\n\n20 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3\n100\n001\n202\n3\n101\n000\n000\n\n\nSample Output:\n\nCase 1:\nRRD\nRDX\nURX\nCase 2:\nDRX\nDUL\nRRU\n\n",
    "Description": "\nProblem Statement:\n\n\n\"Connect the Cells\" is a very famous game, you can find a version of the game on any mobile device.\n\nThe game is played on a board of N rows with N cells in each row. Each cell is either empty or colored. We represent an empty cell with '0' and colored cell with a digit from '1' to '9'. For each color that exists on the board, there will be exactly 2 cells with that color. Your task is to connect every pair of cells of the same color with each other, without leaving any empty cells.\n\nTwo cells are adjacent to each other if they share an edge, vertically or horizontally. Cells colored with the same color in each input grid will never be adjacent to each other.\n\nHere is how you can connect 2 cells of the same color: Let's say you have a pen for each color and you will use it to color the cells, and once this pen touches any cell it will color it. You will start by putting the pen on one of the 2 cells, and keep moving it from its current cell to another adjacent cell, through empty cells, until you finally move it to the second cell with the same color. Once the pen enters the second cell of that color, these 2 cells are considered connected and you should stop using this pen, and start connecting the other colors (if there are still some left). The pen can not leave the board or color the same cell more than once.\n\nThe only exception when the pen can be on an already colored cell, when it's on the starting cell or the ending cell of its color, and it can be on any of them only once.\n\nCan you write a program to solve this game?\n\n\n",
    "Title": "332. Connect the Cells",
    "Notes": "\nNotes:\n\n\nHere are the 2 sample cases:\n\n\n\nAnd here is a valid solution for each one:\n\n\n\n",
    "URL": "https://a2oj.com/p?ID=332",
    "Time Limit": "20 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by N lines, each line should contain N characters. The j-th character in the i-th line represents the direction you used to exit from the j-th cell in the i-th row in the grid ('U' for up, 'R' for right, 'D' for down, 'L' for left and 'X' if it was the last cell you entered after connecting the cells of its color). If there are multiple solutions, print any of them.\n\n\n"
  },
  "2222": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 50) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing 3 integers separated by a single space N, M and D (1 \u2264 N \u2264 50) (1 \u2264 M \u2264 250) (1 \u2264 D \u2264 100,000) representing the number of stations, the number of groups of possible commuters, and the cost per extra bike in all stations, respectively. Followed by M lines, each line will contain 4 integers P, St, En and X (1 \u2264 P \u2264 100,000) (1 \u2264 St, En \u2264 N) (1 \u2264 X \u2264 100,000) representing the number of individuals in the group, the start and end of their commute, and the amount each individual is willing to pay, respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n333. Bike Sharing\n\n\n\n\n\nProblem Statement:\n\n\nThe city of Sharm El Sheikh is planning to open a bike sharing service in the city. They will build N bike stations at strategic points in the city. Each station will have a capacity C, meaning that at most C commuters may take a bike from a station in the morning, and at most C commuters may return a bike to a station in the evening. These numbers are independent (i.e. a station can still accept C bikes in the evening even if no bikes were taken from it in the morning).\n\nYou are in the planning department of this service, and you decided to do some market research to make sure the service is profitable. Here is what you found out: There are exactly M different groups of possible commuters that would like to use your service. Each group consists of P individuals, each individual in the same group wants to use the service in the same way: they all want to grab a bike from the a certain start station St in the morning, and return it to a certain (possibly the same) end station En in the evening, and each individual is willing to pay exactly X in return for this service. Since commuters need their bike for the whole day, no bike can be used by multiple commuters.\n\nThe number of bikes in a station may not satisfy all commuters. In this case you are free to pick the subset of commuters that you can satisfy that will pay the biggest amount in total (you don't need to pick the whole group, it's okay to pick a subset of the same group).\n\nNow armed with the above information, you have to choose the best possible value for C (possibly zero). Of course having a larger capacity comes with a cost. The cost of having a capacity C is D \u00d7 C. Can you figure out the maximum profit (total revenue - total cost) this service can generate?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 50) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing 3 integers separated by a single space N, M and D (1 \u2264 N \u2264 50) (1 \u2264 M \u2264 250) (1 \u2264 D \u2264 100,000) representing the number of stations, the number of groups of possible commuters, and the cost per extra bike in all stations, respectively. Followed by M lines, each line will contain 4 integers P, St, En and X (1 \u2264 P \u2264 100,000) (1 \u2264 St, En \u2264 N) (1 \u2264 X \u2264 100,000) representing the number of individuals in the group, the start and end of their commute, and the amount each individual is willing to pay, respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the maximum profit.\n\n\n\n\nSample Input:\n\n2\n2 3 3\n10 1 2 2\n10 1 1 2\n10 2 2 2\n2 3 5\n10 1 2 10\n10 1 1 2\n10 2 2 2\n\n\n\nSample Output:\n\nCase 1: 10\nCase 2: 50\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:36 UTC\n\n\n\n\nTime Limit:\n\n\n10 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 3 3\n10 1 2 2\n10 1 1 2\n10 2 2 2\n2 3 5\n10 1 2 10\n10 1 1 2\n10 2 2 2\n\n\nSample Output:\n\nCase 1: 10\nCase 2: 50\n\n",
    "Description": "\nProblem Statement:\n\n\nThe city of Sharm El Sheikh is planning to open a bike sharing service in the city. They will build N bike stations at strategic points in the city. Each station will have a capacity C, meaning that at most C commuters may take a bike from a station in the morning, and at most C commuters may return a bike to a station in the evening. These numbers are independent (i.e. a station can still accept C bikes in the evening even if no bikes were taken from it in the morning).\n\nYou are in the planning department of this service, and you decided to do some market research to make sure the service is profitable. Here is what you found out: There are exactly M different groups of possible commuters that would like to use your service. Each group consists of P individuals, each individual in the same group wants to use the service in the same way: they all want to grab a bike from the a certain start station St in the morning, and return it to a certain (possibly the same) end station En in the evening, and each individual is willing to pay exactly X in return for this service. Since commuters need their bike for the whole day, no bike can be used by multiple commuters.\n\nThe number of bikes in a station may not satisfy all commuters. In this case you are free to pick the subset of commuters that you can satisfy that will pay the biggest amount in total (you don't need to pick the whole group, it's okay to pick a subset of the same group).\n\nNow armed with the above information, you have to choose the best possible value for C (possibly zero). Of course having a larger capacity comes with a cost. The cost of having a capacity C is D \u00d7 C. Can you figure out the maximum profit (total revenue - total cost) this service can generate?\n\n\n",
    "Title": "333. Bike Sharing",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=333",
    "Time Limit": "10 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the maximum profit.\n\n\n"
  },
  "2223": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 10,000) representing the number of test cases. Followed by T test cases. Each test case will consist of a single line, containing 2 integers separated by a single space H and L (0 \u2264 H \u2264 1,000,000,000) (1 \u2264 L \u2264 1,000,000,000) (1 \u2264 L \u2264 2H) representing the maximum possible height and the number of leaves of the tree, respectively.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n334. Special Christmas Tree\n\n\n\n\n\nProblem Statement:\n\n\nChristmas is coming and everyone is building a Christmas tree, and you are no exception. However you are special and you want to build a special one. You decided to build a binary tree and to hang its root from the ceiling. For this problem a binary tree can be defined as a collection of connected nodes. The topmost node is called the root. Every node in the tree might have 0, 1 or 2 other nodes hanging from it, called children. Nodes with no children are called leaves. And every node has exactly 1 parent, except the root has no parent.\n\nYou bought a decoration pack containing some items and you want to use all of them to decorate all the leaves of the tree. You are limited by the height of your room, so the tree can not be longer than it. The height of tree is the number of edges on the path from the root to the farthest leaf.\n\nNote that each leaf must be decorated by exactly 1 item (and each item can decorate exactly 1 leaf), and you must use all items.\n\nCan you find the most special tree? Tree X is more special than tree Y, if X has more nodes than Y.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 10,000) representing the number of test cases. Followed by T test cases. Each test case will consist of a single line, containing 2 integers separated by a single space H and L (0 \u2264 H \u2264 1,000,000,000) (1 \u2264 L \u2264 1,000,000,000) (1 \u2264 L \u2264 2H) representing the maximum possible height and the number of leaves of the tree, respectively.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a single space then the number of nodes in the most special Christmas tree that has exactly L leaves and height at most H.\n\n\n\n\nSample Input:\n\n2\n3 2\n3 3\n\n\n\nSample Output:\n\nCase 1: 7\nCase 2: 9\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:37 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 2\n3 3\n\n\nSample Output:\n\nCase 1: 7\nCase 2: 9\n\n",
    "Description": "\nProblem Statement:\n\n\nChristmas is coming and everyone is building a Christmas tree, and you are no exception. However you are special and you want to build a special one. You decided to build a binary tree and to hang its root from the ceiling. For this problem a binary tree can be defined as a collection of connected nodes. The topmost node is called the root. Every node in the tree might have 0, 1 or 2 other nodes hanging from it, called children. Nodes with no children are called leaves. And every node has exactly 1 parent, except the root has no parent.\n\nYou bought a decoration pack containing some items and you want to use all of them to decorate all the leaves of the tree. You are limited by the height of your room, so the tree can not be longer than it. The height of tree is the number of edges on the path from the root to the farthest leaf.\n\nNote that each leaf must be decorated by exactly 1 item (and each item can decorate exactly 1 leaf), and you must use all items.\n\nCan you find the most special tree? Tree X is more special than tree Y, if X has more nodes than Y.\n\n\n",
    "Title": "334. Special Christmas Tree",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=334",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a single space then the number of nodes in the most special Christmas tree that has exactly L leaves and height at most H.\n\n\n"
  },
  "2224": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing an integer M (1 \u2264 M \u2264 100) representing the number of possible aspect ratios followed by M lines, each line will contain 2 integers Rx and Ry (1 \u2264 Rx \u2264 Ry \u2264 100) representing the i-th aspect ratio (for any given aspect ratio, the GCD of Rx and Ry will always be 1), all aspect ratios in the same test case will be distinct. The next line will contain an integer N (1 \u2264 N \u2264 100) representing the number of messed up images, followed by N lines, each line will contain 2 integers X and Y (1 \u2264 X, Y \u2264 100) representing the dimensions of the i-th messed up image.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n335. Messed up Pictures\n\n\n\n\n\nProblem Statement:\n\n\nYour friend had a lot of awesome pictures on her computer, until someone messed them up. She found out that most of her image files were either cropped and/or rotated by 90 degrees, or not changed at all. Luckily, she still remembers the original combined set of aspect ratios of all her images.\n\nAn aspect ratio for an image of dimensions (A, B) is (A / G, B / G) where G is the greatest common divisor (GCD) of A and B.\n\nSince we don't care about the image contents, a rotation operation is swapping the width and the height. And a crop operation is selecting a smaller sub-rectangle (with integer dimensions) inside the original image and its sides should be parallel to the sides of the original image.\n\nYour job is to help her to identify a possible original dimensions of each image. Given the dimensions of the messed up images, along with the possible aspect ratios, output a possible original dimensions of each image as well as how many operations were done to mess it up.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing an integer M (1 \u2264 M \u2264 100) representing the number of possible aspect ratios followed by M lines, each line will contain 2 integers Rx and Ry (1 \u2264 Rx \u2264 Ry \u2264 100) representing the i-th aspect ratio (for any given aspect ratio, the GCD of Rx and Ry will always be 1), all aspect ratios in the same test case will be distinct. The next line will contain an integer N (1 \u2264 N \u2264 100) representing the number of messed up images, followed by N lines, each line will contain 2 integers X and Y (1 \u2264 X, Y \u2264 100) representing the dimensions of the i-th messed up image.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by N lines, each line should contain 3 integers separated by a single space W, H and K representing a possible original dimensions for the i-th messed up image (the ratio of W and H should be one of the given ratios) and the number of operations used to mess it up (K should be 0 if no changes were made, 1 if it was cropped or rotated, 2 if it was cropped and rotated).\n\nFor each image, if there are multiple solutions, print the one that minimizes W \u00d7 H. If there are still multiple solutions, print the one that minimizes W. If there are still multiple solutions, print the one that minimizes K.\n\n\n\n\nSample Input:\n\n1\n1\n3 4\n5\n3 4\n4 3\n2 4\n4 2\n5 6\n\n\n\nSample Output:\n\nCase 1:\n3 4 0\n3 4 1\n3 4 1\n3 4 2\n6 8 1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:39 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n1\n3 4\n5\n3 4\n4 3\n2 4\n4 2\n5 6\n\n\nSample Output:\n\nCase 1:\n3 4 0\n3 4 1\n3 4 1\n3 4 2\n6 8 1\n\n",
    "Description": "\nProblem Statement:\n\n\nYour friend had a lot of awesome pictures on her computer, until someone messed them up. She found out that most of her image files were either cropped and/or rotated by 90 degrees, or not changed at all. Luckily, she still remembers the original combined set of aspect ratios of all her images.\n\nAn aspect ratio for an image of dimensions (A, B) is (A / G, B / G) where G is the greatest common divisor (GCD) of A and B.\n\nSince we don't care about the image contents, a rotation operation is swapping the width and the height. And a crop operation is selecting a smaller sub-rectangle (with integer dimensions) inside the original image and its sides should be parallel to the sides of the original image.\n\nYour job is to help her to identify a possible original dimensions of each image. Given the dimensions of the messed up images, along with the possible aspect ratios, output a possible original dimensions of each image as well as how many operations were done to mess it up.\n\n\n",
    "Title": "335. Messed up Pictures",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=335",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by N lines, each line should contain 3 integers separated by a single space W, H and K representing a possible original dimensions for the i-th messed up image (the ratio of W and H should be one of the given ratios) and the number of operations used to mess it up (K should be 0 if no changes were made, 1 if it was cropped or rotated, 2 if it was cropped and rotated).\n\nFor each image, if there are multiple solutions, print the one that minimizes W \u00d7 H. If there are still multiple solutions, print the one that minimizes W. If there are still multiple solutions, print the one that minimizes K.\n\n\n"
  },
  "2225": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 50) representing the number of test cases. Followed by T test cases. Each test case starts with a line will containing an integer N (1 \u2264 N \u2264 100,000) representing the number of passwords, followed by N lines, each one will contain a non-empty string of at most 5 digits (from '0' to '9'), representing a password (might contain leading zeros).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n336. Equivalent Passwords\n\n\n\n\n\nProblem Statement:\n\n\nYesterday you arrived at the hotel, and you kept all your valuable stuff in your room's safe. Unfortunately, you forgot the password. But you have a very long list of passwords (each password is at most 5 digits), and you are sure that your password is one of them.\n\nThe safe will consider some passwords equivalent. Two passwords A and B are considered equivalent, if they are of the same length, and |A[i] - B[i]| is the same for all possible values of i, where X[i] is the i-th digit of X and |Y| is the absolute value of Y.\n\nYou will go through the list of passwords in the given order. For each password, you will do the following:\n\nIf the same password or any of its equivalent passwords were typed before, skip this password.\nOtherwise, type this password into the safe.\nIf it's the correct password (or any of its equivalent passwords), the safe will open and you will stop any further processing.\nNow given the list of all passwords, you would like to know, in the worst case scenario, what is the maximum number of passwords you will have to type?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 50) representing the number of test cases. Followed by T test cases. Each test case starts with a line will containing an integer N (1 \u2264 N \u2264 100,000) representing the number of passwords, followed by N lines, each one will contain a non-empty string of at most 5 digits (from '0' to '9'), representing a password (might contain leading zeros).\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the maximum number of passwords you will have to type.\n\n\n\n\nSample Input:\n\n3\n3\n000\n111\n222\n4\n1111\n123\n214\n2222\n3\n43434\n54545\n45454\n\n\n\nSample Output:\n\nCase 1: 1\nCase 2: 2\nCase 3: 2\n\n\n\nNotes:\n\n\nIn the first test case: all passwords are equivalent to each other. This means that the first password will open the safe for sure.\n\nIn the second test case:\n\n- If the first password is the correct one, you will type 1 password.\n- If the second password is the correct one, you will type 2 passwords.\n- If the third password is the correct one, you will type 2 passwords (because the second password is equivalent to the third one).\n- If the fourth password is the correct one, you will type 1 password (because the first password is equivalent to the fourth one).\n\nIn the third test case:\n\n- If the first password is the correct one, you will type 1 password.\n- If the second password is the correct one, you will type 1 password (because the first password is equivalent to the second one).\n- If the third password is the correct one, you will type 2 passwords. Even though the third password is equivalent to the second password, the second password was skipped, and therefore you should type the third password.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:41 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3\n000\n111\n222\n4\n1111\n123\n214\n2222\n3\n43434\n54545\n45454\n\n\nSample Output:\n\nCase 1: 1\nCase 2: 2\nCase 3: 2\n\n",
    "Description": "\nProblem Statement:\n\n\nYesterday you arrived at the hotel, and you kept all your valuable stuff in your room's safe. Unfortunately, you forgot the password. But you have a very long list of passwords (each password is at most 5 digits), and you are sure that your password is one of them.\n\nThe safe will consider some passwords equivalent. Two passwords A and B are considered equivalent, if they are of the same length, and |A[i] - B[i]| is the same for all possible values of i, where X[i] is the i-th digit of X and |Y| is the absolute value of Y.\n\nYou will go through the list of passwords in the given order. For each password, you will do the following:\n\nIf the same password or any of its equivalent passwords were typed before, skip this password.\nOtherwise, type this password into the safe.\nIf it's the correct password (or any of its equivalent passwords), the safe will open and you will stop any further processing.\nNow given the list of all passwords, you would like to know, in the worst case scenario, what is the maximum number of passwords you will have to type?\n\n\n",
    "Title": "336. Equivalent Passwords",
    "Notes": "\nNotes:\n\n\nIn the first test case: all passwords are equivalent to each other. This means that the first password will open the safe for sure.\n\nIn the second test case:\n\n- If the first password is the correct one, you will type 1 password.\n- If the second password is the correct one, you will type 2 passwords.\n- If the third password is the correct one, you will type 2 passwords (because the second password is equivalent to the third one).\n- If the fourth password is the correct one, you will type 1 password (because the first password is equivalent to the fourth one).\n\nIn the third test case:\n\n- If the first password is the correct one, you will type 1 password.\n- If the second password is the correct one, you will type 1 password (because the first password is equivalent to the second one).\n- If the third password is the correct one, you will type 2 passwords. Even though the third password is equivalent to the second password, the second password was skipped, and therefore you should type the third password.\n\n",
    "URL": "https://a2oj.com/p?ID=336",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space then the maximum number of passwords you will have to type.\n\n\n"
  },
  "2226": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing 2 integers N and K (2 \u2264 N \u2264 1,000) (1 \u2264 K \u2264 100) (1 \u2264 K \u2264 N - 1) representing the total number of castles in the tree and the number of castles Mario has to visit. Followed by N-1 lines, each line describes the nodes 2 to N. Each line will contain 2 integers Pi and Ci (1 \u2264 Pi \u2264 N) (0 \u2264 Ci \u2264 100,000) representing the parent of the i-th node (i starts from 2 here) and the time it takes to pass the edge connecting the current node to its parent. Node 1 is the root of the tree.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n337. Mario and Evil Toad\n\n\n\n\n\nProblem Statement:\n\n\nMario is trying to save Princess Peach from the evil Bowser. But at the end of every level, a small mushroom guy called Toad tells him that she is at a different castle. Mario suspects that Toad is actually evil, and keeps sending Mario to the furthest castle possible just for fun.\n\nMario's world can be modeled as a tree with N nodes (a tree of N nodes is a connected graph with N-1 edges, nodes are numbered from 1 to N), where each node represents a castle, and each edge represents a level. Mario starts his journey at the root of the tree, and travels around the tree (possibly passing the same nodes and edges several times) looking for the Princess in castles, according to the directions of Toad. It takes Mario a certain amount of time to cross a level (and it is the same in both direction).\n\nToad picks K distinct castles (the root isn't one of them), and Mario must visit them in the exact given order (Mario must start and end his tour at the root). Mario always takes the shortest path when going from one node to another. What is the maximum possible duration of Mario's journey if Toad had picked the worst possible K castles?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100) representing the number of test cases. Followed by T test cases. Each test case starts with a line containing 2 integers N and K (2 \u2264 N \u2264 1,000) (1 \u2264 K \u2264 100) (1 \u2264 K \u2264 N - 1) representing the total number of castles in the tree and the number of castles Mario has to visit. Followed by N-1 lines, each line describes the nodes 2 to N. Each line will contain 2 integers Pi and Ci (1 \u2264 Pi \u2264 N) (0 \u2264 Ci \u2264 100,000) representing the parent of the i-th node (i starts from 2 here) and the time it takes to pass the edge connecting the current node to its parent. Node 1 is the root of the tree.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space, followed by the maximum duration for Mario's journey.\n\n\n\n\nSample Input:\n\n3\n3 1\n1 5\n1 3\n4 2\n1 5\n1 3\n3 2\n5 3\n1 5\n1 3\n3 2\n3 10\n\n\n\nSample Output:\n\nCase 1: 10\nCase 2: 20\nCase 3: 46\n\n\n\nNotes:\n\n\nFor the third test case, one of the possible lists that Toad could have given Mario is following: 5, 2, 4.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2014-11-20 22:34:43 UTC\n\n\n\n\nTime Limit:\n\n\n15 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2014\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3 1\n1 5\n1 3\n4 2\n1 5\n1 3\n3 2\n5 3\n1 5\n1 3\n3 2\n3 10\n\n\nSample Output:\n\nCase 1: 10\nCase 2: 20\nCase 3: 46\n\n",
    "Description": "\nProblem Statement:\n\n\nMario is trying to save Princess Peach from the evil Bowser. But at the end of every level, a small mushroom guy called Toad tells him that she is at a different castle. Mario suspects that Toad is actually evil, and keeps sending Mario to the furthest castle possible just for fun.\n\nMario's world can be modeled as a tree with N nodes (a tree of N nodes is a connected graph with N-1 edges, nodes are numbered from 1 to N), where each node represents a castle, and each edge represents a level. Mario starts his journey at the root of the tree, and travels around the tree (possibly passing the same nodes and edges several times) looking for the Princess in castles, according to the directions of Toad. It takes Mario a certain amount of time to cross a level (and it is the same in both direction).\n\nToad picks K distinct castles (the root isn't one of them), and Mario must visit them in the exact given order (Mario must start and end his tour at the root). Mario always takes the shortest path when going from one node to another. What is the maximum possible duration of Mario's journey if Toad had picked the worst possible K castles?\n\n\n",
    "Title": "337. Mario and Evil Toad",
    "Notes": "\nNotes:\n\n\nFor the third test case, one of the possible lists that Toad could have given Mario is following: 5, 2, 4.\n\n",
    "URL": "https://a2oj.com/p?ID=337",
    "Time Limit": "15 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing \"Case n:\" (without quotes) where n is the test case number (starting from 1) followed by a space, followed by the maximum duration for Mario's journey.\n\n\n"
  },
  "2227": {
    "Input Description": "\nInput Format:\n\n\nThe first line will be an integer T, the number of test cases. Then T test cases follow\nevery test case consists of two lines. The first line in N, the number of array elements. The second line contains the array elements themselves.\n\nYou can guarantee that T <= 100, N <= 100,000 , and all array elements are between 1 and 1,000,000,000\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n367. Count Inversions\n\n\n\n\n\nProblem Statement:\n\n\nGiven an array A of integers, you're to calculate the number of inversions in this array. Number of inversions is the number of pairs (i,j) of array indices with i<j and A[i] > A[j]\n\n\n\n\nInput Format:\n\n\nThe first line will be an integer T, the number of test cases. Then T test cases follow\nevery test case consists of two lines. The first line in N, the number of array elements. The second line contains the array elements themselves.\n\nYou can guarantee that T <= 100, N <= 100,000 , and all array elements are between 1 and 1,000,000,000\n\n\n\n\nOutput Format:\n\n\nFor every test case, you're to print one integer: the number of inversions, followed by endline.\n\n\n\n\nSample Input:\n\n3\n4\n1 2 3 4\n2\n2 1\n4\n3 2 1 4\n\n\n\nSample Output:\n\n0\n1\n3\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmultisystem\n\n\n\n\nAdded at:\n\n\n2015-02-27 19:37:46 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nYes\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n4\n1 2 3 4\n2\n2 1\n4\n3 2 1 4\n\n\nSample Output:\n\n0\n1\n3\n\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven an array A of integers, you're to calculate the number of inversions in this array. Number of inversions is the number of pairs (i,j) of array indices with i<j and A[i] > A[j]\n\n\n",
    "Title": "367. Count Inversions",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=367",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor every test case, you're to print one integer: the number of inversions, followed by endline.\n\n\n"
  },
  "2228": {
    "Input Description": "\nInput Format:\n\n\nThe first line is an integer T, the number of test cases, then T test cases follow\nevery test case consist of two lines, N the number of array elements, and the second line contains the elements themselves.\n\nYou can consider that T<=100, N<=100,000, value of array elements <= 1000,000,000\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n368. Count in Quicksort\n\n\n\n\n\nProblem Statement:\n\n\nGiven an array A of integers, you're to calculate how many comparisons between the pivot element and other array elements are made in quicksort algorithm. Notice that the number of comparisons depends on the choice of the pivot element, so you're given three ways to select the pivot element.\n\nMethod 1: Let the pivot always be the first element.\nMethod 2: Let the pivot always be the last element.\nMethod 3: for an array A, let the pivot be the median of (first element in A, middle element in A, last element in A). That is, for some state where the index of the first element is S, index of the last element is E, you should sort the three elements (A[S], A[(S+E)/2], A[E]) and return the median value as pivot.\n\nWARNING: The Partition subroutine can be implemented in several different ways, and different implementations can give you differing numbers of comparisons. For this problem, you should implement the Partition subroutine exactly as it is described in the video lectures on Coursera (otherwise you might get the wrong answer).\n\n\n\n\nInput Format:\n\n\nThe first line is an integer T, the number of test cases, then T test cases follow\nevery test case consist of two lines, N the number of array elements, and the second line contains the elements themselves.\n\nYou can consider that T<=100, N<=100,000, value of array elements <= 1000,000,000\n\n\n\n\nOutput Format:\n\n\nYou should print 3 integer per test case, the number of comparisons made by using method #1, method #2, and method #3, followed by endline\n\n\n\n\nSample Input:\n\n3\n3\n1 2 3\n4\n4 3 2 1\n4\n1 4 2 3\n\n\n\n\nSample Output:\n\n3 3 2\n6 6 4\n6 4 4\n\n\n\n\nNotes:\n\n\nFor the first test case, using the first and last elements as pivot results in 3 comparisons, while using the third method results in 2 comparisons only.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmultisystem\n\n\n\n\nAdded at:\n\n\n2015-02-27 19:37:49 UTC\n\n\n\n\nTime Limit:\n\n\n2147483647--2147483648 second(s)\n\n\n\n\n\nPartial score:\n\n\nYes\n\n\nSource:Coursera\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3\n1 2 3\n4\n4 3 2 1\n4\n1 4 2 3\n\n\n\nSample Output:\n\n3 3 2\n6 6 4\n6 4 4\n\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven an array A of integers, you're to calculate how many comparisons between the pivot element and other array elements are made in quicksort algorithm. Notice that the number of comparisons depends on the choice of the pivot element, so you're given three ways to select the pivot element.\n\nMethod 1: Let the pivot always be the first element.\nMethod 2: Let the pivot always be the last element.\nMethod 3: for an array A, let the pivot be the median of (first element in A, middle element in A, last element in A). That is, for some state where the index of the first element is S, index of the last element is E, you should sort the three elements (A[S], A[(S+E)/2], A[E]) and return the median value as pivot.\n\nWARNING: The Partition subroutine can be implemented in several different ways, and different implementations can give you differing numbers of comparisons. For this problem, you should implement the Partition subroutine exactly as it is described in the video lectures on Coursera (otherwise you might get the wrong answer).\n\n\n",
    "Title": "368. Count in Quicksort",
    "Notes": "\nNotes:\n\n\nFor the first test case, using the first and last elements as pivot results in 3 comparisons, while using the third method results in 2 comparisons only.\n\n",
    "URL": "https://a2oj.com/p?ID=368",
    "Time Limit": "2147483647--2147483648 second(s)",
    "Output Description": "\nOutput Format:\n\n\nYou should print 3 integer per test case, the number of comparisons made by using method #1, method #2, and method #3, followed by endline\n\n\n"
  },
  "2229": {
    "Input Description": "\nInput Format:\n\n\nThe first line is an integer T, the number of test cases, followed by T lines.\nEvery test case consists of 4 integers: N, K, m_w, m_z.\n\nYou can consider that N <= 10,000,000, 1 <= K <= N, 1 <= m_w,m_z <= 100.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n369. Kth Order Statistic\n\n\n\n\n\nProblem Statement:\n\n\nGiven an array A of integers and an integer k, you're to get the kth minimum integer in this array. \n\nSince the array size maybe large, the array is not given as input. You've to generate it yourself. To generate the array elements, consider this function that generates a random number:\n\nlong long m_w, m_z;\nint get_random()\n{\n     m_z = 36969 * (m_z & 65535) + (m_z >> 16);\n     m_w = 18000 * (m_w & 65535) + (m_w >> 16);\n     long long res = (m_z << 16) + m_w;\n     return res % 1000000000;\n}\n\nYou'll be given the initial values of m_w and m_z, and the array size N. Then you've to call this function N times to generate the N array elements.\n\n\n\n\nInput Format:\n\n\nThe first line is an integer T, the number of test cases, followed by T lines.\nEvery test case consists of 4 integers: N, K, m_w, m_z.\n\nYou can consider that N <= 10,000,000, 1 <= K <= N, 1 <= m_w,m_z <= 100.\n\n\n\n\nOutput Format:\n\n\nFor every test case print one integer: the kth minimum number\n\n\n\n\nSample Input:\n\n3\n3 1 1 2\n3 2 1 2\n3 3 1 2\n\n\n\n\nSample Output:\n\n643275087\n692891904\n845618768\n\n\n\nNotes:\n\n\nAfter setting m_w = 1, m_z = 2 as mentioned in the sample input, the first three array elements will be {845618768, 692891904, 643275087}. So the 1st number is 643275087, the 2nd is 692891904, and the 3rd is 845618768.\n\nHint: you can't just sort the array. You need to solve it in linear time.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmultisystem\n\n\n\n\nAdded at:\n\n\n2015-02-27 19:37:52 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nYes\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3 1 1 2\n3 2 1 2\n3 3 1 2\n\n\n\nSample Output:\n\n643275087\n692891904\n845618768\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven an array A of integers and an integer k, you're to get the kth minimum integer in this array. \n\nSince the array size maybe large, the array is not given as input. You've to generate it yourself. To generate the array elements, consider this function that generates a random number:\n\nlong long m_w, m_z;\nint get_random()\n{\n     m_z = 36969 * (m_z & 65535) + (m_z >> 16);\n     m_w = 18000 * (m_w & 65535) + (m_w >> 16);\n     long long res = (m_z << 16) + m_w;\n     return res % 1000000000;\n}\n\nYou'll be given the initial values of m_w and m_z, and the array size N. Then you've to call this function N times to generate the N array elements.\n\n\n",
    "Title": "369. Kth Order Statistic",
    "Notes": "\nNotes:\n\n\nAfter setting m_w = 1, m_z = 2 as mentioned in the sample input, the first three array elements will be {845618768, 692891904, 643275087}. So the 1st number is 643275087, the 2nd is 692891904, and the 3rd is 845618768.\n\nHint: you can't just sort the array. You need to solve it in linear time.\n\n",
    "URL": "https://a2oj.com/p?ID=369",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor every test case print one integer: the kth minimum number\n\n\n"
  },
  "2230": {
    "Input Description": "\nInput Format:\n\n\nThe first line will be an integer T, the number of test cases. Then T test cases follow.\nEvery test case begins by 3 integers, N the number of camping places, S is the number of node where the military base is, D is the number of node of the enemy camp.\n\nfollowing are N lines, the ith line contains an integer E, the number of roads connected to node i, followed by a space, followed by a colon ':', followed by E nodes, the camping places which the ith node is connected with. Every node number is preceded by a exactly one space.\n\nYou can guarantee that T <= 100, N <= 20, 1 <= S,D <= N.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n380. Isolation of Enemy\n\n\n\n\n\nProblem Statement:\n\n\nYour enemy has a huge army, and it's ready to attack your country at anytime. Enemy is camping at some place far from the their military base. To send supplies and aids from their military base to their camp, they need to pass by some roads until they reach the camp. There's at least one way to reach the camp from the military base. The roads are connecting some possible camping places. Roads are bidirectional, meaning you can use this road to go in both directions.\n\nIn order to defeat your enemy, you need to cut the supplies going from their military base to their camp. To cut the supplies you need to block every possible path connecting them so the enemy is unable any more to reach their camp. Since blocking a road costs much (dynamites are expensive!), your country need to know the minimum number of roads needed to be cut in order to isolate the enemy's camp completely.\n\nSince you're a brilliant programmer, your country recruited you to write a program to calculate the minimum number of roads needed to be cut in order to isolate the camp from the military base. You can represent the camping places as nodes in a graph, and the roads connecting them as edges.\n\n\n\n\nInput Format:\n\n\nThe first line will be an integer T, the number of test cases. Then T test cases follow.\nEvery test case begins by 3 integers, N the number of camping places, S is the number of node where the military base is, D is the number of node of the enemy camp.\n\nfollowing are N lines, the ith line contains an integer E, the number of roads connected to node i, followed by a space, followed by a colon ':', followed by E nodes, the camping places which the ith node is connected with. Every node number is preceded by a exactly one space.\n\nYou can guarantee that T <= 100, N <= 20, 1 <= S,D <= N.\n\n\n\n\nOutput Format:\n\n\nFor every test case, you should print one integer followed by endline, the minimum number of roads needed to be cut to disconnect the nodes S and D.\n\n\n\n\nSample Input:\n\n2\n4 1 4\n2 : 2 4\n3 : 1 4 3\n2 : 2 4\n3 : 1 2 3\n2 1 2\n1 : 2\n1 : 1\n\n\n\nSample Output:\n\n2\n1\n\n\n\nNotes:\n\n\nIn this input, there are 2 test cases.\nIn the first test case, the graph consists of 4 nodes, and you need to disconnect node 1 from node 4. The configuration of the graph is:\nnode 1 is connected to nodes 2,4.\nnode 2 is connected to nodes 1,4,3.\nnode 3 is connected to nodes 2,4.\nnode 4 is connected to nodes 1,2,3.\n\nHence, the minimum number of roads to be cut is 2 (i.e. the roads of node 1).\n\nIn the second test cases, the graph consists of only 2 nodes connected to each other with only one edge, so the answer is 1.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmultisystem\n\n\n\n\nAdded at:\n\n\n2015-03-12 01:18:02 UTC\n\n\n\n\nTime Limit:\n\n\n7 seconds\n\n\n\n\n\nPartial score:\n\n\nYes\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n4 1 4\n2 : 2 4\n3 : 1 4 3\n2 : 2 4\n3 : 1 2 3\n2 1 2\n1 : 2\n1 : 1\n\n\nSample Output:\n\n2\n1\n\n",
    "Description": "\nProblem Statement:\n\n\nYour enemy has a huge army, and it's ready to attack your country at anytime. Enemy is camping at some place far from the their military base. To send supplies and aids from their military base to their camp, they need to pass by some roads until they reach the camp. There's at least one way to reach the camp from the military base. The roads are connecting some possible camping places. Roads are bidirectional, meaning you can use this road to go in both directions.\n\nIn order to defeat your enemy, you need to cut the supplies going from their military base to their camp. To cut the supplies you need to block every possible path connecting them so the enemy is unable any more to reach their camp. Since blocking a road costs much (dynamites are expensive!), your country need to know the minimum number of roads needed to be cut in order to isolate the enemy's camp completely.\n\nSince you're a brilliant programmer, your country recruited you to write a program to calculate the minimum number of roads needed to be cut in order to isolate the camp from the military base. You can represent the camping places as nodes in a graph, and the roads connecting them as edges.\n\n\n",
    "Title": "380. Isolation of Enemy",
    "Notes": "\nNotes:\n\n\nIn this input, there are 2 test cases.\nIn the first test case, the graph consists of 4 nodes, and you need to disconnect node 1 from node 4. The configuration of the graph is:\nnode 1 is connected to nodes 2,4.\nnode 2 is connected to nodes 1,4,3.\nnode 3 is connected to nodes 2,4.\nnode 4 is connected to nodes 1,2,3.\n\nHence, the minimum number of roads to be cut is 2 (i.e. the roads of node 1).\n\nIn the second test cases, the graph consists of only 2 nodes connected to each other with only one edge, so the answer is 1.\n\n",
    "URL": "https://a2oj.com/p?ID=380",
    "Time Limit": "7 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor every test case, you should print one integer followed by endline, the minimum number of roads needed to be cut to disconnect the nodes S and D.\n\n\n"
  },
  "2231": {
    "Input Description": "\nInput Format:\n\n\nThe first input line contains a positive integer, n, indicating the number of customers to check.\nThe customers are on the following n input lines, one customer per line. Each line provides two\nintegers; the first integer c (1 <= c <= 100) is the number of items purchased by the customer, and\nthe second integer p (3 <= p <= 50) is the price for one item.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n381. Buying in Bulk\n\n\n\n\n\nProblem Statement:\n\n\nTo encourage customers to shop more, some stores charge lower prices if you buy multiples of\nan item. For example, if you buy one, it may cost you $5 but if you buy two, it will cost you $8\ninstead of $10.\n\nThe Problem:\n\nLet's assume a store provides discounts as follows:\n1. No discount if you buy only one.\n2. $2 discount for each additional item if you buy more than one.\n\nGiven the number of items a customer has purchased and the price for one item, you are to\ncompute the total cost for the customer.\n\n\n\n\nInput Format:\n\n\nThe first input line contains a positive integer, n, indicating the number of customers to check.\nThe customers are on the following n input lines, one customer per line. Each line provides two\nintegers; the first integer c (1 <= c <= 100) is the number of items purchased by the customer, and\nthe second integer p (3 <= p <= 50) is the price for one item.\n\n\n\n\nOutput Format:\n\n\nFor each customer, print two lines of output. The first line will contain the two input values\nseparated by a single space. The second output line will contain the total cost for the customer.\nThere should be no leading or trailing spaces on any output line.\n\n\n\n\nSample Input:\n\n2\n1 5\n3 10\n\n\n\nSample Output:\n\n1 5\n5\n3 10\n26\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmuaz.32\n\n\n\n\nAdded at:\n\n\n2015-03-13 13:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:DCPC training 2015\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1 5\n3 10\n\n\nSample Output:\n\n1 5\n5\n3 10\n26\n\n",
    "Description": "\nProblem Statement:\n\n\nTo encourage customers to shop more, some stores charge lower prices if you buy multiples of\nan item. For example, if you buy one, it may cost you $5 but if you buy two, it will cost you $8\ninstead of $10.\n\nThe Problem:\n\nLet's assume a store provides discounts as follows:\n1. No discount if you buy only one.\n2. $2 discount for each additional item if you buy more than one.\n\nGiven the number of items a customer has purchased and the price for one item, you are to\ncompute the total cost for the customer.\n\n\n",
    "Title": "381. Buying in Bulk",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=381",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each customer, print two lines of output. The first line will contain the two input values\nseparated by a single space. The second output line will contain the total cost for the customer.\nThere should be no leading or trailing spaces on any output line.\n\n\n"
  },
  "2232": {
    "Input Description": "\nInput Format:\n\n\nMack and Zack play multiple games. The first line of the input to your program will be an integer g, indicating the number of games to be played. This will be followed by g lines, with two words on each line, indicating the two initial words. The words will consist of only lowercase letters ('a' - 'z' ), each word at least one letter and at most 20 letters, first word starting in column one and the second word separated from the first word by exactly one space.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n382. The Suffix Game\n\n\n\n\n\nProblem Statement:\n\n\nDr. Orooji's twins, Mack and Zack, have discovered a new game to help them pass the time. First, Mack will select a word from the dictionary and write it down. Next, Zack selects a word and writes it down below Mack's word, taking care that the ends of the words are aligned. For instance, if Mack chooses the word \"random\", and Zack chooses \"kingdom\", then they will write them down as: \n random \nkingdom \n\nObserve that the shorter word has been padded with a space at the front, to make the ends of the words line up.\n\nNext, they will take turns examining the last letter of each word. If both strings end with the same letter, it will be removed from the ends of both strings. This procedure continues until the final characters do not match. So, for the previous example, the procedure will give: \n\nrandom  --> rando   --> rand  --> ran \nkingdom --> kingdo --> kingd --> king \n\nThere is a catch, though. When the game ends, the two resulting words are written down in a special notebook. Since the twins insist on writing exactly two words, neither word must be completely consumed. Thus, the shortening procedure will end if either of the strings is shrunk down to a single character (see Sample Input/Output for clarification).\n\nThe Problem: Dr. Orooji has decided to beat the twins at their own game, literally. Your job is to assist him by writing a program that, given the two starting words of a game, will play the game to the end and output the two final words.\n\n\n\n\nInput Format:\n\n\nMack and Zack play multiple games. The first line of the input to your program will be an integer g, indicating the number of games to be played. This will be followed by g lines, with two words on each line, indicating the two initial words. The words will consist of only lowercase letters ('a' - 'z' ), each word at least one letter and at most 20 letters, first word starting in column one and the second word separated from the first word by exactly one space.\n\n\n\n\nOutput Format:\n\n\nAt the beginning of each test case, output \"Game #g:\", where g is the game number (starting from 1). Then, output the two input words (indented three columns). Finally, output the results of the game (indented three columns) by saying: \"The words entered in the notebook are w1 and w2. \", where w1 and w2 represent the two final words, in the same order as the originals. \nLeave a blank line after the output for each test case. Follow the format illustrated in Sample Output.\n\n\n\n\nSample Input:\n\n4\nrandom kingdom\nwin twin \ncrushed sofa \nmyucf ucf\n\n\n\nSample Output:\n\nGame #1: \n   The input words are random and kingdom. \n   The words entered in the notebook are ran and king.\n\nGame #2: \n   The input words are win and twin.\n   The words entered in the notebook are w and tw. \n\nGame #3: \n   The input words are crushed and sofa. \n   The words entered in the notebook are crushed and sofa. \n\nGame #4: \n   The input words are myucf and ucf. \n   The words entered in the notebook are myu and u.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmuaz.32\n\n\n\n\nAdded at:\n\n\n2015-03-13 13:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:DCPC training 2015\n\n\n\n",
    "Example": "\nSample Input:\n\n4\nrandom kingdom\nwin twin \ncrushed sofa \nmyucf ucf\n\n\nSample Output:\n\nGame #1: \n   The input words are random and kingdom. \n   The words entered in the notebook are ran and king.\n\nGame #2: \n   The input words are win and twin.\n   The words entered in the notebook are w and tw. \n\nGame #3: \n   The input words are crushed and sofa. \n   The words entered in the notebook are crushed and sofa. \n\nGame #4: \n   The input words are myucf and ucf. \n   The words entered in the notebook are myu and u.\n\n",
    "Description": "\nProblem Statement:\n\n\nDr. Orooji's twins, Mack and Zack, have discovered a new game to help them pass the time. First, Mack will select a word from the dictionary and write it down. Next, Zack selects a word and writes it down below Mack's word, taking care that the ends of the words are aligned. For instance, if Mack chooses the word \"random\", and Zack chooses \"kingdom\", then they will write them down as: \n random \nkingdom \n\nObserve that the shorter word has been padded with a space at the front, to make the ends of the words line up.\n\nNext, they will take turns examining the last letter of each word. If both strings end with the same letter, it will be removed from the ends of both strings. This procedure continues until the final characters do not match. So, for the previous example, the procedure will give: \n\nrandom  --> rando   --> rand  --> ran \nkingdom --> kingdo --> kingd --> king \n\nThere is a catch, though. When the game ends, the two resulting words are written down in a special notebook. Since the twins insist on writing exactly two words, neither word must be completely consumed. Thus, the shortening procedure will end if either of the strings is shrunk down to a single character (see Sample Input/Output for clarification).\n\nThe Problem: Dr. Orooji has decided to beat the twins at their own game, literally. Your job is to assist him by writing a program that, given the two starting words of a game, will play the game to the end and output the two final words.\n\n\n",
    "Title": "382. The Suffix Game",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=382",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nAt the beginning of each test case, output \"Game #g:\", where g is the game number (starting from 1). Then, output the two input words (indented three columns). Finally, output the results of the game (indented three columns) by saying: \"The words entered in the notebook are w1 and w2. \", where w1 and w2 represent the two final words, in the same order as the originals. \nLeave a blank line after the output for each test case. Follow the format illustrated in Sample Output.\n\n\n"
  },
  "2233": {
    "Input Description": "\nInput Format:\n\n\nThe first input line contains a positive integer, n, indicating the number of test cases.\nEach test case consists of a positive real number (between 0.001 and 1000, inclusive) in a single line denoting the radius, r.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n383. Circles Inside a Square\n\n\n\n\n\nProblem Statement:\n\n\nYou have 8 circles of equal size and you want to pack them inside a square. You want to\nminimize the size of the square.\nThe following figure illustrates the minimum way of packing 8 circles inside a square:\n\nThe Problem:\nGiven the radius, r, find the area of the minimum square into which 8 circles of that radius can\nbe packed.\n\n\n\n\nInput Format:\n\n\nThe first input line contains a positive integer, n, indicating the number of test cases.\nEach test case consists of a positive real number (between 0.001 and 1000, inclusive) in a single line denoting the radius, r.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output the area of the minimum square where 8 circles of radius r can be\npacked. Print 5 digits after the decimal. Your output is considered correct if it is within\n\u00b10.000001 of the judge's output.\n\n\n\n\nSample Input:\n\n2\n0.1\n0.2\n\n\n\nSample Output:\n\n0.34383\n1.37532\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmuaz.32\n\n\n\n\nAdded at:\n\n\n2015-03-13 13:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:DCPC training 2015\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n0.1\n0.2\n\n\nSample Output:\n\n0.34383\n1.37532\n\n",
    "Description": "\nProblem Statement:\n\n\nYou have 8 circles of equal size and you want to pack them inside a square. You want to\nminimize the size of the square.\nThe following figure illustrates the minimum way of packing 8 circles inside a square:\n\nThe Problem:\nGiven the radius, r, find the area of the minimum square into which 8 circles of that radius can\nbe packed.\n\n\n",
    "Title": "383. Circles Inside a Square",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=383",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output the area of the minimum square where 8 circles of radius r can be\npacked. Print 5 digits after the decimal. Your output is considered correct if it is within\n\u00b10.000001 of the judge's output.\n\n\n"
  },
  "2234": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the file will contain a single positive integer n (1 <= n <= 50), denoting the number of test cases in the file. The first line of each test case contains one integer, k (1 <= k <= 100), denoting the number of points for that test case.\nThe second line of each test case contains k ordered pairs of integers (separated by spaces) denoting the x and y coordinates of each point, respectively. It is guaranteed that -100 <= x <= 100 and -100 <= y <= 100 for all coordinates. It is also guaranteed that each point given will be unique.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n384. Counting Triangles\n\n\n\n\n\nProblem Statement:\n\n\nTriangle Tom is at it again. This time, however, instead of attempting to calculate areas of triangles, he just wants to count how many of them there are. Given a list of possible points, your job will be to help Tom figure out how many different triangles can be formed with those points.\n\nThe Problem:\nGiven a list of points in the Cartesian plane, determine how many triangles (with all angles strictly less than 180\u00ba) can be formed with those points.\n\n\n\n\nInput Format:\n\n\nThe first line of the file will contain a single positive integer n (1 <= n <= 50), denoting the number of test cases in the file. The first line of each test case contains one integer, k (1 <= k <= 100), denoting the number of points for that test case.\nThe second line of each test case contains k ordered pairs of integers (separated by spaces) denoting the x and y coordinates of each point, respectively. It is guaranteed that -100 <= x <= 100 and -100 <= y <= 100 for all coordinates. It is also guaranteed that each point given will be unique.\n\n\n\n\nOutput Format:\n\n\nAt the beginning of each test case, output \"Test case #t: \", where t is the test case number (starting from 1). Follow this with a statement of the following form:\n\nx triangle(s) can be formed.\n\nwhere x represents the distinct number of triangles that can be formed with the given points. Leave a blank line after the output for each data set.\n\nFollow the format illustrated in Sample\nOutput.\n\n\n\n\nSample Input:\n\n2\n4\n1 1 2 2 3 4 4 4\n3\n2 4 6 8 7 9\n\n\n\nSample Output:\n\nTest case #1: 3 triangle(s) can be formed.\n\nTest case #2: 0 triangle(s) can be formed.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmuaz.32\n\n\n\n\nAdded at:\n\n\n2015-03-13 13:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:DCPC training 2015\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n4\n1 1 2 2 3 4 4 4\n3\n2 4 6 8 7 9\n\n\nSample Output:\n\nTest case #1: 3 triangle(s) can be formed.\n\nTest case #2: 0 triangle(s) can be formed.\n\n",
    "Description": "\nProblem Statement:\n\n\nTriangle Tom is at it again. This time, however, instead of attempting to calculate areas of triangles, he just wants to count how many of them there are. Given a list of possible points, your job will be to help Tom figure out how many different triangles can be formed with those points.\n\nThe Problem:\nGiven a list of points in the Cartesian plane, determine how many triangles (with all angles strictly less than 180\u00ba) can be formed with those points.\n\n\n",
    "Title": "384. Counting Triangles",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=384",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nAt the beginning of each test case, output \"Test case #t: \", where t is the test case number (starting from 1). Follow this with a statement of the following form:\n\nx triangle(s) can be formed.\n\nwhere x represents the distinct number of triangles that can be formed with the given points. Leave a blank line after the output for each data set.\n\nFollow the format illustrated in Sample\nOutput.\n\n\n"
  },
  "2235": {
    "Input Description": "\nInput Format:\n\n\nThe first line has  1 <= T <= 1000, the number of test cases.\nThe next T lines, each one has 1 <= n <= 1000, the length of the bit string.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n385. I love math\n\n\n\n\n\nProblem Statement:\n\n\nMark loves math so mush especially counting problems that has the famous phrase \"In how many ways we can ?.\", so he can't live a day without solving a counting problem.\nToday, while he was searching for a new problem to solve, he found one that looked really hard.\nThe problem defines a string called \"Bit string\", a string of only ones and zeroes, and asks: In how many ways we could form a bit string of length n that has no two consecutive zeroes.\nFor example: the bit strings of length n = 3 are :\n000 , 100 , 010 , 001 , 110 , 101 , 011 , 111\nwe notice that we have five bit strings of length n = 3 that have no two consecutive zeroes.\nMark needs your help to solve this hard problem!\n\n\n\n\nInput Format:\n\n\nThe first line has  1 <= T <= 1000, the number of test cases.\nThe next T lines, each one has 1 <= n <= 1000, the length of the bit string.\n\n\n\n\nOutput Format:\n\n\nFor each test case print the number of bit strings of length n that have no two consecutive zeroes. \nThe result maybe too large so print the result mod 10^9 + 7.\n\n\n\n\nSample Input:\n\n1\n3\n\n\n\nSample Output:\n\n5\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmuaz.32\n\n\n\n\nAdded at:\n\n\n2015-03-13 13:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:DCPC training 2015\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3\n\n\nSample Output:\n\n5\n\n",
    "Description": "\nProblem Statement:\n\n\nMark loves math so mush especially counting problems that has the famous phrase \"In how many ways we can ?.\", so he can't live a day without solving a counting problem.\nToday, while he was searching for a new problem to solve, he found one that looked really hard.\nThe problem defines a string called \"Bit string\", a string of only ones and zeroes, and asks: In how many ways we could form a bit string of length n that has no two consecutive zeroes.\nFor example: the bit strings of length n = 3 are :\n000 , 100 , 010 , 001 , 110 , 101 , 011 , 111\nwe notice that we have five bit strings of length n = 3 that have no two consecutive zeroes.\nMark needs your help to solve this hard problem!\n\n\n",
    "Title": "385. I love math",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=385",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print the number of bit strings of length n that have no two consecutive zeroes. \nThe result maybe too large so print the result mod 10^9 + 7.\n\n\n"
  },
  "2236": {
    "Input Description": "\nInput Format:\n\n\nThere will be multiple contact lists (test cases) to process. The first line of each contact list contains a single integer, n (1 <= n <= 100), indicating the number of contact data entries on the SIM card. On each of the next n lines will be a name, followed by either a phone number or an e-mail address. Names consist of exactly two strings of upper- and lower-case alphabetic characters (the first name followed by the last name). Each first (last) name is at least one character and at most 20 characters. \nThere will be exactly one space between the first and last names in input, and one space between the last name and the phone number or e-mail address.\n\nA phone number will consist of exactly 10 digits (no hyphens). \nAn e-mail address will consist of a string of letters and/or numbers separated by exactly one at ('@') sign, and at least one dot ('.').\nNo input line will exceed 80 characters.\nThere will be no leading or trailing whitespace on anyline.\nEnd of input is indicated by a value of 0 for n ,this case should not be processed.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n386. Cell Phone Contacts\n\n\n\n\n\nProblem Statement:\n\n\nModern cellular phones have a small chip, called a SIM card, that allows the phone to interface with the carrier's network. SIM cards also have a small amount of memory onboard where the user can store data, such as names, phone numbers, and e-mail addresses. A common problem\nwith SIM card memory is that it cannot group several numbers under the same name, as most cell phones can. This poses a problem when the user wishes to switch phones. The easiest way to transfer contacts is to copy them to the SIM card from the old phone, and then copy them back from the SIM card to the new phone. However, if the user has multiple phone numbers and/or email addresses for a given name, the contact information will be broken up, with multiple entries of the same name, each associated with a different phone number or e-mail address.\n\nObviously, the user of the new phone would like for his or her contact data to be organized, with each contact's name listed only once, and the various phone numbers and e-mail addresses for that contact organized under that single entry. You are to write a program to help with this.\n\nThe Problem:\nGiven the contact data from a SIM card, consisting of pairs of names and email addresses or names and phone numbers, generate organized input data for the new cell phone. The new cell phone has a strict data format that must be followed precisely  \n\n(the format is described in The Output section below).\n\n\n\n\nInput Format:\n\n\nThere will be multiple contact lists (test cases) to process. The first line of each contact list contains a single integer, n (1 <= n <= 100), indicating the number of contact data entries on the SIM card. On each of the next n lines will be a name, followed by either a phone number or an e-mail address. Names consist of exactly two strings of upper- and lower-case alphabetic characters (the first name followed by the last name). Each first (last) name is at least one character and at most 20 characters. \nThere will be exactly one space between the first and last names in input, and one space between the last name and the phone number or e-mail address.\n\nA phone number will consist of exactly 10 digits (no hyphens). \nAn e-mail address will consist of a string of letters and/or numbers separated by exactly one at ('@') sign, and at least one dot ('.').\nNo input line will exceed 80 characters.\nThere will be no leading or trailing whitespace on anyline.\nEnd of input is indicated by a value of 0 for n ,this case should not be processed.\n\n\n\n\nOutput Format:\n\n\nFor each data set, print the heading \"Contact list #d: \" where d is the set number in the input (starting with 1). Then, for each unique contact (by name) in the set, output a contact entry. \n\nNote that case is significant, so \"John DOE\" is a different contact from \"John Doe\".\nContact entries must be output in the following format:\n<Contact Name>\nPhone:\n<Phone Number 1>\n<Phone Number 2>\n...\n<Phone Number p>\nE-Mail:\n<E-Mail Address 1>\n<E-Mail Address 2>\n...\n<E-Mail Address q>\n###\n\nPhone numbers should be printed in the format \"(123)456-7890\".\nE-mail addresses should be printed exactly as input.\nContact entries should be output in ascending ASCII order by last name, then first name. Within each contact, phone numbers should be output in numerical order, and e-mail addresses should be output in ascending ASCII order.\nThere must be no leading or trailing spaces in the output.\n (Note that the built-in string comparison functions do compare strings in ASCII order.)\nLeave a blank line after the output for each data set.\nFollow the format illustrated in Sample Output.\n\n\n\n\nSample Input:\n\n6\nJohn Doe 4071234567\nBill Smith bsmith@somewhere.com\nBill Smith 1231231234\nJohn Doe John.Doe@my.house.net\nJohn Doe John.Doe@work.com\nBill Smith 1234567890\n2\nBone Head 1231231234\nAir Head airhead@my.house.net\n0\n\n\n\nSample Output:\n\nContact list #1:\nJohn Doe\nPhone:\n(407)123-4567\nE-Mail:\nJohn.Doe@my.house.net\nJohn.Doe@work.com\n###\nBill Smith\nPhone:\n(123)123-1234\n(123)456-7890\nE-Mail:\nbsmith@somewhere.com\n###\n\nContact list #2:\nAir Head\nPhone:\nE-Mail:\nairhead@my.house.net\n###\nBone Head\nPhone:\n(123)123-1234\nE-Mail:\n###\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmuaz.32\n\n\n\n\nAdded at:\n\n\n2015-03-13 13:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:DCPC training 2015\n\n\n\n",
    "Example": "\nSample Input:\n\n6\nJohn Doe 4071234567\nBill Smith bsmith@somewhere.com\nBill Smith 1231231234\nJohn Doe John.Doe@my.house.net\nJohn Doe John.Doe@work.com\nBill Smith 1234567890\n2\nBone Head 1231231234\nAir Head airhead@my.house.net\n0\n\n\nSample Output:\n\nContact list #1:\nJohn Doe\nPhone:\n(407)123-4567\nE-Mail:\nJohn.Doe@my.house.net\nJohn.Doe@work.com\n###\nBill Smith\nPhone:\n(123)123-1234\n(123)456-7890\nE-Mail:\nbsmith@somewhere.com\n###\n\nContact list #2:\nAir Head\nPhone:\nE-Mail:\nairhead@my.house.net\n###\nBone Head\nPhone:\n(123)123-1234\nE-Mail:\n###\n\n",
    "Description": "\nProblem Statement:\n\n\nModern cellular phones have a small chip, called a SIM card, that allows the phone to interface with the carrier's network. SIM cards also have a small amount of memory onboard where the user can store data, such as names, phone numbers, and e-mail addresses. A common problem\nwith SIM card memory is that it cannot group several numbers under the same name, as most cell phones can. This poses a problem when the user wishes to switch phones. The easiest way to transfer contacts is to copy them to the SIM card from the old phone, and then copy them back from the SIM card to the new phone. However, if the user has multiple phone numbers and/or email addresses for a given name, the contact information will be broken up, with multiple entries of the same name, each associated with a different phone number or e-mail address.\n\nObviously, the user of the new phone would like for his or her contact data to be organized, with each contact's name listed only once, and the various phone numbers and e-mail addresses for that contact organized under that single entry. You are to write a program to help with this.\n\nThe Problem:\nGiven the contact data from a SIM card, consisting of pairs of names and email addresses or names and phone numbers, generate organized input data for the new cell phone. The new cell phone has a strict data format that must be followed precisely  \n\n(the format is described in The Output section below).\n\n\n",
    "Title": "386. Cell Phone Contacts",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=386",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each data set, print the heading \"Contact list #d: \" where d is the set number in the input (starting with 1). Then, for each unique contact (by name) in the set, output a contact entry. \n\nNote that case is significant, so \"John DOE\" is a different contact from \"John Doe\".\nContact entries must be output in the following format:\n<Contact Name>\nPhone:\n<Phone Number 1>\n<Phone Number 2>\n...\n<Phone Number p>\nE-Mail:\n<E-Mail Address 1>\n<E-Mail Address 2>\n...\n<E-Mail Address q>\n###\n\nPhone numbers should be printed in the format \"(123)456-7890\".\nE-mail addresses should be printed exactly as input.\nContact entries should be output in ascending ASCII order by last name, then first name. Within each contact, phone numbers should be output in numerical order, and e-mail addresses should be output in ascending ASCII order.\nThere must be no leading or trailing spaces in the output.\n (Note that the built-in string comparison functions do compare strings in ASCII order.)\nLeave a blank line after the output for each data set.\nFollow the format illustrated in Sample Output.\n\n\n"
  },
  "2237": {
    "Input Description": "\nInput Format:\n\n\nThe first input line contains a positive integer, t, indicating the number of trips to check. The trips are on the following t input lines, one trip per line. Each trip provides three integers (each between 1 and 1000, inclusive); these are the three values specified in order above.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n387. Are We Stopping Again?\n\n\n\n\n\nProblem Statement:\n\n\nGoing on a road trip is an adventure for Dr. Orooji and his family. Obviously he has to stop to refuel the car, but he also stops whenever his kids want to eat. Dr. O needs to figure out the number of stops before going on the trip so he is mentally prepared.\nThe Problem:\nFind the total number of stops for Dr. O's trip, given:\n1. Total miles to be traveled.\n2. How often he stops for gas (in miles).\n3. How often he stops for food (in miles).\n\nAssume that the car's gas tank is full at the beginning of the trip and the kids are full as well. If the destination happens to be the time to refuel (or eat), do not count it as a stop. Also, if a particular mileage happens to be both refueling time and eating time, count it as one stop and not two stops.\n\nNote that if a particular mileage happens to be refueling time only, kids won't eat at that stop.\nSimilarly, if a particular mileage happens to be eating time only, the car is not refueled at that stop.\n\n\n\n\nInput Format:\n\n\nThe first input line contains a positive integer, t, indicating the number of trips to check. The trips are on the following t input lines, one trip per line. Each trip provides three integers (each between 1 and 1000, inclusive); these are the three values specified in order above.\n\n\n\n\nOutput Format:\n\n\nFor each trip, output the three input values. Then, on the next output line, print the number of\nstops for the trip.\n\n\n\n\nSample Input:\n\n3\n100 30 40\n10 5 1\n20 3 4\n\n\n\nSample Output:\n\n100 30 40\n5\n10 5 1\n9\n20 3 4\n9\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmuaz.32\n\n\n\n\nAdded at:\n\n\n2015-03-13 13:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:DCPC training 2015\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n100 30 40\n10 5 1\n20 3 4\n\n\nSample Output:\n\n100 30 40\n5\n10 5 1\n9\n20 3 4\n9\n\n",
    "Description": "\nProblem Statement:\n\n\nGoing on a road trip is an adventure for Dr. Orooji and his family. Obviously he has to stop to refuel the car, but he also stops whenever his kids want to eat. Dr. O needs to figure out the number of stops before going on the trip so he is mentally prepared.\nThe Problem:\nFind the total number of stops for Dr. O's trip, given:\n1. Total miles to be traveled.\n2. How often he stops for gas (in miles).\n3. How often he stops for food (in miles).\n\nAssume that the car's gas tank is full at the beginning of the trip and the kids are full as well. If the destination happens to be the time to refuel (or eat), do not count it as a stop. Also, if a particular mileage happens to be both refueling time and eating time, count it as one stop and not two stops.\n\nNote that if a particular mileage happens to be refueling time only, kids won't eat at that stop.\nSimilarly, if a particular mileage happens to be eating time only, the car is not refueled at that stop.\n\n\n",
    "Title": "387. Are We Stopping Again?",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=387",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each trip, output the three input values. Then, on the next output line, print the number of\nstops for the trip.\n\n\n"
  },
  "2238": {
    "Input Description": "\nInput Format:\n\n\nThe first contains T denoting the number of test cases ( 0 <= T <= 100), then T test cases follow \neach is of A single line, N and S (1 <= N <= 16, |S| <= 100000)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n388. Operators\n\n\n\n\n\nProblem Statement:\n\n\nGiven a set of N integer A = {1, 2, 3, ... , N} and an integer S, your task is to find a way to insert an operator '+' or '-' to every neighbor pair of A, that the result of the expression after insert equal to S.\n\n\n\n\nInput Format:\n\n\nThe first contains T denoting the number of test cases ( 0 <= T <= 100), then T test cases follow \neach is of A single line, N and S (1 <= N <= 16, |S| <= 100000)\n\n\n\n\nOutput Format:\n\n\nfor every test case , If there are way(s) to insert operators, output \"Possible\", otherwise outputs \"Impossible\".\n\n\n\n\nSample Input:\n\n4 \n10 55 \n9 5 \n5 6 \n1 10000 \n\n\n\n\nSample Output:\n\nPossible \nPossible \nImpossible \nImpossible \n\n\n\n\nNotes:\n\n\nin the first test case : 55=1+2+3+4+5+6+7+8+9+10 \nin the second test case : 5=1+2-3+4+5+6+7-8-9 \nin the third case it's impossible to reach 6\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmuaz.32\n\n\n\n\nAdded at:\n\n\n2015-03-13 13:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:DCPC training 2015\n\n\n\n",
    "Example": "\nSample Input:\n\n4 \n10 55 \n9 5 \n5 6 \n1 10000 \n\n\n\nSample Output:\n\nPossible \nPossible \nImpossible \nImpossible \n\n\n",
    "Description": "\nProblem Statement:\n\n\nGiven a set of N integer A = {1, 2, 3, ... , N} and an integer S, your task is to find a way to insert an operator '+' or '-' to every neighbor pair of A, that the result of the expression after insert equal to S.\n\n\n",
    "Title": "388. Operators",
    "Notes": "\nNotes:\n\n\nin the first test case : 55=1+2+3+4+5+6+7+8+9+10 \nin the second test case : 5=1+2-3+4+5+6+7-8-9 \nin the third case it's impossible to reach 6\n\n",
    "URL": "https://a2oj.com/p?ID=388",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nfor every test case , If there are way(s) to insert operators, output \"Possible\", otherwise outputs \"Impossible\".\n\n\n"
  },
  "2239": {
    "Input Description": "\nInput Format:\n\n\nThe first line of the input is a positive integer, n, indicating the number of scenarios that your program will have to analyze.\nFollowing this will be the description of each scenario.\nThe first line of each scenario will have two single-space-separated integers, p (1 <= p <= 50), indicating the number of people who use the email service and, s (1 <= s <= p), indicating the source of the chain email, where each person is labeled from 1 to p.\nFollowing this will be a single line with the names of all of the people, from person 1 to person p, who use the email service, each separated by exactly one space.\nAll names will contain alphabetic characters only and be between 1 and 19 characters (inclusive) in length.\nFollowing this will be p lines.\nThe i'th line will describe the contact list of the ith person.\nThis description will consist of an integer, m (0 <= m <= p), indicating the number of contacts this person has, followed by the 1-based index of each of the contacts, each separated by exactly one space. It's guaranteed that no one will contain themselves as a contact.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n389. Chain Email\n\n\n\n\n\nProblem Statement:\n\n\nA chain email is an email that people receive and then forward to all of their friends. This sort of email is very common amongst elderly  people, who have notably bad memories. Elderly people's memories are so bad that if they ever receive a chain email they will forward it to all of their contacts. This can become very problematic when elderly people continually send the same email to each other.\nFor instance, if two people have each other in their contacts and if either of them receive a chain email they will continually send the email to each other back and forth forever.\nEmail companies are worried that this will result in a massive amount of storage loss on their servers and have asked you to determine if a specific person were to start a chain email, who would receive that email forever.\n\nThe Problem:\nGiven each elderly person's contacts and which elderly person will be starting a chain email, determine who will be indefinitely receiving mails.\n\n\n\n\nInput Format:\n\n\nThe first line of the input is a positive integer, n, indicating the number of scenarios that your program will have to analyze.\nFollowing this will be the description of each scenario.\nThe first line of each scenario will have two single-space-separated integers, p (1 <= p <= 50), indicating the number of people who use the email service and, s (1 <= s <= p), indicating the source of the chain email, where each person is labeled from 1 to p.\nFollowing this will be a single line with the names of all of the people, from person 1 to person p, who use the email service, each separated by exactly one space.\nAll names will contain alphabetic characters only and be between 1 and 19 characters (inclusive) in length.\nFollowing this will be p lines.\nThe i'th line will describe the contact list of the ith person.\nThis description will consist of an integer, m (0 <= m <= p), indicating the number of contacts this person has, followed by the 1-based index of each of the contacts, each separated by exactly one space. It's guaranteed that no one will contain themselves as a contact.\n\n\n\n\nOutput Format:\n\n\nThe first line of the output for each scenario should be \"Chain Email #d: \", where d is the scenario number, starting with 1. \nFollowing this should be a line containing the names of all of the people who will infinitely receive chain emails, assuming that everyone continually forwards the email to all of their contacts. Each name should be followed by a space.\nList these contacts in the order that they appear in the input.\nIf no one will infinitely receive chain emails, then print \"Safe chain email! \" instead.\nLeave a blank line after the output for each data set.\nFollow the format illustrated in Sample\n\n\n\n\nSample Input:\n\n3\n3 1\nJames Sarah John\n2 2 3\n2 1 3\n2 1 2\n3 1\nJames Sarah John\n2 2 3\n0\n0\n6 3\nAli Matt Glenn Sumon Arup Chris\n2 3 5\n0\n1 4\n1 1\n1 2\n2 5 4\n\n\n\nSample Output:\n\nChain Email #1:\nJames Sarah John\n\nChain Email #2:\nSafe chain email!\n\nChain Email #3:\nAli Matt Glenn Sumon Arup\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmuaz.32\n\n\n\n\nAdded at:\n\n\n2015-03-13 13:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:DCPC training 2015\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3 1\nJames Sarah John\n2 2 3\n2 1 3\n2 1 2\n3 1\nJames Sarah John\n2 2 3\n0\n0\n6 3\nAli Matt Glenn Sumon Arup Chris\n2 3 5\n0\n1 4\n1 1\n1 2\n2 5 4\n\n\nSample Output:\n\nChain Email #1:\nJames Sarah John\n\nChain Email #2:\nSafe chain email!\n\nChain Email #3:\nAli Matt Glenn Sumon Arup\n\n",
    "Description": "\nProblem Statement:\n\n\nA chain email is an email that people receive and then forward to all of their friends. This sort of email is very common amongst elderly  people, who have notably bad memories. Elderly people's memories are so bad that if they ever receive a chain email they will forward it to all of their contacts. This can become very problematic when elderly people continually send the same email to each other.\nFor instance, if two people have each other in their contacts and if either of them receive a chain email they will continually send the email to each other back and forth forever.\nEmail companies are worried that this will result in a massive amount of storage loss on their servers and have asked you to determine if a specific person were to start a chain email, who would receive that email forever.\n\nThe Problem:\nGiven each elderly person's contacts and which elderly person will be starting a chain email, determine who will be indefinitely receiving mails.\n\n\n",
    "Title": "389. Chain Email",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=389",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nThe first line of the output for each scenario should be \"Chain Email #d: \", where d is the scenario number, starting with 1. \nFollowing this should be a line containing the names of all of the people who will infinitely receive chain emails, assuming that everyone continually forwards the email to all of their contacts. Each name should be followed by a space.\nList these contacts in the order that they appear in the input.\nIf no one will infinitely receive chain emails, then print \"Safe chain email! \" instead.\nLeave a blank line after the output for each data set.\nFollow the format illustrated in Sample\n\n\n"
  },
  "2240": {
    "Input Description": "\nInput Format:\n\n\nThe first line will be an integer T, the number of test cases. Then T test cases follow. \nEvery test case begins by 2 integers, N is the number of regions, and E is the number of roads.\n\nFollowing are E lines, each line contains 2 integers A,B, the numbers of the regions connected with each other by a road.\n\nYou can guarantee that T<=100, 2<=N<=100, 1<= E <= 1000, 1 <= A,B <= N.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n390. Security Cameras\n\n\n\n\n\nProblem Statement:\n\n\nCrimes are very common nowadays, so the government thinks of installing some cameras around the country to watch for those crimes. A country contains some cities, each city contains some regions. Two regions are connected by a two-way road. If a camera is installed in some region, it can watch all the roads connecting this region, but not further. The government wants to install as minimum cameras as possible to monitor all the roads of the country.\n\nYou'll be given the configuration of the regions, and you're asked to calculate the minimum number of needed cameras. Since this problem is an NP-Hard problem and there's no polynomial time algorithm for solving it, you can write a randomized algorithm to predict the minimum number. Your answer may be, in the worst case, as double as the optimal answer (i.e. if the optimal answer is 2, your answer could be up to 4).\n\n\n\n\nInput Format:\n\n\nThe first line will be an integer T, the number of test cases. Then T test cases follow. \nEvery test case begins by 2 integers, N is the number of regions, and E is the number of roads.\n\nFollowing are E lines, each line contains 2 integers A,B, the numbers of the regions connected with each other by a road.\n\nYou can guarantee that T<=100, 2<=N<=100, 1<= E <= 1000, 1 <= A,B <= N.\n\n\n\n\nOutput Format:\n\n\nFor every test case, you should print one integer followed by endline, the minimum number of cameras to be installed to monitor the whole country.\n\n\n\n\nSample Input:\n\n2\n5 4\n1 2\n1 3\n1 4\n1 5\n6 5\n1 2\n2 3\n3 4\n4 5\n6 5\n\n\n\n\nSample Output:\n\n1\n3\n\n\n\nNotes:\n\n\nThe first input is a star graph, so only one camera is needed in node 1 to monitor all the roads. In the second input, there are 6 nodes on the same line, so you need 3 cameras (e.g. in regions 2,4,6).\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nmultisystem\n\n\n\n\nAdded at:\n\n\n2015-03-18 20:51:13 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nYes\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 4\n1 2\n1 3\n1 4\n1 5\n6 5\n1 2\n2 3\n3 4\n4 5\n6 5\n\n\n\nSample Output:\n\n1\n3\n\n",
    "Description": "\nProblem Statement:\n\n\nCrimes are very common nowadays, so the government thinks of installing some cameras around the country to watch for those crimes. A country contains some cities, each city contains some regions. Two regions are connected by a two-way road. If a camera is installed in some region, it can watch all the roads connecting this region, but not further. The government wants to install as minimum cameras as possible to monitor all the roads of the country.\n\nYou'll be given the configuration of the regions, and you're asked to calculate the minimum number of needed cameras. Since this problem is an NP-Hard problem and there's no polynomial time algorithm for solving it, you can write a randomized algorithm to predict the minimum number. Your answer may be, in the worst case, as double as the optimal answer (i.e. if the optimal answer is 2, your answer could be up to 4).\n\n\n",
    "Title": "390. Security Cameras",
    "Notes": "\nNotes:\n\n\nThe first input is a star graph, so only one camera is needed in node 1 to monitor all the roads. In the second input, there are 6 nodes on the same line, so you need 3 cameras (e.g. in regions 2,4,6).\n\n",
    "URL": "https://a2oj.com/p?ID=390",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor every test case, you should print one integer followed by endline, the minimum number of cameras to be installed to monitor the whole country.\n\n\n"
  },
  "2241": {
    "Input Description": "\nInput Format:\n\n\nThe input consists of 2 lines, each line will contain one of the integers which will be positive and consists of at most 100 digits (without leading zeros).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n391. Omar 2.0\n\n\n\n\n\nProblem Statement:\n\n\nOmar is the youngest programer in the world, he is just 25 months old (when this problem was added), and he has just decided to write his second program.\n\nThis program is very simple, the program should be able to read 2 numbers and print the sum of them.\n\nCan you help Omar by writing a correct program so that he can use it to check if his program is correct or not?\n\n\n\n\nInput Format:\n\n\nThe input consists of 2 lines, each line will contain one of the integers which will be positive and consists of at most 100 digits (without leading zeros).\n\n\n\n\nOutput Format:\n\n\nThe output should contain 1 integer, which should be the sum of the given 2 integers in the input file.\n\n\n\n\nSample Input:\n\n2\n3\n\n\n\n\nSample Output:\n\n5\n\n\n\n\nNotes:\n\n\nThis problem is a partial score problems, which means you will get a score from 0 to 100 which is the percentage of the correct test cases you got.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2015-03-15 21:43:31 UTC\n\n\n\n\nTime Limit:\n\n\n1 second\n\n\n\n\n\nPartial score:\n\n\nYes\n\n\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3\n\n\n\nSample Output:\n\n5\n\n\n",
    "Description": "\nProblem Statement:\n\n\nOmar is the youngest programer in the world, he is just 25 months old (when this problem was added), and he has just decided to write his second program.\n\nThis program is very simple, the program should be able to read 2 numbers and print the sum of them.\n\nCan you help Omar by writing a correct program so that he can use it to check if his program is correct or not?\n\n\n",
    "Title": "391. Omar 2.0",
    "Notes": "\nNotes:\n\n\nThis problem is a partial score problems, which means you will get a score from 0 to 100 which is the percentage of the correct test cases you got.\n\n",
    "URL": "https://a2oj.com/p?ID=391",
    "Time Limit": "1 second",
    "Output Description": "\nOutput Format:\n\n\nThe output should contain 1 integer, which should be the sum of the given 2 integers in the input file.\n\n\n"
  },
  "2242": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a test case which consists of one positive integer needs to be represented using seven segment display, that number will be at most 1000000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n407. The MRC Team\n\n\n\n\n\nProblem Statement:\n\n\nThe MRC team at Orange labs designs embedded sensing nodes and provides connectivity to tie them to the internet of things.\n\nNowadays they are working on building seven segment displays, but how many seven segment displays will they need to represent an Integer x.\n\nThey use one seven segment display to represent one digit of an Integer. \nFor example: Integer \"100\" needs \"3\" seven segment boards to be represented.\n\nCan you help them figure out how many displays are needed?\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a test case which consists of one positive integer needs to be represented using seven segment display, that number will be at most 1000000.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the number of digits of that integer.\n\n\n\n\nSample Input:\n\n2\n1\n1000\n\n\n\nSample Output:\n\n1\n4\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2015-06-12 18:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Orange Internship Trial Challenge\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1\n1000\n\n\nSample Output:\n\n1\n4\n\n",
    "Description": "\nProblem Statement:\n\n\nThe MRC team at Orange labs designs embedded sensing nodes and provides connectivity to tie them to the internet of things.\n\nNowadays they are working on building seven segment displays, but how many seven segment displays will they need to represent an Integer x.\n\nThey use one seven segment display to represent one digit of an Integer. \nFor example: Integer \"100\" needs \"3\" seven segment boards to be represented.\n\nCan you help them figure out how many displays are needed?\n\n\n",
    "Title": "407. The MRC Team",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=407",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the number of digits of that integer.\n\n\n"
  },
  "2243": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a test case which consists of a string representing the article, which may contain the word \"nadia\" typed. This line consists of small Latin letters, and its length is not less than 1 and not more than 100 letters.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n408. Nadia Team\n\n\n\n\n\nProblem Statement:\n\n\nNAtural DIAlogue team at Orange labs has an abbreviation \"Nadia Team\".\n\nThis abbreviation causes a big problem for them in Egypt as a lot of Egyptians think this team is owned by a female called nadia and they don't know they are working on NAtural DIAlogue.\nTo solve their problem they put their name encrypted on the articles and forgot how to decrypt their name. \nThe encryption was done by putting nadia characters on the article scattered and they will consider an article related to them if they can delete as many characters as they need to form word \"nadia\".\n\nCan you write a program to help them to check if the given article belongs to them or not?\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a test case which consists of a string representing the article, which may contain the word \"nadia\" typed. This line consists of small Latin letters, and its length is not less than 1 and not more than 100 letters.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing \"YES\" if you can delete 0 or more characters to get the string \"nadia\" (without rearranging the remaining characters), otherwise print \"NO\".\n\n\n\n\nSample Input:\n\n3\nanhaldillooa\nnnaaddiiaa\nnxzdiao\n\n\n\nSample Output:\n\nYES\nYES\nNO\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2015-06-12 18:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Orange Internship Trial Challenge\n\n\n\n",
    "Example": "\nSample Input:\n\n3\nanhaldillooa\nnnaaddiiaa\nnxzdiao\n\n\nSample Output:\n\nYES\nYES\nNO\n\n",
    "Description": "\nProblem Statement:\n\n\nNAtural DIAlogue team at Orange labs has an abbreviation \"Nadia Team\".\n\nThis abbreviation causes a big problem for them in Egypt as a lot of Egyptians think this team is owned by a female called nadia and they don't know they are working on NAtural DIAlogue.\nTo solve their problem they put their name encrypted on the articles and forgot how to decrypt their name. \nThe encryption was done by putting nadia characters on the article scattered and they will consider an article related to them if they can delete as many characters as they need to form word \"nadia\".\n\nCan you write a program to help them to check if the given article belongs to them or not?\n\n\n",
    "Title": "408. Nadia Team",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=408",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing \"YES\" if you can delete 0 or more characters to get the string \"nadia\" (without rearranging the remaining characters), otherwise print \"NO\".\n\n\n"
  },
  "2244": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a test case which consists of 2 integers start and end, 1 <= start <= end <= 10000.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n409. The ThunderBolt\n\n\n\n\n\nProblem Statement:\n\n\nThe ThunderBolt team at Orange labs is ranked to be one of the best teams in software development. So to qualify the skills of any candidates joining The ThunderBullets team there is a  problem to be solved before joining.\n\nGiven a range of numbers from start to end, the candidate has to calculate how many numbers exist within this range following two rules:\n1- The number is prime (1 isn't prime).\n2- The sum of all digits inside that number is also prime.\n\nFor example: 11 is a prime number and 1 + 1 = 2 which is also prime.\n\nCan you join The ThunderBolt team?\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a test case which consists of 2 integers start and end, 1 <= start <= end <= 10000.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the number of numbers that follows the two rules within the range.\n\n\n\n\nSample Input:\n\n2\n2 5\n1 12\n\n\n\nSample Output:\n\n3\n5\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2015-06-12 18:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Orange Internship Trial Challenge\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 5\n1 12\n\n\nSample Output:\n\n3\n5\n\n",
    "Description": "\nProblem Statement:\n\n\nThe ThunderBolt team at Orange labs is ranked to be one of the best teams in software development. So to qualify the skills of any candidates joining The ThunderBullets team there is a  problem to be solved before joining.\n\nGiven a range of numbers from start to end, the candidate has to calculate how many numbers exist within this range following two rules:\n1- The number is prime (1 isn't prime).\n2- The sum of all digits inside that number is also prime.\n\nFor example: 11 is a prime number and 1 + 1 = 2 which is also prime.\n\nCan you join The ThunderBolt team?\n\n\n",
    "Title": "409. The ThunderBolt",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=409",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the number of numbers that follows the two rules within the range.\n\n\n"
  },
  "2245": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases.\n\nEach test case contains two integers n and k (1\u2009\u2264\u2009n\u2009\u2264\u2009500,000; 2\u2009\u2264\u2009k\u2009\u2264\u200926). The second line contains n uppercase English letters. Letter \"A\" stands for the first color, letter \"B\" stands for the second color and so on. The first k English letters may be used. Each letter represents the color of the corresponding desk.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n414. Confusing Desks\n\n\n\n\n\nProblem Statement:\n\n\nOrange Labs Cairo has an open space that hosts most of the employees in the company, every desk is painted with one color, but adjacent desks with the same color sometimes confuse Orange Employees. Your task is to repaint the minimum number of desks so that no two neighboring desks are of the same color. You can use any color from 1 to k to repaint the cells (but the original painting might contain colors outside the first k colors).\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases.\n\nEach test case contains two integers n and k (1\u2009\u2264\u2009n\u2009\u2264\u2009500,000; 2\u2009\u2264\u2009k\u2009\u2264\u200926). The second line contains n uppercase English letters. Letter \"A\" stands for the first color, letter \"B\" stands for the second color and so on. The first k English letters may be used. Each letter represents the color of the corresponding desk.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print 1 line containing a single integer - the required minimum number of repaintings.\n\n\n\n\nSample Input:\n\n2\n6 3\nABBACC\n3 2\nBBB\n\n\n\n\nSample Output:\n\n2\n1\n\n\n\nNotes:\n\n\nThe first test can be changed to \"ABCACA\", the second test case can be changed to \"BAB\".\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nksamykandil\n\n\n\n\nAdded at:\n\n\n2015-08-28 13:30:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Orange - First Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n6 3\nABBACC\n3 2\nBBB\n\n\n\nSample Output:\n\n2\n1\n\n",
    "Description": "\nProblem Statement:\n\n\nOrange Labs Cairo has an open space that hosts most of the employees in the company, every desk is painted with one color, but adjacent desks with the same color sometimes confuse Orange Employees. Your task is to repaint the minimum number of desks so that no two neighboring desks are of the same color. You can use any color from 1 to k to repaint the cells (but the original painting might contain colors outside the first k colors).\n\n\n",
    "Title": "414. Confusing Desks",
    "Notes": "\nNotes:\n\n\nThe first test can be changed to \"ABCACA\", the second test case can be changed to \"BAB\".\n\n",
    "URL": "https://a2oj.com/p?ID=414",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print 1 line containing a single integer - the required minimum number of repaintings.\n\n\n"
  },
  "2246": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a test case in the form: FnRm. n represents the floor number [1,300000000] and m represents the room number, 1 <= m <= 300000000. The values n and m define a single room on the building. There will be no leading zeroes or extra spaces in the input.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n415. Lannion Visit\n\n\n\n\n\nProblem Statement:\n\n\nNADIA team is working with their partner in Orange Labs Lannion. All developers there are working in adjacent rooms, The team elected Shereif Al-hawary to travel for a meeting with them, Shereif found that the buildings there consist of floors started from 1 to n, each floor consists of m rooms where room 1 is labeled as \"A\", room 2 as \"B\" ... room 26 as \"Z\". When the number  of room is greater than 26, another letter is used. \n\nFor example, room 27 is \"AA\", room 28 is \"AB\" and room 52 is \"AZ\". It follows that room 53 would be \"BA\" and so on. Similarly, when room \"ZZ\" is reached, the next room would be \"AAA\", then \"AAB\" and so on. Unfortunately  Shereif has the room and floor number (i.e 4th floor 29th room formulated as F4R29), could you help Shereif to Reach the room to catch the meeting by translating numbers he has to the room name.\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a test case in the form: FnRm. n represents the floor number [1,300000000] and m represents the room number, 1 <= m <= 300000000. The values n and m define a single room on the building. There will be no leading zeroes or extra spaces in the input.\n\n\n\n\nOutput Format:\n\n\nFor each line of input, you will print out the room translated location for the specified input room as described above (room name followed by floor number, without any separators).\n\n\n\n\nSample Input:\n\n7\nF1R1\nF3R1\nF1R3\nF299999999R26\nF52R52\nF53R17576\nF53R17602\n\n\n\nSample Output:\n\nA1\nA3\nC1\nZ299999999\nAZ52\nYYZ53\nYZZ53\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nksamykandil\n\n\n\n\nAdded at:\n\n\n2015-08-28 13:30:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Orange - First Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n7\nF1R1\nF3R1\nF1R3\nF299999999R26\nF52R52\nF53R17576\nF53R17602\n\n\nSample Output:\n\nA1\nA3\nC1\nZ299999999\nAZ52\nYYZ53\nYZZ53\n\n",
    "Description": "\nProblem Statement:\n\n\nNADIA team is working with their partner in Orange Labs Lannion. All developers there are working in adjacent rooms, The team elected Shereif Al-hawary to travel for a meeting with them, Shereif found that the buildings there consist of floors started from 1 to n, each floor consists of m rooms where room 1 is labeled as \"A\", room 2 as \"B\" ... room 26 as \"Z\". When the number  of room is greater than 26, another letter is used. \n\nFor example, room 27 is \"AA\", room 28 is \"AB\" and room 52 is \"AZ\". It follows that room 53 would be \"BA\" and so on. Similarly, when room \"ZZ\" is reached, the next room would be \"AAA\", then \"AAB\" and so on. Unfortunately  Shereif has the room and floor number (i.e 4th floor 29th room formulated as F4R29), could you help Shereif to Reach the room to catch the meeting by translating numbers he has to the room name.\n\n\n",
    "Title": "415. Lannion Visit",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=415",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each line of input, you will print out the room translated location for the specified input room as described above (room name followed by floor number, without any separators).\n\n\n"
  },
  "2247": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T test cases (each one in 2 lines), the first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009105) ? the size of array a. The next line contains n integers, separated by single spaces ? array a (1\u2009\u2264\u2009ai\u2009\u2264\u2009109). The array elements are listed in the line in the order of their index's increasing.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n416. Little Elephant\n\n\n\n\n\nProblem Statement:\n\n\nOrange has a lot of projects in Africa, last year the DDE-SOFT team visited Kenya and found a little elephant stuck in a problem, and he hasn't found a solution until today.\n\nHe has an array a consisting of n integers. Let's number the array elements from 1 to n, then the i-th element will be denoted as ai. The Little Elephant can make one move to choose an arbitrary pair of integers l and r (1\u2009\u2264\u2009l\u2009\u2264\u2009r\u2009\u2264\u2009n) and increase ai by 1 for all i such that l\u2009\u2264\u2009i\u2009\u2264\u2009r.\n\nHelp the Little Elephant find the minimum number of moves he needs to convert array a to an arbitrary array sorted in the non-decreasing order. Array a, consisting of n elements, is sorted in the non-decreasing order if for any i (1\u2009\u2264\u2009i\u2009<\u2009n) ai\u2009\u2264\u2009ai\u2009+\u20091 holds.\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T test cases (each one in 2 lines), the first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009105) ? the size of array a. The next line contains n integers, separated by single spaces ? array a (1\u2009\u2264\u2009ai\u2009\u2264\u2009109). The array elements are listed in the line in the order of their index's increasing.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing a single integer - the answer to the problem.\n\n\n\n\nSample Input:\n\n3\n3\n1 2 3\n3\n3 2 1\n4\n7 4 1 47\n\n\n\nSample Output:\n\n0\n2\n6\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nksamykandil\n\n\n\n\nAdded at:\n\n\n2015-08-28 13:30:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Orange - First Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n3\n1 2 3\n3\n3 2 1\n4\n7 4 1 47\n\n\nSample Output:\n\n0\n2\n6\n\n",
    "Description": "\nProblem Statement:\n\n\nOrange has a lot of projects in Africa, last year the DDE-SOFT team visited Kenya and found a little elephant stuck in a problem, and he hasn't found a solution until today.\n\nHe has an array a consisting of n integers. Let's number the array elements from 1 to n, then the i-th element will be denoted as ai. The Little Elephant can make one move to choose an arbitrary pair of integers l and r (1\u2009\u2264\u2009l\u2009\u2264\u2009r\u2009\u2264\u2009n) and increase ai by 1 for all i such that l\u2009\u2264\u2009i\u2009\u2264\u2009r.\n\nHelp the Little Elephant find the minimum number of moves he needs to convert array a to an arbitrary array sorted in the non-decreasing order. Array a, consisting of n elements, is sorted in the non-decreasing order if for any i (1\u2009\u2264\u2009i\u2009<\u2009n) ai\u2009\u2264\u2009ai\u2009+\u20091 holds.\n\n\n",
    "Title": "416. Little Elephant",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=416",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing a single integer - the answer to the problem.\n\n\n"
  },
  "2248": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a single integer between 5 and 100, inclusive, which is the number of lines in code n.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n417. Mastermind Developer\n\n\n\n\n\nProblem Statement:\n\n\nChess is a software developer at Orange Labs Cairo. He worked on an internal project and finished his task too fast other than his teammates. He wrote N lines of code and he had some time to play around with his code, So he decided to play a game, in N rounds,\n\nin the first round he will comment all the code. (affected lines 1,2,3,4,5,6,7 ... )\nin the second round he will uncomment every other line (affected lines 2,4,6,8 ... )\nin the third round he will give a visit to every third line and for each line if the line is commented, he will uncomment the line, and if the line is uncommented he will comment the line. (affected lines 3,6,9,12, ...)\nAnd so on for the remaining rounds (the ith round starts from the ith element and flips every ith line)\n\nChess found his code still working!! So he decided to play this game again for N lines, and making N rounds on these lines, your task is to find the number of lines that will  be commented in his code.\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains a single integer between 5 and 100, inclusive, which is the number of lines in code n.\n\n\n\n\nOutput Format:\n\n\nFor each test case, you must print out the number lines of code that will be commented when the Chess play his game on N lines.\n\n\n\n\nSample Input:\n\n2\n5\n9\n\n\n\nSample Output:\n\n2\n3\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nksamykandil\n\n\n\n\nAdded at:\n\n\n2015-08-28 13:30:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Orange - First Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5\n9\n\n\nSample Output:\n\n2\n3\n\n",
    "Description": "\nProblem Statement:\n\n\nChess is a software developer at Orange Labs Cairo. He worked on an internal project and finished his task too fast other than his teammates. He wrote N lines of code and he had some time to play around with his code, So he decided to play a game, in N rounds,\n\nin the first round he will comment all the code. (affected lines 1,2,3,4,5,6,7 ... )\nin the second round he will uncomment every other line (affected lines 2,4,6,8 ... )\nin the third round he will give a visit to every third line and for each line if the line is commented, he will uncomment the line, and if the line is uncommented he will comment the line. (affected lines 3,6,9,12, ...)\nAnd so on for the remaining rounds (the ith round starts from the ith element and flips every ith line)\n\nChess found his code still working!! So he decided to play this game again for N lines, and making N rounds on these lines, your task is to find the number of lines that will  be commented in his code.\n\n\n",
    "Title": "417. Mastermind Developer",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=417",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, you must print out the number lines of code that will be commented when the Chess play his game on N lines.\n\n\n"
  },
  "2249": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains one integer number n, (1 <= n <= 10) representing number of offices.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n418. Offices\n\n\n\n\n\nProblem Statement:\n\n\nOrange Labs Cairo would like to hold a summer internship program, in order to do so, they have to restructure all the lab offices in a way that, any office may be beside any other office, and any office may contain one or more offices.\n\nTo make things easier for the workers, the employee decided to represent each office with parentheses \"()\", two contiguous offices will be presented with \"()()\", two nested offices will be presented with \"(())\".\n\nNow the employees would like to generate all correct offices sequences in a lexicographic order, and they want your help.\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T lines, each line contains one integer number n, (1 <= n <= 10) representing number of offices.\n\n\n\n\nOutput Format:\n\n\nFor each test case, output all correct offices sequences in a lexicographic order (alphabetical order, the letter '(' is less than the letter ')'), one sequence a line, without spaces.\n\n\n\n\nSample Input:\n\n1\n3\n\n\n\nSample Output:\n\n((()))\n(()())\n(())()\n()(())\n()()()\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nksamykandil\n\n\n\n\nAdded at:\n\n\n2015-08-28 13:30:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Orange - First Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3\n\n\nSample Output:\n\n((()))\n(()())\n(())()\n()(())\n()()()\n\n",
    "Description": "\nProblem Statement:\n\n\nOrange Labs Cairo would like to hold a summer internship program, in order to do so, they have to restructure all the lab offices in a way that, any office may be beside any other office, and any office may contain one or more offices.\n\nTo make things easier for the workers, the employee decided to represent each office with parentheses \"()\", two contiguous offices will be presented with \"()()\", two nested offices will be presented with \"(())\".\n\nNow the employees would like to generate all correct offices sequences in a lexicographic order, and they want your help.\n\n\n",
    "Title": "418. Offices",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=418",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, output all correct offices sequences in a lexicographic order (alphabetical order, the letter '(' is less than the letter ')'), one sequence a line, without spaces.\n\n\n"
  },
  "2250": {
    "Input Description": "\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T test cases as the following:\n\nThe first number is an integer n (1 <= n <= 5000) representing the number of employees.\n\nThe rest of the input is filled by 2*n integers (2 integers in each line) (x1 y1 x2 y2 . . .) meaning start and end hour of each employee\n\nAll hour intervals do not exceed (109).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n419. Working Hours\n\n\n\n\n\nProblem Statement:\n\n\nOrange Labs Cairo has a very big project that all employees will be working on it, every employee will choose the hours that he/she will work on by defining the start and end hour, e.g. if an employee will work from hour 6 to hour 8 then the lab will open for 2 hours (from 6 to 8). You are required to count the total number of hours when the lab will be open.\n\n\n\n\nInput Format:\n\n\nThe first line contains an integer T, the number of test cases. Followed by T test cases as the following:\n\nThe first number is an integer n (1 <= n <= 5000) representing the number of employees.\n\nThe rest of the input is filled by 2*n integers (2 integers in each line) (x1 y1 x2 y2 . . .) meaning start and end hour of each employee\n\nAll hour intervals do not exceed (109).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print only one number ? the total number of hours in which the lab will be open.\n\n\n\n\nSample Input:\n\n1\n3\n0 4\n3 5\n6 7\n10 12\n40 42\n\n\n\nSample Output:\n\n10\n\n\n\nNotes:\n\n\n** explanation: \n\t5 hours from 0 to 5\n\t+ 1 hour from 6 to 7\n\t+ 2 hours from 10 to 12\n\t+ 2 hours from 40 to 42\n\t= 10 hours\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nksamykandil\n\n\n\n\nAdded at:\n\n\n2015-08-28 13:30:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:Orange - First Contest\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n3\n0 4\n3 5\n6 7\n10 12\n40 42\n\n\nSample Output:\n\n10\n\n",
    "Description": "\nProblem Statement:\n\n\nOrange Labs Cairo has a very big project that all employees will be working on it, every employee will choose the hours that he/she will work on by defining the start and end hour, e.g. if an employee will work from hour 6 to hour 8 then the lab will open for 2 hours (from 6 to 8). You are required to count the total number of hours when the lab will be open.\n\n\n",
    "Title": "419. Working Hours",
    "Notes": "\nNotes:\n\n\n** explanation: \n\t5 hours from 0 to 5\n\t+ 1 hour from 6 to 7\n\t+ 2 hours from 10 to 12\n\t+ 2 hours from 40 to 42\n\t= 10 hours\n\n",
    "URL": "https://a2oj.com/p?ID=419",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print only one number ? the total number of hours in which the lab will be open.\n\n\n"
  },
  "2251": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100).\n\nEach test case represents a game and starts with a line that contains two space separated integers:\n- N: The number of written pairs (1 \u2264 N \u2264 1000)\n- Q: The number of queries (1 \u2264 Q \u2264 1000)\n\nFollowed by N lines each containing 2 space separated integers a and b representing the ith pair (\u22121,000,000 \u2264 a, b \u2264 1,000,000)\n\nFollowed by Q lines each containing a single integer A representing the jth query (\u22121,000,000 \u2264 A \u2264 1,000,000)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n420. Shika Bika\n\n\n\n\n\nProblem Statement:\n\n\nShika and Bika are two cute little sisters. They like to play together all the time. These days, they are learning about integers. They developed the following game. Shika chooses a certain range, without telling Bika about it, then the game goes in rounds. In each round, Shika calls out one integer from the range she chose, then Bika replies with another integer (it needn't be in the range, just any integer). Shika ends the game only after making sure that she called out each integer in the range at least once. This means Shika can call out an integer more than once and Bika can reply with different integer each time. For example, Shika might call out 3 in a round and Bika replies with 4, then later in another round, Shika calls out 3 again but Bika replies with 3 this time. After every round, they write down a pair consisting of the integer that Shika called out in the round and the integer Bika replied with. The write up has the following problems:\n\n- They do not write the pair in a certain order. So, if Shika says x, and Bika replies with y, they sometimes write this pair as (x, y) and other times as (y, x).\n- In some rounds, they forget to write the pair at all.\n\nNext day after the game, Shika asks Bika questions like: \"Did I call out integer q yesterday?\". Bika has the write up and she is allowed to answer with one of the following answers. \"YES\", \"NO\", or \"NOT SURE\". Given the written pairs, can you help Bika answer Shika's questions?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100).\n\nEach test case represents a game and starts with a line that contains two space separated integers:\n- N: The number of written pairs (1 \u2264 N \u2264 1000)\n- Q: The number of queries (1 \u2264 Q \u2264 1000)\n\nFollowed by N lines each containing 2 space separated integers a and b representing the ith pair (\u22121,000,000 \u2264 a, b \u2264 1,000,000)\n\nFollowed by Q lines each containing a single integer A representing the jth query (\u22121,000,000 \u2264 A \u2264 1,000,000)\n\n\n\n\nOutput Format:\n\n\nFor each test case, print Q lines, where the ith line answers the ith query with \"YES\", \"NO\", or \"NOT SURE\".\n\n\n\n\nSample Input:\n\n1\n2 3\n10 7\n20 14\n3\n8\n11\n\n\n\nSample Output:\n\nNOT SURE\nNOT SURE\nYES\n\n\n\nNotes:\n\n\nIn the test case, we can see that we have the following possibilities:\n- Round 1: Shika called out 10, Bika replied with 7\n- Round 2: Shika called out 20, Bika replied with 14\n\n- Round 1: Shika called out 10, Bika replied with 7\n- Round 2: Shika called out 14, Bika replied with 20\n\n- Round 1: Shika called out 7, Bika replied with 10\n- Round 2: Shika called out 20, Bika replied with 14\n\n- Round 1: Shika called out 7, Bika replied with 10\n- Round 2: Shika called out 14, Bika replied with 20\n\nFor the first query, Bika would never be able to decide if 3 was called out by Shika or not, since some rounds' pairs may be missing. For the second query, in possibilities 1 and 2, Bika can't guarantee that Shika called out 8. For the third query, 11 was for sure called out by Shika, as it is between the two integers called out by Shika in all possibilities.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n2 3\n10 7\n20 14\n3\n8\n11\n\n\nSample Output:\n\nNOT SURE\nNOT SURE\nYES\n\n",
    "Description": "\nProblem Statement:\n\n\nShika and Bika are two cute little sisters. They like to play together all the time. These days, they are learning about integers. They developed the following game. Shika chooses a certain range, without telling Bika about it, then the game goes in rounds. In each round, Shika calls out one integer from the range she chose, then Bika replies with another integer (it needn't be in the range, just any integer). Shika ends the game only after making sure that she called out each integer in the range at least once. This means Shika can call out an integer more than once and Bika can reply with different integer each time. For example, Shika might call out 3 in a round and Bika replies with 4, then later in another round, Shika calls out 3 again but Bika replies with 3 this time. After every round, they write down a pair consisting of the integer that Shika called out in the round and the integer Bika replied with. The write up has the following problems:\n\n- They do not write the pair in a certain order. So, if Shika says x, and Bika replies with y, they sometimes write this pair as (x, y) and other times as (y, x).\n- In some rounds, they forget to write the pair at all.\n\nNext day after the game, Shika asks Bika questions like: \"Did I call out integer q yesterday?\". Bika has the write up and she is allowed to answer with one of the following answers. \"YES\", \"NO\", or \"NOT SURE\". Given the written pairs, can you help Bika answer Shika's questions?\n\n\n",
    "Title": "420. Shika Bika",
    "Notes": "\nNotes:\n\n\nIn the test case, we can see that we have the following possibilities:\n- Round 1: Shika called out 10, Bika replied with 7\n- Round 2: Shika called out 20, Bika replied with 14\n\n- Round 1: Shika called out 10, Bika replied with 7\n- Round 2: Shika called out 14, Bika replied with 20\n\n- Round 1: Shika called out 7, Bika replied with 10\n- Round 2: Shika called out 20, Bika replied with 14\n\n- Round 1: Shika called out 7, Bika replied with 10\n- Round 2: Shika called out 14, Bika replied with 20\n\nFor the first query, Bika would never be able to decide if 3 was called out by Shika or not, since some rounds' pairs may be missing. For the second query, in possibilities 1 and 2, Bika can't guarantee that Shika called out 8. For the third query, 11 was for sure called out by Shika, as it is between the two integers called out by Shika in all possibilities.\n\n",
    "URL": "https://a2oj.com/p?ID=420",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print Q lines, where the ith line answers the ith query with \"YES\", \"NO\", or \"NOT SURE\".\n\n\n"
  },
  "2252": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by T test cases.\n\nEach case starts with a line containing an integer N the number of segments to draw (1 \u2264 N \u2264 100,000). Followed by N lines, each line contains 4 integers, X1, Y1, X2 and Y2, representing a line segment between the points (X1, Y1) and (X2, Y2) (1 \u2264 X1, Y1, X2, Y2 \u2264 1,000,000,000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n421. Scrambled Digits\n\n\n\n\n\nProblem Statement:\n\n\nLittle Petya started to learn how to write some digits, he is just learning to write the following 5 digits:\n\n\n\nHe draws each digit exactly with the same dimensions as the above image, but he might make zero or more of the following updates:\n- Shrink or expand the width of the digit, keeping the width as an integer number of units.\n- Shrink or expand the height of the digit, keeping the height as an integer number of units\n- Rotate the digit clockwise by 90, 180 or 270 degrees.\n\nNote that shrinking and expanding a digit doesn't change the thickness of a segment, and it affects the whole digit equally. For example shrinking or expanding the digit 3 vertically (before rotating it), will always keep the middle horizontal segment exactly in the middle between the other horizontal segments.\n\nNow he has an infinite 2D plane, where he writes a lot of digits, but he keeps the following rules valid:\n- The digits won't touch each other, or overlap (the segments of each digit won't touch the segments of other digits).\n- All vertical segments will be placed on a vertical line with an integer X-value.\n- All horizontal segments will be placed on a horizontal line with an integer Y-value\n- All end points will be on a point with integer coordinates (an end point is a point at the end of a specific vertical or horizontal segment).\n\nPetya will draw the digits by drawing line segments, each segment starts and ends at points with integer coordinates, and all segments are guaranteed to be vertical or horizontal with positive integer length. Note that the segments can touch or even overlap, but when this happens, these segments belong to the same instance of the same digit (check the second sample test case).\n\nThe following image represents some invalid digits which will never appear in the input:\n\n\n\nThe 1 is rotated incorrectly, the length of the middle horizontal segment in the 3 is wrong, the middle horizontal segment in the 2 isn't in the middle anymore and the 4 is mirrored (not rotated).\n\nYou will be given a list of line segments which Petya draw, and it's guaranteed that these line segments will form only valid digits as described above. Your task is to find how many times each digit was drawn.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100). Followed by T test cases.\n\nEach case starts with a line containing an integer N the number of segments to draw (1 \u2264 N \u2264 100,000). Followed by N lines, each line contains 4 integers, X1, Y1, X2 and Y2, representing a line segment between the points (X1, Y1) and (X2, Y2) (1 \u2264 X1, Y1, X2, Y2 \u2264 1,000,000,000).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print 5 integers separated by a single space, each integer represents how many times each digit was drawn, in the same order from left to right like the first image.\n\n\n\n\nSample Input:\n\n2\n17\n1 1 1 7\n1 7 4 7\n4 7 4 1\n4 1 1 1\n6 1 6 7\n11 1 8 1\n8 1 8 4\n8 4 11 4\n11 4 11 7\n11 7 8 7\n13 1 16 1\n16 1 16 7\n16 7 13 7\n16 4 13 4\n21 1 21 7\n21 4 18 4\n18 4 18 7\n24\n1 2 1 4\n1 4 1 8\n1 6 1 10\n1 11 4 11\n2 1 2 9\n2 1 3 1\n2 5 3 5\n2 9 3 9\n4 7 4 8\n4 8 5 8\n5 8 5 7\n5 7 4 7\n5 2 5 6\n5 4 8 4\n8 4 8 2\n5 9 5 10\n5 10 6 10\n6 10 6 9\n6 9 7 9\n7 9 7 10\n8 7 8 10\n8 10 9 10\n9 10 9 7\n9 7 8 7\n\n\n\nSample Output:\n\n1 1 1 1 1\n2 2 1 1 1\n\n\n\nNotes:\n\n\n- The first sample test case represents the first image.\n- The second sample test case represents the following image (note that some segments might overlap and/or touch to form one longer segment):\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n17\n1 1 1 7\n1 7 4 7\n4 7 4 1\n4 1 1 1\n6 1 6 7\n11 1 8 1\n8 1 8 4\n8 4 11 4\n11 4 11 7\n11 7 8 7\n13 1 16 1\n16 1 16 7\n16 7 13 7\n16 4 13 4\n21 1 21 7\n21 4 18 4\n18 4 18 7\n24\n1 2 1 4\n1 4 1 8\n1 6 1 10\n1 11 4 11\n2 1 2 9\n2 1 3 1\n2 5 3 5\n2 9 3 9\n4 7 4 8\n4 8 5 8\n5 8 5 7\n5 7 4 7\n5 2 5 6\n5 4 8 4\n8 4 8 2\n5 9 5 10\n5 10 6 10\n6 10 6 9\n6 9 7 9\n7 9 7 10\n8 7 8 10\n8 10 9 10\n9 10 9 7\n9 7 8 7\n\n\nSample Output:\n\n1 1 1 1 1\n2 2 1 1 1\n\n",
    "Description": "\nProblem Statement:\n\n\nLittle Petya started to learn how to write some digits, he is just learning to write the following 5 digits:\n\n\n\nHe draws each digit exactly with the same dimensions as the above image, but he might make zero or more of the following updates:\n- Shrink or expand the width of the digit, keeping the width as an integer number of units.\n- Shrink or expand the height of the digit, keeping the height as an integer number of units\n- Rotate the digit clockwise by 90, 180 or 270 degrees.\n\nNote that shrinking and expanding a digit doesn't change the thickness of a segment, and it affects the whole digit equally. For example shrinking or expanding the digit 3 vertically (before rotating it), will always keep the middle horizontal segment exactly in the middle between the other horizontal segments.\n\nNow he has an infinite 2D plane, where he writes a lot of digits, but he keeps the following rules valid:\n- The digits won't touch each other, or overlap (the segments of each digit won't touch the segments of other digits).\n- All vertical segments will be placed on a vertical line with an integer X-value.\n- All horizontal segments will be placed on a horizontal line with an integer Y-value\n- All end points will be on a point with integer coordinates (an end point is a point at the end of a specific vertical or horizontal segment).\n\nPetya will draw the digits by drawing line segments, each segment starts and ends at points with integer coordinates, and all segments are guaranteed to be vertical or horizontal with positive integer length. Note that the segments can touch or even overlap, but when this happens, these segments belong to the same instance of the same digit (check the second sample test case).\n\nThe following image represents some invalid digits which will never appear in the input:\n\n\n\nThe 1 is rotated incorrectly, the length of the middle horizontal segment in the 3 is wrong, the middle horizontal segment in the 2 isn't in the middle anymore and the 4 is mirrored (not rotated).\n\nYou will be given a list of line segments which Petya draw, and it's guaranteed that these line segments will form only valid digits as described above. Your task is to find how many times each digit was drawn.\n\n\n",
    "Title": "421. Scrambled Digits",
    "Notes": "\nNotes:\n\n\n- The first sample test case represents the first image.\n- The second sample test case represents the following image (note that some segments might overlap and/or touch to form one longer segment):\n\n\n\n",
    "URL": "https://a2oj.com/p?ID=421",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print 5 integers separated by a single space, each integer represents how many times each digit was drawn, in the same order from left to right like the first image.\n\n\n"
  },
  "2253": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nEach test case consists of a line containing three space separated integers:\n- G: The group of the Pokemon (1 \u2264 G \u2264 3)\n- C: The initial candies you have (0 \u2264 C \u2264 100)\n- E: The candies required to evolve the Pokemon (1 \u2264 E \u2264 100)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n422. Pokemon Buddy\n\n\n\n\n\nProblem Statement:\n\n\nPokemon Go just released the Buddy update. It lets you select a Pokemon to appear alongside your trainer's avatar on your profile screen. As you walk with your buddy, it will find candy that can be used to evolve the Pokemon.\n\nThe Buddy system divides the Pokemons into 3 groups. Each group gives one candy upon walking for 1, 3, and 5 kilometers respectively\n\nIn this problem you will be given the Pokemon group G, the number of candies C you initially have, and the number of candies E required to evolve the Pokemon. You should calculate the number of Kilometers required to walk in order to evolve the Pokemon.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nEach test case consists of a line containing three space separated integers:\n- G: The group of the Pokemon (1 \u2264 G \u2264 3)\n- C: The initial candies you have (0 \u2264 C \u2264 100)\n- E: The candies required to evolve the Pokemon (1 \u2264 E \u2264 100)\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the number of Kilometers of walking required to Evolve the Pokemon.\n\n\n\n\nSample Input:\n\n2\n1 15 51\n1 18 21\n\n\n\nSample Output:\n\n36\n3\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n1 15 51\n1 18 21\n\n\nSample Output:\n\n36\n3\n\n",
    "Description": "\nProblem Statement:\n\n\nPokemon Go just released the Buddy update. It lets you select a Pokemon to appear alongside your trainer's avatar on your profile screen. As you walk with your buddy, it will find candy that can be used to evolve the Pokemon.\n\nThe Buddy system divides the Pokemons into 3 groups. Each group gives one candy upon walking for 1, 3, and 5 kilometers respectively\n\nIn this problem you will be given the Pokemon group G, the number of candies C you initially have, and the number of candies E required to evolve the Pokemon. You should calculate the number of Kilometers required to walk in order to evolve the Pokemon.\n\n\n",
    "Title": "422. Pokemon Buddy",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=422",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the number of Kilometers of walking required to Evolve the Pokemon.\n\n\n"
  },
  "2254": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100).\n\nEach test case starts with a line that contains two space separated integers:\n- N: The number of available city blocks (0 \u2264 N \u2264 100,000)\n- Q: The number of investors (1 \u2264 Q \u2264 100,000)\n\nFollowed by 2 lines.The first line contains N space separated integers, each integer x represents the type of block i. The second line contains Q space separated integers, each integer y represents the block type that investor j is interested in. (1 \u2264 x, y \u2264 1,000,000,000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n423. Andorra\n\n\n\n\n\nProblem Statement:\n\n\nAndorra is a horizontal city that consists of a set of side-by-side blocks. Each block has a number corresponding to its type and multiple blocks can have the same type.\n\nAndy is the contractor of Andorra. From experience, when Andy meets an investor he usually knows what type of blocks he will be interested in buying. Showing the investor only that type will be very obvious and might make the investor negotiate and reduce the price.\n\nAndy, being the smart guy he is, makes a tour for the investor, the tour could be one block, or multiple consecutive blocks, and the tour should contain at least one block of the type the investor wants. After the tour, Andy manages to sell all blocks of that type to the investor. A tour can not include blocks that have been sold before, otherwise owners will be upset.\n\nAndy has a series of investor coming his way and he will deal with them in the order of their arrival. He needs your help in planning. For each investor he wants to know;\n\n- How many tours are possible to give to them.\n- How many future tours are available after being done with that investor. (Remember any tour can't contain a property that was sold)\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1 \u2264 T \u2264 100).\n\nEach test case starts with a line that contains two space separated integers:\n- N: The number of available city blocks (0 \u2264 N \u2264 100,000)\n- Q: The number of investors (1 \u2264 Q \u2264 100,000)\n\nFollowed by 2 lines.The first line contains N space separated integers, each integer x represents the type of block i. The second line contains Q space separated integers, each integer y represents the block type that investor j is interested in. (1 \u2264 x, y \u2264 1,000,000,000).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print Q lines each containing 2 space separated integers.Each line j contains 2 space separated integers, the number of tours possible for investor j and the number of future tours possible being done with that investor respectively.\n\n\n\n\nSample Input:\n\n1\n2 2\n1 2\n1 2\n\n\n\nSample Output:\n\n2 1\n1 0\n\n\n\nNotes:\n\n\nIn the test case, Andorra has 2 block. In the beginning, they are all free so Andy can give 3 tours:\n\n- From block 1 to block 1 (1,1)\n- From block 1 to block 2 (1,2)\n- From block 2 to block 2 (2,2)\n\n1.  Investor interested in blocks of type 1 arrives. Andy can make him two tours (1,1) and (1,2). After selling block 1 isn't avaliable no more so Andy can now only make the tour (2,2) so the answer is 2 1.\n\n2. Investor interested in blocks of type 2 arrives. Andy can make him only one tour (2,2). After selling, no tours are possible since they are all sold now so the answer is 1 0.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n2 2\n1 2\n1 2\n\n\nSample Output:\n\n2 1\n1 0\n\n",
    "Description": "\nProblem Statement:\n\n\nAndorra is a horizontal city that consists of a set of side-by-side blocks. Each block has a number corresponding to its type and multiple blocks can have the same type.\n\nAndy is the contractor of Andorra. From experience, when Andy meets an investor he usually knows what type of blocks he will be interested in buying. Showing the investor only that type will be very obvious and might make the investor negotiate and reduce the price.\n\nAndy, being the smart guy he is, makes a tour for the investor, the tour could be one block, or multiple consecutive blocks, and the tour should contain at least one block of the type the investor wants. After the tour, Andy manages to sell all blocks of that type to the investor. A tour can not include blocks that have been sold before, otherwise owners will be upset.\n\nAndy has a series of investor coming his way and he will deal with them in the order of their arrival. He needs your help in planning. For each investor he wants to know;\n\n- How many tours are possible to give to them.\n- How many future tours are available after being done with that investor. (Remember any tour can't contain a property that was sold)\n\n\n",
    "Title": "423. Andorra",
    "Notes": "\nNotes:\n\n\nIn the test case, Andorra has 2 block. In the beginning, they are all free so Andy can give 3 tours:\n\n- From block 1 to block 1 (1,1)\n- From block 1 to block 2 (1,2)\n- From block 2 to block 2 (2,2)\n\n1.  Investor interested in blocks of type 1 arrives. Andy can make him two tours (1,1) and (1,2). After selling block 1 isn't avaliable no more so Andy can now only make the tour (2,2) so the answer is 2 1.\n\n2. Investor interested in blocks of type 2 arrives. Andy can make him only one tour (2,2). After selling, no tours are possible since they are all sold now so the answer is 1 0.\n\n",
    "URL": "https://a2oj.com/p?ID=423",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print Q lines each containing 2 space separated integers.Each line j contains 2 space separated integers, the number of tours possible for investor j and the number of future tours possible being done with that investor respectively.\n\n\n"
  },
  "2255": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nEach test case starts with a line containing four space separated integers:\n- X: The length of the cuboid (1 \u2264 X \u2264 1,000,000,000)\n- Y: The width of the cuboid (1 \u2264 Y \u2264 1,000,000,000)\n- Z: The height of the cuboid (1 \u2264 Z \u2264 1,000,000,000)\n- N: The number of poisonous cells. (0 \u2264 N \u2264 100)\n\nFollowed by N lines each containing three space separated integers:\n- xi: The x-coordinate of the ith cube. (1 \u2264 xi \u2264 X)\n- yi: The y-coordinate of the ith cube. (1 \u2264 yi \u2264 Y )\n- zi: The z-coordinate of the ith cube. (1 \u2264 zi \u2264 Z)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n424. Baklawa\n\n\n\n\n\nProblem Statement:\n\n\nBaklawa or baklava, is a sweet middle eastern dessert, mainly made from phyllo dough sheets, walnuts, and sugar syrup cut into small cubic pieces and served in cuboid boxes containing multiple layers.\n\nAlice and Bob love to play what they call the last Baklawa game, The rules are as follows:\n\n- They choose a cuboid containing X by Y by Z cells of Baklawa to play with.\n- There are N poisonous cells both players know them.\n- Alice plays first, and the two players alternate.\n- In his/her turn the player has to cut the cuboid into two cuboids at least one of which is safe (doesn't contain a poisonous cube) and eats the safe part. The game continues with the other part.\n- A cut is made by slicing along one of the axis X, Y or Z.\n- The person who cannot make a move in his/her turn losses the game.\n\nAssuming both players play optimally, you are asked the following question: who wins the game? The figure below is an example of the first test case:\n\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nEach test case starts with a line containing four space separated integers:\n- X: The length of the cuboid (1 \u2264 X \u2264 1,000,000,000)\n- Y: The width of the cuboid (1 \u2264 Y \u2264 1,000,000,000)\n- Z: The height of the cuboid (1 \u2264 Z \u2264 1,000,000,000)\n- N: The number of poisonous cells. (0 \u2264 N \u2264 100)\n\nFollowed by N lines each containing three space separated integers:\n- xi: The x-coordinate of the ith cube. (1 \u2264 xi \u2264 X)\n- yi: The y-coordinate of the ith cube. (1 \u2264 yi \u2264 Y )\n- zi: The z-coordinate of the ith cube. (1 \u2264 zi \u2264 Z)\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing \"Alice\" if Alice wins the game, or \"Bob\" otherwise.\n\n\n\n\nSample Input:\n\n2\n3 3 3 4\n3 2 1\n3 1 1\n3 3 1\n3 2 2\n5 5 5 1\n3 4 2\n\n\n\nSample Output:\n\nAlice\nBob\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 3 3 4\n3 2 1\n3 1 1\n3 3 1\n3 2 2\n5 5 5 1\n3 4 2\n\n\nSample Output:\n\nAlice\nBob\n\n",
    "Description": "\nProblem Statement:\n\n\nBaklawa or baklava, is a sweet middle eastern dessert, mainly made from phyllo dough sheets, walnuts, and sugar syrup cut into small cubic pieces and served in cuboid boxes containing multiple layers.\n\nAlice and Bob love to play what they call the last Baklawa game, The rules are as follows:\n\n- They choose a cuboid containing X by Y by Z cells of Baklawa to play with.\n- There are N poisonous cells both players know them.\n- Alice plays first, and the two players alternate.\n- In his/her turn the player has to cut the cuboid into two cuboids at least one of which is safe (doesn't contain a poisonous cube) and eats the safe part. The game continues with the other part.\n- A cut is made by slicing along one of the axis X, Y or Z.\n- The person who cannot make a move in his/her turn losses the game.\n\nAssuming both players play optimally, you are asked the following question: who wins the game? The figure below is an example of the first test case:\n\n\n\n",
    "Title": "424. Baklawa",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=424",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing \"Alice\" if Alice wins the game, or \"Bob\" otherwise.\n\n\n"
  },
  "2256": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100)\n\nEach test case starts with a line containing two integers:\n- N: The number of columns of the grid (1 \u2264 N \u2264 10,000)\n- P: The number of important cells in the grid. (1 \u2264 P \u2264 100)\n\nThe next 3 lines will each contain N - 1 space separated integers describing the costs of the vertical separating edges. So, the first line describes the costs of the vertical edges separating the cells of the first row ((1, 1),(1, 2), ...,(1, N)), and similarly for the second and third lines.\n\nThe following 2 lines will each contain N space separated integers describing the costs of the horizontal separating edges. So, the first line describes the costs of the edges separating cells (1, c) and (2, c) for each column c, and similarly, the second line describes the costs of the edges separating cells (2, c) and (3, c) for each column c. (0 \u2264 edgecosts \u2264 100)\n\nThis will be followed by P lines each containing 2 space separated integers:\n- i: The row number of the important point (1 \u2264 i \u2264 3)\n- j: The column number of the important point (1 \u2264 j \u2264 N)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n425. Lumbo Jumbo\n\n\n\n\n\nProblem Statement:\n\n\nIn Lala land, young Lumbo and his older brother Jumbo used to play a game that they loved so much. Initially, the game was as follows. Jumbo chooses a number N, then he draws a 3 \u00d7 N grid on the floor marking some cells as important. The grid cells are referenced by a pair (i, j), where i is the row number, such that the uppermost row has number 1, and j is the column number, such that the leftmost column has number 1. The grid has 3 rows and N columns. Afterwards, Jumbo asks Lumbo to try his best jumping with one leg on the grid cells such that he follows the following rules:\n\n1.  He can start from any cell he chooses.\n2. Each important cell must be visited at least once.\n3. He can only jump from one cell to another if they are adjacent. Two cells are adjacent if they share at least one edge.\n4. Visiting non-important cells is allowed, as many times as Lumbo wants. Otherwise, the game can be impossible.\n\nOne day, Jumbo thought that the game is too easy that anyone, son of yesterday in his own words, can easily finish the game, so he decided to add new rules to it. So, in addition to the previous rules stated, Jumbo added the following rule:\n\n5.  Jumbo assigned a cost to each edge in the grid, between two adjacent cells, such that to cross this edge, Lumbo has to pay the cost assigned to this edge. To make it a bit easier, Jumpo said that whenever Lumbo pays the cost of one edge, he can use it as many times as he wants without paying again.\n\nThen, as before, he asked Lumbo to jump with one leg on the grid cells such that he visits each important cell at least once, but this time he should minimize the overall cost he has to pay.\n\nLumbo tried some jumps but he is not sure whether any of them has the minimum cost. Lumbo feels that it is too hard for him to do this, so he asked you to help him compute the minimum cost. Can you help him win over his brother and prove that he is son of today?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100)\n\nEach test case starts with a line containing two integers:\n- N: The number of columns of the grid (1 \u2264 N \u2264 10,000)\n- P: The number of important cells in the grid. (1 \u2264 P \u2264 100)\n\nThe next 3 lines will each contain N - 1 space separated integers describing the costs of the vertical separating edges. So, the first line describes the costs of the vertical edges separating the cells of the first row ((1, 1),(1, 2), ...,(1, N)), and similarly for the second and third lines.\n\nThe following 2 lines will each contain N space separated integers describing the costs of the horizontal separating edges. So, the first line describes the costs of the edges separating cells (1, c) and (2, c) for each column c, and similarly, the second line describes the costs of the edges separating cells (2, c) and (3, c) for each column c. (0 \u2264 edgecosts \u2264 100)\n\nThis will be followed by P lines each containing 2 space separated integers:\n- i: The row number of the important point (1 \u2264 i \u2264 3)\n- j: The column number of the important point (1 \u2264 j \u2264 N)\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the minimum cost Lumbo needs to pay to jump on the grid cells visiting each important cell at least once.\n\n\n\n\nSample Input:\n\n2\n3 4\n11 28\n1 62\n94 89\n31 15 64\n76 57 33\n1 2\n1 1\n1 3\n2 3\n4 3\n13 21 32\n11 6 70\n23 14 15\n16 23 31 17\n34 13 11 9\n1 1\n3 4\n1 4\n\n\n\nSample Output:\n\n103\n85\n\n\n\nNotes:\n\n\nHere is an explanation for the second sample test case:\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3 4\n11 28\n1 62\n94 89\n31 15 64\n76 57 33\n1 2\n1 1\n1 3\n2 3\n4 3\n13 21 32\n11 6 70\n23 14 15\n16 23 31 17\n34 13 11 9\n1 1\n3 4\n1 4\n\n\nSample Output:\n\n103\n85\n\n",
    "Description": "\nProblem Statement:\n\n\nIn Lala land, young Lumbo and his older brother Jumbo used to play a game that they loved so much. Initially, the game was as follows. Jumbo chooses a number N, then he draws a 3 \u00d7 N grid on the floor marking some cells as important. The grid cells are referenced by a pair (i, j), where i is the row number, such that the uppermost row has number 1, and j is the column number, such that the leftmost column has number 1. The grid has 3 rows and N columns. Afterwards, Jumbo asks Lumbo to try his best jumping with one leg on the grid cells such that he follows the following rules:\n\n1.  He can start from any cell he chooses.\n2. Each important cell must be visited at least once.\n3. He can only jump from one cell to another if they are adjacent. Two cells are adjacent if they share at least one edge.\n4. Visiting non-important cells is allowed, as many times as Lumbo wants. Otherwise, the game can be impossible.\n\nOne day, Jumbo thought that the game is too easy that anyone, son of yesterday in his own words, can easily finish the game, so he decided to add new rules to it. So, in addition to the previous rules stated, Jumbo added the following rule:\n\n5.  Jumbo assigned a cost to each edge in the grid, between two adjacent cells, such that to cross this edge, Lumbo has to pay the cost assigned to this edge. To make it a bit easier, Jumpo said that whenever Lumbo pays the cost of one edge, he can use it as many times as he wants without paying again.\n\nThen, as before, he asked Lumbo to jump with one leg on the grid cells such that he visits each important cell at least once, but this time he should minimize the overall cost he has to pay.\n\nLumbo tried some jumps but he is not sure whether any of them has the minimum cost. Lumbo feels that it is too hard for him to do this, so he asked you to help him compute the minimum cost. Can you help him win over his brother and prove that he is son of today?\n\n\n",
    "Title": "425. Lumbo Jumbo",
    "Notes": "\nNotes:\n\n\nHere is an explanation for the second sample test case:\n\n\n\n",
    "URL": "https://a2oj.com/p?ID=425",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the minimum cost Lumbo needs to pay to jump on the grid cells visiting each important cell at least once.\n\n\n"
  },
  "2257": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases.The first line contains the number of test cases T (1 \u2264 T \u2264 100). Each test cases starts with a line with integer N (1 \u2264 N \u2264 10,000) the length of the grid.\n\nFollowing this N lines each contains a string of length 2 indicating the team prisoners in cell 1 and 2 of the ith row support respectively.The teams can take values 0 or 1.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n426. Football Hooliganism\n\n\n\n\n\nProblem Statement:\n\n\nFootball hooliganism is a conflict between gangs of association football clubs supporters formed for the specific purpose of intimidating and physically attacking supporters of other teams.\n\nUnfortunately after this year Byteland Clasico between team zero and team one, rival fans clashed with each other and riot police, they set fire to recycle bins and smashed windows, while police tried to disperse them by firing tear gas, many people were arrested, but in order to prevent more fightings in the jail, authorities asked you to redesign the jail taking in consideration the following rules:\n\n- The jail is a grid of N by 2 identical cells where each prisoner is assigned to a single cell.\n- You can join adjacent cells to build larger but only rectangular cells.\n- The cells can not overlap and prisoners can not be moved.\n- Each prisoner supports either team zero or team one.\n- All prisoners in the same cell must support the same team.\n- Byteland people are very social, you have to minimize the number of solitary confinements (cells that have a single prisoner) where prisoners may feel lonely and commit suicide.\n\nYou are asked the following question: what is the minimum number of solitary confinements assuming you are joining the cells optimally.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases.The first line contains the number of test cases T (1 \u2264 T \u2264 100). Each test cases starts with a line with integer N (1 \u2264 N \u2264 10,000) the length of the grid.\n\nFollowing this N lines each contains a string of length 2 indicating the team prisoners in cell 1 and 2 of the ith row support respectively.The teams can take values 0 or 1.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the minimum number of solitary confinements.\n\n\n\n\nSample Input:\n\n2\n6\n01\n01\n01\n01\n10\n00\n4\n00\n10\n10\n10\n\n\n\nSample Output:\n\n2\n0\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n6\n01\n01\n01\n01\n10\n00\n4\n00\n10\n10\n10\n\n\nSample Output:\n\n2\n0\n\n",
    "Description": "\nProblem Statement:\n\n\nFootball hooliganism is a conflict between gangs of association football clubs supporters formed for the specific purpose of intimidating and physically attacking supporters of other teams.\n\nUnfortunately after this year Byteland Clasico between team zero and team one, rival fans clashed with each other and riot police, they set fire to recycle bins and smashed windows, while police tried to disperse them by firing tear gas, many people were arrested, but in order to prevent more fightings in the jail, authorities asked you to redesign the jail taking in consideration the following rules:\n\n- The jail is a grid of N by 2 identical cells where each prisoner is assigned to a single cell.\n- You can join adjacent cells to build larger but only rectangular cells.\n- The cells can not overlap and prisoners can not be moved.\n- Each prisoner supports either team zero or team one.\n- All prisoners in the same cell must support the same team.\n- Byteland people are very social, you have to minimize the number of solitary confinements (cells that have a single prisoner) where prisoners may feel lonely and commit suicide.\n\nYou are asked the following question: what is the minimum number of solitary confinements assuming you are joining the cells optimally.\n\n\n",
    "Title": "426. Football Hooliganism",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=426",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the minimum number of solitary confinements.\n\n\n"
  },
  "2258": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 10)\n\nEach test case starts with a line that contains three space separated integers:\n- N: The number of soldiers (1 \u2264 N \u2264 40,000)\n- E: The number of rivalries (1 \u2264 E \u2264 40,000)\n- Q: The number of queries (1 \u2264 Q \u2264 40,000)\n\nFollowed by E lines each containing 2 space separated integers A and B which means that soldier A and B can not be in the same wing. (1 \u2264 A, B \u2264 N)\n\nFollowed by Q lines each containing 2 space separated integers C and D which means that all rivalries between [C,D] can not be resolved. (1 \u2264 C, D \u2264 E)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n427. Valar Morghulis\n\n\n\n\n\nProblem Statement:\n\n\nKhaleesi has set sails for Kings Landing. With three dragons and tens of thousands in her army, she will be unstoppable. The ships are now getting closer to Kings Landing and she want to start planning for her attack.\n\nThe plan for the attack is that the army will be split into two wings: right and left. There is one problem though, Khaleesi's soldiers are from very diverse backgrounds and some of them have rivalries and don't get along (like Martells and Tyrells) so they can't be in the same wing.\n\nKhaleesi knows all the rivalries and can try to resolve some of them. Some rivalries are hard to resolve though and she will have to deal with them. She wants to check if some rivalries are not resolved, will it be possible split the soldiers into two wings where no two soldiers who don't get along are in the same wing. Can you help Khaleesi plan for her attack to sit on the iron throne?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 10)\n\nEach test case starts with a line that contains three space separated integers:\n- N: The number of soldiers (1 \u2264 N \u2264 40,000)\n- E: The number of rivalries (1 \u2264 E \u2264 40,000)\n- Q: The number of queries (1 \u2264 Q \u2264 40,000)\n\nFollowed by E lines each containing 2 space separated integers A and B which means that soldier A and B can not be in the same wing. (1 \u2264 A, B \u2264 N)\n\nFollowed by Q lines each containing 2 space separated integers C and D which means that all rivalries between [C,D] can not be resolved. (1 \u2264 C, D \u2264 E)\n\n\n\n\nOutput Format:\n\n\nFor each test case print Q lines where the ith line represents the answer for the ith query. The line should contain \"\u22121 \u22121\"(quotes for clarity) if the army can't be split into two wins or the size of the wings separated by single space otherwise. If there are multiple valid assignments print the one that maximizes the first wing.\n\n\n\n\nSample Input:\n\n1\n9 8 6\n5 4\n3 4\n5 6\n5 3\n7 8\n4 8\n5 4\n3 4\n1 8\n1 4\n2 5\n2 4\n4 7\n4 4\n\n\n\nSample Output:\n\n-1 -1\n-1 -1\n6 3\n7 2\n7 2\n8 1\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n1\n9 8 6\n5 4\n3 4\n5 6\n5 3\n7 8\n4 8\n5 4\n3 4\n1 8\n1 4\n2 5\n2 4\n4 7\n4 4\n\n\nSample Output:\n\n-1 -1\n-1 -1\n6 3\n7 2\n7 2\n8 1\n\n",
    "Description": "\nProblem Statement:\n\n\nKhaleesi has set sails for Kings Landing. With three dragons and tens of thousands in her army, she will be unstoppable. The ships are now getting closer to Kings Landing and she want to start planning for her attack.\n\nThe plan for the attack is that the army will be split into two wings: right and left. There is one problem though, Khaleesi's soldiers are from very diverse backgrounds and some of them have rivalries and don't get along (like Martells and Tyrells) so they can't be in the same wing.\n\nKhaleesi knows all the rivalries and can try to resolve some of them. Some rivalries are hard to resolve though and she will have to deal with them. She wants to check if some rivalries are not resolved, will it be possible split the soldiers into two wings where no two soldiers who don't get along are in the same wing. Can you help Khaleesi plan for her attack to sit on the iron throne?\n\n\n",
    "Title": "427. Valar Morghulis",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=427",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print Q lines where the ith line represents the answer for the ith query. The line should contain \"\u22121 \u22121\"(quotes for clarity) if the army can't be split into two wins or the size of the wings separated by single space otherwise. If there are multiple valid assignments print the one that maximizes the first wing.\n\n\n"
  },
  "2259": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nEach test case starts with a line that contains two space separated integers:\n- N: Number of Pokemons in the world (2 \u2264 N \u2264 1000)\n- K: Number of types of Pokemons (2 \u2264 K \u2264 100)\n\nFollowed by N lines each containing 3 space separated integers:\n- X: The x-coordinate of the Pokemon(-1,00,000,000 \u2264 X \u2264 1,00,000,000)\n- Y: The y-coordinate of the Pokemon (-1,00,000,000 \u2264 Y \u2264 1,00,000,000)\n- Z: The type of the Pokemon (1 \u2264 Z \u2264 K)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n428. Gotta Catch 'Em All\n\n\n\n\n\nProblem Statement:\n\n\nAsh Ketchum is a Pokemon trainer who is on a mission to catch all Pokemons in the world. Fortunately, he has caught most of them and he needs to collect K more different types of Pokemons to complete his set.\n\nAs you may already know, Ash lives in a 2D grid world. Pokemons spawn at integer coordinates on this grid. In this world there can be multiple Pokemons of the same type. Remember, Ash needs to catch K more different types of Pokemons not any K Pokemons.\n\nAsh decided to catch those Pokemons by throwing a big squared net from the sky. A Pokemon is considered to be caught if the Pokemon lies within the boundaries of the net or even on one of its edges. Ash wants to find a square that contains those Pokemons where each side of the square is either parallel to the x-axis or to the y-axis.\n\nCan you help Ash find the minimum side of the square that contains K different types of Pokemons so that he can buy an appropriate sized net to catch 'em all? Since nets need to always have a positive area, the side of the square needs to be positive.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nEach test case starts with a line that contains two space separated integers:\n- N: Number of Pokemons in the world (2 \u2264 N \u2264 1000)\n- K: Number of types of Pokemons (2 \u2264 K \u2264 100)\n\nFollowed by N lines each containing 3 space separated integers:\n- X: The x-coordinate of the Pokemon(-1,00,000,000 \u2264 X \u2264 1,00,000,000)\n- Y: The y-coordinate of the Pokemon (-1,00,000,000 \u2264 Y \u2264 1,00,000,000)\n- Z: The type of the Pokemon (1 \u2264 Z \u2264 K)\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the minimum side of a square that contains K different types of Pokemons.\n\n\n\n\nSample Input:\n\n2\n5 2\n0 0 1\n0 1 1\n0 2 1\n2 0 2\n2 1 2\n3 3\n0 0 1\n1 1 2\n2 2 3\n\n\n\nSample Output:\n\n2\n2\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n5 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5 2\n0 0 1\n0 1 1\n0 2 1\n2 0 2\n2 1 2\n3 3\n0 0 1\n1 1 2\n2 2 3\n\n\nSample Output:\n\n2\n2\n\n",
    "Description": "\nProblem Statement:\n\n\nAsh Ketchum is a Pokemon trainer who is on a mission to catch all Pokemons in the world. Fortunately, he has caught most of them and he needs to collect K more different types of Pokemons to complete his set.\n\nAs you may already know, Ash lives in a 2D grid world. Pokemons spawn at integer coordinates on this grid. In this world there can be multiple Pokemons of the same type. Remember, Ash needs to catch K more different types of Pokemons not any K Pokemons.\n\nAsh decided to catch those Pokemons by throwing a big squared net from the sky. A Pokemon is considered to be caught if the Pokemon lies within the boundaries of the net or even on one of its edges. Ash wants to find a square that contains those Pokemons where each side of the square is either parallel to the x-axis or to the y-axis.\n\nCan you help Ash find the minimum side of the square that contains K different types of Pokemons so that he can buy an appropriate sized net to catch 'em all? Since nets need to always have a positive area, the side of the square needs to be positive.\n\n\n",
    "Title": "428. Gotta Catch 'Em All",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=428",
    "Time Limit": "5 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the minimum side of a square that contains K different types of Pokemons.\n\n\n"
  },
  "2260": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T the number of test cases. (1 \u2264 T \u2264 100)\n\nEach test case consists of a line containing three space separated integers:\n- L: The length of the secret code (1 \u2264 L \u2264 100,000)\n- H: The hash value of the code (0 \u2264 H < 10,007)\n- M: The multiplier used in the hash formula, (0 \u2264 M \u2264 20)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n429. Man in the middle\n\n\n\n\n\nProblem Statement:\n\n\nAlice and Bob are good friends who trust each other even though they live in different countries. One day Bob had an idea for a startup that will change the world. However, he was in need of funds. Alice agreed to give him the money he needs. As Bob doesn't have a bank account, Alice told him she'll transfer the money to her friend Eve who lives in the same city with Bob, and all he needs to do is tell Eve the secret code and she'll hand him the money.\n\nSince they were communicating over the internet Alice was worried that someone might be spying on their conversation and can hear the secret code. Bob is one of the brightest brains Alice has met, so she decided to tell Bob the code after being hashed by a certain function and she knows that if someone else was listening to their conversation, Bob will still manage to figure out the secret code first. Bob knows the following about the code:\n\n- The code has length L\n- The code is only formed of letters A-Z (uppercase only)\n- The formula used for calculating the hash:\n- ni would be the numerical value that represents the letter at index i (1 \u2264 i \u2264 L), where A=0, B=1, C=2, .... Z=25\n- The code will be the least lexicographically string formed of letters A-Z that hash to a given value H using the function above.\n\nCan you help Bob figure out the secret code quickly before someone else figures out?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T the number of test cases. (1 \u2264 T \u2264 100)\n\nEach test case consists of a line containing three space separated integers:\n- L: The length of the secret code (1 \u2264 L \u2264 100,000)\n- H: The hash value of the code (0 \u2264 H < 10,007)\n- M: The multiplier used in the hash formula, (0 \u2264 M \u2264 20)\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the secret code if it is possible to find such a string, or \"None\"if there isn't one (quotes are for clarity).\n\n\n\n\nSample Input:\n\n2\n2 50 2\n4 250 3\n\n\n\nSample Output:\n\nNY\nARYZ\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 50 2\n4 250 3\n\n\nSample Output:\n\nNY\nARYZ\n\n",
    "Description": "\nProblem Statement:\n\n\nAlice and Bob are good friends who trust each other even though they live in different countries. One day Bob had an idea for a startup that will change the world. However, he was in need of funds. Alice agreed to give him the money he needs. As Bob doesn't have a bank account, Alice told him she'll transfer the money to her friend Eve who lives in the same city with Bob, and all he needs to do is tell Eve the secret code and she'll hand him the money.\n\nSince they were communicating over the internet Alice was worried that someone might be spying on their conversation and can hear the secret code. Bob is one of the brightest brains Alice has met, so she decided to tell Bob the code after being hashed by a certain function and she knows that if someone else was listening to their conversation, Bob will still manage to figure out the secret code first. Bob knows the following about the code:\n\n- The code has length L\n- The code is only formed of letters A-Z (uppercase only)\n- The formula used for calculating the hash:\n- ni would be the numerical value that represents the letter at index i (1 \u2264 i \u2264 L), where A=0, B=1, C=2, .... Z=25\n- The code will be the least lexicographically string formed of letters A-Z that hash to a given value H using the function above.\n\nCan you help Bob figure out the secret code quickly before someone else figures out?\n\n\n",
    "Title": "429. Man in the middle",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=429",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the secret code if it is possible to find such a string, or \"None\"if there isn't one (quotes are for clarity).\n\n\n"
  },
  "2261": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nEach test case consists of a line containing 2 space separated integers:\n- N: The number of soldiers (0 \u2264 N \u2264 10,000,000)\n- K: The number of continuous months a soldier can be on duty before they have to take a month of vacation (0 \u2264 K \u2264 10,000,000).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n430. Military Service\n\n\n\n\n\nProblem Statement:\n\n\nYou have just started your military service with the border guards. Since you are a Computer Science graduate, they asked you to implement a schedule for the soldiers. Initially no soldier is on duty and you need the schedule to satisfy 2 requirements:\n\n- There are N soldiers, each soldier can be on duty for at most K continuous months and then he must take one month of vacation.\n- The schedule needs to make sure that the guaranteed minimum number of soldiers on duty at any given time is maximized.\n\nGiven N and K, the system will calculate the maximum guaranteed number of soldiers to be on duty at any given time.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T, the number of test cases (1 \u2264 T \u2264 100).\n\nEach test case consists of a line containing 2 space separated integers:\n- N: The number of soldiers (0 \u2264 N \u2264 10,000,000)\n- K: The number of continuous months a soldier can be on duty before they have to take a month of vacation (0 \u2264 K \u2264 10,000,000).\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the maximum guaranteed number of soldiers on duty at any given time.\n\n\n\n\nSample Input:\n\n3\n4 1\n9 3\n21 3\n\n\n\nSample Output:\n\n2\n6\n15\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n4 1\n9 3\n21 3\n\n\nSample Output:\n\n2\n6\n15\n\n",
    "Description": "\nProblem Statement:\n\n\nYou have just started your military service with the border guards. Since you are a Computer Science graduate, they asked you to implement a schedule for the soldiers. Initially no soldier is on duty and you need the schedule to satisfy 2 requirements:\n\n- There are N soldiers, each soldier can be on duty for at most K continuous months and then he must take one month of vacation.\n- The schedule needs to make sure that the guaranteed minimum number of soldiers on duty at any given time is maximized.\n\nGiven N and K, the system will calculate the maximum guaranteed number of soldiers to be on duty at any given time.\n\n\n",
    "Title": "430. Military Service",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=430",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the maximum guaranteed number of soldiers on duty at any given time.\n\n\n"
  },
  "2262": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input contains a single integer T (1 \u2264 T \u2264 100) the number of test cases.\n\nEach test case consists of one line contains three integers:\n- N: The number of sides of the polygon in the sieve (3 \u2264 N \u2264 100)\n- S: The side length of the polygon in the sieve (1 \u2264 S \u2264 1,000,000)\n- R: The radius of your brain (1 \u2264 R \u2264 1,000,000)\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n431. Rains\n\n\n\n\n\nProblem Statement:\n\n\nIt is the end of the world, the fish community rises up against years of humanity's abuse, and declares war against mankind.\n\nAfter millions of years of unemployment and reliance on robots, humans became spheres of radius R consisting of only one part, the brain. Fish rebels developed special weapons named \"the rains of Atlantic\" which consist of large heavy sieves prepared to slice humans, a sieve is composed of extremely thin stretched strings in the form of a grid of convex regular N-sided polygons* of side length S. The figure below is an example of the cases when N = 3, N = 4, N = 6:\n\n\n\nYou are the last survivor but they have finally identified the city where you hide. They are going to throws a sieve that will cover the whole city. Your brain will be sliced if one of the threads from the sieve touches it. What is the probability that your brain will be sliced if you can be located anywhere in the city with equal probability?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input contains a single integer T (1 \u2264 T \u2264 100) the number of test cases.\n\nEach test case consists of one line contains three integers:\n- N: The number of sides of the polygon in the sieve (3 \u2264 N \u2264 100)\n- S: The side length of the polygon in the sieve (1 \u2264 S \u2264 1,000,000)\n- R: The radius of your brain (1 \u2264 R \u2264 1,000,000)\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the probability that your brain will be sliced, rounded to four decimal places.\n\n\n\n\nSample Input:\n\n2\n82 875072 117331\n50 475634 389028\n\n\n\nSample Output:\n\n0.0205\n0.1952\n\n\n\nNotes:\n\n\nA regular polygon is a polygon that is equiangular (all angles are equal in measure) and equilateral (all sides have the same length)\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2016-11-26 17:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:ACM Arab Collegiate Programming Contest 2016\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n82 875072 117331\n50 475634 389028\n\n\nSample Output:\n\n0.0205\n0.1952\n\n",
    "Description": "\nProblem Statement:\n\n\nIt is the end of the world, the fish community rises up against years of humanity's abuse, and declares war against mankind.\n\nAfter millions of years of unemployment and reliance on robots, humans became spheres of radius R consisting of only one part, the brain. Fish rebels developed special weapons named \"the rains of Atlantic\" which consist of large heavy sieves prepared to slice humans, a sieve is composed of extremely thin stretched strings in the form of a grid of convex regular N-sided polygons* of side length S. The figure below is an example of the cases when N = 3, N = 4, N = 6:\n\n\n\nYou are the last survivor but they have finally identified the city where you hide. They are going to throws a sieve that will cover the whole city. Your brain will be sliced if one of the threads from the sieve touches it. What is the probability that your brain will be sliced if you can be located anywhere in the city with equal probability?\n\n\n",
    "Title": "431. Rains",
    "Notes": "\nNotes:\n\n\nA regular polygon is a polygon that is equiangular (all angles are equal in measure) and equilateral (all sides have the same length)\n\n",
    "URL": "https://a2oj.com/p?ID=431",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the probability that your brain will be sliced, rounded to four decimal places.\n\n\n"
  },
  "2263": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer N (the number of teams in the group, 2  \u2264  N  \u2264  100).\n\nFollowed by N lines, each line represents a team. Each line starts with a string of at least 1 and at most 10 lower case English letters, then a space then the number of points that team got (the number of points is non-negative and will be at most 1000).\n\nThe names of the teams within the same test case are guaranteed to be unique, and there will be at least 1 team with positive score.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n478. Egypt in the World Cup\n\n\n\n\n\nProblem Statement:\n\n\nThat was an unforgettable day! Finally Egypt has reached the FIFA World Cup for the first time since its last appearance in 1990! In the world cup the teams are divided in separate groups, and each team plays with the other teams in the same group and the top teams with the most number of points go to the next round.\n\nYou are given the name of each team, and how many points that team got, and your task is to find the name of the team with the highest number of points.\n\nFor simplicity, the points in this problems don't follow any rules, also the number of teams in a group can be an arbitrary number (not always 4), and you can find a team in a group of 4 teams with 100 points, that's okay in this problem.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer N (the number of teams in the group, 2  \u2264  N  \u2264  100).\n\nFollowed by N lines, each line represents a team. Each line starts with a string of at least 1 and at most 10 lower case English letters, then a space then the number of points that team got (the number of points is non-negative and will be at most 1000).\n\nThe names of the teams within the same test case are guaranteed to be unique, and there will be at least 1 team with positive score.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print a single line containing the name of the team with the highest number of points. It's guaranteed that exactly 1 team will have that highest number.\n\n\n\n\nSample Input:\n\n2\n3\nbrazil 7\negypt 10\nspain 5\n2\nteama 4\nteamb 30\n\n\n\n\nSample Output:\n\negypt\nteamb\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2017-10-09 20:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ Code Battle Round 1\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3\nbrazil 7\negypt 10\nspain 5\n2\nteama 4\nteamb 30\n\n\n\nSample Output:\n\negypt\nteamb\n\n\n",
    "Description": "\nProblem Statement:\n\n\nThat was an unforgettable day! Finally Egypt has reached the FIFA World Cup for the first time since its last appearance in 1990! In the world cup the teams are divided in separate groups, and each team plays with the other teams in the same group and the top teams with the most number of points go to the next round.\n\nYou are given the name of each team, and how many points that team got, and your task is to find the name of the team with the highest number of points.\n\nFor simplicity, the points in this problems don't follow any rules, also the number of teams in a group can be an arbitrary number (not always 4), and you can find a team in a group of 4 teams with 100 points, that's okay in this problem.\n\n\n",
    "Title": "478. Egypt in the World Cup",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=478",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print a single line containing the name of the team with the highest number of points. It's guaranteed that exactly 1 team will have that highest number.\n\n\n"
  },
  "2264": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing 2 integers separated by a space, N (the number of contestants, 1  \u2264  N  \u2264  100), M (the value of M as described above, 1  \u2264  M  \u2264  N).\n\nFollowed by N lines, each line represents a contestant and contains a single integer which is the number of problems that contestant solved. These numbers are not sorted in any way\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n479. ACB Round 1\n\n\n\n\n\nProblem Statement:\n\n\nA2OJ Code Battle (by WUZZUF) is a new programming contest, it's the first Egyptian individual contest with lots of prizes provided by WUZZUF.\n\nIt's first round is a special one, because it's a 24-hour round, so it will be unfair to consider the time penalty in a 24-hour round.\n\nTo solve this issue, here's the rule for qualifying users from the first round: The top M contestants will be qualified to the next round, plus anyone else who solved the same number of problems as the Mth contestant, but no one will be qualified if they don't solve anything correctly.\n\nThe contestants are ranked based on how many problems they solved, who solved more gets a higher rank. When X contestant solve the same number of problems, they get the next X ranks in any order, it doesn't matter in this problem.\n\nGiven how many problems were solved by each contestant, and the value of M, determine how many contestants will be qualified to the next round.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing 2 integers separated by a space, N (the number of contestants, 1  \u2264  N  \u2264  100), M (the value of M as described above, 1  \u2264  M  \u2264  N).\n\nFollowed by N lines, each line represents a contestant and contains a single integer which is the number of problems that contestant solved. These numbers are not sorted in any way\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing just one integer which is the number of contestants who will be qualified to the next round.\n\n\n\n\nSample Input:\n\n3\n5 2\n1\n2\n3\n7\n6\n5 3\n7\n7\n5\n5\n3\n5 4\n0\n0\n3\n2\n1\n\n\n\n\nSample Output:\n\n2\n4\n3\n\n\n\n\nNotes:\n\n\nIn the first case, the contestants solving 7 problems and 6 problems are qualified.\n\nIn the second test case, the contestants solving 7 problems and 5 problems are qualified, here we are qualifying more than M contestants because there's a tie at the Mth place with 5 problems, so both are qualified, and the contestants solving 7 problems are given the 1st and 2nd places.\n\nIn the third test case, there's less than M contestants with positive number of solved problems, so only 3 contestants will be qualified.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2017-10-09 20:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ Code Battle Round 1\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n5 2\n1\n2\n3\n7\n6\n5 3\n7\n7\n5\n5\n3\n5 4\n0\n0\n3\n2\n1\n\n\n\nSample Output:\n\n2\n4\n3\n\n\n",
    "Description": "\nProblem Statement:\n\n\nA2OJ Code Battle (by WUZZUF) is a new programming contest, it's the first Egyptian individual contest with lots of prizes provided by WUZZUF.\n\nIt's first round is a special one, because it's a 24-hour round, so it will be unfair to consider the time penalty in a 24-hour round.\n\nTo solve this issue, here's the rule for qualifying users from the first round: The top M contestants will be qualified to the next round, plus anyone else who solved the same number of problems as the Mth contestant, but no one will be qualified if they don't solve anything correctly.\n\nThe contestants are ranked based on how many problems they solved, who solved more gets a higher rank. When X contestant solve the same number of problems, they get the next X ranks in any order, it doesn't matter in this problem.\n\nGiven how many problems were solved by each contestant, and the value of M, determine how many contestants will be qualified to the next round.\n\n\n",
    "Title": "479. ACB Round 1",
    "Notes": "\nNotes:\n\n\nIn the first case, the contestants solving 7 problems and 6 problems are qualified.\n\nIn the second test case, the contestants solving 7 problems and 5 problems are qualified, here we are qualifying more than M contestants because there's a tie at the Mth place with 5 problems, so both are qualified, and the contestants solving 7 problems are given the 1st and 2nd places.\n\nIn the third test case, there's less than M contestants with positive number of solved problems, so only 3 contestants will be qualified.\n\n",
    "URL": "https://a2oj.com/p?ID=479",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing just one integer which is the number of contestants who will be qualified to the next round.\n\n\n"
  },
  "2265": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing 3 integers separated by a space, C (the number of contestants, the contestants will be numbered from 1 to C, 1  \u2264  C  \u2264  100), P (the number of problems, the problems will be numbered from 1 to P, 1  \u2264  P  \u2264  10) and S (the number of submissions, 1  \u2264  S  \u2264  1000).\n\nFollowed by S lines, each line represents a submission (the submissions are not sorted in the input in any way).\n\nEach submission line contains 4 integers separated by a space, t (the submission time in minutes, 1  \u2264  t  \u2264  1000), c (the contestant ID, 1  \u2264  c  \u2264  C), p (the problem ID, 1  \u2264  p  \u2264  P) and r (r will be 0 which means wrong submission or 1 which means correct submission).\n\nIt's guaranteed that no 2 submissions will be made by the same contestant at the same time.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n480. ACB Scoreboard\n\n\n\n\n\nProblem Statement:\n\n\nIn A2OJ Code Battle, the scoreboard calculation isn't easy, so we're going to use this problem to teach you the exact rules, and your task is to generate a scoreboard given the submissions list.\n\nFor each submission you will be given the submission time (in minutes since the start of the contest), the contestant ID, the problem ID and the submission result. The scoreboard should contain how many problems were solved by each contestant, and the each contestant's time penalty.\n\nThe number of solved problems is easy to calculate, if a contestants makes 2 or more correct submissions for the same problem, it will be counted only once.\n\nThe time penalty for each contestant is the sum of the time penalty for each solved problem by this contestant. The time penalty for a solved problem is the time when the first correct submission was made + 20 for each wrong submission which happened before the first correct submission.\n\nFor example consider the following submissions made by one contestant:\n\n Correct submission in problem 1 at minute 16.\n Wrong submission in problem 2 at minute 19.\n Wrong submission in problem 3 at minute 28.\n Correct submission in problem 2 at minute 24.\n Correct submission in problem 2 at minute 26.\n Wrong submission in problem 2 at minute 28.In the above example, the contestant solved problem 1 and its time penalty is 16, and problem 2 and its time penalty is 44 (24 + 20, because the first correct submission was after 24 minutes and there was a wrong submission before that). So the total time penalty for this contestant will be 60 (16 + 44).\n\nNote that the submission in problem 3 didn't add any time penalty, because this problem wasn't solved, also the last submission didn't add any time penalty because it was made after a correct submission for that problem, and the time penalty for the first correct submission was used.\n\nAlso note that for technical reasons, the submissions won't be given for you sorted using the submission time.\n\nCan you write a program to generate such scoreboard?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing 3 integers separated by a space, C (the number of contestants, the contestants will be numbered from 1 to C, 1  \u2264  C  \u2264  100), P (the number of problems, the problems will be numbered from 1 to P, 1  \u2264  P  \u2264  10) and S (the number of submissions, 1  \u2264  S  \u2264  1000).\n\nFollowed by S lines, each line represents a submission (the submissions are not sorted in the input in any way).\n\nEach submission line contains 4 integers separated by a space, t (the submission time in minutes, 1  \u2264  t  \u2264  1000), c (the contestant ID, 1  \u2264  c  \u2264  C), p (the problem ID, 1  \u2264  p  \u2264  P) and r (r will be 0 which means wrong submission or 1 which means correct submission).\n\nIt's guaranteed that no 2 submissions will be made by the same contestant at the same time.\n\n\n\n\nOutput Format:\n\n\nFor each test case, print C lines, one line for each contestant and the lines should be sorted based on the number of solved problems (who solved more ranks higher) and in case of a tie in number of solved problems, the one with lower total penalty time ranks higher. Each line should contain 3 integers separated by a space, c (the contestant ID), X (the number of solved problems) and Y the total time penalty.\n\nIf 2 contestants or more have the same number of solved problems and the same total time penalty, sort them based on the contestant ID (the lower ID comes first).\n\n\n\n\nSample Input:\n\n2\n2 3 6\n16 2 1 1\n19 2 2 0\n28 2 3 0\n24 2 2 1\n26 2 2 1\n29 2 2 0\n2 2 2\n5 1 1 1\n5 2 2 1\n\n\n\n\nSample Output:\n\n2 2 60\n1 0 0\n1 1 5\n2 1 5\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2017-10-09 20:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ Code Battle Round 1\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n2 3 6\n16 2 1 1\n19 2 2 0\n28 2 3 0\n24 2 2 1\n26 2 2 1\n29 2 2 0\n2 2 2\n5 1 1 1\n5 2 2 1\n\n\n\nSample Output:\n\n2 2 60\n1 0 0\n1 1 5\n2 1 5\n\n\n",
    "Description": "\nProblem Statement:\n\n\nIn A2OJ Code Battle, the scoreboard calculation isn't easy, so we're going to use this problem to teach you the exact rules, and your task is to generate a scoreboard given the submissions list.\n\nFor each submission you will be given the submission time (in minutes since the start of the contest), the contestant ID, the problem ID and the submission result. The scoreboard should contain how many problems were solved by each contestant, and the each contestant's time penalty.\n\nThe number of solved problems is easy to calculate, if a contestants makes 2 or more correct submissions for the same problem, it will be counted only once.\n\nThe time penalty for each contestant is the sum of the time penalty for each solved problem by this contestant. The time penalty for a solved problem is the time when the first correct submission was made + 20 for each wrong submission which happened before the first correct submission.\n\nFor example consider the following submissions made by one contestant:\n\n Correct submission in problem 1 at minute 16.\n Wrong submission in problem 2 at minute 19.\n Wrong submission in problem 3 at minute 28.\n Correct submission in problem 2 at minute 24.\n Correct submission in problem 2 at minute 26.\n Wrong submission in problem 2 at minute 28.In the above example, the contestant solved problem 1 and its time penalty is 16, and problem 2 and its time penalty is 44 (24 + 20, because the first correct submission was after 24 minutes and there was a wrong submission before that). So the total time penalty for this contestant will be 60 (16 + 44).\n\nNote that the submission in problem 3 didn't add any time penalty, because this problem wasn't solved, also the last submission didn't add any time penalty because it was made after a correct submission for that problem, and the time penalty for the first correct submission was used.\n\nAlso note that for technical reasons, the submissions won't be given for you sorted using the submission time.\n\nCan you write a program to generate such scoreboard?\n\n\n",
    "Title": "480. ACB Scoreboard",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=480",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case, print C lines, one line for each contestant and the lines should be sorted based on the number of solved problems (who solved more ranks higher) and in case of a tie in number of solved problems, the one with lower total penalty time ranks higher. Each line should contain 3 integers separated by a space, c (the contestant ID), X (the number of solved problems) and Y the total time penalty.\n\nIf 2 contestants or more have the same number of solved problems and the same total time penalty, sort them based on the contestant ID (the lower ID comes first).\n\n\n"
  },
  "2266": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing 2 integers separated by a space, N (the number of users, the users will be numbered from 0 to N - 1, 2  \u2264  N  \u2264  1000) and M (the number of connections, 0  \u2264  M  \u2264  10000).\n\nFollowed by a line containing N - 1 integers separated by a space, each integer is either 0 or 1. The first number is for user number 1, the second number is for user number 2 and so on. If that number is 1, that means this user is blocked by you or they blocked you.\n\nFollowed by M lines, each line represents a connection. Each connection is described using 2 integers separated by a space, x and y (0  \u2264  x < y < N), which means there's an accepted connection between x and y (the connections are bi-directional, which means if there's a connection between x and y, there's also a connection between y and x).\n\nIt's guaranteed that the same connection won't appear more than once.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n481. WUZZUF Connections\n\n\n\n\n\nProblem Statement:\n\n\nWUZZUF is introducing a new feature called WUZZUF connections, where you will have connections between other WUZZUF users, you simply send a connection request to another user and they either accept or reject it. There's also a feature to block another user, when a user blocks another users, it's as if each of them doesn't exist to the other one.\n\nPart of this feature, is to display the connection degree in each profile of another user you open. The connection degree is simply the minimum number of direct connections you need to go through from yourself to reach that user (can't go through a blocked user).\n\nFor example consider the following (each circle represents a user, the pink lines represent a direct connection between these 2 users and the red circle represents a blocked user):\n\n\n\nThe number of users N in this image is 14, they are numbered from 0 to N - 1. You are always considered the user number 0. So here are some degrees between you and some other users:\n\n The degree between you and user number 2 is 1 (you have direct connection).\n The degree between you and user number 5 is 2 (the shortest way is to go through user 2, not through users 1 and 4).\n The degree between you and user number 7 is 9 (there's another shorter path, but it must go through user 8 but user 8 is blocked).Given the full list of connections, can you calculate the connection degree between you and all other users?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing 2 integers separated by a space, N (the number of users, the users will be numbered from 0 to N - 1, 2  \u2264  N  \u2264  1000) and M (the number of connections, 0  \u2264  M  \u2264  10000).\n\nFollowed by a line containing N - 1 integers separated by a space, each integer is either 0 or 1. The first number is for user number 1, the second number is for user number 2 and so on. If that number is 1, that means this user is blocked by you or they blocked you.\n\nFollowed by M lines, each line represents a connection. Each connection is described using 2 integers separated by a space, x and y (0  \u2264  x < y < N), which means there's an accepted connection between x and y (the connections are bi-directional, which means if there's a connection between x and y, there's also a connection between y and x).\n\nIt's guaranteed that the same connection won't appear more than once.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing N - 1 integers separated by a space, representing the connection degrees between you and all other users, the first number is for user number 1, the second number is for user number 2 and so on. If the user is blocked (by you or they blocked you) or if there's no way to reach that users using a valid path, print -1 for that user.\n\n\n\n\nSample Input:\n\n3\n6 4\n0 0 1 0 0\n0 1\n1 2\n2 4\n1 4\n5 6\n0 0 0 0\n0 1\n0 2\n0 4\n2 3\n1 3\n2 4\n7 7\n0 0 1 0 0 0\n0 1\n0 2\n1 2\n2 3\n3 4\n3 5\n4 6\n\n\n\n\nSample Output:\n\n1 2 -1 2 -1\n1 1 2 1\n1 1 -1 -1 -1 -1\n\n\n\n\nNotes:\n\n\nEverything in this problem is just a story, that doesn't mean or confirm that any features is actually coming to WUZZUF.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2017-10-09 20:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ Code Battle Round 1\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n6 4\n0 0 1 0 0\n0 1\n1 2\n2 4\n1 4\n5 6\n0 0 0 0\n0 1\n0 2\n0 4\n2 3\n1 3\n2 4\n7 7\n0 0 1 0 0 0\n0 1\n0 2\n1 2\n2 3\n3 4\n3 5\n4 6\n\n\n\nSample Output:\n\n1 2 -1 2 -1\n1 1 2 1\n1 1 -1 -1 -1 -1\n\n\n",
    "Description": "\nProblem Statement:\n\n\nWUZZUF is introducing a new feature called WUZZUF connections, where you will have connections between other WUZZUF users, you simply send a connection request to another user and they either accept or reject it. There's also a feature to block another user, when a user blocks another users, it's as if each of them doesn't exist to the other one.\n\nPart of this feature, is to display the connection degree in each profile of another user you open. The connection degree is simply the minimum number of direct connections you need to go through from yourself to reach that user (can't go through a blocked user).\n\nFor example consider the following (each circle represents a user, the pink lines represent a direct connection between these 2 users and the red circle represents a blocked user):\n\n\n\nThe number of users N in this image is 14, they are numbered from 0 to N - 1. You are always considered the user number 0. So here are some degrees between you and some other users:\n\n The degree between you and user number 2 is 1 (you have direct connection).\n The degree between you and user number 5 is 2 (the shortest way is to go through user 2, not through users 1 and 4).\n The degree between you and user number 7 is 9 (there's another shorter path, but it must go through user 8 but user 8 is blocked).Given the full list of connections, can you calculate the connection degree between you and all other users?\n\n\n",
    "Title": "481. WUZZUF Connections",
    "Notes": "\nNotes:\n\n\nEverything in this problem is just a story, that doesn't mean or confirm that any features is actually coming to WUZZUF.\n\n",
    "URL": "https://a2oj.com/p?ID=481",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing N - 1 integers separated by a space, representing the connection degrees between you and all other users, the first number is for user number 1, the second number is for user number 2 and so on. If the user is blocked (by you or they blocked you) or if there's no way to reach that users using a valid path, print -1 for that user.\n\n\n"
  },
  "2267": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer N (the number of words in the name, 1  \u2264  N  \u2264  100).\n\nFollowed by a line containing N words separated by a space, each word will consist of at least 1 and at most 10 lower case English letters.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n482. A2OJ Meaning\n\n\n\n\n\nProblem Statement:\n\n\nYou can safely skip this paragraph. Many contestants are asking what does A2OJ mean, so I decided to make a problem to explain its meaning. The original domain name for A2OJ was ahmed-aly.com (it's still working and redirects to a2oj.com), and the website was called Ahmed Aly Tools, which was a strange name. Then it became an online judge, not just a website for some tools, but again Ahmed Aly Online Judge looks strange and long. So I decided to make it AAOJ as an acronym, but the domain name wasn't available. So I decided to change AA to A2 and it became A2OJ.\n\nIn this problem you are given a long name which consists of one or more words, and your task is to generate an acronym for it. The acronym is simply the concatenation of the first letter of each word in the same order of words. But if there is a continuous group of 2 or more of the same letter next to each other, you remove all of them but keep only one followed by the number of occurrences. For example \"ahmed aly online judge\" becomes \"a2oj\".\n\nThe number of English letters in your output should be minimal (not counting the digits), which means something like \"ab ab ab ab\" must be \"a4\", it can't be \"a2a2\".\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer N (the number of words in the name, 1  \u2264  N  \u2264  100).\n\nFollowed by a line containing N words separated by a space, each word will consist of at least 1 and at most 10 lower case English letters.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing just the acronym of the given name as described above.\n\n\n\n\nSample Input:\n\n2\n4\nahmed aly online judge\n6\na a a a b a\n\n\n\n\nSample Output:\n\na2oj\na4ba\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2017-10-15 18:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ Code Battle Round 2\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n4\nahmed aly online judge\n6\na a a a b a\n\n\n\nSample Output:\n\na2oj\na4ba\n\n\n",
    "Description": "\nProblem Statement:\n\n\nYou can safely skip this paragraph. Many contestants are asking what does A2OJ mean, so I decided to make a problem to explain its meaning. The original domain name for A2OJ was ahmed-aly.com (it's still working and redirects to a2oj.com), and the website was called Ahmed Aly Tools, which was a strange name. Then it became an online judge, not just a website for some tools, but again Ahmed Aly Online Judge looks strange and long. So I decided to make it AAOJ as an acronym, but the domain name wasn't available. So I decided to change AA to A2 and it became A2OJ.\n\nIn this problem you are given a long name which consists of one or more words, and your task is to generate an acronym for it. The acronym is simply the concatenation of the first letter of each word in the same order of words. But if there is a continuous group of 2 or more of the same letter next to each other, you remove all of them but keep only one followed by the number of occurrences. For example \"ahmed aly online judge\" becomes \"a2oj\".\n\nThe number of English letters in your output should be minimal (not counting the digits), which means something like \"ab ab ab ab\" must be \"a4\", it can't be \"a2a2\".\n\n\n",
    "Title": "482. A2OJ Meaning",
    "Notes": "",
    "URL": "https://a2oj.com/p?ID=482",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing just the acronym of the given name as described above.\n\n\n"
  },
  "2268": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer N (the number of buildings, 1  \u2264  N  \u2264  10,000).\n\nFollowed by N lines, each line contains the height of a building, each height will be a positive integer and it won't be more than 1,000,000,000 (the same height can be repeated, and the heights are not sorted in any way).\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n483. Buildings Arrangement\n\n\n\n\n\nProblem Statement:\n\n\nWe are going to build a huge city of N buildings, all N buildings will be built in one street next to each other.\n\nYou are given the heights of these buildings, and your task is to arrange them in a row. For example let's say this will be the height of the buildings when you arrange them in this order from left to right \"1 3 2 5 4\", if you look at the buildings from left to right, you won't see the building of height 2 (it's hidden behind the building of height 3), and you won't see the building of height 4 (it's hidden behind the building of height 5). But if you look from right to left, you will see the building of height 4, but still won't see the building of height 3. But if we consider the following arrangement \"1 2 3 5 4\", each building will be visible either from right or from left. Building X will be hidden behind building Y, if the height of X is less than or equal to the height of Y.\n\nGiven the heights of all buildings, your task is to arrange them in a way that minimizes the number of buildings which are not visible when you look from both sides.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer N (the number of buildings, 1  \u2264  N  \u2264  10,000).\n\nFollowed by N lines, each line contains the height of a building, each height will be a positive integer and it won't be more than 1,000,000,000 (the same height can be repeated, and the heights are not sorted in any way).\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing a single integer which is the minimum number of buildings which will be hidden in the best arrangement.\n\n\n\n\nSample Input:\n\n2\n5\n1\n3\n2\n5\n4\n3\n3\n3\n3\n\n\n\n\nSample Output:\n\n0\n1\n\n\n\n\nNotes:\n\n\nIn the second test case, all buildings are of the same height, so the one in the middle will always invisible from both sides.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2017-10-15 18:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n2 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ Code Battle Round 2\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n5\n1\n3\n2\n5\n4\n3\n3\n3\n3\n\n\n\nSample Output:\n\n0\n1\n\n\n",
    "Description": "\nProblem Statement:\n\n\nWe are going to build a huge city of N buildings, all N buildings will be built in one street next to each other.\n\nYou are given the heights of these buildings, and your task is to arrange them in a row. For example let's say this will be the height of the buildings when you arrange them in this order from left to right \"1 3 2 5 4\", if you look at the buildings from left to right, you won't see the building of height 2 (it's hidden behind the building of height 3), and you won't see the building of height 4 (it's hidden behind the building of height 5). But if you look from right to left, you will see the building of height 4, but still won't see the building of height 3. But if we consider the following arrangement \"1 2 3 5 4\", each building will be visible either from right or from left. Building X will be hidden behind building Y, if the height of X is less than or equal to the height of Y.\n\nGiven the heights of all buildings, your task is to arrange them in a way that minimizes the number of buildings which are not visible when you look from both sides.\n\n\n",
    "Title": "483. Buildings Arrangement",
    "Notes": "\nNotes:\n\n\nIn the second test case, all buildings are of the same height, so the one in the middle will always invisible from both sides.\n\n",
    "URL": "https://a2oj.com/p?ID=483",
    "Time Limit": "2 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing a single integer which is the minimum number of buildings which will be hidden in the best arrangement.\n\n\n"
  },
  "2269": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer X (as described above, 1  \u2264  X  \u2264  5,000).\n\nFollowed by a line containing a non-empty sting of at most 5,000 lower case English letters H, which is the output of the last step.\n\nFollowed by a line containing a non-empty sting of at most 5,000 lower case English letters S, which is the original password.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n484. Hidden Password\n\n\n\n\n\nProblem Statement:\n\n\nYou and your friend are playing a game, the game is about hiding a password. Let's say you have a password S, you will do the following steps in the following order to hide it:\n\n Insert a random string of length X inside the string S after L letters from the beginning (0  \u2264  L  \u2264  {length of S}), in this problem you are given the value of X, not the string itself, and it can be inserted anywhere even at the beginning or ending of the password. If S is \"abc\", and X is 2, all the following are possible outcomes after this step: \"axxbc\", \"xyabc\" and \"abcyx\". But the following isn't valid (because all X letters must be next to each other):\"axbxc\".\n Add A (0 or more) random letters at the beginning of the output of the previous step.\n Add B (0 or more) random letters at the ending of the output of the previous step.\nYou are given the value of X, a string H (which is the output of the last step above) and the password S. Your task is to find the number of ways to get the string H after doing valid steps as described above, a unique way to do that can be defined using 3 integers (L, A, B), the actual value of the letters to be inserted doesn't matter. Two ways are considered different if L is different, A is different or B is different.\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer X (as described above, 1  \u2264  X  \u2264  5,000).\n\nFollowed by a line containing a non-empty sting of at most 5,000 lower case English letters H, which is the output of the last step.\n\nFollowed by a line containing a non-empty sting of at most 5,000 lower case English letters S, which is the original password.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing the number of different ways to get H using S and X after following valid steps as described above.\n\n\n\n\nSample Input:\n\n3\n2\naxbxc\nabc\n2\naxxbc\nabc\n1\nabbx\nab\n\n\n\n\nSample Output:\n\n0\n1\n2\n\n\n\n\nNotes:\n\n\nIn the first test case, there's no way to get the string H.\n\nIn the second test case, there's only one way, which is to insert the string of length X after 1 letter (L = 1), and append 0 letters at the beginning and 0 letters at the ending (A = 0 and B = 0).\n\nIn the third test case, we have 2 ways, which is to insert the string of length X after 1 or 2 letters (L = 1 or 2), and in both cases append 0 letters at the beginning and 1 letter at the ending (A = 0 and B = 1).\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2017-10-15 18:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ Code Battle Round 2\n\n\n\n",
    "Example": "\nSample Input:\n\n3\n2\naxbxc\nabc\n2\naxxbc\nabc\n1\nabbx\nab\n\n\n\nSample Output:\n\n0\n1\n2\n\n\n",
    "Description": "\nProblem Statement:\n\n\nYou and your friend are playing a game, the game is about hiding a password. Let's say you have a password S, you will do the following steps in the following order to hide it:\n\n Insert a random string of length X inside the string S after L letters from the beginning (0  \u2264  L  \u2264  {length of S}), in this problem you are given the value of X, not the string itself, and it can be inserted anywhere even at the beginning or ending of the password. If S is \"abc\", and X is 2, all the following are possible outcomes after this step: \"axxbc\", \"xyabc\" and \"abcyx\". But the following isn't valid (because all X letters must be next to each other):\"axbxc\".\n Add A (0 or more) random letters at the beginning of the output of the previous step.\n Add B (0 or more) random letters at the ending of the output of the previous step.\nYou are given the value of X, a string H (which is the output of the last step above) and the password S. Your task is to find the number of ways to get the string H after doing valid steps as described above, a unique way to do that can be defined using 3 integers (L, A, B), the actual value of the letters to be inserted doesn't matter. Two ways are considered different if L is different, A is different or B is different.\n\n\n",
    "Title": "484. Hidden Password",
    "Notes": "\nNotes:\n\n\nIn the first test case, there's no way to get the string H.\n\nIn the second test case, there's only one way, which is to insert the string of length X after 1 letter (L = 1), and append 0 letters at the beginning and 0 letters at the ending (A = 0 and B = 0).\n\nIn the third test case, we have 2 ways, which is to insert the string of length X after 1 or 2 letters (L = 1 or 2), and in both cases append 0 letters at the beginning and 1 letter at the ending (A = 0 and B = 1).\n\n",
    "URL": "https://a2oj.com/p?ID=484",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing the number of different ways to get H using S and X after following valid steps as described above.\n\n\n"
  },
  "2270": {
    "Input Description": "\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer N (the number of users, 2  \u2264  N  \u2264  10,000).\n\nFollowed by N lines, each line contains a name of a user which will be a non-empty string of at most 5 lower case English letters.\n\n\n",
    "Problem": "\n\n\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n485. WUZZUF Connections 2\n\n\n\n\n\nProblem Statement:\n\n\nIn the last round we had a problem about WUZZUF connections, where you will have connections with other WUZZUF users. But in this problem the connections will be generated automatically (and no one can block anyone).\n\nIn this problem you are given only the name of each user, and you should add a connection between two users only if their names are similar. Two names are considered similar if they are of the same length, and they differ in at most one position.\n\nFor example these pairs are considered similar:\n\n ('abc', 'abc'), two users can have the same name, and equal names are considered similar.\n ('xbc', 'abc'), they differ only in the first position.\n ('abc', 'ayb'), they differ only in the second position.\nAnd these pairs are not considered similar:\n\n ('abc', 'ab'), they have different lengths.\n ('xbc', 'aby'), they differ in more than one position.\nPart of this feature, is to display the connection degree in each profile of another user you open. The connection degree is simply the minimum number of direct connections you need to go through from yourself to reach that user.\n\nFor example consider the following names: 'abc', 'abx' and 'aby'. Here each of the three names is similar to the other two, the connection degree between 'abc' and 'aby' is 1, there's another path that goes through 'abx' which is valid but not the shortest.\n\nGiven the names of N users (you are always considered the first one), can you calculate the connection degree between you and all other users?\n\n\n\n\nInput Format:\n\n\nYour program will be tested on one or more test cases. The first line of the input will be a single integer T (1  \u2264  T  \u2264  100) representing the number of test cases. Followed by T test cases.\n\nEach test case starts with a line containing an integer N (the number of users, 2  \u2264  N  \u2264  10,000).\n\nFollowed by N lines, each line contains a name of a user which will be a non-empty string of at most 5 lower case English letters.\n\n\n\n\nOutput Format:\n\n\nFor each test case print a single line containing N - 1 integers separated by a space, representing the connection degrees between you and all other users, the first number is for the second user, the second number is for the third user and so on. If there's no way to reach that user using a valid path, print -1 for that user.\n\n\n\n\nSample Input:\n\n2\n3\nabc\nabx\naby\n6\nabc\nyxx\nabc\nabx\naxx\nccc\n\n\n\n\nSample Output:\n\n1 1\n3 1 1 2 -1\n\n\n\n\nNotes:\n\n\nEverything in this problem is just a story, it doesn't mean or confirm that any feature is actually coming to WUZZUF.\n\n\n\n\n\n\nSubmit\nBest Submissions\nAll Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded by:\n\n\nahmed_aly\n\n\n\n\nAdded at:\n\n\n2017-10-15 18:00:00 UTC\n\n\n\n\nTime Limit:\n\n\n3 seconds\n\n\n\n\n\nPartial score:\n\n\nNo\n\n\nSource:A2OJ Code Battle Round 2\n\n\n\n",
    "Example": "\nSample Input:\n\n2\n3\nabc\nabx\naby\n6\nabc\nyxx\nabc\nabx\naxx\nccc\n\n\n\nSample Output:\n\n1 1\n3 1 1 2 -1\n\n\n",
    "Description": "\nProblem Statement:\n\n\nIn the last round we had a problem about WUZZUF connections, where you will have connections with other WUZZUF users. But in this problem the connections will be generated automatically (and no one can block anyone).\n\nIn this problem you are given only the name of each user, and you should add a connection between two users only if their names are similar. Two names are considered similar if they are of the same length, and they differ in at most one position.\n\nFor example these pairs are considered similar:\n\n ('abc', 'abc'), two users can have the same name, and equal names are considered similar.\n ('xbc', 'abc'), they differ only in the first position.\n ('abc', 'ayb'), they differ only in the second position.\nAnd these pairs are not considered similar:\n\n ('abc', 'ab'), they have different lengths.\n ('xbc', 'aby'), they differ in more than one position.\nPart of this feature, is to display the connection degree in each profile of another user you open. The connection degree is simply the minimum number of direct connections you need to go through from yourself to reach that user.\n\nFor example consider the following names: 'abc', 'abx' and 'aby'. Here each of the three names is similar to the other two, the connection degree between 'abc' and 'aby' is 1, there's another path that goes through 'abx' which is valid but not the shortest.\n\nGiven the names of N users (you are always considered the first one), can you calculate the connection degree between you and all other users?\n\n\n",
    "Title": "485. WUZZUF Connections 2",
    "Notes": "\nNotes:\n\n\nEverything in this problem is just a story, it doesn't mean or confirm that any feature is actually coming to WUZZUF.\n\n",
    "URL": "https://a2oj.com/p?ID=485",
    "Time Limit": "3 seconds",
    "Output Description": "\nOutput Format:\n\n\nFor each test case print a single line containing N - 1 integers separated by a space, representing the connection degrees between you and all other users, the first number is for the second user, the second number is for the third user and so on. If there's no way to reach that user using a valid path, print -1 for that user.\n\n\n"
  }
}
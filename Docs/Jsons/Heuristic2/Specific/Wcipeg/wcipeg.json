{
  "Time Limit": "2.00s",
  "Description": "a\nb\n",
  "Title": "A plus B",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Description": "a\nb\n",
  "Title": "A plus B",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Description": "a\nb\n",
  "Title": "A plus B",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \nTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\n  UIFARVJDLACSPXOAGPYAKVNQTAPWFSAUIFAMB ZAEPH\n  XFABSFAWFSZACBEAQFPQMFAEPJOHAWFSZACBEAUIJOHTAIBAIB\nSample Output\nWE ARE VERY BAD PEOPLE DOING VERY BAD THINGS HA HA\nExplanation for Sample Output 1\nNotice that every plaintext character is in the first message, and so, the entire mapping can be computed.\nSample Input 2\nTHERE ARE NOT ENOUGH LETTERS\n  XQAZASEZASNYXSANYLWQSTAXXAZM\n  JSCENNYXSIACYIASXQJM\nSample Output 2\n. .ANNOT .E.O.E TH.S\nExplanation for Sample Output 2\nNotice that the characters that cannot be determined are the (ciphertext) letters J, C, I, since these ciphertext letters do not appear in the earlier ciphertext message. It turns out that the plaintext message for the last ciphertext was I CANNOT DECODE THIS. All other letters should correspond between plaintext and ciphertext.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Ruby is a code-breaker. She knows that the very bad people (Mr. X and Mr. Z) are sending secret messages about very bad things to each other.\nHowever, Ruby has managed to intercept a plaintext message and the corresponding ciphertext message. By plaintext, we mean the message before it was encrypted (i.e., readable English sentences), and by ciphertext, we mean the message after it was encrypted (i.e., gibberish). To encrypt a message, each letter is changed to a new letter, so that if you read the ciphertext message, it is not obvious what the plaintext message is.\nHowever, Ruby being the outstanding code-breaker she is, knows the algorithm that Mr. X and Mr. Z use. She knows they simply map one letter to another (possibly different) letter when they encrypt their messages. Of course, this map must be \u201cone-to-one\u201d, meaning that each plaintext letter must correspond to exactly one ciphertext letter, as well as \u201conto\u201d, meaning that each ciphertext letter has exactly one corresponding plaintext letter.\nYour job is to automate Ruby\u2019s codebreaking and help save the world.",
  "Output": "The output is a (plaintext) string which corresponds to the second ciphertext input. It may not be possible to determine each character of the second ciphertext string, however. If this is the case, the output should have a period (\u2018.\u2019) character for those letters which cannot be determined.",
  "Title": "CCC06S2 - Cipher Texts",
  "Input": "The input consists of 3 strings, with each string on a separate line. The first string is the plaintext message which Ruby knows about. The second string is the ciphertext message which corresponds to the plaintext message. The third string is another ciphertext message. You may assume that all strings have length of at least 1 character and at most 80 characters. You can also assume that there are only 27 valid characters: the uppercase letters (\u2018A\u2019 through \u2018Z\u2019) as well as the space character (\u2018 \u2019). That is, there will be no punctuation, lowercase letters, or special characters (like \u2018!\u2019 or \u2018@\u2019) in either the plaintext or ciphertext messages."
}{
  "Time Limit": "2.00s",
  "Memory Limit": "16M",
  "INPUT": "",
  "OUTPUT": "",
  "Description": " An (XY, D)\u2014CIRCULAR NUMBER is a number whose last two digits are X and Y, \n  and multiplication of the number by the single digit D is equivalent to moving \n  the last two digits (XY) to the beginning of the number. For example, the number \n  132832080200501253 is a (53, 4)\u2014CIRCULAR NUMBER because 132832080200501253 \n  * 4 = 531328320802005012. Write a program that asks for two-digit number XY \n  and a single digit D, and prints the SMALLEST (XY, D)\u2014CIRCULAR NUMBER or prints \n  a message NONE if none exists. It is guaranteed that your number will not exceed \n  255 digits.",
  "Title": "Circular Numbers",
  "SAMPLE DATA": "Input file\n1\n53 4\nOutput file\n132832080200501253"
}{
  "Example": "Sample Input \nSaravannan\nSample Output\nAdvance to next round\nSample Input\nJoyce\nSample Output\nDoes not advance to next round",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Yesterday, Woburn held a singing competition to select the next Woburn Idol. The judges, however, were unfair and judged people simply based on their names. If the number of As in a contestants name was equal to or greater than the other number of other vowels in their name, then they would advance to the next round. Given the name of a contestant, find out if they advance to the next round.\nNote: The judges do not consider the letter y a vowel.",
  "Output": "Output \"Advance to next round\" if the contestant will advance or \"Does not advance to next round\" if they do not. ",
  "Title": "Woburn Idol",
  "Input": "A name (less than 256 characters in length)"
}{
  "Example": "Sample Input \n17 28\n........._.............__...\n........|+\\.........../++|..\n........|__\\______.../+++|..\n......./==========\\_/++++|..\n....._/=============\\++++|..\n..._/================\\_++|..\n../===/#\\==============\\_|..\n..|==\\##/====/##\\========\\..\n.|===========\\##/=========\\.\n.|=================++++====|\n|====####=========++++++===|\n|===|####=========++++++===|\n|===\\###___/======++++++===|\n|==================++++====|\n.|========================|.\n..\\=======================|.\n...\\=====================/..\nVERY_ART\nWOW\n\nSample Output\n........._.............__...\n........|+VERY.ART..../++|..\n........|__\\______.../+++|..\n......./==========\\_/++++|..\n....._/=============\\++++|..\n..._/================\\_++|..\n../===/#\\==============\\_|..\n..|==\\##/====/##\\========\\..\n.|===========\\##/=========\\.\n.|=================++++====|\n|====####=========++++++===|\n|===|####=========++++++===|\n|===\\###___/======++++++===|\n|==================++++====|\n.|========================|.\n..\\=========WOW===========|.\n...\\=====================/..\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, R and C.\nR lines follow, the i-th of which consists of C characters representing the i-th row of the image grid, for i = 1..R.\nThe next line consists of a single string, T.\nThe next line consists of a single string, B.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "As part of your internship at a popular meme generation site, you've been tasked with implementing a new ASCII art feature!\nYou're given a grid of non-whitespace characters with R rows and C columns (5 \u2264 R, C \u2264 100), representing a meme image. The user will then be able to specify two pieces of custom text to overlay onto the image, near its top and bottom edges, in order to enhance its comedic effect.\nThe user will first specify a non-empty string T with length no greater than C \u2212 2. Each of its characters will be either an uppercase letter or an underscore, and it will neither start nor end with an underscore. This string should be laid on top of the image in the second row from the top, and horizontally centered. If it can't be perfectly centered (for example, if its length is odd while C is even), then it should instead be placed slightly to the left, as close to centered as possible. Underscores should be omitted, allowing the original image's characters to show through at those locations instead.\nFinally, the user will specify a non-empty string B with the same constraints as T. It should similarly be laid on top of the image in the second row from the bottom, and horizontally centered.\nYour task is to generate the resulting R\u00d7C image after both strings T and B have been laid on top of it, and give it back to the user, so that they can go post it on various social media platforms and obtain millions of well-deserved upvotes for their original, creative comedic content.",
  "Output Format": "\nOutput R lines with C characters per line, the i-th of which should be the i-th row of the updated image grid.\n",
  "Sample Explanation": "Much ASCII.",
  "Title": "WC17 #3 - Meme Generator"
}{
  "Title": "WC17 Finals - Explosive Ordinance Disposal",
  "Example": "Sample Input \n7\n4 1 1\n4 5 0\n7 6 1\n3 6 1\n1 7 0\n2 4 1\n\nSample Output\n16\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN \u2212 1 lines follow, the i-th of which consists of three space-separated integers, Ai, Bi, and Ci, for i = 1..(N \u2212 1).\n",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "The Party of Extraterrestrial Gangsters has begun its invasion of Earth! Vast armies of PEG soldiers have been deployed down to the surface throughout Scarberia, and the cows and monkeys have engaged them in battle.\nAmidst the fighting, however, the aliens have also transported something else to the planet's surface \u2014 a bomb with devastating nuclear power! All life in Scarberia, and perhaps the rest of Earth, would surely cease if the bomb were to detonate. Fortunately, the PEG leaders are honourable enough to give their enemies a fighting chance. As such, they've set the bomb to go off after a period of three hours, and implanted a system for defusing it. They've even included an instruction manual along with it!\nOn the surface of the bomb, there are N (1 \u2264 N \u2264 200) electrical terminals. There are also N \u2212 1 wires running amongst the terminals, the i-th of which runs between terminals Ai and Bi (1 \u2264 Ai, Bi \u2264 N), and is either black (if Ci = 0), or is otherwise white (if Ci = 1). The wires have been arranged such that all pairs of terminals are reachable from one another by following a sequence of wires.\nBo Vine and the Head-Monkey have gotten their hands on the bomb and its accompanying instruction manual. According to the manual, the bomb will turn itself off if the following conditions are all met:\nEach terminal i receives an electrical current with some voltage Vi, such that Vi is a positive integer.\nFor each black wire i (such that Ci = 0), the greatest common divisor (GCD) of VAi and VBi is equal to 1.\nFor each white wire i (such that Ci = 1), the GCD of VAi and VBi is greater than 1.\nBo Vine has ordered his cow engineers to prepare the necessary electrical equipment as quickly as possible. Meanwhile, the Head-Monkey has personally taken it upon herself to come up with a set of voltages V1..N which will successfully satisfy the conditions to defuse the bomb. However, having realized that PEG is essentially mocking them by dispatching a bomb which may be defused so easily, she's decided to get back at them by demonstrating the monkeys' superior intelligence and successfully defusing the bomb using as little voltage as possible. Help the Head-Monkey determine the minimum possible total voltage (sum of V1..N values) required to get the job done. Just make sure to figure it out within three hours!",
  "Subtasks": "\nIn test cases worth 3/17 of the points, C1 = C2 = \u2026 = CN \u2212 1.\n",
  "Sample Explanation": "It's optimal to send\na 1-volt current to terminal 5;\n2-volt currents to terminals 1, 2, and 4; and\n3-volt currents to terminals 3, 6, and 7.",
  "Output Format": "\nOutput a single integer, the minimum possible total voltage required to defuse the bomb.\n"
}{
  "Example": "Sample Input \n2 64 4 32\n8 16 8 4\n4 32 4 0\n2 2 0 0\n0 0 0 2\n0 0 0 2\n0 0 0 0\n0 0 0 2\n2 4 8 2\n0 2 0 8\n0 0 0 0\n0 0 0 0\n4 32 8 0\n2 64 4 2\n8 4 2 0\n2 0 0 0\n256 256 0 0\n256 256 0 0\n256 256 0 0\n256 256 0 0\n\nSample Output\n128\n4\n16\n128\n2048\n",
  "Explanation": "For the first case in the sample input (depicted by the second diagram above), the largest obtainable tile assuming no new tiles pop in is the 128-tile. One way to do is through the sequence of moves: right (shift the bottom-leftmost 4-tile under the other 4-tile), up (merge the 4-tiles), left (merge the 8-tiles), left (merge the 16-tiles), up (merge the 32-tiles), up (merge the 64-tiles).",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "2048 is a popular single-player online game where the player is given a 4\u00d74 grid where they must slide number tiles around to combine them into the 2048 tile. When an arrow key (up, down, left, or right) is pressed, all the tiles on the grid slide in the specified direction. Tiles stop sliding when they hit the edge of the board or a different numbered tile. When two tiles of the same value collide with each other, they fuse into one tile whose value is the sum of the values of the two initial tiles. The following is an example of making a move (pressing the UP arrow key) in an in-progress game of 2048.\nNote that there are three 4-tiles in the leftmost column. By pressing UP, all of the tiles try to slide upward. The two topmost 4-tiles in the leftmost column gets fused into an 8-tile. The bottommost 4-tile slides up, but cannot get fused anymore. The 2-tile in the bottom-right corner also slides upward and gets fused with the 2-tile above it. It just so happens that a new 2-tile pops into the grid at the bottom-left corner after making this move.\nIn the real 2048 game, a new tile always pops into somewhere on the grid for every move you make. For the purposes of this problem, no new tiles will appear. Your task is, given the setup of an in-progress game of 2048, determine the value of the largest possible tile you can create by any series of up, down, left, or right slides if no new tiles are introduced to the grid.",
  "Output": "For each test case, output one integer \u2014 the largest tile you can produce by any (possible length-zero) sequence of moves from the given game setup, if no new tiles were to be introduced to the grid.",
  "Title": "2048",
  "Input": "The input will consist of 5 test cases. Each test case will consist 4 lines, each with 4 columns \u2014 a 4\u00d74 grid of values. Numbers in the input will be from the set {0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048}. A value of 0 indicates that the position in the grid is unoccupied. The input positions will be such that 2048 is the largest possible value you can attain."
}{
  "Example": "Input:\nFr\nqp\nHH\ndb\n  \npq\n\nOutput:\nReady\nOrdinary pair\nMirrored pair\nOrdinary pair\nMirrored pair\n\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The letters b and d are mirror images of each other, as are p and q. No other pairs of letters are\nmirrors, except for letters like H that are mirrors of themselves, and what\u2019s the interest in a pair\nthat\u2019s just two of the same letter? We refuse to count self-mirrors as mirrored pairs.\n\n\n",
  "Output": "The first line of output should contain only Ready. For each pair of characters (prior to a pair\nof spaces), print the line Mirrored pair if the characters are mirrors, otherwise print the line\nOrdinary pair.\n\n\n",
  "Title": "Mirrored Pairs",
  "Input": "Input is a list of lines with two characters on each line. Your program should end immediately\nwhen it encounters a line with two spaces.\n\n\n"
}{
  "Example": "Input:\n1\n1\n\nOutput:\n192\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Pattern Matchers have been designed for various sorts of patterns.  Mr. HKP likes to observe patterns in numbers.  After completing his extensive research on the squares of numbers, he has moved on to cubes.  Now he wants to know all numbers whose cube ends in 888.\nGiven a number k, help Mr. HKP find the 1st number larger than k whose cube ends in 888.",
  "Output": "For each test case, output a single integer which denotes the 1st number larger than k whose cube ends in 888.  The result will be less than 263.",
  "Title": "Triple Fat Ladies",
  "Input": "The first line of the input contains an integer t, the number of test cases.  t test cases follow.\nEach test case consists of a single line containing a single integer k (1\u00a0\u2264\u00a0k\u00a0\u2264\u00a020000)."
}{
  "Example": "Input:\n1\n1\n\nOutput:\n192\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Pattern Matchers have been designed for various sorts of patterns.  Mr. HKP likes to observe patterns in numbers.  After completing his extensive research on the squares of numbers, he has moved on to cubes.  Now he wants to know all numbers whose cube ends in 888.\nGiven a number k, help Mr. HKP find the 1st number larger than k whose cube ends in 888.",
  "Output": "For each test case, output a single integer which denotes the 1st number larger than k whose cube ends in 888.  The result will be less than 263.",
  "Title": "Triple Fat Ladies",
  "Input": "The first line of the input contains an integer t, the number of test cases.  t test cases follow.\nEach test case consists of a single line containing a single integer k (1\u00a0\u2264\u00a0k\u00a0\u2264\u00a020000)."
}{
  "Example": "Input:\n1\n1\n\nOutput:\n192\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Pattern Matchers have been designed for various sorts of patterns.  Mr. HKP likes to observe patterns in numbers.  After completing his extensive research on the squares of numbers, he has moved on to cubes.  Now he wants to know all numbers whose cube ends in 888.\nGiven a number k, help Mr. HKP find the 1st number larger than k whose cube ends in 888.",
  "Output": "For each test case, output a single integer which denotes the 1st number larger than k whose cube ends in 888.  The result will be less than 263.",
  "Title": "Triple Fat Ladies",
  "Input": "The first line of the input contains an integer t, the number of test cases.  t test cases follow.\nEach test case consists of a single line containing a single integer k (1\u00a0\u2264\u00a0k\u00a0\u2264\u00a020000)."
}{
  "Example": "Sample Input \n4\n4\n3\n2\n1\n\nSample Output\n1\n2\n3\n4\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given a list of n numbers, sort them and output them one per line from smallest to largest",
  "Output": "Output the numbers in sorted order from smallest to largest, one per line.",
  "Title": "Sorting",
  "Input": "The first line of the input contains a positive integer n no greater than 100, the number of numbers to follow.\nEach line after will have a single positive integer less than 32000"
}{
  "Example": "Sample Input \n2\n4\n2\n5\n3\n5\n1\n1\nSample Output\n5\n1",
  "Memory Limit": "64M",
  "Time Limit": "5.00s",
  "Description": "Many computer scientists have nightmares about the daunting task of finding the max flow. Can you handle it?\nThere are T (1 \u2264 T \u2264 10) scenarios. In each scenario, there are N (1 \u2264 N \u2264 10) flows, and the value of the i-th flow is Fi (1 \u2264 Fi \u2264 100) - your job is to find the largest of the flow values.",
  "Output": "For each scenario:\nLine 1: The largest flow value.",
  "Title": "Max Flow",
  "Explanation of Sample": "In the first scenario, the 4 flows have values of 2, 5, 3, and 5, respectively. The largest of these values is 5.\nIn the second scenario, the only flow has a value of 1, so the max flow is 1.",
  "Input": "Line 1: 1 integer, T\nFor each scenario:\nLine 1: 1 integer, N\nNext N lines: 1 integer, Fi, for i = 1..N"
}{
  "Example": "Sample Input \n5\nScissors\nFox\nRock\nFoxen\nPaper\nSample Output\nRock\nFoxen\nPaper",
  "Memory Limit": "64M",
  "Time Limit": "10.00s",
  "Description": "We're all familiar with the classic 2-player game of skill, Rock Paper Scissors. In each round, both players first choose one of the three objects. If both players choose the same one, it's a tie. Otherwise, if one player chooses Rock and the other chooses Scissors, the first player wins - similarly, Scissors beats Paper, and Paper beats Rock.\nThis game is pretty boring, though, so you're playing a variation with your friend - Rock Paper Scissors Fox. In addition to the above objects, a player may choose Fox - and, if the other player chooses one of the three basic objects, the first player wins. However, because this is so powerful, it should only be used when necessary. The only thing that can beat a Fox is, naturally, several of them - namely, Foxen. Nothing beats Foxen.\nYou're planning to play N (1 \u2264 N \u2264 106) rounds of this game, and you conveniently know what object your opponent will choose in each one. You'd like to use this knowledge to beat him every time. If he chooses one of the three basic objects, you should pick the basic one that beats it. If he chooses Fox, you should choose Foxen. And if he chooses Foxen, you should of course walk away before that round occurs, and not play any rounds from then onwards.",
  "Output": "X lines (where X is the number of rounds you play): Your choice in the ith round (in the same format as the input), for i = 1..N.",
  "Title": "Rock Paper Scissors Fox",
  "Explanation of Sample": "In the first round, your opponent chooses Scissors, so you should choose Rock to beat it. In the second, you beat his Fox with Foxen, and in the third, you choose Paper to beat Rock. You don't play any more rounds, because your opponent will choose Foxen in the fourth round, which can't be overcome.",
  "Input": "Line 1: 1 integer, N\nNext N lines: Your opponent's choice in the i-th round (one of the strings \"Rock\", \"Paper\", \"Scissors\", \"Fox\", or \"Foxen\", without quotes), for i = 1..N"
}{
  "Example": "Sample Input \n2\n2 3 4\nDDD\nTES\nR\nD\nR\nL\n3 2 6\nTE\nTE\nET\nR\nR\nL\nR\nL\nR\nSample Output\n1\n2",
  "Memory Limit": "64M",
  "Time Limit": "5.00s",
  "Description": "Everyone knows that Foxen love digging holes. You've been observing one Fox in particular, who's preparing to burrow underground in search of treasures. When viewed from the side, as a cross-section, his digging site can be represented as a grid of cells, H (1 \u2264 H \u2264 100) deep and W (1 \u2264 W \u2264 100) across. Every cell contains either dirt (represented by \"D\"), stone (\"S\"), empty space (\"E\"), or a treasure (\"T\"). The surface can also be traversed, effectively giving the grid an additional row of empty cells above the topmost row.\nThe Fox starts immediately above the top-left cell, which is guaranteed to not be empty. It has a set of N (1 \u2264 N \u2264 1000) actions in mind before it starts its dig, which it will execute in order. Each action consists of moving either left (represented by \"L\"), right (\"R\"), or down (\"D\") by one cell. If the cell that the Fox would move to contains stone, or is beyond the boundaries of the grid in any direction, it will skip that action. If it enters a cell with a previously-uncollected treasure, it will collect it, leaving the cell empty. If the cell immediately below the Fox is ever empty, it will fall down until this is no longer the case. Note that collecting treasure occurs before falling, and that the Fox stops falling if it hits the bottom of the grid.\nThere are T (1 \u2264 T \u2264 20) scenarios as described above. For each one, you'd like to determine how many treasures the Fox will collect throughout the course of its dig.",
  "Output": "For each scenario:\nLine 1: 1 integer, the number of treasures collected in total.",
  "Title": "Foxhole",
  "Explanation of Sample": "In the first scenario, the Fox moves right along the surface, then digs down to the first row. As the cell below it is empty, it immediately falls to the 2nd row. It ignores its next action, as the cell to its right is filled with stone, and finally moves left to claim a treasure.\nIn the second scenario, it moves to the right and promptly falls all the way down to the 2nd row. Because the Fox is already in the rightmost column, it ignores the action to move right. It then moves left, collects the treasure there, and then falls to the bottom row. Finally, it moves back and forth between the bottom-left and bottom-right cells twice - however, it only collects the treasure in the latter cell the first time.",
  "Input": "Line 1: 1 integer, T\nFor each scenario:\nLine 1: 3 integers, H, W, and N\nNext H lines: W characters, representing the ith row of the grid, for i = 1..H\nNext N lines: 1 character, representing the ith action, for i = 1..N"
}{
  "Example": "Sample Input \n2\n1 5\nFGTGH\n4 5\nGGGGG\nGFGTG\nGTTGH\nGGGGG\nSample Output\n0\n2",
  "Memory Limit": "64M",
  "Time Limit": "15.00s",
  "Description": "A family of Foxen, having caught a pesky farmer on their property, want to teach him a lesson. Of course, they're not cruel - they plan to simply prevent him from returning home to his farm, until he's willing to beg them for mercy.\nThe Foxen and the farmer live in a forest, which may be viewed as a grid of cells, with H (1 \u2264 H \u2264 6) rows of W (1 \u2264 W \u2264 6) cells each. Each cell contains either grass (represented by \"G\"), trees (\"T\"), the farmer (\"F\"), or his farm (\"H\"). The farmer may repeatedly move up, down, left, or right to adjacent cells within the grid, provided that they are not blocked by trees. Due to his overconfidence in exploring the forest, the farmer is not directly adjacent to his farm.\nThe family of Foxen can also block the farmer's way, by standing in grass-filled cells. He would not, of course, dare to enter a cell with a Fox in it. However, the Foxen do have better things to do, so they'd like to determine the minimum number of cells they must occupy in order to prevent the farmer from ever reaching his farm.\nThere are T (1 \u2264 T \u2264 20) scenarios as described above. For each one, you'd like to answer the Foxen's question. Note that no Foxen might be necessary, if the trees already bar the farmer's way sufficiently.",
  "Output": "For each scenario:\nLine 1: 1 integer, the minimum number of Foxen necessary to block the farmer.",
  "Title": "Reverse Fox Hunt",
  "Explanation of Sample": "In the first scenario, the farmer can already never reach his farm, so no Foxen are necessary.\nIn the second scenario, one possible placement of two Foxen (each represented by an \"X\") is as follows:\nGGGGX\nGFGTG\nGTTGH\nGGXGG",
  "Input": "Line 1: 1 integer, T\nFor each scenario:\nLine 1: 2 integers, H and W\nNext H lines: W characters, representing the ith row of the grid, for i = 1..H"
}{
  "Example": "Sample Input \n2\n2 5\n1 4\n2 6\n3 5\n2 2\n2 9\n2 3\nSample Output\n3\n0",
  "Memory Limit": "64M",
  "Time Limit": "5.00s",
  "Description": "You've come across N (1 \u2264 N \u2264 200) adorable little Foxlings, and they're hungry! Luckily, you happen to have M (1 \u2264 M \u2264 200) crackers on hand, and everyone knows that Foxen love crackers! You'd like to distribute all of your crackers, without splitting any of them, among the Foxlings - but you have to be careful. Foxling i must be fed at least Ai crackers, or it will remain hungry, but no more than Bi of them, or it will become hyper (1 \u2264 Ai \u2264 Bi \u2264 200). You certainly don't want any hungry or hyper Foxlings on your hands, and you're curious as to how many ways this can be accomplished.\nThere are T (1 \u2264 T \u2264 100) scenarios as described above. For each one, you'd like to determine the number of different distributions of your crackers that would satisfy all of the Foxlings, modulo 109 + 7 (as this value can be quite large).",
  "Output": "For each scenario:\nLine 1: 1 integer, the number of valid cracker distributions modulo 109 + 7\n",
  "Title": "Foxling Feeding Frenzy",
  "Explanation of Sample": "In the first scenario, you can give either 1, 2, or 3 crackers to the first Foxling, and the remaining 4, 3, or 2 (respectively) to the second.\nIn the second scenario, each Foxling must receive at least 2 crackers, while you only have 5 to give out, so you have no valid options.",
  "Input": "Line 1: 1 integer, T\nFor each scenario:\nLine 1: 2 integers, N and M\nNext N lines: 2 integers, Ai and Bi, for i = 1..N"
}{
  "Example": "Sample Input \n2\n5\nOOOFO\n7\nOXnFOXn\n3\nFOX\n7\nOFnOXnO\nSample Output\nYes\nNo",
  "Memory Limit": "64M",
  "Time Limit": "20.00s",
  "Description": "Let's talk about some definitions, shall we?\nAn uppercase letter is a character between \"A\" and \"Z\", inclusive. You knew that.\n\nA string is a sequence of characters. You probably knew that.\nA Foxic letter is a superior uppercase letter - namely, one of \"F\", \"O\", or \"X\". You probably didn't know that.\nA Foxic string is a superior string, consisting only of Foxic letters. You didn't know that.\n\nFinally, a Foxic expression is a special string, with each of its characters being either a Foxic letter, or an \"n\" immediately following a Foxic letter. A Foxic expression can be translated into a Foxic string by a three-step process. First, up to one character can be added, removed, or modified, provided that the resulting string is still a valid Foxic expression. Next, every Foxic letter immediately preceding an \"n\" is replaced by zero or more occurrences of that same letter. Finally, each \"n\" is removed. You most certainly did not know that.\nThere are T (1 \u2264 T \u2264 100) scenarios to consider, as described above. In each scenario, given a Foxic string S of length N (1 \u2264 N \u2264 100) and a Foxic expression E of length M (1 \u2264 M \u2264 100), you'd like to determine whether or not E can be translated into S.",
  "Output": "For each scenario:\nLine 1: The string \"Yes\" (without quotes) if E can be translated into S, or \"No\" otherwise.",
  "Title": "Foxic Expressions",
  "Explanation of Sample": "In the first scenario, one possible course of action is to erase the second character of E, leaving the Foxic expression \"OnFOXn\". Next, we may choose to replace the first \"O\" with three copies of \"O\", and the remaining \"X\" with zero occurrences of \"X\", since each of these precedes an \"n\" - this yields the string \"OOOnFOn\". Finally, after removing each \"n\", we are left with \"OOOFO\", which matches S. Replacing the second character with an \"O\" would have also been possible.\nIn the second scenario, it is impossible to translate E into S through any valid steps.",
  "Input": "Line 1: 1 integer, T\nFor each scenario:\nLine 1: 1 integer, N\nLine 2: 1 string, S\nLine 3: 1 integer, M\nLine 4: 1 string, E"
}{
  "Example": "Sample Input \n3\n6-1\n8-3\n1-1\nSample Output\n12\n2\n8",
  "Memory Limit": "64M",
  "Time Limit": "5.00s",
  "Description": "Because you somehow missed out on having a proper childhood, your friends are now forcing you to play a certain game for the first time - Super Mario Brothers. However, as a result of said missing-out, you find that you hate it. Who would want to go around as an Italian plumber, eating mushrooms and jumping on turtles, anyway? Needless to say, you want to get it over with as soon as possible.\nFrom your understanding, there are 8 worlds (numbered from 1 to 8), each with 4 levels (numbered from 1 to 4). The i-th level in the j-th world is referred to by the string \"j-i\" (without the quotes). A player starts in level 1-1, with the objective of eventually completing level 8-4. In general, after completing each level, the player progress to the next level in the world (or, if it was the last level in the world, then to the first level in the following world). For example, the next level after 3-2 is 3-3, while the next one after 5-4 is 6-1.\nHowever, there are also three hidden warp zones in the game, which allow the player to skip directly to the start of a later world after completing a certain level in a specific way. In particular, there is a warp zone from level 1-2 to worlds 2, 3, and 4, another from level 4-2 to worlds 6, 7, and 8, and a final one from level 4-2 to world 5. Because you're in a hurry, you'll be taking advantage of these whenever possible - this means that, after playing level 1-2, you'll skip to level 4-1, and after level 4-2, you'll skip to level 8-1.\nYou and your friends have T (1 \u2264 T \u2264 50) get-togethers. In each one, your friends play for a while and then hand you the controller, in addition to pointing a gun to your head in case you try to run away. Given which level you initially find yourself in, you'd like to determine how many levels you'll have to complete to get this thing over with.",
  "Output": "For each get-together:\nLine 1: 1 integer, the number of levels you must pass to complete the game",
  "Title": "The Super Mario Blues",
  "Explanation of Sample": "In the first scenario, you have no choice but to complete every level in worlds 6, 7, and 8, for a total of 3 \u00d7 4 = 12.\nIn the second scenario, you're already on the second-last level, so you only need to pass 8-3 and 8-4.\nIn the first scenario, you should play levels 1-1 and 1-2, warp to world 4, play 4-1 and 4-2, warp to world 8, and finally pass all of the stages there to finish the game. This amounts to 8 levels.",
  "Input": "Line 1: 1 integer, T\nFor each get-together:\nLine 1: 3 characters, describing your starting level"
}{
  "Example": "Sample Input \n1\n10 3\n3 3 1\n4 0 4\n10 2 2\n4\n1\n20\n9\n11\nSample Output\n1\nBloon leakage\n5\n8",
  "Memory Limit": "64M",
  "Time Limit": "5.00s",
  "Description": "The Bloons (not to be confused with balloons) are attacking! They are attempting to navigate your course of L (1 \u2264 L \u2264 1000) cells, laid out in a row and numbered from 1 to L. You don't know what they'll do to you if they manage reach the end, and you don't want to find out! To that end, you've constructed some defensive towers along the course. You might say that this is a Bloons Tower Defense.\nThere are N (1 \u2264 N \u2264 1000) towers ready to take out any Bloons that get close. The i-th tower is located next to cell Ci (1 \u2264 Ci \u2264 L), and can launch darts at any Bloons that are no more than Ri (0 \u2264 Ri \u2264 1000) cells away - that is, Bloons in cells Ci \u2212 Ri to Ci + Ri, inclusive. Every second, it will do Di (1 \u2264 Di \u2264 109) HP worth of damage to any Bloons in this range.\nM (1 \u2264 M \u2264 1000) Bloons will attempt to float through your course, one after another. The i-th Bloon begins with Hi (1 \u2264 Hi \u2264 109) HP, and will pop as soon as it has taken at least that much damage in total. Each Bloon starts in cell 1, and moves along the course at a speed of 1 cell per second. If a Bloon moves past cell L, it safely exits the course and can no longer be popped.\nThere are T (1 \u2264 T \u2264 20) scenarios as described above. For each, you'd like to determine how far along the course each of the M Bloons will make it.",
  "Output": "For each scenario:\nM lines: If the i-th Bloon will survive the course, the string \"Bloon leakage\" (without quotes) - otherwise, 1 integer, the furthest cell which the i-th Bloon will reach, for i = 1..M",
  "Title": "Attack of the Bloons",
  "Explanation of Sample": "The following diagram illustrates which cells each tower can hit:\n\nThe first Bloon, having only 1 HP, will go down to the first tower in cell 1.\nThe second Bloon will manage to clear the course, surviving past cell 10 with 4 HP remaining.\nThe third Bloon will lose its final HP while at cell 5, having taken 5 damage from the first tower, and 4 from the second.\nThe final Bloon will survive past cell 6 with 1 HP remaining, but will then go down at cell 8 when it takes 2 damage from the third tower.",
  "Input": "Line 1: 1 integer, T\nFor each scenario:\nLine 1: 2 integers, L and N\nNext N lines: 3 integers, Ci, Ri, and Di, for i = 1..N\nNext line: 1 integer, M\nNext M lines: 1 integer, Hi, for i = 1..M"
}{
  "Example": "Sample Input \n1\n4 4\n4 17 4 -2\n5 16 15 18 12 9\n16 13 13 11 14 10\n20 9 20 7 18 7\n22 5 23 11 27 6\nSample Output\n2",
  "Memory Limit": "64M",
  "Time Limit": "60.00s",
  "Description": "Pew pew pew!\nEveryone loves Asteroids, the classic arcade game involving senselessly blasting asteroids into submission with a spaceship. In fact, you love it so much that you built your very own version to play at home! Unfortunately, it sucks.\nYour version of the game is played on a 2D plane, containing your ship (a dot at coordinates (XS, YS)) and N (1 \u2264 N \u2264 1000) stationary, triangular, positive-area asteroids. The i-th asteroid has vertices at coordinates (XAi, YAi), (XBi, YBi), and (XCi, YCi). All coordinates are integers with absolute value no greater than 109, and no two objects occupy any of the same space (even on their edges or vertices).\nYour game only permits you to fire a single missile, which travels in a straight line, destroying every asteroid that it comes in contact with (even on its edges or vertices). However, it doesn't exactly move very smoothly - instead, it starts at your ship at frame 0, and after every frame, its x-coordinate increases by XD, and its y-coordinate by YD. These values are subject to the same constraints as the coordinates, and at least one of them is guaranteed to be non-zero. After frame F (1 \u2264 F \u2264 1000), the missile simply disappears.\nThere are T (1 \u2264 T \u2264 20) scenarios as described above. For each, you'd like to predict how many different asteroids your missile will be able to take out before frame F + 1.",
  "Output": "For each scenario:\nLine 1: 1 integer, the number of asteroids that will be destroyed by the missile",
  "Title": "Homemade Asteroids",
  "Explanation of Sample": "The following grid shows the layout of the game, with your ship marked with an \"S\", and the missile's location at each frame marked with that frame's number:\n\nAs can be seen, the missile destroys the first asteroid during frame 1, and then the third asteroid during frame 4. It does not destroy the second asteroid, even though its line of fire goes through it, as it does not intersect the asteroid during any of the frames. It also doesn't destroy the last asteroid, as it stops travelling after frame 4.",
  "Input": "Line 1: 1 integer, T\nFor each scenario:\nLine 1: 2 integers, N and F\nLine 2: 4 integers, XS, YS, XD, and YD\nNext N lines: 6 integers, XAi, YAi, XBi, YBi, XCi, and YCi, for i = 1..N"
}{
  "Example": "Sample Input \n7\nSomebody's Something of Whatever\nstone of jordan\nWirt's Leg\nFLAMING TURNIP\nDamaged Goods\nSword\nFish shaped volatile organic compounds\nSample Output\nSet\nMagic\nSet\nNot sure, take anyways\nNormal\nNormal\nNormal\nThe first and third items begin with possessives, so they must be Set items. The second item is three words long, and ends in \"of [something]\" so it must be Magic. The fourth item could be either Rare or Magic. The fifth item begins with \"Damaged\" so it's Normal. The last two items don't fit the descriptions of Set, Rare, or Magic, so they must be Normal also.",
  "Memory Limit": "64M",
  "Time Limit": "5.00s",
  "Description": "Maybe you've played Diablo? There are three different character classes: Noobs, Suckers, and Pros. Noobs don't know anything about the game. Suckers think they know how to play. Pros know that the goal of the game is to write a script that will farm for valuable items that they can turn around and sell to Suckers on the black market. Obviously Pros would sell to Noobs if they could, but Noobs don't even know how to buy items.\nAn obvious piece of preqrequisite information for making such a bot is knowing what sorts of items are worth picking up. There are Normal, Magic, Rare, and Set items:\nSet items always belong to some famous dead person, so they always begin with a word that ends in \"\u2019s\" (e.g. Andrew\u2019s). No other items are special enough to begin this way.\nRare items always have names that are two words long.\nMagic items always have names that are between two and four words long. If, and only if, a Magic item has more than two words in its name, then the last two words are \"of [something]\" (e.g. of Doom).\nIf the first word is \"Damaged\", the item is a Normal item. Furthermore, any item that could not possibly be Magic, Rare, or Set must also be Normal. No other items are Normal.\nYou may not have played Diablo, but hopefully you still know that a \"word\" is a maximal substring of non-space characters. Also, letter case is irrelevant.\nYou have a list of N (1 \u2264 N \u2264 1000) item names, and you need to be able to classify these items as accurately as possible. It may not be possible to assign a unique type to each item, but as long as it's not Normal, surely you'll want it. Every item name is a string of no more than 100 characters, containing only alphabetic characters, spaces, and apostrophes. Every name begins and ends with a non-space character.",
  "Output": "N lines: The type of the ith item (one of \"Normal\", \"Set\", \"Magic\", or \"Rare\"), or \"Not sure, take anyways\" (without quotes) if the item's type cannot be determined, but is known not to be Normal, for i = 1..N",
  "Title": "Diablo Bot",
  "Input": "Line 1: 1 integer, N\nNext N lines: The name of the ith item, for i = 1..N"
}{
  "Example": "Sample Input \n2\n4 5\nWWEMC\nEEEUE\nPUWWU\nMEEEE\n5 4\nEWEM\nECUE\nEEWE\nEWEE\nEUPM\nSample Output\npwned you in 8 seconds eZ, learn to play n00b\nterran so broken, apologize for playing this race",
  "Glossary of Terms": "\n1 SC2: StarCraft 2, by Blizzard Entertainment - a game of kings\n2 MVP: Most valuable player\n3 MVP: A top Korean SC2 team\n4 MVP: A top Korean Terran player (who is not on the team MVP)\n5 Protoss: The most pleasant race in SC2, which only nice people use\n6 Terran: The most despicable race in SC2, which no decent human being would consider\n7 Cannon rush: The act of building proxy8 cannons, a common type of cheese9\n8 Proxy: A structure made near or in your opponent's base, instead of your own\n9 Cheese: A perfectly legimate strategy which can allow you to win quickly, while leaving your opponent mad\n10 Probe: A Protoss unit most useful for its ability to make cannons\n11 BM: Customary parting words for your opponent, used to convey your respect for them\n12 eZ: Easy\n13 n00b: A player whose skill is somewhat lacking in calibre\n",
  "Memory Limit": "64M",
  "Time Limit": "25.00s",
  "Description": "It's down to the final match in the world's biggest SC21 tournament! You're the MVP2 of MVP3, and you're going up against MVP4. There are G (1 \u2264 G \u2264 20) games in the series, with a winner decided after all have been played. Being a Protoss5 player, you know the perfect way to win against that Terran6 scum - with a cannon rush7 every single game. Now you just have to execute it perfectly, by quickly getting your probe10 to the correct location, and the prize money's sure to be yours.\nEach game will take place on a map which can be represented as a grid with H (2 \u2264 H \u2264 1000) rows of W (2 \u2264 W \u2264 1000) cells each. Each cell contains either empty space (represented by \"E\"), water (\"W\"), a unit (\"U\"), one of exactly two mineral patches (\"M\"), the probe (\"P\"), or the cannon rush site (\"C\"). Every second, your probe can move to a horizontally- or vertically-adjacent cell within the grid, with the goal of reaching the cannon rush site in as little time as possible. It can move freely from an empty cell to another empty cell (including its initial position and destination), while cells containing water or minerals may never be traversed.\nNormally, the probe may also not pass through units. However, it can if it is travelling towards a mineral patch. Specifically, the probe can only leave or enter a cell containing a unit if, for at least one of the two mineral patches on the map, the cell which the probe is entering is closer to that patch than the cell which the probe is leaving. Closeness is defined according to the minimum amount of time it would take to reach the mineral patch from the given cell, assuming the ability to pass through all units on the way.\nFor each game, you'd like to determine whether or not you can be successful in your strategy, and, if so, how quickly you can execute the cannon rush. Of course, the point of this is to help prepare the correct BM11 for the end of the game.",
  "Output": "For each game:\nLine 1: The BM to be typed at the conclusion of the game. Namely, if the probe can reach the cannon rush site, the string \"pwned you in X seconds eZ12, learn to play n00b13\" (without the quotes and glossary numbers), where X is the minimum number of seconds for it to do so - otherwise, the string \"terran so broken, apologize for playing this race\".",
  "Title": "MVP",
  "Explanation of Sample": "In the first scenario, the single shortest path that the probe may take to the cannon rush site is illustrated below:\nNote that the first move is made by going \"towards\" the top-right mineral patch, while the second move is made by going towards the bottom-left one.\nIn the second scenario, the probe is unable to pass through any of the units, due to the locations of the mineral patches, and as such cannot reach its destination.",
  "Input": "Line 1: 1 integer, G\nFor each game:\nLine 1: 2 integers, H and W\nNext H lines: W characters, representing the ith row of the map, for i = 1..H"
}{
  "Example": "Sample Input \n1\n12\n2 5 5\nR 4\nU 1\nL 1\nD 4\nL 2\n3 3 4\nU 3\nL 2\nD 2\nR 5\nSample Output\n4",
  "Memory Limit": "64M",
  "Time Limit": "10.00s",
  "Description": "Having been sucked into your father's secret computer through a projector in the back of his arcade (or something), you find yourself in the wonderful world of Tron! Here, you play games all day, and if you ever lose, you die.\nOne such game involves you and an opponent driving around a flat grid on light cycles, which leave behind a permanent trail of...light...wherever they go. This grid can be modeled with the Cartesian plane, and is enclosed by a rectangle of impenetrable walls which ensure that the x-coordinate of each light cycle is always between 1 and 1012, while its y-coordinate is between 1 and 106 (inclusive). Light cycles always stay on the grid lines, and move at a speed of 1 square per second.\nA match lasts S (1 \u2264 S \u2264 10100) seconds. You start at coordinates (XA, YA) and follow a set of NA (1 \u2264 NA \u2264 105) instructions, with your i-th instruction consisting of moving LAi squares in the direction given by the character DAi (with \"U\", \"D\", \"L\", and \"R\" representing up, down, left, and right, respectively). Similarly, your opponent starts at coordinates (XB, YB) and follows a set of NB (1 \u2264 NB \u2264 105) instructions, with their ith instruction described by LBi and DBi. Of course, neither player's instructions will ever take them beyond the boundaries of the walls, and it will take each player exactly S seconds to execute their instructions. Additionally, for each player, no instruction will have an equal or opposite direction to that of their previous instruction. Finally, if a grid point is ever visited more than once throughout the course of the match, it is guaranteed that one of the path segments intersecting there is passing directly through vertically, while the other is passing directly through horizontally (as such, this cannot happen at either player's starting or ending points).\nWhenever both light cycles reach the same grid point at the same time, or a light cycle hits an existing trail of light (in other words, a grid point which either light cycle had previously passed through), a collision occurs. Because you're just playing a practice match for now, neither player dies when this occurs, and, in fact, the collision is not counted in favour of either you or your opponent. Instead, for T (1 \u2264 T \u2264 20) scenarios as described above, you're simply interested in the number of collisions that will occur throughout each match.",
  "Output": "For each scenario:\n1 integer: The total number of collisions that will occur.",
  "Title": "Light Cyclin'",
  "Explanation of Sample": "The following diagram illustrates the paths of the light cycles (yours drawn in solid lines, and your opponent's drawn in dotted ones), as well as all of the collision points (indicated with large dots):\n",
  "Input": "Line 1: 1 integer, T\nFor each scenario:\nLine 1: 1 integer, S\nNext line: 3 integers, XA, YA, and NA\nNext NA lines: 1 character, DAi, and 1 integer, LAi, for i = 1..NA\nNext line: 3 integers, XB, YB, and NB\nNext NB lines: 1 character, DBi, and 1 integer, LBi, for i = 1..NB"
}{
  "Example": "Sample Input \n3\n4\n2 5 1 3\n1\n98\n5\n16 11 11 14 21\n\nSample Output\n1 5\n98 98\n11 21\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "The school year has just begun, so it's time for Alice to find a suitable boyfriend! Naturally, this process will first require some careful research using a convenient online academic source known as Facebook.\nAlice is considering G (1 \u2264 G \u2264 100) guys, and wants to estimate how well-matched she would be with each of them - in other words, how attractive each of them is. For each guy, Alice can find N (1 \u2264 N \u2264 100) pictures of him on Facebook, the i-th of which has attractiveness Ai (1 \u2264 Ai \u2264 100). The guy might be as ugly as his least-attractive picture (the one with the smallest attractiveness value), or as hot as his most-attractive picture.\nIn making her important and complex decision, Alice would like to know the potential range of attractiveness of each of the G potential guys!",
  "Output": "For each guy, output 2 integers, the guy's worst-case and best-case attractiveness, respectively.",
  "Title": "A Research Project",
  "Explanation of Sample": "\nThe first guy's worst picture (his third) has attractiveness 1, while his best (his second) has attractiveness 5.\nThe second guy has only one picture, making his attractiveness definitely 98.\nFinally, the third guy's worst-case attractiveness is 11 (with two of his pictures having this value), while his best is 21.\n",
  "Input": "Line 1: 1 integer, G\n\nFor each guy:\nLine 1: 1 integer, N\nLine 2: N integers, A1..N\n"
}{
  "Example": "Sample Input \n2\n6 3 5\n3 4 0 8 12 6\n4 1 2\n5 7 7 5\n\nSample Output\n8 10\n5 0\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Alice has received an invitation from Bob to watch some TV on D (1 \u2264 D \u2264 100) days! Though spending time with him is nice, she's more concerned about exactly what channels they'll be watching. After all, being a guy, Bob is sure to be interested in viewing less sophisticated programs than she is.\nOn each day, a different set of N (1 \u2264 N \u2264 100,000) channels are available, numbered 1..N. Each channel i has a girliness value of Gi (0 \u2264 Gi \u2264 109) associated with it, indicating how much Alice would like to watch it. When she arrives at Bob's house, the TV is set to channel 1, but she'd like to surf to a channel with maximal girliness, and as quickly as possible.\nAlice wants to be subtle about her channel surfing, however. She believes that Bob may notice if they stay on any channel for less than T (1 \u2264 T \u2264 1000) seconds before switching, or if the girliness value of the new channel is more than C (1 \u2264 C \u2264 109) greater than that of the current one. She needs a plan of action to maximize the girliness of the channel they end up watching, while minimizing the amount of time it'll take her to surf to such a channel.",
  "Output": "For each day, output 2 integers, the maximum channel girliness which Alice can surf to, and the minimum number of seconds required to arrive at a channel with this girliness, respectively.",
  "Title": "A Subtle Surf",
  "Explanation of Sample": "\nOn the first day, Alice should switch to channel 6 after 5 seconds, and to channel 4 after another 5 seconds.\nOn the second day, Alice can't surf to either channel 2 or 3, so she should stay on channel 1.\n",
  "Input": "Line 1: 1 integer, D\nFor each day:\nLine 1: 3 integers, N, C, and T\nLine 2: N integers, G1..N\n"
}{
  "Example": "Sample Input \n2\n4 4\n..S#\n.##C\n....\nS.#S\n1 5\nSSCSS\n\nSample Output\n202\n250\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Alice has convinced Bob to accompany her on a shopping trip! For some reason, he seems reluctant to spend too much time on it, but she has every intention of hitting every single store at M (1 \u2264 M \u2264 100) different malls today. Still, she's promised to get it over with as quickly as possible.\nA given mall can be modelled as a two-dimensional grid of cells, with R (1 \u2264 R \u2264 100) rows and C (1 \u2264 C \u2264 100) columns. Each cell contains either a wall (represented by a \"#\"), open space (\".\"), a store (\"S\", of which there is at least one), or Bob's car (\"C\", of which there is exactly one). Alice and Bob can walk from one cell to a horizontally- or vertically-adjacent one in 1 minute if neither cell is blocked by a wall.\nThe two of them will start at Bob's car, and walk to a store (possibly passing through other stores on the way) so that Alice can do what she does best, which only takes her 60 minutes. At that point, due to the large volume of items purchased, they'll need to return to the car to drop them off. This process will repeat until all stores in the mall have been visited, in some order. It's guaranteed that each store is reachable from the car.\nTo reassure Bob that they won't spend too much time at each mall, Alice will leave a stopwatch running until the final items have been dropped off in the car. However, sneaky as she is, Alice will only start timing when she actually starts shopping at the first store they decide to visit. She'd like to know how much time will be spent at each mall - though she's sure that it won't be much at all.",
  "Output": "For each mall, output 1 integer, the minimal number of minutes required to visit all stores and return to the car, as per Alice's stopwatch.",
  "Title": "A Brief Expedition",
  "Explanation of Sample": "At the first mall, Alice and Bob can decide to visit the top store, followed by the bottom-left, and finally the bottom-right. In this case, they'll spend 60 minutes shopping, 8 minutes returning to the car, 5 minutes walking to the second store, 60 minutes shopping, 5 minutes returning to the car, 2 minutes walking to the third store, 60 minutes shopping, and 2 minutes again returning to the car. This is a total of 202 minutes.\nAt the second mall, they can decide to visit the stores left-to-right. This shopping trip will take 60 + 2 + 1 + 60 + 1 + 1 + 60 + 1 + 2 + 60 + 2 = 250 minutes.",
  "Input": "Line 1: 1 integer, M\nFor each mall:\nLine 1: 2 integers, R and C\nNext R lines: C characters, representing the i-th row of the mall grid, for i = 1..H\n"
}{
  "Example": "Sample Input \n2\n5 5\n#....\n..##.\n.#...\n#.#..\n....#\n2 4\n.##.\n..##\n\nSample Output\n4\nDetour\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "This evening, Alice and Bob have decided to simply go out on a nice walk together. On the way, they'll traverse S (1 \u2264 S \u2264 50) different sidewalks. Now that they won't be watching engrossing movies, Bob really wouldn't mind holding Alice's hand - however, this can sometimes be difficult to maintain, due to potential obstacles in their way.\nA given sidewalk can be modelled as a two-dimensional grid of cells, with R (1 \u2264 R \u2264 50) rows and C (1 \u2264 C \u2264 50) columns. The j-th cell in the i-th row is referred to as cell (i, j). Each cell is either walkable (represented by a \".\"), or is blocked by the neighbourhood dog's droppings (\"#\"). Alice and Bob will be walking Southwards along it, independently of one another, but both at a rate of exactly one row per second. Needless to say, they'll never walk through cells containing droppings, nor can they ever occupy the same cell as one another. Each of them can start in any cell on row 1, and each second, will move down by a cell, as well as optionally left or right by a cell. In other words, if Alice or Bob is in cell (i, j), they can then move to either cell (i + 1, j \u2212 1), (i + 1, j), or (i + 1, j + 1), as long as they don't step off the sidewalk. This continues until they've both made it to row R, at which point they step off and make their way towards the next sidewalk on their route. It might also be the case that they're unable to both navigate to the end of the sidewalk, in which case they'll take a detour around it entirely.\nAlong the way, whenever Alice and Bob find themselves side-by-side (in other words, in cells (i, j) and (i, j + 1), for some i and j), they can hold hands for that second! Bob is interested in coordinating their walk to enable them to hold hands for as long as possible.",
  "Output": "For each sidewalk, output 1 integer, the maximal number of seconds Alice and Bob can spend holding hands, or the string \"Detour\" if they can't both make it to the end.",
  "Title": "A Pleasant Stroll",
  "Explanation of Sample": "On the first sidewalk, Bob can ask Alice to walk through cells (1, 3), (2,2), (3, 3), (4, 4), and (5, 3), while he goes through cells (1, 4), (2, 5), (3, 4), (4, 5), and (5, 4). The two of them will then get to hold hands while on rows 1, 3, 4, and 5, for a total of 4 seconds.\nHowever, there's no way for both Alice and Bob to navigate the second sidewalk. They must start in cells (1, 1) and (1, 4), and no walkable cells on the second row can be reached from cell (1, 4).",
  "Input": "Line 1: 1 integer, S\nFor each sidewalk:\nLine 1: 2 integers, R and C\nNext R lines: C characters, representing the i-th row of the sidewalk grid, for i = 1..R\n"
}{
  "Example": "Sample Input \n1\n6 5\n1 2\n1 3\n1 4\n4 5\n4 6\n\nSample Output\n7\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Dr. Baws has an interesting problem. His N graduate students, while friendly with some select people, are generally not friendly with each other. No graduate student is willing to sit beside a person they aren't friends with.\nThe desks are up against the wall, in a single line, so it's possible that Dr. Baws will have to leave some desks empty. He does know which students are friends, and fortunately the list is not so long: it turns out that for any subset of K graduate students, there are at most K \u2212 1 pairs of friends. Dr. Baws would like you to minimize the total number of desks required. What is this minimum number?",
  "Output": "For each test case output a single number: the minimum number of desks Dr. Baws requires to seat the students.",
  "Title": "Office Mates",
  "Explanation of Sample": "As seen in the diagram, you seat the students in two groups of three with one empty desk in the middle.",
  "Input": "The input begins with an integer T \u2264 50, the number of test cases. Each test case begins with two integers on their own line: N \u2264 100000, the number of graduate students (who are indexed by the integers 1 through N), and M, the number of friendships among the students. Following this are M lines, each containing two integers i and j separated by a single space. Two integers i and j represent a mutual friendship between students i and j.\nThe total size of the input file does not exceed 2 MB."
}{
  "Example": "Sample Input \n6\n6 2 30\n9 4 40\n12 3 20\n3 6 60\n12 5 30\n6 6 60\nSample Output 1\n2\nSample Input 2\n5\n6 1 30\n9 2 40\n12 1 30\n3 1 79\n12 5 30\nSample Output 2\n-1\nSample Input 3\n5\n9 4 60\n12 8 80\n3 4 60\n6 8 100\n3 10 20\nSample Output 3\n4",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " The road map of Kansas is a grid where there are straight roads going North to South and straight roads East to West each 1 mile apart. A truck driver gets instructions in the following form: Drive for two hours north at 50 miles per hour, then for 7 hours east at 85 miles per hour, etc. The driver has to take a 1 hour break break after 5 hours of driving. After how many breaks does the driver first pass through or return to the place where he started?\n\nExample 1.\u00a0Drive for two hours south at 30 miles per hour, then for 4 hours west at 40 miles per hour, then for 3 hours north at 20 miles per hour, then for 6 hours east at 60 miles per hour, then for 5 hours north at 30 miles per hour, and then for 6 hours south at 60 miles per hour.\n\n  When following these instructions, the driver will pass through his starting point after taking two breaks.\u00a0\n\nExample 2.\u00a0Drive for 1 hour south at 30 miles per hour, then for 2 hours west at 40 miles per hour, then for 1 hour north at 30 miles per hour, then for 1 hour east at 79 miles per hour, and then for 5 hours north at 30 miles per hour.\u00a0\n\n  When following these instructions, the driver will not pass through nor return to where he started.\n\nExample 3.\u00a0Drive for four hours west at 60 miles per hour, then drive for eight hours north at 80 miles per hour, then drive for four hours east at 60 miles per hour, then drive for eight hours south at 100 miles per hour, then drive for ten hours east at 20 miles per hour.\u00a0\n\n  When following these instructions, the driver will pass through his starting point after taking 4 breaks.\u00a0",
  "Output": "The output\u00a0contains a single integer which is the number of breaks taken before the driver first passes through or  returns to the place where he started. If the driver does not reach or pass through the place where he started after following all instructions, the output should contain the number -1.\u00a0 ",
  "Title": "Kansas",
  "Input ": "The input consists of several lines. The first line contains an integer (N \u2264 1000) which is the number of instructions, followed by one line for each instruction, indicating the direction, the number of hours\u00a0h\u00a0(1 \u2264\u00a0h\u00a0\u2264 200) and the speed\u00a0s\u00a0(1 \u2264\u00a0s\u00a0\u2264 200) in miles per hour in this order. The geographical directions are indicated by the position of the small hand on an analog clock; 12 stands for north, 6 for south, 9 for west, and 3 for east.\u00a0"
}{
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " On a straight single-lane road, there are\u00a0n\u00a0cars parked with a space of\u00a0d\u00a0meters wide separating every two adjacent cars. The cars will start to move successively in the same direction as follows.\u00a0\n\n  At the beginning, the first car moves at a speed of\u00a0v\u00a0meters per second, while the other cars are standing still. After every 5 seconds from the beginning, every car checks the distance to the car in front or behind, and adapts its speed, if necessary.\u00a0\n\n  The first car adapts as follows. If there are less than 80 meters space to the car behind it, it immediately increases its speed by 5 meters per second; if there are more than 100 meters space to the car behind it, it immediately decreases its speed by 5 meters per second; and otherwise it keeps its speed.\u00a0\n\n  All the other cars adapt as follows. If there are less than 80 meters space to the car in front, it immediately decreases its speed by 5 meters per second; if there are more than 100 meters space to the car in front, it immediately increases its speed by 5 meters per second; and otherwise it keeps its speed.\u00a0\n\n  Against the laws of physics, any change of speed takes immediate effect. If a car stands still and needs to decrease speed, it will remain standing still; the cars never go backwards. A collision occurs if the space between two cars becomes 0 or less.\u00a0\n\n  The goal is to find out if a collision has occurred after\u00a0t\u00a05-second-intervals, and if not, how far the first car will have traveled.\u00a0\n\nNote that the length of the cars is irrelevant.\u00a0 \n Example 1.\u00a0There are\u00a0n\u00a0= 5 cars. The first car starts with\u00a0v\u00a0= 10 meters per second, there are\u00a0d\u00a0= 80 meters between adjacent cars and there are\u00a0t\u00a0= 3 5-second-intervals.\u00a0\nThe first car will travel 10*5 = 50 meters in the first period, while all other cars stand still in this period.\nAt the beginning of the second period, the first car decelerates to a speed of 5 meters per second, because there is now 130 meters space to the car behind, and thus travels 5 * 5 = 25 meters in the second period. At the beginning of the second period, the second car accelerates to a speed of 5 meters per second, because there is 130 meters space to the car in front, and thus travels 5 * 5 = 25 meters in the second period. At the beginning of the second period, all other cars remain standing, because there still are 80 meters space to the car in front.\nAt the beginning of the third period, the first car decelerates to a speed of 0 meters per second, because there is again 130 meters space to the car behind, and thus travels 0 * 5 = 0 meters in the third period.\nAnswer:\u00a0The first car will have traveled 50 + 25 + 0 = 75 meters after the first three periods.\u00a0\n\nExample 2.\u00a0There are\u00a0n\u00a0= 2 cars. The first car starts with\u00a0v\u00a0= 60 meters per second, there are\u00a0d\u00a0= 100 meters between adjacent cars and there are\u00a0t\u00a0= 14 5-second-intervals.\u00a0\nAnswer:\u00a0A collision occurs.\u00a0\n\nExample 3.\u00a0There are\u00a0n\u00a0= 20 cars. The first car starts with\u00a0v\u00a0= 5 meters per second, there are\u00a0d\u00a0= 5 meters between adjacent cars and there are\u00a0t\u00a0= 100 5-second-intervals.\u00a0\nAnswer:\u00a0The first car will have traveled 2550 meters.",
  "Output": "2550",
  "Title": "Cars",
  "Input": "20 5 5 100"
}{
  "Explanation": "Players 3, 4, 5, 9 are in one cycle, and players 6, 7, 10 in another. (Total = 7)\nPlayers 1, 3 and 5 are involved in a cyclic ordering, whereas players 2 and 4 did not play. (3)\nThere is no cycle in this case. (0)\nThere are 2 cycles: players 2, 4, 6 are involved in one cycle, while players 2, 6, 8 are in another. So players 2, 4, 6, 8 are involved in a cyclic ordering. (4)",
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " In a tournament of\u00a0N\u00a0players and\u00a0K\u00a0games, each game involves 2 players. A player may play any number of games, but in each game his opponent must be a different person. A player needs not play with everybody (it is even possible, though strange, that a player does not play any game at all!). In a game, there is no draw - a player either wins or loses.\u00a0\n\n  After all the games have been played, the players are ranked. There are a few situations where ranking is not possible, but here we are interested only in one particular situation where more than 2 players are involved in a \"cyclic\" order. One example is as follows: player\u00a0A\u00a0beats player\u00a0B, player\u00a0B\u00a0beats player\u00a0C, and player\u00a0C\u00a0in turns beats player\u00a0A. In this case, the relative ranking of these 3 players cannot be determined.\u00a0\n\n  Note that a player may be involved in more than one cyclic ordering; when this happens, the player should be counted only once.\u00a0\n\n  (Since we are only interested in players involved in cyclic ordering, those players whose ranking cannot be determined due to other reasons - for instance, a player who did not play any game at all should not be considered here. See the examples.)\u00a0\n\nYou are given a list of games and their results, and you are to find the total number of players\u00a0whose ranking cannot be determined due to cyclic ordering.\u00a0",
  "Output": "4",
  "Title": "Rank",
  "Input": "10 5\n2 4 0 2\n2 6 5 3\n8 2 8 2\n6 4 6 2\n8 6 0 2"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n5*(3+3)-2-2\nSample Output\n26\nSample Input 2\n5*3*4/-7\nSample Output 2\n-8",
  "Description": "Given an arithmetic expression, output its value.\nThe expression will be given without spaces, but it may contain the four operators (+, -, /, *) and brackets ().\nThe regular order of evaluation applies. Division here is regarded as integer division.\n(There will be no strange or invalid expressions, like 5(2(2)))",
  "Title": "Expression",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 1 0 0 0\n0 5 2 3 0 0\n0 0 4 0 0 0\n0 0 6 0 0 0\nSample Output\n4",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Diagram": "",
  "Description": " Folding six squares connected in some special ways can form a cube. For example, in the diagram below, the six squares on the left can be folded into a cube (with face 1 opposite face 4, face 2 opposite face 6, and face 3 opposite face 5) but the six squares on the right cannot be folded into a cube (faces 3 and 5 overlap).\u00a0 \n\n\n\n A 6 \u00d7 6 array is used to represent the six squares. Only 6 of the 36 cells are used to represent the 6 squares. A cell representing a square contains the number for the square. Other cells contain the number 0. Note that the same 6 squares can be represented in many ways. For example, the invalid six squares of the above example can be represented as follows (the one on the right is obtained after a 90 degree rotation of the one on the left): \n                0 0 0 0 0 0         0 0 0 0 0 0\n                0 3 0 5 0 0         0 0 0 0 0 0\n                1 2 4 6 0 0         0 0 0 0 5 6\n                0 0 0 0 0 0         0 0 0 0 0 4\n                0 0 0 0 0 0         0 0 0 0 3 2\n                0 0 0 0 0 0         0 0 0 0 0 1 \nGiven a square representation, determine if the squares can be folded into a cube; if so, find the face opposite face 1. ",
  "Output": " The output file\u00a0consists of a single integer. The integer is 0 if the squares cannot be folded into a cube; otherwise, the integer is the number of the face opposite face 1.\u00a0",
  "Title": "Cube",
  "Input ": "The input consists of six lines with each line containing six integers. All but six of the input integers are zeros. The non-zero integers are 1, 2, 3, 4, 5, 6.\u00a0"
}{
  "Time Limit": "3.00s",
  "Description": "Given two integers A and B (of no more than 100000 digits each), find their exact sum.",
  "Title": "A plus B 2",
  "Memory Limit": "16M"
}{
  "Time Limit": "3.00s",
  "Description": "Given two integers A and B (of no more than 100000 digits each), find their exact sum.",
  "Title": "A plus B 2",
  "Memory Limit": "16M"
}{
  "Time Limit": "3.00s",
  "Description": "Given two integers A and B (of no more than 100000 digits each), find their exact sum.",
  "Title": "A plus B 2",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n5 7\n1 2\n1 5\n2 4\n2 5\n3 4\n3 5\n4 5\n\nSample Output\n3\n1 4\n2 3\n5\n",
  "Explanation": "Soldiers 1 and 4 are led by a capo, soldiers 2 and 3 are led by a capo, and soldier 5 is led by another capo. There exists no grudges within any of the three groups.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "After a seemingly endless mob war, many of the caporegimes in your family are killed. Each capo leads a crew of soldiers, but now that these capos are dead, their soldiers are out of control. As the consigliere of your family, it is your job to hire new capos to lead the riotous soldiers. The soldiers you're dealing with are not gentle people. Soldiers often hold grudges with each other. As a result, certain soldiers cannot be placed in the same crew.\n\nThere are N soldiers that are out of control, and M two-way grudges that you know exist between pairs of soldiers. Since the capos you're hiring are new, you don't know if they can be trusted. The more capos you hire, the more likely it is that one of them will rat. You must help the Don determine the minimum number of capos required to lead the soldiers, such that no grudges exist amongst the same crew. Additionally, you must find one such way of grouping the soldiers.",
  "Output": "The first line of output should contain an integer, the minimum number of crews required to group the soldiers.\nEach remaining line represents a separate crew. For every crew, you must output the soldiers that it contains. You may output the groups/soldiers in any order.",
  "Title": "Caporegime",
  "Input": "The first line of input will contain two integers: N (1 \u2264 N \u2264 15), the number of soldiers, and M (1 \u2264 M \u2264 N*(N-1)/2), the number of grudges.\nThe next M lines will each contain two integers a and b (1 \u2264 a, b \u2264 N), denoting a grudge between soldiers a and b.\n"
}{
  "Example": "Input:\n24\n4\n12\n13\n5\n6\n\nOutput:\n2\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given a value of x cents, and an infinite supply of coins of n denominations, followed by their denominations, find the least amount of coins required to make change for x.",
  "Output": "An integer, on a single line - the least coins required to make change for x.",
  "Title": "Coin Change",
  "Input": "Line 1: x, an integer between 1 and 10000\nLine 2: n, the number of different denominations\nLine 3..3+n: the denominations of the coins"
}{
  "Time Limit": "2.00s",
  "Description": "m\nn\nm,n\n\n\nInput Format\n\nN\n\nN\nm\nn\n\n\nOutput Format\n\n\n\nSample Input\n\n\n\n\n\nSample Output\n\n\n",
  "Title": "Chocolate Bar",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n2 10\n30 300\n6666 66666\n12345 67890\n100000 1000000\n\nSample Output\n2\n23\n51\n50\n32\n",
  "Memory Limit": "256M",
  "Time Limit": "60.00s",
  "Description": "Given a range, determine how many Super Special Awesome numbers lie within it.",
  "Output": "",
  "Title": "Super Special Awesome Numbers =D",
  "Input": ""
}{
  "Example": "Sample Input \n1_\n32_23\n_46230\n\nSample Output\n1 3 7 9\n3 4\nNot possible\n",
  "Explanation": "In the first case, there are four primes that can be obtained by filling in the blank: 11, 13, 17, and 19,\nobtained by filling in the blank with the digits 1, 3, 7, and 9, respectively.\nIn the second case, there are two five-digit primes starting with 32 and ending with 23, and they are\n32323 and 32423, obtained by filling in the blank with 3 and 4, respectively.\nIn the third case, regardless of the digit filling the blank, 2 will be a proper factor, so no choice yields\na prime number.",
  "Memory Limit": "256M",
  "Time Limit": "5.00s",
  "Description": "Having just learned what primes are in math class, Boxer wants to put this newly acquired skill to the test.\nGiven a number that is missing a digit, help Boxer list all possible digits that makes this number prime.",
  "Output": "",
  "Title": "The Missing Link...",
  "Input": ""
}{
  "Example": "Sample Input \n0 0\n0 1\n1 0\n1 2\n2 4\n4 10\n\nSample Output\n0.50 0.50\n-25.50 16.50\n",
  "Memory Limit": "256M",
  "Time Limit": "5.00s",
  "Output": "",
  "Description": "Being the avid bear hunter he is, Brian is hot on the trail of yet another bear. While chasing after\nthe bear (well, mainly the bear's excretions\u2026), Brian remembered that almost all the bears he had\nchased follow a set pattern:\nTheir excretions are found on the border of their respective 'territories' (which conveniently tend to be perfectly circular in shape)\nTheir caves are usually located at the centers of their respective territories.\nAssuming these facts, help Brian locate the bear's cave, given the locations of three droppings known to belong to the bear.",
  "Note on rounding": "",
  "Title": "Trailing Bears!",
  "Input": ""
}{
  "Example": "Sample Input \n3 3\n010\n111\n010\n4 5\n01000\n11010\n00001\n00110\n\nSample Output\n1\n3\n",
  "Explanation": "",
  "Memory Limit": "256M",
  "Time Limit": "10.00s",
  "Description": "Lights Out is an electronic game released by Tiger Toys in 1995. (Tiger Toys was later bought by Hasbro in 1998.)\nThe game consists of an R by C grid of lights; when the game starts,\nsome subset (possibly none or all) of these lights are switched on. Pressing one of the lights will toggle it and\nall adjacent to it (up to four). Diagonal neighbours are not affected. Notice that a light on the edge of the\ngrid will have fewer than four neighbours. The objective of the game is to solve a puzzle: switch all the lights\noff, preferably in as few button presses as possible. [Wikipedia]",
  "Output": "",
  "Title": "Lights Out!",
  "Input": ""
}{
  "Example": "Sample Input \n1 2 1\n1 2\n1 2\n2 3 \n4 2 \n2 2 3\n2 1\n2 2\n5 3 \n5 4 \n1 5 \n2 5 \n\nSample Output\n0\n8\n",
  "Explanation": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Every day, Brenda is faced with the monumental task of getting to work by car. Brenda\nlives in a city containing C north-south roads and R east-west roads.\nEvery north-south road intersects every east-west road exactly once. All north-south\nroads are parallel to each other and perpendicular to all east-west roads (which\nare themselves all mutually parallel as well). Conveniently, the westernmost north-south\nroad is called 1st Avenue, the next westernmost 2nd Avenue, and\nso on; the northernmost east-west road is called 1st Street, the next\nnorthermost 2nd Street, and so on.\nTwo intersections are considered\nadjacent if it is possible to move from one intersection to another along a road\nwithout passing through any other intersection on the way. It takes Brenda exactly X\nminutes to move between two adjacent intersections, where X is constant.\nEach intersection has a traffic light. The traffic light at the intersection of\nith Street and jth Avenue spends\ngij minutes green in the north-south direction, then immediately switches\nto being red for rij in the north-south direction, then repeats this\ncycle indefinitely. The color in the\neast-west direction is always opposite to the color in the north-south direction at any\ninstant in time.\nBrenda cannot leave an intersection unless the light is green in the\ndirection of travel at the time of departure from that intersection.\nBrenda's\napartment is at one intersection, and her place of work is at another intersection.\nBrenda departs from her home at time zero, cannot leave the city, and obviously must\ntravel along the roads. She knows that, at her time of departure, all lights in the\ncity have just switched to green in the north-south direction.\nHelp her determine the earliest time at which she can possibly arrive at work.",
  "Output": "",
  "Title": "Traffic Lights",
  "Input": ""
}{
  "Example": "Sample Input \n2 10 4\n3 5 2\n5 7 2\n\nSample Output 2\n9\n",
  "Explanation 1": "Houses between number 40 and 59 inclusive have a spookiness of 12, which is 2spooky for Kenny. He can still get candy from houses 1 to 39, and 60 to 100.",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line of input will contain the integers: N, L, S (1 \u2264 N \u2264 10000; 1 \u2264 L \u2264 109;  1 \u2264 S \u2264 107).\nThe next N lines of input will contain values a, b and s for each house. (1 \u2264 ai, bi \u2264 109; 1 \u2264 si \u2264 1000).\n",
  "Time Limit": "2.00s",
  "Description": "Kenny wants to go trick-or-treating too! But the street has many spooky decorations put up on it. Kenny doesn't like to be scared, so he avoids spooky areas.\nThere are L houses arranged in a line on the street, numbered from 1 to L. Each house will give exactly 1 unit of candy to Kenny. There are N spooky decorations on this street. The i-th decoration covers the street from house number ai to bi, inclusive, raising the spookiness of those houses by si spookiness units.\nKenny will be too scared to knock on any doors if the spookiness of a house is greater than or equal to S. The spookiness of a house is the sum of the spookinesses of all the decorations passing through it.\nDetermine the amount of candy Kenny can receive from all the houses on the street.",
  "Output Format": "Output a single integer, the amount of candy that Kenny can get.",
  "Explanation 2": "Only house 5 is 2spooky for Kenny.",
  "Title": "2spooky4me"
}{
  "Example": "Sample Input \n3 5\n./...\n...\\.\n././.\n\nSample Output\n6\n",
  "Explanation": "The following outlines Korra's movements throughout the maze (her location and direction are represented by the characters > < ^ v):\n  t = 0         t = 1         t = 2         t = 3\n> / . . .     .v\\ . . .     . / . . .     . \\ . . .\n. . . \\ .     . . . / .     . v . \\ .     . . . / .\n. / . / .     . \\ . \\ .     . / . / .     . \\>. \\ .\n\n  t = 4         t = 5         t = 6\n. / . . .     ..\\ . . .     . / . . .\n. . . \\ .     . . . / .     . . . \\ .\n. / > / .     . \\ .v\\ .     . / . / .\n                                  v\n",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1: The two integers N and M.\nNext N lines: M characters per line, depicting the initial conditions of the maze.\n",
  "Time Limit": "2.00s",
  "Description": "It's been over 70 years since the events of Sozin's comet. Republic city is thriving from the legacy of Avatar Aang. The young and restless Korra must start anew in her service to the world as the next avatar. At only seventeen years old, Korra has effectively mastered all the elements except for airbending. Starting her airbending training with Aang's son, Tenzin, Korra is hoping to finally overcome her lifelong struggle.\nBeing an airbender is all about building up the instinct to avoid and evade conflicts, following the path of least resistance. Airbenders train to be highly defensive, moving about their environment and opponents like the wind. To practice being evasive, ancient training devices called airbending gates are used. Each gate is simply a tall board that stands upright with respect to the ground. The gates rotate according to the wind, and it is Korra's job to navigate the course of gates without being beaten up by a bunch of boards. The key is to be as gentle and adaptive as a leaf through the wind.\nThe entire obstacle course can be seen as a grid with N rows and M columns (1 \u2264 N, M \u2264 100). Row 1 is the northmost row, row N is the southmost row, column 1 is the westmost column, and column M is the eastmost column. Gates are positioned at certain places on this grid. For the sake of simplicity, we can assume that gates are always facing 45\u00b0 with respect to the borders of the grid. That is, initially, a gate can either be oriented like '/', or '\\'. To make it even harder for Korra, the wind will simultaneously flip the orientation of every gate during every second.\nKorra starts the course on the north-west corner (row 1, column 1) facing east. This is guaranteed to not contain a gate. During every second, if Korra is not occupying the same position as a gate, then she will move forward in whatever direction she is currently facing. If she happens to be right in the place of a gate, then she will turn accordingly based on whichever direction the gate happens to be facing in that second. For example if she is facing east and she walks onto a gate with orientation /, then she will turn to face north in that second, then move to the cell north of her in the next second.\nKorra will have succeeded if she manages to leave the maze. Following the above guidelines for moving, Korra would like to know the number of seconds she would spend inside the maze of gates. It is guaranteed that she will always be able to exit.",
  "Output Format": "Output a single line containing a single integer \u2013 the number seconds she spends inside the maze of airbending gates.",
  "Title": "Air"
}{
  "Example": "Sample Input \n9\n1 8 5 9 7 2 3 4 6 \n\nSample Output 2\n1",
  "Input Format": "\nThe first line will contain the integer N, representing the number of numbers Korra has.\nThe second line will contain N positive integers (each no greater than 1000), the numbers that Korra is trying to split.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Korra is trying to restore balance to the world. But before that, she must restore balance in some numbers. Given N (1 \u2264 N \u2264 10) numbers, Korra wants to split them into two (possibly empty) groups, such that their sums are as close as possible.\nOutput the minimum difference between the two groups of numbers.",
  "Sample Ouput 1": "44",
  "Output Format": "Output a single line containing a single integer \u2013 the minimum difference of the sum of the two groups of numbers.",
  "Title": "Balance"
}{
  "Example": "Sample Input \n25 15 20 25\n20 10 10 5 15 15\n\nSample Output\n3\n",
  "Explanation": "\nOne possible way is by assigning:\nKorra to Gazan (20 > 15)\nMako, Bolin and Asami to Ming-Hua (10 + 10 + 5 > 20), and\nLin and Opal to P'Li (15 + 15 > 25).\n",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1: Four integers Z, G, MH, and P, representing the strengths of members of the Red Lotus.\nLine 2: Six integers K, M, B, A, L, and O, representing the strengths of members of Team Avatar.\n",
  "Time Limit": "2.00s",
  "Description": "After Korra's decision to leave the spirit world portals permanently open in support of having human and spirits live in unity, Korra, Tenzin, and friends have decided to change the world once again. The harmonic convergence has gifted many people in the world with the power of airbending. Alas, people cannot control it. So, after around a hundred years after their destruction, it's finally time for the air nation to be rebuilt.\nHowever, the evil Red Lotus group consisting of Zaheer, Gazan, Ming-Hua, and P'Li has managed to take the group of new age airbenders hostage. Each of the four Red Lotus members has held an equal number of people hostages at different places in the temple. To save them, Team Avatar, consisting of Korra, Mako, Bolin, Asami, Lin, and Opal have closed in on the temple. Now, the team has to make some strategic decisions to save as many hostages as possible. Korra has to decide which members of the team (including herself) has to take on which members of the Red Lotus.\nZaheer, Gazan, Ming-Hua, and P'Li have strengths of Z, G, MH, and P (1 \u2264 Z, G, MH, P \u2264 106) respectively. Korra, Mako, Bolin, Asami, Lin, and Opal have strengths of K, M, B, A, L, and O (1 \u2264 K, M, B, A, L, O \u2264 106), respectively. Multiple people of Team Avatar may be assigned to the same Red Lotus member. The winner of a battle will be the side with the strictly larger total strength level. When more than one Team Avatar member is assigned to the same fight, their total strength will be the sum of the strengths of all members assigned.\nGiven the strengths of everybody, Korra would like to know the maximum number of battles they can win (between 0 and 4) if she assigned optimally.",
  "Output Format": "\nA single integer representing the maximum number of battles that can be won (0, 1, 2, 3, or 4) if Korra deploys Team Avatar members optimally.\n",
  "Title": "Change"
}{
  "Example": "Sample Input \n4 6\n3 5 5 7\n\nSample Output\nYes",
  "Input Format": "\nThe first line contains two integers x and y, representing the coordinates of The Boulder at the moment Toph raises the walls.\nThe second line contains four integers x1, y1, x2, and y2 (1 \u2264 x1 < x2 \u2264 107; 1 \u2264 y1 < y2 \u2264 107), the locations of the walls.\nx1 and x2 are the x-coordinates of the vertical walls while y1 and y2 are the y-coordinates of the horizontal walls.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Earthbending is an art which allows its users to manipulate earth and rocks in all of their various forms. Earthbenders are strong, persistent, and enduring people. The secret to being a good earthbender is waiting and listening for the right moment to strike decisively.\nAang, Katara, and Sokka are currently scouring the entire earth kingdom in search of a proper earthbending teacher for Aang. In the town of Gaoling, they have stumbled upon the Blind Bandit (i.e. a young, blind girl named Toph from a rich earth-kingdom family) in an earthbending tournament with The Boulder. Aang immediately knew that Toph was the one after she effortlessly defeated the boulder, but incidently defeated Toph with his airbending to claim the prize money himself after failing to convince her. Bitter about losing the prize money, the Boulder gathered the other earthbenders of the tournament and kidnapped Aang. Toph decides to rescue Aang and confronts The Boulder. Now, she must face the wrath of a giant earthbending wrestler who is closing in on her.\nNo sweat! It's the perfect time for Toph to test out her new technique \u2013 the Earth Cage. Toph creates an earth cage by erecting 4 rocky walls on the 2D-plane such that they form a rectangle whose sides are parallel to the X and Y axes. However, because Toph is blind, she cannot be instantly sure if her earth cage has trapped her opponent.\nGiven The Boulder's position and the locations of the the four walls of the earth cage, determine if Toph has successfully trapped him. The Boulder will always be directly inside or outside of the walls.",
  "Output Format": "Output Yes if The Boulder is trapped, or No otherwise.",
  "Title": "Earth"
}{
  "Example": "Sample Input \n10 3\n8 7 3 8 5 5 6 3 9 3\n\nSample Output 1\n5\n\nSample Input 2\n1 1\n3\n\nSample Output 2\n6\n",
  "Input Format": "\nLine 1: Two integers N and K, respectively representing the number of total leaves and the number of leaves Aang can focus on controlling.\nLine 2: N space-separated integers s1, s2, \u2026 sN, respresenting the time it takes for each leaf to burn out without Aang's interference.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Firebending is an intense and aggressive bending art which uses concentrated barrages of fire, controlled by one's inner chi to overwhelm opponents. According to uncle Iroh, fire is the element of power. Of course, with great power comes great responsibility. Aang has just gained a new friend and firebending master, Zuko, to teach him the ways of the dragons.\nIn the past, Aang has attempted firebending on his own. However, due to a serious incident where he accidentally burned Katara, he's learned that fire is not to be toyed with. Ever since, Aang has been scared of firebending. Zuko realized what he must do \u2013 to teach Aang control. Only when Aang feels completely in control can his true training begin.\nAs an exercise, Zuko places N (1 \u2264 N \u2264 104) leaves in front of Aang. He simultaneously sets all of the leaves on fire. Aang's job must be to control the burning rate of the leaves. The leaves all start burning from the inside. The i-th leaf (1 \u2264 i \u2264 N) will spend si (1 \u2264 si \u2264 106) seconds burning before it is completely gone.\nAang is very new at this, and can only handle a certain amount of leaves at once. Throughout the entire exercise, he is currently only able to focus his chi onto at most K (1 \u2264 K \u2264 N) leaves. When Aang focuses on a leaf, the time it takes for the leaf to completely burn out will double. Aang will pick the K leaves at the beginning of the exercise and cannot switch after he's made the decision. Can you help Aang determine the time it takes for the first leaf to burn out?",
  "Output Format": "A single integer representing the number of seconds until the earliest leaf to burn out has fully burned out.",
  "Title": "Fire"
}{
  "Example": "Sample Input \n10 5 5 3 4\n50 91 24\n49 90 72 47\n\nSample Output\n1 1\n",
  "Input Format": "\nLine 1: The integers X, A, B, N, and M.\nLine 2: N integers, L1, L2, \u2026, LN, representing the strengths of the light spirits.\nLine 3: M integers, D1, D2, \u2026, DM, representing the strengths of the dark spirits.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Due to the harmonic convergence, spirits are leaking out from the spirit world. Some spirits are represented by Raava, the spirit of peace and light, so they are kind and friendly; other dark spirits are corrupted by Vaatu, the spirit of chaos and darkness, and are in turn devious and destructive.\nAvatar Korra and her uncle Unalaq are having a duel in the spirit world, where light and dark spirits are entering the spirit world through the spirit portals at the north and south poles. The spirit world can be represented as a number line segment of length X, that is, there are X (5 \u2264 X \u2264 1000) positions on the number line labeled from 1 to X. At position 1, is the spirit portal leading out to the north pole physical world, and at position X is the spirit portal leading out to the south pole of the physical world. Korra stands at position 1 and Unalaq stands at position X, deploying their spirits.\nKorra sends out one light spirit every A seconds towards Unalaq, and Unalaq sends out one dark spirit every B seconds towards Korra (1 \u2264 A, B \u2264 100). Korra has N (1 \u2264 N \u2264 1000) light spirits lined up, numbered from 1 to N. Unalaq has M (1 \u2264 M \u2264 1000) spirits lined up, numbered from 1 to M. Light spirit i has a strength of Li and dark spirit i has a strength of Di. All spirits move at a rate of 1 unit per second towards the opponent. If a light spirit every encounters a dark spirit (i.e. during the same second they occupy the same position, or they switch positions), then the stronger spirit will immediately consume the weaker spirit. If they are both equally as strong, then the dark spirit will prevail due to the impartiality of the convergence.\nAt the start, Korra and Unalaq will simultaneously deploy their first spirit (light spirit 1 and dark spirit 1, respectively) at the opposite portals. Light and dark spirits spawning will instantly appear at positions 1 and X, respectively. When a light spirit reaches position X, they will instantly exit the spirit world (unless of course, a dark spirit of greater or equal strength happens to spawn at X during that exact moment, in which case the light spirit will be consumed and not be able to exit the portal), and vice versa. Help Korra count how many light and dark spirits will reach and exit through the opposite portals after all of their spirits have been depleted.",
  "Output Format": "\nTwo space-separated integers. The first represents the number of light spirits that reaches Unalaq's portal (position X) and can exit. The second represents the number of dark spirits that reaches Korra's portal (position 1) and can exit.\n",
  "Title": "Spirits"
}{
  "Example": "Sample Input \n12\n17\n12\n\nSample Output\n5\n",
  "Explanation": "The second jar is heavier than the both the first and the third one. Therefore it must contain the fish, which weighs 17 \u2212 12 = 5.",
  "Memory Limit": "16M",
  "Input Format": "There will be 3 lines of input in no particular order. Lines 1, 2, and 3 will each contain the weight of a jar (all positive integers \u2264 100) \u2013 one of which will include the fish.",
  "Time Limit": "2.00s",
  "Description": "Waterbending is characterized by being fluid and graceful, acting in concert with the environment. Young Avatar Aang is trying to master this unique art with the help of his friend Katara. Katara gives Aang three identical jars with equal amounts of water inside to practice on. Seeing how their practice is going so well, Sokka came over to play a prank. While Aang and Katara are taking a break, Sokka places a fish in one of those jars. Since Aang had just gotten used to the original weights of the jars, Sokka postulates that the added weight will surely throw him off.\nWhat's more \u2013 the larger the fish, the more Aang will be thrown off. However, while Sokka was snickering to himself about how brilliant the prank was, he accidentally mixed up the jars. Now, given the weights of the jars, he would like to how much fish weighs so he can know just how much Aang will screw up.",
  "Output Format": "Output a single line containing a single integer \u2013 the weight of the fish.",
  "Title": "Water"
}{
  "Example": "Sample Input \n1 1000000007\n1000000000 1000000000\n\nSample Output 2\n49\n",
  "Explanation 1": "Brap Lesh Mafia collects 71 candies total. Split amongst 12, there are 11 candies left over for Rex.",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line of input will contain the integers: N, K (1 \u2264 N \u2264 10000; 1 \u2264 K \u2264 1000000009).\nN lines of input will follow. The i-th of these lines will contain values ai and bi (0 \u2264 ai \u2264 109; 0 \u2264 bi \u2264 109) of house i (for 1 \u2264 i \u2264 N).\n",
  "Time Limit": "2.00s",
  "Description": "The Brap Lesh Mafia is an organization that collects candy from unsuspecting neighborhoods during Halloween.\nThere are N houses that the Brap Lesh Mafia will target on Halloween. The i-th house will give out ai units of candy each time it receives a visitor, and will be visited bi times by members of the Brap Lesh Mafia.\nThere are K members in the Brap Lesh Mafia. At the end of the day, the total amount of candy is divided evenly amongst its members such that each member receives the same amount of candy as any other member, and each member receives as much candy as possible. The leftover candy is fed to their pet dog, Rex.\nDetermine the amount of candy Rex will receive.",
  "Output Format": "Output a single integer, the number of units of candy that Rex will receive.",
  "Title": "Brap Lesh Mafia"
}{
  "Example": "Sample Input \n6 5 3\n1 3 4 5\n1 1 6 1\n2 2 3 3\n5\n2 1 2 2\n5 2 6 5\n2 4 2 4\n3 1 4 2\n2 1 4 4",
  "Explanation": "Just look at the diagram above and add up the numbers in each rectangle.",
  "Memory Limit": "1024M",
  "Input Format": "Line 1: N, M, K\nNext K lines: xi,\nyi, Xi, Yi\nNext line: Q\nNext Q lines: Ai, Bi,\nCi, Di",
  "Time Limit": "10.00s",
  "Description": "At the end of a tasty meal, Capba just wants some tasty dessert. Today, his\ncafeteria is serving a rectangular cake, with a coordinate system carved on its\ndelicious graham cracker crust base. The cake can be thought of as a 2D grid of\nsquares, with square (1,1) at the bottom-left, and (N,M)\nat the top-right (1 \u2264 N, M \u2264 5000).\nThe cake also has K (0 \u2264 K \u2264 200000)\ndifferent icings on it, numbered from 1 to K, which have been applied\nin a strange fashion. Icing i covers all squares in the rectangle\nfrom (xi,yi) to\n(Xi,Yi) (1 \u2264\nxi, Xi \u2264 N, 1 \u2264\nyi, Yi \u2264\nM), inclusive, with 1 cubic centimeter (1 cm3) of icing\neach. If icings overlap, there will be squares with multiple layers of icing\non them; for example, some of the squares in the sample input below are\ncovered by 2 cm3 of icing. \nCapba likes icing... but then, he also doesn't like too much icing. He\nconsiders Q (1 \u2264 Q \u2264 200000) choices,\nnumbered from 1 to Q, regarding which part of the cake to eat. Choice\ni involves cutting out and rapidly consuming the rectangle from\n(Ai,Bi) to\n(Ci,Di) (1 \u2264\nAi \u2264 Ci \u2264 N,\n1 \u2264 Bi \u2264 Di \u2264\nM), inclusive.\nTo decide on the best choice, he first wants to know how much icing is\npresent in each potential piece of cake.",
  "Output Format": "Q lines. Line i should contain the amount of icing\npresent on the piece of cake described by choice i, in\ncm3.\nNote: The answers may overflow 32-bit integers.",
  "Title": "The Cake is a Dessert"
}{
  "Example": "Sample Input \n3\n135 75 200\n\nSample Output\n6\n8\n3\n",
  "Explanation": "\n1356 = 59.\n758 = 61.\n2003 = 18.\nThe numbers 59, 61, and 18 are all relatively prime, so this is a valid solution.\n",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 contains the integer N, specifying the number of integers to follow.\nLine 2 will contain the positive integers a1, a2, \u2026, aN, each no more than 9 digits long. However, the base of each numbers will be unknown. All numbers will be given in base between 2 and 10, inclusive.\n",
  "Time Limit": "2.00s",
  "Description": "It's raining tonight, so your trick-or-treating night has already gone off to a bad start. To make it worse, you've accidentally stumbled upon the house of Mr. Chan, your math teacher. He holds out a bucket of uncooked white rice to offer to you. You take a look and think \"beats me, I'm asian so I ain't even mad.\" Just as you are about to reach out and grab a handful, Mr. Chan retracts the bucket and says \"Not so fast! You have to solve my puzzle first.\"\nOn a sticky note, Mr. Chan gives you a list of N (1 \u2264 N \u2264 10) positive integers a1, a2, \u2026, aN. He tells you that all N integers are relatively prime with respect to each other. Two integers are considered relatively prime if their greatest common divisor is 1. You examine the list and say \"wait a minute, these numbers aren't relatively prime!\" He widened his grin, and said \"Ahh, but they are. I simply didn't tell you what bases they're given in! Now it's your job to tell me what bases each number could be in.\"",
  "Output Format": "\nThe output should contain N lines. Line i should contain a single integer between 2 and 10, specifying the base that you think the number is represented in. Assuming your set of bases is correct, for any pair of numbers (after they are converted from your bases to base-10) should be relatively prime.\nIt is guaranteed that a solution will exist. If multiple valid solutions exist, you may output any one.\n",
  "Title": "Stingy Candyman"
}{
  "Title": "Cat Girls",
  "Example": "Sample Input \n8 5\nA 3 10\nA 4 15\nD\nA 2 9\nA 1 10\nA 4 15\nD\nA 6 1000\n\nSample Output 1\n10\n15\n19\n19\n25\n19\n\nSample Input 2\n5 100\nA 100 10000\nA 14 28\nA 88 166\nA 75 39\nA 1 1000\n\nSample Output 2\n10000\n10000\n10000\n10000\n10000\n",
  "Input Format": "The first line of input will have N (1 \u2264 N \u2264 500000), the number of events, and W (1 \u2264 W \u2264 5\u00d71014), your camera's field of view, separated by a single space. The next N lines will be in one of the following forms:\nA pi ci: A cat-girl arrives at the right side of the line with pose width pi and cuteness ci. You should output the maximum cuteness of the best picture you can take at this point in time.\nD: Sadly, a cat-girl departs from the right side of the line. Don't worry, she'll surely visit again soon! You can be sure that the line will not be empty when this event happens.\nAt least 25% of the test cases will have 1 \u2264 N \u2264 10000.",
  "Memory Limit": "256M",
  "Time Limit": "3.00s",
  "Description": "This morning, you woke up and realized that some cats have turned into girls! In light of this exciting event, you have collected a large quantity of catnip to attract girls to your home (it's not as sketchy as it sounds).There, you plan to... take pictures of them while they are in a line. Don't worry, these are harmless pictures! However, your camera is quite small, and you may not be able to capture all of the cat-girls in a single photo. Your camera can only capture a contiguous subsequence of cat-girls in their line-up. Additionally, cat-girls keep showing up during the photo shoot! Even though this is a happy event, it troubles you because you always want to take the best picture you can with the available cat-girls. To complicate things further, some cat-girls want to nap so they leave the photo shoot. Fortunately, you have the cat-girls line up in a line in such a way that cat-girls only arrive and depart from the right end of the line.\nYour camera's field of view is W units wide. Each cat-girl has two attributes: pi and ci. pi (1 \u2264 pi \u2264 109) represents the width of the pose the cat-girl is making, in the same units as the field of view of your camera. ci (1 \u2264 ci \u2264 109) represents the cuteness of the cat-girl.\n\nThe cuteness of a picture is the sum of cuteness values of the cat-girls whose full poses are captured in the picture. To satisfy your desires, you write a program to calculate the maximum cuteness you can capture in a photo after each cat-girl arrives. Initially, there are no cat-girls in the line (but don't worry, we assure you that at least one will come!).",
  "Output Format": "After each cat-girl's arrival, output the maximum cuteness you can take a photo of.",
  "Explanation for Sample 2": "The first cat girl is simply too cute for the others to compete with! Now you have 5 photos of her.\n"
}{
  "Title": "Dog Girls",
  "Example": "Sample Input \nabbccbba\n\nSample Output 2\n2\n",
  "Input Format": "\nThe first and only line will have S, the sequence of letters the dog-girl mumbled (1 \u2264 |S| \u2264 5000).\nAt least 10% of the test cases will have 1 \u2264 |S| \u2264 100.\nAnother 15% of the test cases will have 1 \u2264 |S| \u2264 400.\nAnother 25% of the test cases will have 1 \u2264 |S| \u2264 1000.\nAnother 20% of the test cases will have 1 \u2264 |S| \u2264 3000.\n",
  "Memory Limit": "256M",
  "Time Limit": "3.00s",
  "Explanation for Sample 2": "The magic words are bb and cc.\n",
  "Description": "This morning, you woke up and realized that some dogs have turned into girls! In light of this exciting event, you immediately put on your wizard robes and walk outside, as everybody knows that dog-girls are magic users. Sure enough, one such sorceress is casting a spell on the street, and struck by awe, you gaze at her intently (so you can see what spell she's casting, of course).\nFor a dog-girl to use cast a spell, she must speak a magic word (which uniquely corresponds to that spell). A word S is magic if and only if |S| \u2265 2 and you can rotate it left by at least one but less than |S| positions such that the rotated word forms the original word. More formally, a word S is magic if and only if there exists an index i (0 < i < |S|) such that Si + j(mod|S|) = Sj (0 \u2264 j < |S|) (the first letter of S is at index 0).\nYou hear the sorceress dog-girl mumble a long sequence of lowercase English letters, and you wonder what spell(s) she cast just now. Because you could not discern where the words began and end when she spoke, you will have to settle for finding out how many distinct spells she could have cast.",
  "Output Format": "The first and only line of output should contain the number of distinct substrings of S that are magic words.",
  "Explanation for Sample 1": "The whole string is a magic word abracadabracad. Additionally, no proper substring of abracadabracad is a magic word."
}{
  "Example": "Sample Input \n2\n3\n1 2 5\n5 2 0\n5\n1 10 100 1000 10000\n1 3 7 1 9\n\nSample Output:\n9\n91731\n",
  "Memory Limit": "256M",
  "Output Format:": "\nThe output should have F integers on separate lines, each integer representing the amount of material which must be transported to each factory.\n",
  "Time Limit": "2.00s",
  "Input Format:": "\nLine 1: F, the number of factories\nEach case consists of 3 lines:\nAn integer N, the number of different sizes produced at the factory\nThe integers a1, a2, \u2026 an, each representing a different size.\nThe integers  b1, b2, \u2026 bn, each representing the number of orders for size ai.\nAll integers provided as input will be between 0 and 10000, inclusive.\n\n",
  "Description": "\nFor a living, Bincent runs a company which produces snacks. One of his most popular products are Billows\u2122, for which he constantly receives custom orders.\n\n\nUsually, the accountants he employs around the country are responsible for processing custom orders. However, the Accountants' Committee for Safe Labour (ACSL) has initiated a country-wide strike. As a result, Bincent must personally review the orders placed to each factory, and calculate the amount of material that each factory requires to complete all orders.\n\n\nConveniently, each size is defined by the amount of material required. Can you help Bincent find the amount of material required at each factory?\n",
  "Title": "Bincent's Billows"
}{
  "Example": "Sample Input \n1\nEEECOOOOOO\n\nSample Output:\nEducational Educational Educational Computing Organization of Ontario Organization of Ontario Organization of Ontario\n",
  "Memory Limit": "256M",
  "Output Format:": "\nThe output should be T lines, each with the corresponding full name to the acronym. \n",
  "Time Limit": "2.00s",
  "Input Format:": "\nLine 1 will have integer T, the number of test cases. The next T lines will have one string each. The input string will have less than 1000 characters. It is guaranteed that the acronym will be valid.\n",
  "Description": "\nThe Educational Computing Organization of Ontario (ECOO) is a prestigious committee who study computer science. The Educational Educational Computing Organization of Ontario Organization of Ontario (EECOOOO) is a prestigious committee who study Educational Computing Organization of Ontario science. The Educational Educational Educational Computing Organization of Ontario Organization of Ontario Organization of Ontario (EEECOOOOOO) is a prestigious committee who study Educational Educational Computing Organization of Ontario Organization of Ontario science. \n\n\nAcronyms for these organizations follow a certain pattern. Organization names contain the string \u201cEducational \u201c repeated several times, then the string \u201cComputing\u201d, followed by the string \u201c Organization of Ontario\u201c. Similarly, acronyms follow the pattern \u201cE\u201d, repeated, then \u201cC\u201d, followed by \u201cOO\u201d. Given an acronym, output the corresponding string.\n",
  "Title": "Educational Educational Computing Organization of Ontario Organization of Ontario"
}{
  "Example": "Sample Input \n3\n4\n10 10 10\n-5 -5 -5\n0 0 -1\n1 1 1\n6\n-1 0 0\n1 0 0\n0 -1 0\n0 1 0\n0 0 -1\n0 0 1\n3\n1 1 1\n1 1 1\n1 1 1\n\nSample Output:\n3\n6\n1\n",
  "Memory Limit": "256M",
  "Output Format:": "\nFor each case, output the number of shadows that can be hit on a separate line. \n",
  "Time Limit": "2.00s",
  "Input Format:": "\nLine 1: T, the number of test cases\nEach case consists of the following:\nAn integer N, the number of shadows. \nN lines, each with 3 integers x, y, z, between -1000 to 1000, representing one shadow. No shadow will be located at point (0, 0, 0). \n",
  "Description": "\nKanade was not really satisfied with last year\u2019s scores on the problem \u201cShattering Shadows\u201d. Specifically, no one solved it! Thus, she decided to torture the students who failed it by giving them the exact same problem but in three dimensions. \n\n\nThere are N(1 \u2264 N \u2264 100000) shadows, represented by points,  on a 3-dimensional coordinate plane. Kanade is located at the origin (0, 0, 0) and can shoot an arrow in any direction. However, some shadows might be blocked by other shadows, which Kanade is not able to hit. Count how many shadows Kanade can shoot.\n\nFor 90% of cases, N is at most 1000.",
  "Title": "Shattering Shadows 2"
}{
  "Example": "Sample Input \n3\n4 6 \nToronto \nBoston \nMiami\nOrlando\nToronto Boston 1\nBoston Orlando 4\nToronto Orlando 5\nToronto Chicago 8\nMiami Chicago 3\nBoston Chicago 1\n1 1\nLondon\nToronto Newcastle-Upon-Tyne 1000\n6 15 \nVancouver\nThunderBay\nWaterloo\nYellowknife\nEdmonton\nCalgary\nToronto Calgary 223\nSudbury Iqaluit 507\nMontreal Yellowknife 624\nWinnipeg Montreal 340\nThunderBay Waterloo 640\nThunderBay Winnipeg 330\nIqaluit Edmonton 667\nMontreal Ottawa 784\nSudbury Ottawa 202\nWindsor Vancouver 777\nMontreal St.John's 484\nLondon Yellowknife 661\nOttawa Windsor 201\nSudbury Toronto 42\nLondon Quebec 724\n\nSample Output:\n18\n-1\n10674\n\n\nTo complete the first test case most optimally: \nBen Chau stays in Toronto for the first competition (+0). He flies directly to Boston. (+1). Flies Boston ? Chicago ? Miami for the third competition (+4). Flies Miami ? Chicago ? Boston ? Orlando for the last competition (+8). He takes the direct flight back to Toronto (+5). \n0 + 1 + 4 + 8 + 5 = 18\nBen Chau cannot reach London in the second case, so it is impossible.\n",
  "Memory Limit": "256M",
  "Output Format:": "\nFor each test case, output one integer: the minimal cost for Ben Chau to visit all programming competitions. Output -1 if is impossible for Ben Chau to visit all competitions. \n",
  "Time Limit": "2.00s",
  "Input Format:": "\nT (1 \u2264 T \u2264 10), followed by T test cases. Each case consists of the following: \nM (1 \u2264 M \u2264 30), K (1 \u2264 K \u2264 500)\nFor the next M lines:\nFor each host city i, the name, Si (No more than 50 characters long, no spaces).\nFor the next K lines:\nFor each flight f, the two connected cities, Af, Bf, and the cost, integer Cf (1  \u2264 Cf \u2264 1 000).\n",
  "Description": "\nThis year, the organizers for the IOIO or International Olympiad in Informatics of Ontario, the council known by their clever acronym OIOIO, Organization for International Olympiad in Informatics of Ontario, has decided to add a bit of spice to the programming competitions this year. \n\n\nFor this year's programming circuit, there will be M (1 \u2264 M \u2264 30) international host cities, each hosting exactly one programming event. Each city, i, will be identified by its single non-space separated name, Si, and will host a tournament for this year's circuit. Cities are inputted by order of their competition, with the first happening before the second.\n\n\nAll competitors will visit all host cities to participate in all competitions, flying to each host city after the other following the order of their tournaments. There are K (1 \u2264 K \u2264 500) number of flights available. Each flight, f, will connect cities Af and Bf with a cost of Cf (1  \u2264 Cf \u2264 1 000), meaning competitors can travel bidirectionally from A to B, B to A for Cf. Flights may connect cities that are not host cities, but must nonetheless be considered in travel plans, for connecting flights are possible. At most one flight will exist between any two cities. The total number of cities with flights is guaranteed to be at most 50.\n\n\nYour task is to help out Ben Chau, an aspiring programmer who wishes to complete this year's circuit. Ben Chau will begin this year's circuit in Toronto. What is the minimal cost for Ben Chau to attend the programming competitions in all M host cities with K available flights? The cost is the sum of all his flight costs, including the final trip back to Toronto. \n",
  "Title": "IOI tour"
}{
  "Example": "Sample Input \n5\n\nSample Output\n4\n1 2 3 5\n",
  "Input Format": "A single integer X (1 \u2264 X \u2264 100), the type of toy that Santa wants to produce.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "As we all know, toys are mass-produced at the North Pole every year. Mass-production everywhere in the world (yes, even at the North Pole!) depends heavily on the assembly line. The North Pole production line for toys is much more extraordinary than normal ones found in a typical factory. For one, they are run by Santa's elves instead of humans. But more importantly, the way that toys are built is much different. In a typical assembly line, workers are at their own stations and a bunch of steps are done to intermediate semi-finished parts until a final product is reached.\nAt the North Pole, toys are made just a tad more magically than your average automobile. Since toys are made up of a bunch of parts, technically, one toy can also be considered a \"part\" if it is used later in the making of another toy. It's not important to distinguish between toys and parts for the purposes of this problem \u2013 Santa just wants to get things done! To eliminate confusion, we shall refer to toys and parts simply as \"units\". There are N stations (numbered from 1 to N) in the North Pole assembly line. Each station is meant to continuously produce an unlimited amount of a particular type of unit. Specifically, station i produces type-Ti units.\nStation one produces elementary units (type-1 units), so T1 = 1. From thereon, a station i can only produce a unit of type-Ti if Ti is a sum of the unit types of exactly two (not necessarily unique) stations that come before it. Therefore, just like a typical assembly line, the type of unit produced at a station depends on the stations before it.\nFor example, a valid sequence of production types is  1, 2, 3, and 5. The elf at station two can make type-2 units because it can take two of station one's units and put them together (1 + 1). The elf at station three can make type-3 units because it can take one of station one's units and one of station two's units (1 + 2). The elf at station four can make type-5 units because it can put together one of station two's units and one of station three's units (2 + 3).\nSanta wants to make type-X toys. Moreover, he wants the assembly line for creating the toy to be as compact as possible, so toy production rates can be maximized. You must help him determine the shortest possible production line for producing this type of toy.",
  "Output Format": "\nLine 1 should contain a single integer N specifying the length of the shortest possible production line that produces the specified toy.\nLine 2 should contain N space-separated integers, the values of T1, T2, \u2026, TN, representing the types of units being produced in each assembly line station.\n",
  "Title": "Assembly Elves"
}{
  "Example": "Sample Input \n6 1\n1 2\n2 4\n2 5\n2 6\n1 3\n\nSample Output 1\n2\n\nExplanation for Sample Input 1\nThe cities and roads are laid out like the following: Esdeath's army only consists of 1 soldier, and placing that solider at either city 1 or city 2 will result in every city being at most 2 roads away.\nSample Input 2\n10 3\n5 3\n3 10\n9 1\n2 1\n1 5\n7 10\n6 7\n7 8\n8 4\n\nSample Output 2\n2\n",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "Esdeath is excited \u2014 she has information that Tatsumi will be appearing today in one of N cities, conveniently labeled from 1 to N. The Prime Minister (Esdeath's boss) does not care much for the citizens, so there are only N\u22121 bidirectional roads connecting the cities, and all cities are connected to every other city by just one path. Because Esdeath does not want Tatsumi to escape unnoticed, she has brought her army in to wait for him. Esdeath's army has S soldiers, and she would like to station the soldiers at S of the N cities such that no matter which city Tatsumi appears in, the minimum distance from any soldier to Tatsumi will be no greater than D roads. As one of Esdeath's pets, you'll be rewarded if you can help her find the minimum value of D \u2014 so do so, and quickly!",
  "Output": "Output the minimum possible value of D.",
  "Title": "Esdeath",
  "Input": "The first line of input has 2 integers, N and S (1 \u2264 S \u2264 N \u2264 5000), the number of cities and the number of soldiers in Esdeath's army, respectively. Each of the next N\u22121 lines contain two integers ui and vi, representing a bidirectional road between cities ui and vi.\n\n\nThe following additional constraints will apply.\nAt least 15% of the marks will be for test cases where N \u2264 100 and S = 1;\nAt least 30% of the marks will be for test cases where N \u2264 100 and S \u2264 10;\nAt least 50% of the marks will be for test cases where N \u2264 250 and S \u2264 N;\nThe remaining marks will be for test cases where N \u2264 5000 and S \u2264 N."
}{
  "Example": "Sample Input \n4\n100 23 23 24\n2 3 1 1\n\nSample Output 2\n47\n",
  "Explanation 1": "By taking 20 minutes to watch the first anime, Izuna will definitely watch the other two anime due to the recommendations.",
  "Memory Limit": "256M",
  "Input Format": "\nThe first line of input will have N (2 \u2264 N \u2264 100000), the number of anime in your list, numbered from 1 to N.\nThe second line of input will have N space-separated integers, the time it takes in minutes to watch the i-th anime (1 \u2264 timei \u2264 109).\nThe third line of input will have N space-separated integers, meaning that you recommend the i-th anime if Izuna watched the anime with the i-th number in this list at your house, and vice versa (1 \u2264 recommendationi \u2264 N, recommendationi \u2260 i).\n\n\nTest cases worth 25% of the marks will have 2 \u2264 N \u2264 20.\nTest cases worth another 25% of the marks will have 2 \u2264 N \u2264 5000.\nOf the aforementioned cases, 50% of those will have timei = 1 (1 \u2264 i \u2264 N).\n",
  "Time Limit": "2.00s",
  "Description": "This morning, you woke up and realized that some foxen have turned into girls! In light of this exciting event, you have kindly invited Izuna, a fox-girl, over to your house (with only pure intentions, of course). You have some anime that you want to share with Izuna, but your list of anime is very long. Therefore, you will adopt the strategy of watching some anime with Izuna while she's at your house, and then leaving with her a list of recommendations.\nFor each anime in your list, you will recommend to Izuna another anime from that if she has watched one at your house, she should definitely watch the other sometime later. Being an obedient fox-girl, Izuna will always follow your recommendations.\nOf course, you have to start watching some anime with Izuna at your house in order for her to follow all the recommendations and eventually watch them all, but since you are short on time, you need to determine the minimum number of minutes you spend watching anime at your house before Izuna can follow some of the recommendations and eventually watch all the anime in the list.",
  "Output Format": "The first and only line of output should be the minimal number of minutes spent watching anime so that Izuna will eventually finish watching all the anime on your list.",
  "Explanation 2": "Although watching just the first anime is enough for Izuna to watch the rest of the anime on her own, that will take 100 minutes. It is much more efficient to watch the fourth anime and either the second or third anime at your house for a total of 47 minutes.\n",
  "Title": "Fox Girls"
}{
  "Example": "Sample Input \n5 10 3 2\n4 1\n5 10\n2 10\n2 5 4 2\n5 5 1 10\n1 6\n\nSample Output\n12\n",
  "Explanation": "The map of the world is as follows. There are 3 houses (represented by the characters 1 through 3) and 2 wormholes (we'll call these A and B, where their destinations are marked in the corresponding lowercase). N represents the North Pole. \n.....N...b\n....A....3\n..........\n1a........\n....B....2\n\n\nTo get from the North Pole to house 1, Santa's path is: down \u2192 left through wormhole A \u2192 left onto house 1. (3 steps)\nTo get from house 1 to house 2, Santa's path is: left (this wraps him back around from the right side of the map) \u2192 down onto house 2. (2 steps)\nTo get from house 2 to house 3, Santa's path is: down (this wraps him back up to the destination of wormhole B. However, since b is only a destination, nothing happens) \u2192 down onto house 3 (2 steps)\nTo get from house 3 back to the North Pole, Santa's path can be: left \u2192 left \u2192 left \u2192 left \u2192 up. (5 steps)\nTherefore, the total distance is 3 + 2 + 2 + 5 = 12.\n",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 contains the integers R, C, N, and M.\nThe next N lines will describe the coordinates of the houses. Namely, the i-th of these lines (for 1 \u2264 i \u2264 N) will contain a pair of integers describing the row and column of house i.\nThe next M lines will describe the locations and destinations of the wormholes. Namely, the i-th of these lines (for 1 \u2264 i \u2264 M) will contain four integers r1, c1, r2, c2. This means that wormhole i is located at (r1, c1), and going into it will teleport Santa to (r2, c2).\nThe last line of input will contain two space-separated integers SR and SC, representing the coordinates of the North Pole.\n",
  "Time Limit": "2.00s",
  "Description": "Some people are curious of how Santa is always able to deliver all of his presents on time on Christmas Eve. Just how is it possible that St. Nick can travel such great distances across the world to deliver billions of presents? Well, the reality is that there will always be skeptics, doubters, and cynics. What these people don't know is that Santa was once the world's most ingenious relative physicist. After St. Dr. Nicholas finalized his study of using wormholes in the space-time continuum to time travel/teleport, he concluded that the world was most certainly not ready for his findings. Instead of publishing it, he ultimately decided to keep the momentous discovery to himself and use it for good \u2014 that is, delivering Christmas joy to every girl and boy!\nEvery Christmas Eve, Santa plans his route on a map of the world. For the sake of simplicity, the world can be thought of as an R by C (1 \u2264 R, C \u2264 50) two-dimensional grid. The top-left cell of the grid is denoted by coordinates (1, 1) and the bottom-right cell of the grid is denoted by coordinates (R, C). There are N houses at distinct locations on the grid, which Santa has numbered from 1 to N. Santa's packed the gifts in his bag in a specific way. Since there are so many gifts, he can't be digging through his giant bag to find a particular gift whenever he arrives at houses. That'll take too long. Instead he has a preplanned order to visit the house in based on how his bag is packed.\nSanta starts at the North Pole, located at coordinates (SR, SC). At any given time, Santa may fly to the cell above, below, left, or right of his current location. Remember that the Earth is a sphere, and the map is just a 2D representation, so flying off the border of the map is allowed! It just means that Santa will wrap back around from the other side of the map. For example, if he is located at (1, 1) and he travels left, he will arrive at (1, C). Or, if he is located at (R, C) and he travels right, he will end up at (R, 1).\nFrom his research, Santa also knows the secret locations of M wormholes (numbered from 1 to M) that will each take him from the location of the wormhole (guaranteed not to be a house or the North Pole) to another given place in the world. Any given cell on the grid is either a house, a wormhole opening, or neither. When he flies into a wormhole, he will be instantly teleported to whatever location the wormhole points to (this may be a house or an empty cell, but not another wormhole). Being teleported by a wormhole does not count towards Santa's distance traveled. Santa may fly over a house, even if it's not the house he's currently trying to deliver to.\nNow, your tasks is to determine the shortest number of units that Santa will need to travel to deliver gifts to all houses in the order he has specified, and then return to the North Pole.",
  "Output Format": "The output should contain a single integer representing the length of shortest path it takes for Santa to travel to all N houses in the specified order and return to the North Pole.",
  "Title": "Gift Delivery"
}{
  "Example": "Sample Input \n5 8\n01000100\n01000100\n00100111\n00100110\n00100000\n4\n1 2\n3 5\n3 4\n2 2\n\nSample Output\n16\n15\n10\n8\n",
  "Explanation": "For the first pair of rows, (1, 2), Kirito could use \u00abStarburst Stream\u00bb on the entirety of both rows (16 monsters).\n01000100\n01000100\n\nThe configuration is effectively unchanged, because those rows had the same types monsters in the same positions.For the second pair of rows, (3, 5), Kirito could use \u00abStarburst Stream\u00bb on a 5 by 3 rectangle (15 monsters).\n00100\n00100\n00100\n\nThe configuration changes to:\n01000100\n01000100\n00100000\n00100110\n00100111\n\nFor the third pair of rows, (3, 4), Kirito could use \u00abStarburst Stream\u00bb on a 5 by 2 rectangle (10 monsters).\n00100\n00100\n\nThe configuration changes to:\n01000100\n01000100\n00100110\n00100000\n00100111\n\nFor the last pair of rows, (2, 2), Kirito could use \u00abStarburst Stream\u00bb on the whole row (8 monsters). If there were more queries, this would not change the configuration.",
  "Memory Limit": "256M",
  "Time Limit": "4.00s",
  "Description": "Kirito is facing a large field of N rows by M columns of monsters to the east. Each monster is either powerful or weak. Things may look grim for the Black Swordsman, but luckily he has the powerful skill \u00abStarburst Stream\u00bb \u2014 a skill that can instantly kill a rectangle of monsters. However, there is a restriction \u2014 Kirito can only use this skill if all monsters in every column of the attack rectangle are all either powerful or weak. Also, since Kirito is on the western side of the field of monsters, one of the sides of the rectangle must be on the first column.\nKirito is watching the monsters for Q minutes. Every minute, two rows i and j catches his eye, and he wants to know the largest number of monsters he can kill if he uses \u00abStarburst Stream\u00bb on an attack rectangle that has its top side on row i, its bottom side on row j, and its left side on column 1. These are merely queries, and Kirito does not actually kill the monsters in that rectangle. Help Kirito find the answer to his query for every pair of rows i and j. Additionally, once Kirito learns of the answer, the monsters in rows i and j feel uneasy because of a mysterious killing intent, and so will switch places one-for-one (i.e. the rows are swapped). You should consider the new configuration of monsters for subsequent queries.",
  "Output": "For each of the Q pairs of rows in the input, output a single integer on a line: the largest number of monsters Kirito could kill while satisfying the constraints as described above, or 0 if Kirito cannot use the skill \u00abStarburst Stream\u00bb.",
  "Title": "Kirito",
  "Input": "The first line of input has two integers, N (1 \u2264 N \u2264 2000), the number of rows of monsters, and M (1 \u2264 M \u2264 5000), the number of columns of monsters.The next N lines will contain M characters each, each of which is either 0, to denote a weak monster or 1, to denote a powerful monster.The next line of input has one integer, Q (1 \u2264 Q \u2264 50000), the number of minutes Kirito is observing.The next Q lines each contain a pair of integers, i and j (1 \u2264 i \u2264 j \u2264 N), the pair of rows that catch Kirito's interest.\nThe following additional constraints will apply.\nAt least 5% of the marks will be for test cases where N \u2264 100, M \u2264 100, and Q \u2264 100;\nAt least 25% of the marks will be for test cases where N \u2264 2000, M \u2264 2000, and Q \u2264 20000;\nThe remaining marks will be for test cases where N \u2264 2000, M \u2264 5000, and Q \u2264 50000.\nWarning: Be careful when reading the input, which may exceed 10 megabytes."
}{
  "Example": "Sample Input \n1201\nSample Output\n64",
  "Explanation": "The following answers are possible:\n1+2+0+1 = 4\n1+2+01  = 4\n12+0+1  = 13\n12+01   = 13\n1+20+1  = 22\n120+1   = 121\n1+201   = 202\n1201    = 1201\nThere are 6 different answers above, and the lowest one appearing twice is 4.",
  "Memory Limit": "1024M",
  "Input Format": "One line containing up to 13 non-space-separated digits.\nNote: In Free Pascal, the int64 type can be used to store\n13-digit numbers.",
  "Time Limit": "2.00s",
  "Description": "Capba is wracking his brain over a particularly challenging programming\nproblem: given several integers on a line, find their sum. Difficult as that is,\nCapba has found that the problem creator forgot to put any spaces in the input!\nLuckily, though, he has gotten his hands on the official input file.\nAt this point, Capba is interested in two things. Firstly, to determine his\nchances of being correct, he wants to know how many different answers are\npossible. Secondly, to make his attempt at an accepted solution, he wants to\nfind the most probable answer \u2014 that is, the one which can be obtained by\nadding space in the largest number of ways. If there are multiple such answers,\nhe's only interested in the lowest one (to save energy on typing).",
  "Output Format": "One line containing two non-space-separated integers: the number of different\npossible answers, followed by the lowest most probable answer.",
  "Title": "Non-space-separated"
}{
  "Example": "Sample Input \n5 2\n\nSample Output 2\n6\n",
  "Explanation 1": "Alex does not owe any candy in this case. Starting from house at index 3, Alex and Ben will both collect 53 units of candy. This is the optimal solution.",
  "Memory Limit": "16M",
  "Input Format": "There will be one line of input containing two integers N and K (0 \u2264 N \u2264 1015; 1 \u2264 K \u2264 100000).",
  "Time Limit": "2.00s",
  "Description": "Alex and Ben have found a peculiar street in their neighborhood this Halloween night.\nOn this street, houses on the left side of the street are numbered with consecutive prime numbers starting from 2, and houses on the right side of the street are numbered with consecutive composite numbers starting from 4. Each side of the street has 100000 houses. The index of a house is the position of a house from the start of the street. For example, house 3 is index 2 on the left side of the street, and house 8 is index 3 on the right side of the street. What's even more peculiar, is that each house will always give the amount of candy equal to its house number.\n        Index:  1 2 3 4  5  6  7  8  9\n Left House #:  2 3 5 7 11 13 17 19 23\nRight House #:  4 6 8 9 10 12 14 15 16\n\nAlex will trick or treat on the left side, and Ben will trick or treat from the right side. They will begin trick-or-treating at a house with the same index, and can cover a range of K houses. Alex and Ben want their final yield of candy to be as close as possible. However, because Alex has run into some trouble with the Brap Lesh Mafia, he must pay the Brap Lesh Mafia N units of candy immediately after trick-or-treating.\nDetermine the index of the house that Alex and Ben should start at such that, after Alex pays N units of candy, they finish with the minimum difference in candy.",
  "Output Format": "Output a single integer, the index of the house that Alex and Ben should start at such that they finish with the minimum difference in candy amount. If multiple solutions exist, print the smallest one.",
  "Explanation 2": "Starting at index 6, Alex will collect 13+17 = 30 pieces of candy, and Ben will collect 12 + 14 = 26 pieces of candy. After paying off his debt, Alex will have only 1 less piece of candy than Ben. This is the optimal solution.",
  "Title": "Prime Street"
}{
  "Example": "Sample Input \n3\n1 2 3\n4 5 6\n7 8 9\n2\n1 3\n2 2\nSample Output\n24\n30",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given a z by z grid of numbers and two numbers x and y. Output the sum of the numbers in row x and the sum of the numbers in column y.",
  "Output": "The sum of the numbers in row x and column y",
  "Title": "Grid Sums",
  "Input": "z, followed by the rows of the grid on separate lines. z will be less than or equal to 10.\nT, how many different sets of x and y to input\nx and y on the same line after the grid\nx,y,T\u2264100"
}{
  "Example": "Sample Input \n2\nXXXX\nOOOO\nOOOO\nOOOO\n \nXOOX\nOXXX\nXXOO\nOXOX\nSample Output\nYes\nNo",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given a grid of X's and O's, output whether or not there is a row of 4 X's in a row, either vertically, horizontally, or diagonally.",
  "Output": "Yes, if there is a row of 4 X's in a row. No, otherwise.",
  "Title": "Connect 4",
  "Input": "T, representing how many cases there are to follow.\nThen, T 4x4 grids of X's and O's\nThere will be a blank line in between each new grid."
}{
  "Example": "Input:\n\n5\ntoioynnkpheleaigshareconhtomesnlewx\n3\nttyohhieneesiaabss\n0\n\nOutput:\n\ntheresnoplacelikehomeonasnowynightx\nthisistheeasyoneab\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\n\nMo and Larry have devised a way of encrypting messages. They first decide secretly on the number of\ncolumns and write the message (letters only) down the columns, padding with extra random letters so\nas to make a rectangular array of letters. For example, if the message is \u201cThere\u2019s no place like home on\na snowy night\u201d and there are five columns, Mo would write down\nt o i o y\nh p k n n\ne l e a i\nr a h s g\ne c o n h\ns e m o t\nn l e w x\n\nNote that Mo includes only letters and writes them all in lower case. In this example, Mo used the\ncharacter \u2018x\u2019 to pad the message out to make a rectangle, although he could have used any letter.\nMo then sends the message to Larry by writing the letters in each row, alternating left-to-right and\nright-to-left. So, the above would be encrypted as\n\ntoioynnkpheleaigshareconhtomesnlewx\nYour job is to recover for Larry the original message (along with any extra padding letters) from the\nencrypted one.",
  "Output": "Each input set should generate one line of output, giving the original plaintext message, with no spaces.",
  "Title": "Encryption Grid",
  "Input": "There will be multiple input sets. Input for each set will consist of two lines. The first line will contain\nan integer in the range 2...20 indicating the number of columns used. The next line is a string of up\nto 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of\ninput."
}{
  "Example": "Sample Input \n4 3\nSample Output 1\nBetty will sweat 5mL to get to her candy cane\nSample Input 2\n4 7\nSample Output 2\nBetty will sweat 21mL to get to her candy cane",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Betty the cow loves eating candy canes. Unfortunately, she dropped her candy\ncane on a 10 \u00d7 10 grid. In her confusion, she wandered around and ended up\nat the lower left hand corner of the grid (1, 1). She also saw that there were\nsome bombs placed on the grid (see diagram below), that she must avoid. Each\nstep she takes now will make her sweat 1 mL, and her steps will always take her\nto an adjacent square on the grid. Given (x, y)\n(1 \u2264 x,y \u2264 10), the coordinates of her candy cane,\ncalculate the least amount of sweat that Betty sweats to reach her candy\ncane.",
  "Output": "",
  "Title": "Betty's Candy Cane",
  "Input": "Input contains two integers on a line separated by a space: x and\ny."
}{
  "Title": "Rabbit Girls",
  "Example": "Sample Input \n10\n5\n\nSample Output 2\n0\n",
  "Input Format": "\nThe first line of input will have a single integer N.\nThe second line of input will have a single integer K.\nAt least 50% of the test cases will have 1 \u2264 N, K \u2264 100.\n",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Explanation for Sample 2": "The number of rabbit-girls can already be evenly divided into 2 groups.\n",
  "Description": "This morning, you woke up and realized that some rabbits have turned into girls! In light of this exciting event, you have decided to play with them (play card games, that is). Before you can do that, you have to put the N (1 \u2264 N \u2264 2\u00d7109) rabbit-girls into groups of size K (1 \u2264 K \u2264 2\u00d7109). However, it's possible that you can't divide the rabbit-girls evenly \u2013 in that case, you can either look for more rabbit-girls or apologize to an existing one and then let her play on one of your virtually unlimited computers instead of participating in the group activity. Each of these actions will cost you 1 second to perform, and you can perform the first action an unlimited number of times and the second action as many times as there are currently rabbit-girls. Determine the minimum amount of time you need before you can divide the rabbit-girls (which may have increased or decreased) evenly into groups of size K (of which there must be at least one).",
  "Output Format": "The first and only line of output should be the minimum number of seconds you need to split the rabbit-girls into groups of size K in accordance with the conditions listed above.",
  "Explanation for Sample 1": "You can get either 2 or 4 rabbit-girls after 1 second, which are both evenly divisible by K = 2."
}{
  "Example": "Sample Input \n3\n1 5 6\n4 2 3\n\nSample Output\n4\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Brian the Computer Science Nerd is going on a date with his girlfriend, Anatevka! His romantic location of choice is a Chinese restaurant.\nAt this restaurant, N (1 \u2264 N \u2264 15) different dishes are available, and Brian would like to order each one exactly once. The waiter will come to his table to take orders N times - the i-th time he comes will be Wi (1 \u2264 W1 < W2 < \u2026 < WN \u2264 109) minutes after the start of the meal. He has quite a poor memory, so each time he comes by, Brian will have a chance to order exactly one new dish.\nDish i takes Ti (1 \u2264 Ti \u2264 109) minutes to prepare, which means that it will generally come exactly that many minutes after being ordered, delivered by a different waiter who will not take orders. However, meals are guaranteed to arrive in the same order in which they were ordered - this means that, if meal i was ordered before meal j, but meal j is ready before meal i, then meal j will instead arrive at the same time as meal i.\nNow, Brian considers time spent waiting for the first meal after the start of the dinner, as well as for each subsequent meal after the previous one, to be idle time. Of course, these are the worst parts of the date, as they require actually engaging in conversation rather than consuming sustenance. In order to impress Anatevka with his optimal ordering skills, he'd like to minimize the length of the largest continuous stretch of idle time throughout the dinner.",
  "Output": "1 integer, the minimal length possible for the longest stretch of idle time throughout the meal, in minutes",
  "Title": "A Romantic Dinner Outing",
  "Explanation of Sample": "Brian's optimal strategy is to order dish 3, then 2, then 1. These dishes will then arrive 4, 7, and 10 minutes into the dinner, respectively. The longest stretch of idle time is then 4 minutes long.\nAs a further example, if Brian were to order dish 3, then 1, then 2, the last 2 dishes would both arrive 9 minutes into the dinner, with dish 2 being held up by dish 1.",
  "Input": "\nLine 1: 1 integer, N\nLine 2: N integers, W1..N\nLine 3: N integers, T1..N\n"
}{
  "Example": "Sample Input \n3\n3 2\n4 1\n-20 0\n\nSample Output 2\n-3.33333\n2\n",
  "Explanation": "This asks for the solution(s) of x for the equation .",
  "Memory Limit": "16M",
  "Input Format": "Line 1 of the input contains an integer T (1 \u2264 T \u2264 101), indicating the number of terms in the polynomial.\nThe next T lines each contain a real number coefficient and a whole number exponent from 0 to 100 inclusive.\nTerms will always be collected (i.e. exponents will not be repeated) and arranged in descending powers.\n",
  "Time Limit": "2.00s",
  "Description": "Write a program that solves for the root of a univariate polynomial with a maximum degree of 100.",
  "Output Format": "In order from lowest value to highest value, every real solution for when the polynomial is equal to zero.\nYour answer must be accurate within \u00b110-5 in absolute and relative error.\nIf there are no real solutions to the equation, output \"NO REAL ROOTS\".\n\nNote: Coefficients and answers can have up to 18 digits, and will fit inside a long double.",
  "Title": "Root Solver"
}{
  "Example": "Sample Input \n      3 1 1\n      3 1 1\n      3 1 1\n2 2 2 6 3 3 4 4 4 5 5 1\n2 2 2 6 3 3 4 4 4 5 5 1\n2 2 2 6 3 3 4 4 4 5 5 1\n      5 6 6\n      5 6 6\n      5 6 6\n\nSample Output\nL",
  "Scoring": "It is known (Rokicki et al., 2010) that the exact upper bound on the\nnumber of moves required to solve any legal configuration of the Rubik's cube\nis 20. However, this requires impractical computer resources. A gentler\nsolution method using A* gives solutions within 23 moves within a reasonable\nlength of time on a desktop computer. Now, of the 25 test cases, some can be\nsolved within a small number of moves, and the minimum number required is\nknown; others were randomly-generated, and this is why any solution will be\naccepted. Thus, your score, a number between 0 and 1 inclusive, will be\ncalculated as K/N, where N is the number of\nmoves used by your solution. For the easier cases, K is the minimum\nnumber of moves required; for the harder cases, K is 23, although if\nyou get more than 1, your score is adjusted to 1.",
  "Memory Limit": "512M",
  "Input Format": "Nine lines in the format described above.",
  "Time Limit": "2.00s",
  "Description": "The Rubik's Cube is often said to be the best-selling toy of all time (given\nsuitable restrictions). Invented in 1974 by Ern\u0151 Rubik, a Hungarian\nsculptor and professor of architecture, it takes the appearance of a large cube\ndivided into 3\u00d73\u00d73 smaller cubies, three to an edge. Centre cubies\nhave one face exposed; edge cubies have two; and corner cubies have three.\nEach exposed cubie face has a sticker on it; other than this, all cubies are\nidentical. Stickers are merely coloured squares, and cannot be distinguished\nfrom 90-degree rotations of themselves. In a solved configuration of the cube,\nall stickers on a particular face have the same colour. A special internal\nmechanism takes the place of the 27th cubie inside the cube; it holds the\ncubies together and allows rotation of any of the cube's six faces. When\na face is rotated, each one of the nine cubies on that face revolves around the\ncentre (although the centre is not visibly affected), taking their stickers\nalong with them, without disturbing any of the other cubies. The overall shape\nof the cube is not changed by rotation, but the configuration of the stickers\nis changed.\nIf one holds the cube such that one of the faces is pointed directly at\noneself, it is possible to assign a notation to the faces of the cube - F for\nfront (the face directly visible), U for up, D for down, L for left, R for\nright, and B for back (the face opposite the front face). From this it is only\na small step to a notation for rotations. A 90-degree clockwise rotation is\ndenoted by the letter corresponding to the face to be rotated; a 180-degree\nrotation is denoted by the letter followed by the numeral 2; and a 90-degree\ncounterclockwise rotation is denoted by the letter followed by a single quote\n('). For example, R'D2F means to rotate the right face counterclockwise, then\nrotate the bottom face 180 degrees, then rotate the front face clockwise. Order\nis important. Any rotation, whether it is clockwise, counterclockwise, or 180\ndegrees, is considered a single face turn, often shortened to\nmove.\nIn this problem, a configuration of the Rubik's cube will be represented by\na net, such as the following:\n      1 1 1\n      1 1 1\n      1 1 1\n2 2 2 3 3 3 4 4 4 5 5 5\n2 2 2 3 3 3 4 4 4 5 5 5\n2 2 2 3 3 3 4 4 4 5 5 5\n      6 6 6\n      6 6 6\n      6 6 6\n\nEach 3\u00d73 block represents the nine stickers of a face. The actual\nconfiguration represented by this net may be determined by folding it into the\nthree-dimensional cube shape, and holding it such that the uppermost block\nforms the U face and the leftmost block forms the L face. Similarly, the centre\nblock represents the F face, the block to the right represents the R face, the\nrightmost block represents the B face, and the bottom block represents the D\nface. This configuration is solved because all the stickers on each face match.\nOn the other hand, the following configuration:\n      3 1 1\n      3 1 1\n      3 1 1\n2 2 2 6 3 3 4 4 4 5 5 1\n2 2 2 6 3 3 4 4 4 5 5 1\n2 2 2 6 3 3 4 4 4 5 5 1\n      5 6 6\n      5 6 6\n      5 6 6\n\nrequires a clockwise twist of the L face in order to restore to the solved\nconfiguration above. Note that it is not necessarily the numerals 1 to 6 used\nto denote the faces; one could just as well use the letters A to F, or perhaps\nW R B O G Y for white, red, blue, orange, green, and yellow, a popular set of\ncolours for the stickers.\nGiven a configuration of the Rubik's cube, you are to find a sequence of\nmoves that restores it to a \"solved\" configuration.",
  "Output Format": "A string on a single line in the format given, that is, matching the regular\nexpression ^([UDLRFB][2']?)*$, no longer than 10000 characters, that\ncorresponds to a sequence of moves that restores the configuration in the input\nto a solved configuration. This will always be possible.",
  "Title": "Rubik's Cube Solver"
}{
  "Example": "Sample Input \n4\nAEDF\nDGAY\nAEED\nRFND\n5\nHELLO\nFADED\nGRADED\nDEGRADED\nGRANDDADDY\n\nSample Output\nIMPOSSIBLE\n4\n6\n8\n13\n",
  "Explanation": "In the last test case to form GRANDDADDY, we take the path [2,2] \u2192 [4,1] \u2192 [3,1] \u2192 [4,3] \u2192 [4,4] \u2192 [3,4] \u2192 [2,3] \u2192 [2,1] \u2192 [1,3] \u2192 [2,4] for a distance of 2+1+2+1+1+1+2+2+1 = 13. (Fig. 1)\nThe path [2,2] \u2192 [4,1] \u2192 [3,1] \u2192 [4,3] \u2192 [2,1] \u2192 [3,1] \u2192 [2,3] \u2192 [4,4] \u2192 [3,4] \u2192 [2,4] also forms the word legally, but has a longer distance of 2+1+2+2+2+1+2+1+1 = 14. (Fig. 2)\n",
  "Memory Limit": "16M",
  "Input Format": "The first line of the input will contain the integer N (1 \u2264 N \u2264 10).\nThe next N lines with contain N uppercase characters from A-Z, denoting the Super Boggle grid.\nThe next line will contain the integer T (1 \u2264 T \u2264 100).\nThe next T lines will each contain a string of no more than 20 uppercase letters from A to Z.\nBonus: one case will have N \u2264 100 and T \u2264 10.\n",
  "Time Limit": "2.00s",
  "Description": "Boggle is your favorite childhood pastime! In Boggle, up to four players attempt to find words in sequences of adjacent letters in a scrambled 4\u00d74 grid of lettered dice. The game was fun when you were six years old, but due to your amazing algorithmically gifted brain, you realize one day that nobody was able to beat you in this game. Boggle was just no fun anymore, so you decided to invent your own version - Super Boggle!\nIn Super Boggle, players are given an arbitrarily sized grid of random letters. Then, he or she is required to follow the normal rules of Boggle to find words within the grid. However, in your version of the game, letters do not have to be adjacent to be part of the same word! As a result of this modification, players are not only scored by the length of the word they make, but also by how little the distances are between all of their letters on the grid. The specific scoring rules do not matter for now, but the word formation rules do.\nTo create a word, a player must start at a letter, jump across the board to another letter, add it to the end of the first letter and record the distance of the jump. They must repeatedly jump across the board, adding the distances together and appending those letters to the end of their word so far until they form the word they desire. The distance from any letter to an adjacent letter (horizontally, vertically or diagonally) is 1. They may jump over letter(s) they've already jumped over, but they may not reuse a letter found at the same position on the grid for their word. The goal is to create the word with the minimal total distance between all its letters.\nYou've played a few rounds, and think that you're already pretty good at your game, but out of curiousity, you want to build a program that will tell you the actual shortest distances to form specific words.",
  "Output Format": "For every word in the input after T, print on a new line the shortest distance required to form that word, or \"IMPOSSIBLE\" otherwise.",
  "Title": "Super Boggle"
}{
  "Example": "Sample Input \n5 5\n1 2 10\n5 1 2\n3 5 6\n2 4 3\n4 5 4\n6\n1 5 5\n5 12 1\n2 20 100\n3 77 100\n1 129 2\n4 136 10",
  "Explanation": "Capba starts at location 1, and is there from time 0 until time 10.\nHe then walks to location 5, arriving early for engagement 2. He remains\nthere until time 13.\nHe then walks to location 2, via location 4, arriving just on time for\nengagement 3, which lasts until time 120.\nMeanwhile, he must skip engagement 4.\nFollowing paths through locations 4 and 5, Capba can barely make it on time\nto engagement 5, which runs from time 129 to time 131.\nHowever, it takes at least 6 minutes to reach location 4 from location 1, so\nhe cannot make it to engagement 6 on time and must skip it.",
  "Memory Limit": "1024M",
  "Input Format": "Line 1: N, M\nNext M lines: Ai, Bi,\nCi\nNext line: K\nNext K lines: Li, Ti,\nDi\nAll values are integers.",
  "Time Limit": "2.00s",
  "Description": "Between attending classes, playing in rehearsals, and eating food, Capba has\nquite the busy university schedule. The campus consists of N (1 \u2264\nN \u2264 200) locations, numbered from 1 to N, with\nM (1 \u2264 M \u2264 1000) paths, numbered from 1 to\nM, running amongst them. Path i directly connects\nlocations Ai and Bi (1 \u2264\nAi, Bi \u2264 N), and takes\nCi (1 \u2264 Ci \u2264 50000)\nminutes to traverse in either direction. These paths are the only way to travel\nbetween locations.\nToday, Capba has K (1 \u2264 K \u2264 10000) engagements,\nnumbered from 1 to K. Engagement i takes place at location\nLi (1 \u2264 Li \u2264 N),\nstarting Ti minutes after the start of the day, and\nlasting Di minutes (1 \u2264 Ti,\nDi \u2264 109). Yes, it's a particularly long\nday. The engagements are numbered in increasing order of their start times, and\nno two will start at the same time.\nCapba leaves location 1 (his residence) at time zero.\nIt's possible that he won't be able to make it to\neverything, due to the lengths of the engagements as well as the travel times in\nbetween them. Capba decides that he's not feeling particularly dynamic today,\nand adopts the following strategy: Once at an engagement, he sits through it\nuntil it's over, and then he walks to the next engagement which he can make it\nto on time (or early). (He may also choose not to walk at all, if the next\nengagement's location is the same as his current location.)\nGiven Capba's busy schedule, determine which engagements he will end up\nattending.",
  "Output Format": "One per line, the numbers of the engagements which Capba will honour, in\nincreasing order.",
  "Title": "Busy Schedule"
}{
  "Example": "Sample Input \n5 10 10 20\n2\n4\n6\n8\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nSample Output\nMinimum: 550, maximum: 4100",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Modern cities often contain densely packed skyscrapers arranged neatly on a rectangular grid of streets and avenues. Skytown is no exception. The city has grown tremendously in the past few years. New skyscrapers, ever taller than previous skyscrapers, are constantly being erected with great haste. The skyscrapers have all been constructed identically, of course with the exception that some skyscrapers are taller than others. According to city regulations, each floor of a skyscraper has some minimum and maximum capacity, c and C, respectively. At least c people are required to live on a floor to ensure that the floor is utilized to its full potential. At most C people are permitted to live on a floor to prevent overcrowding.\nBecause Skytown has grown so fast, the mayor wanted to boast about the city's soaring population. The only problem is that he hasn't the faintest clue how many people live in Skytown. He has put you in charge of estimating the city's population. Of course, being a programmer, you seek a programming solution and do not want to go around the entire city asking how many people live on each floor. You come up with the following simple strategy: you will record the skyline as viewed from from both the south and the west. The skyline from the south is computed as follows: for each line of skyscrapers running north-south, the highest one in that line is recorded.\nGiven this data, compute the minimum and maximum number of people that could be living Skytown.",
  "Output": "The output contains the minimum and maximum number of people that could be living in Skytown. Both numbers are guaranteed to fit in a 32-bit signed integer. If the two skylines specified in the input are consistent, that is, cannot possibly describe a possible configuration of skyscrapers, print \"Impossible\" on a single line.",
  "Title": "Skyscrapers",
  "Input": "The first line contains four integers, M (1 \u2264 M \u2264 100,000), N (1 \u2264 N \u2264 100,000), c (0 \u2264 c \u2264 500), and C (c \u2264 C \u2264 500), where M is the dimension of the grid in the north-south direction, N is the dimension of the grid in the east-west direction, c and C are the minimum and maximum number of people allowed per floor.\nEach of the next M lines contains exactly one integer in [0, 20000]. Together, they specify the western skyline. After this, the next N lines specify the southern skyline in the same way."
}{
  "Example": "Sample Input \n1\n3\n\nSample Output\n          |\n       \\  |  /\n        \\ | /\n         \\|/\n       XXXXXXX\n      X       X\n     X  O   O  X\n    X     V     X\nW   X  X     X  X\n \\   X  XXXXX  X\n  \\   X       X\n   \\   XXXXXXX\n    \\ X       X---\n     X    O    X  \\\n    X           X  \\\n     XXXXXXXXXXX    \\\n      OOOO OOOO      M\n      OOOO OOOO\n\n           |\n        \\  |  /\n         \\ | /\n          \\|/\n        XXXXXXX\n       X       X\n      X  O   O  X\n     X     V     X\n W   X  X     X  X\n  \\   X  XXXXX  X\n   \\   X       X\n    \\   XXXXXXX\n     \\ X       X---\n      X    O    X  \\\n     X           X  \\\n      XXXXXXXXXXX    \\\n      X         X     M\n     X     O     X\n    X      O      X\n   X               X\n    XXXXXXXXXXXXXXX\n    X             X\n   X       O       X\n  X        O        X\n X         O         X\nX                     X\n XXXXXXXXXXXXXXXXXXXXX\n       OOOO OOOO\n       OOOO OOOO\n",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "Anna is trying to get Elsa to come outside and play with her. She reminisces about the days where they used to build their childhood snowman named Olaf (who happens to love warm hugs). Unfortunately, Elsa is too stubborn to come out and play, so you will have to help Anna build Olaf yourself!\n\nOlaf has three twigs on top of his head. He has two circular eyes, a carrot nose, and two arms made from sticks. The following is a depiction of Olaf:\n          |\n       \\  |  /\n        \\ | /\n         \\|/\n       XXXXXXX\n      X       X\n     X  O   O  X\n    X     V     X\nW   X  X     X  X\n \\   X  XXXXX  X\n  \\   X       X\n   \\   XXXXXXX\n    \\ X       X---\n     X    O    X  \\\n    X           X  \\\n     XXXXXXXXXXX    \\\n     X         X     M\n    X     O     X\n   X      O      X\n  X               X\n   XXXXXXXXXXXXXXX\n      OOOO OOOO\n      OOOO OOOO\n\nWhile Olaf is classically built with two torso sections (as shown in this example), Anna is bored, and would like to build Olaf with N (1 \u2264 N \u2264 10) torso sections. The topmost torso section is 7 characters wide at the top, and tapers down to being 11 characters wide at the bottom. In order for the snowman to be balanced when it's standing, the torsos must get larger as they get closer to the ground. Specifically, each torso section should be taller by a total of 1 character than the one above it, and width of the top of each torso section should be equal to the width of the bottom of the torso section above it. Furthermore, the number of buttons on each torso will grow by 1 each time. There will be two feet at the bottom of Olaf, each 2 rows by 4 columns, separated by a vertical gap, and horizontally centered relative to Olaf's body.",
  "Output": "For each test case, you should output Olaf with the specified amount of torsos. Every other aspect except of Olaf for the torsos should be exactly the same as the diagram above (e.g. the position of his eyes/nose/smile, the number of slashes for the arms and hair, etc.). The output should not contain any trailing spaces, and all letters in the output should be capitals. Separate the test cases by an empty line. The first line of output should not be blank.",
  "Title": "Do You Want to Build a Snowman?",
  "Input": "\n\nThe input will contain 5 test cases, one line per test case. Each line will contain the integer N, the number of torsos that you should give to Olaf.\n"
}{
  "Example": "Sample Input \n5\n1 2\n2 3 5\n1 1\n4 1 2 3 5\n1 4\n\nSample Output\n2 3 1 5 4\n",
  "Explanation": "Student 1 knows for sure that his choice is student 2. Student 2 forgot whether he picked student 3 or 5. Student 3 knows for sure that he picked student 1. Student 4 completely forgot, so it could've been anybody of 1, 2, 3, or 5. Student 5 knows for sure that he picked student 4. In other words, we don't know the choices for students 2 or 4. We DO know that if 2 picked 3, then 4 must have picked 5, or if 2 picked 5, then 4 must have picked 3. So another valid answer is \"2 5 1 3 4\".",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 will contain a single integer N, specifying the number of students.\nFor the next N lines, each line will correspond to a student. More specifically, line i + 1 will describe the list of possible partners given by student i.\nFor each of these lines, the first number on the line will describe how many people are on the list, and then the actual list will follow on that line. For example, a line containing \"4 10 11 12 13\" means that the student's potential selection could've been either one of students 10, 11, 12, and 13.\n",
  "Time Limit": "2.00s",
  "Description": "PEG is hosting its first annual Secret Santa! To preserve secrecy amongst the Santas, Alex numbers the N (1 \u2264 N \u2264 30) PEG students from 1 to N. Their names will henceforth correspond to these numbers. In Secret Santa, everybody's name is placed into a hat. Alex carries the hat around the classroom, and each person draws a name from the hat that is guaranteed to not be their own. Each person keep their selection a secret, and must send a gift to that person later on.\nBen's job during the name draw was to follow Alex around and write down which person drew which person, in case anybody forgets their selection and later comes to ask. However, amidst all his university application papers, Ben has lost the sheet that recorded each person's selection. PEG members are naturally forgetful. As expected, a few days before the gifting and reveal, many students reported that they've forgotten the name of the person they've drawn. When all these people went to consult Ben, he became visibly distraught. Drastic action must be taken. So, Ben went around and secretly asked everybody to give a list of names of their possible partners.\nEach person gives Ben a list of names of people that might be their partner. Clearly, for someone who remembers their partner's name, this list will contain exactly one name. For someone who haven't a clue who their partner is, this list will contain everybody's name. It is guaranteed that a person's list will contain their partner. Using these hints, Ben would like to determine one valid way to reassign names to those who have forgotten, such that everybody in PEG has a distinct secret Santa.",
  "Output Format": "Output a single line containing N space-separated integers, describing the Secret Santa configuration. Student i (for 1 \u2264 i \u2264 N) is the secret Santa of the i-th integer on the line. It is guaranteed that a solution, although not necessarily unique, will exist. You may output any such solution.",
  "Title": "Secret Santa"
}{
  "Example": "Sample Input \n10\n5 7\n7 1\n6 1\n2 1\n2 8\n1 9\n3 9\n10 9\n4 9\nSample Output\n7",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "While taking the subway George, and Peter were determined to find the longest subway route.\nThey found different routes, and declared their route to be the longest route.\nAfter arguing and missing their stop, they realized that both of their routes were the longest routes.\nLooking back at the map, George, and Peter want to find how many subway routes have the longest length.\nA subway route is considered different from another subway route if at least one of its endpoints is not an\nendpoint on the other route. It is guaranteed that there is exactly one unique path between any pair of stations.\nAssume that all tunnels between stations are of the same length.",
  "Output": "The number of unique subway routes that have the longest length.",
  "Title": "Subway Routes",
  "Input": "N \u2264 50000, the number of stations.\nThe next N-1 lines contain two unique integers x, and y,\nindicating there is a tunnel connecting stations x and y. (1\u00a0\u2264\u00a0x,y\u00a0\u2264\u00a0N)"
}{
  "Example": "Sample Input \n2 3\n6 2 2\n12 4 8\n6 2 4\n\nSample Output 2\nNO UNIQUE SOLUTION\n",
  "Explanation": "All of the lines are parallel. Therefore, the system of equations cannot be solved.",
  "Memory Limit": "16M",
  "Input Format": "Line 1 of the input contains integers n and m (1 \u2264 n, m \u2264 100), indicating the number of variables to solve for and the number of equations in the system.\nThe next m lines will each contain n+1 integers, where the first n integers are the coefficients of the equation and the last integer is the constant term.\nEvery number in the input is guaranteed to fit in a 32-bit signed integer.\n",
  "Time Limit": "2.00s",
  "Description": "\n\nWrite a program that solves a system of linear equations with a maximum of 100 equations and variables.",
  "Output Format": "If the system can be solved, output n lines, the values of the unknowns x1, x2, \u2026, xn, accurate within \u00b110-5.\nIf there are no solutions to the system, or if there are infinite solutions to the system, output \"NO UNIQUE SOLUTION\".\n",
  "Title": "System Solver"
}{
  "Example": "Sample Input \n7 5\n1\n2\n3\n4\n5\n6\n7\n\nSample Output 2\n149\n",
  "Explanation": "Tenri can put the second and third of her boxes inside the first box, and then put two sparklers in the first box for an impact value of:\nmin((min(\u221e, (1 + 0)2) + 0) \u00d7 (min(\u221e, (2 + 0)2) + 0)), (1 + 2)2) + 2 = 6.\nA diagram for this setup is as follows:",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "Tenri is getting ready to perform a magic show with N (1 \u2264 N \u2264 11) magic boxes and S (1 \u2264 S \u2264 15) sparklers. Because these boxes are strange and mysterious, each box can hold either zero or two other magic boxes (that are not within any other box yet) and any number of sparklers. Each box has a weight, determined by the formula:\nw = min(wi\u00d7wj , (m+s)2) + s\nwhere m is the mysteriousness of the box, s is the number of sparklers in it, and wi and wj are the weights of the two boxes within this box. If the box is completely empty, assume a value of infinity for wi\u00d7wj. Tenri's magic show requires a single box which contains all the other boxes and sparklers either directly or indirectly. The overall impact for the magic show is the weight of the outermost box. Please determine the maximum impact Tenri's magic show can have.",
  "Output": "Output the maximum possible impact Tenri's magic show can have.",
  "Title": "Tenri",
  "Input": "The first line of input has 2 integers, N and S, the number of boxes and the number of sparklers Tenri has, respectively. N is guaranteed to be an odd number. Each of the next N lines contains a single positive integer less than or equal to 10, the mysteriousness value of i-th box Tenri has.\n\n"
}{
  "Example": "Sample Input \n10 8\nSample Output:\n37",
  "Memory Limit": "256M",
  "Output Format:": "\nOutput the number of new friendships that must be made. This number is guaranteed to be non-negative.\n",
  "Time Limit": "2.00s",
  "Input Format:": "\nThe first line of input contains the integers N (1 \u2264 N \u2264 1000) and K (0 \u2264 K \u2264 106).\n",
  "Description": "\nThe Carol Economy is a set of people who interact and share hearts (<3) with each other. In order to be part of the Carol Economy, each person must be friends with every other person. Carol is trying to set up a larger Carol economy between some of her friends. There are N people, and K pairs of people know each other. Help Carol calculate the amount of new friendships that must be made. \n",
  "Title": "Economy"
}{
  "Example": "Sample Input \n2 10\n5\n4\n\nSample Output 1\n1\n\nSample Input 2\n1 10\n1000\n\nSample Output 2\nThe budget will balance itself\n",
  "Input Format": "\nThe first line of input contains the integers N (1 \u2264 N \u2264 10000) and B (0 \u2264 B \u2264 106).\nThe next N lines contain the integers Pi (1 \u2264 Pi \u2264 106).\n",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "\nGeresh is applying for a specialized program at a certain high school. In order to be accepted, he must bribe teachers to give him good references. He needs references from N teachers, and each teacher has some price Pi which must be given to the teacher in secret. Fortunately, the right honourable Trustin Judeau has been blackmailed donated to Geresh a limited budget of B dollars.\n\n\nGeresh wants to find out if he will have enough money to buy all the references he needs.\n",
  "Output Format": "\nIf Geresh will not have enough money to bribe all the teachers, output \"The budget will balance itself\".\nOtherwise, output the amount of money he will have remaining after bribing each teacher.\n",
  "Title": "Budget"
}{
  "Example": "Sample Input \n001\n\nSample Output 1\n01/01\n\nSample Input 1\n059\n\nSample Output 1\n02/28\n",
  "Input Format": "\nThe only line of input contains a single integer N (1 \u2264 N \u2264 365), the day of the year.\n",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "\nShia Labeouf, a renowned forensic scientist, is analyzing video footage from the inside of a TTC bus. The dates on which each video were recorded have been lost. However, in each video, the transfer holder can be clearly seen. The front and back of a TTC bus transfer has the day of the year printed on it. For example, January 1 is written as 001, and February 1 is written as 032.\n\n\nLabeouf wants a program to get the date of each video. Given the day of the year and the year, write a program which outputs the date.\n",
  "Output Format": "\nOutput the date corresponding to each day of the year given in the format MM/DD, one per line. Assume that the year will never be a leap year.\n",
  "Title": "TTC"
}{
  "Example": "Sample Input \n2 10\n9 1\n\nSample Output 2\n1\n",
  "Explanation 1": "Ben can spend 4 minutes bartering at the first house, move to the second house in 1 minute, spend 2 minutes bartering with the second house, move to the fourth house in 1 minute, and spend 4 minutes bartering at the fourth house. This will take a total of 4 + 1 + 2 + 1 + 4 = 12 minutes.",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 of input contains two integers N, D (1 \u2264 N \u2264 10000; 1 \u2264 D \u2264 108).\nLine 2 of input will have N space-separated integers \u2013 the time in minutes it takes to barter with the i-th house. (1 \u2264 ti \u2264 10000).\n",
  "Time Limit": "2.00s",
  "Description": "Ben is going trick-or-treating this Halloween.\nBen only has D minutes of trick-or-treat time. He has planned out a list of N houses to visit. In order to attain the maximum amount of candy possible, he will need to spend time bartering with each household. He knows that the i-th house will require ti minutes of bartering.\nBecause of his excellent athletic abilities, it will take Ben exactly 1 minute to move between any pair of houses.\nDetermine the maximum number of houses Ben can visit on Halloween night. Note that he can begin at any house and visit the houses in any order, but will only receive candy from a house at the end of the bartering period.",
  "Output Format": "Output a single integer, the greatest number of houses Ben can receive candy from.",
  "Explanation 2": "Ben can spend 9 minutes collecting candy from the first house, but will not have enough time to move to the second house to barter.",
  "Title": "Trick-or-Treat"
}{
  "Example": "Sample Input \n8\n2 1 6\n2 3 6\n2 1 4\n2 3 6\n2 1 5\n2 2 6\n1 4\n2 6 1",
  "Explanation": "The best option is to play the notes in positions 6, 6, 4, 3, 1, 2, 4, 6. The\ntotal distance travelled is 0+2+1+2+1+2+2=10, and there are changes of direction\nafter notes 2 and 5.\nNote that other solutions exist which yield a distance of 10, such as always\nusing the furthest slide position \u2014 however, they require more changes of\ndirection.",
  "Memory Limit": "1024M",
  "Input Format": "Line 1: N\nNext N lines: Mi, followed by\nMi integers, denoting the slide positions in which note\ni can be played.",
  "Time Limit": "2.00s",
  "Description": "Capba dreams of one day being a virtuoso trombone soloist... but for now, he\nmust practice his boring exercises, which involve playing N (1 \u2264\nN \u2264 100000) notes, one after another. A trombone has seven slide\npositions, numbered closest to furthest from 1 to 7. The\nith note can be played in Mi (1\n\u2264 Mi \u2264 7) different slide positions.\nSince he wants to save his energy for more interesting things, he wants to\nget through the exercise with as little effort as possible. Most importantly,\nthis means minimizing the total distance that the slide moves. If two\nconsecutive notes are played in positions x and y, then\nthe slide moves a distance of |x-y|.\n\n\nHowever, if there are multiple ways to play the exercise which minimize the\nmovement of the slide, Capba wants the one which will minimize the number of\ntimes the slide must change direction \u2014 another important aspect which\ncan reduce the amount of effort. Between two consecutive notes, with the first\nplayed in slide position x and the second in position y,\nthe slide is either is moving in (x > y), stationary\n(x = y), or moving out (x <\ny).\n\n\nGiven the above criteria, your job is to find a way to play all of the notes\nin order that minimizes the effort required, and output the total distance\ntravelled by the slide as well as the number of times it changes direction.",
  "Output Format": "Output two space-separated integers: the total distance travelled by the\nslide, followed by the number of direction changes, for the best solution.",
  "Title": "Virtuoso"
}{
  "Title": "Alpha Nerd (Hard)",
  "Example": "Sample Input \n3\n1 2 0\n2 3 1\n\nSample Output 1\n1\n\nSample Input 2\n5\n4 2 1\n1 3 0\n4 1 1\n3 5 1\n\nSample Output 2\n2\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN \u2212 1 lines follow, the i-th of which consists of three space-separated integers, Ai, Bi, and Wi, for i = 1..(N \u2212 1).\n",
  "Memory Limit": "64M",
  "Sample Explanations": "In the first case, it's possible that the edge between nodes 1 and 3 could receive a weight of 0. It's then possible that Spiderman's algorithm could randomly choose the weight-0 edge leading to node 2, and then be forced to choose the weight-1 edge leading to node 3 before terminating. This spanning tree (1 \u2194 2 \u2194 3) has a total weight of 1, while the graph's minimum spanning tree (2 \u2194 1 \u2194 3) has a total weight of 0.\nIn the second case, it's possible that Spiderman's algorithm may produce a spanning tree with weight 2 greater than the minimum spanning tree.",
  "Time Limit": "4.00s",
  "Description": "After hours of exciting offscreen action (not described in this problem), the Infinity War has just about reached its conclusion, with Thanos defeated and the Avengers preparing to give a series of inspirational speeches! One important question remains \u2013 which heroes should receive the most credit for the victory? With so many superheroes crammed into a single adventure, there simply won't be enough recognition to go around!\nFor instance, who should receive credit for being the Avengers' alpha nerd, playing the most important tech-related role? Iron Man is the obvious choice, but Spiderman has been studying computer science for a whole few months and wants a shot at the title as well! This prospect annoys Iron Man, so he plans to give Spiderman a competitive programming problem to put him in his place. He'll even give him a nice, easy one \u2013 computing the weight of a graph's minimum spanning tree.\nIron Man will generate a complete, undirected, weighted graph with N (2 \u2264 N \u2264 300,000) nodes, numbered from 1 to N. Each of its N\u00d7(N \u2212 1)/2 edges will be given a weight of either 0 or 1. Iron Man has already decided on the weights of N \u2212 1 of its edges \u2013 in particular, the edge connecting nodes Ai and Bi (1 \u2264 Ai, Bi \u2264 N) will have a weight of Wi (0 \u2264 Wi \u2264 1). The N \u2212 1 fixed edges are all distinct, and there are no cycles amongst them. Each of the remaining edges in the graph will randomly receive a weight of either 0 or 1.\nSpiderman is feeling confident about this challenge, having just learned about Prim's algorithm for constructing minimum spanning trees in school. Unfortunately, he's misremembered the algorithm! His version involves starting at the first node and greedily following minimum-weight edges around the graph until he's constructed a path which passes through all N nodes. In pseudocode:\nSet c to be equal to 1.\nMark node c as visited.\nIf all N nodes have been visited, terminate the algorithm.\nFind the minimum-weight edge which connects node c to some unvisited node i (in the case of tied minimum weights, choose a random minimum-weight edge).\nAdd the edge between nodes c and i to the minimum spanning tree.\nSet c to be equal to i.\nReturn to step 2.\nThis algorithm will always terminate and produce a valid spanning tree on the graph, but said spanning tree may not end up having the minimum possible weight at all. To some extent, this depends on how lucky Spiderman gets (in terms of what edge weights are randomly generated for the graph and which tied minimum-weight edges are chosen in Step 4 of the algorithm).\nAssuming Spiderman gets as unlucky as possible, what could be the largest possible difference between the weight of the spanning tree returned by his algorithm, and the weight of the same graph's minimum spanning tree (which Prim's actual algorithm would return)?",
  "Subtasks": "\nIn test cases worth 10/25 of the points, N \u2264 6.\n",
  "Output Format": "\nOutput a single integer, the maximum possible difference between the algorithm's answer and the weight of the graph's actual minimum spanning tree.\n"
}{
  "Title": "WC17 #4 - Alpha Nerd",
  "Example": "Sample Input \n3 1\n1 2\n\nSample Output 1\n1\n\nSample Input 2\n5 3\n3 1\n1 5\n2 1\n\nSample Output 2\n3\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, N and M.\nM lines follow, the i-th of which consists of two space-separated integers, Ai and Bi, for i = 1..M.\n",
  "Memory Limit": "64M",
  "Sample Explanations": "In the first case, it's possible that the edge between nodes 1 and 3 could receive a weight of 1, while the edge between nodes 2 and 3 could receive a weight of 0. It's then possible that Spiderman's algorithm could start at node 2, then randomly choose the weight-0 edge leading to node 1, and finally be forced to choose the weight-1 edge leading to node 3 before terminating. This spanning tree (2 \u2194 1 \u2194 3) has a total weight of 1, while the graph's minimum spanning tree (1 \u2194 2 \u2194 3) has a total weight of 0.\nIn the second case, it's possible that Spiderman's algorithm may produce a spanning tree with weight 3 greater than the minimum spanning tree.",
  "Time Limit": "4.00s",
  "Description": "After hours of exciting offscreen action (not described in this contest), the Infinity War has just about reached its conclusion, with Thanos defeated and the Avengers preparing to give a series of inspirational speeches! One important question remains \u2013 which heroes should receive the most credit for the victory? With so many superheroes crammed into a single adventure, there simply won't be enough recognition to go around!\nFor instance, who should receive credit for being the Avengers' alpha nerd, playing the most important tech-related role? Iron Man is the obvious choice, but Spiderman has been studying computer science for a whole few months and wants a shot at the title as well! This prospect annoys Iron Man, so he plans to give Spiderman a competitive programming problem to put him in his place. He'll even give him a nice, easy one \u2013 computing the weight of a graph's minimum spanning tree.\nIron Man will generate a complete, undirected, weighted graph with N (2 \u2264 N \u2264 300,000) nodes, numbered from 1 to N. Each of its N\u00d7(N \u2212 1)/2 edges will be given a weight of either 0 or 1. Iron Man has already decided on the weights of M (0 \u2264 M \u2264 N \u2212 1) of its edges \u2013 in particular, the edge connecting nodes Ai and Bi (1 \u2264 Ai, Bi \u2264 N) will have a weight of 0. The M fixed edges are all distinct, and there are no cycles amongst them. Each of the remaining edges in the graph will randomly receive a weight of either 0 or 1.\nSpiderman is feeling confident about this challenge, having just learned about Prim's algorithm for constructing minimum spanning trees in school. Unfortunately, he's misremembered the algorithm! His version involves starting at a random node and greedily following minimum-weight edges around the graph until he's constructed a path which passes through all N nodes. In pseudocode:\nSet c to be a random node between 1 and N, inclusive.\nMark node c as visited.\nIf all N nodes have been visited, terminate the algorithm.\nFind the minimum-weight edge which connects node c to some unvisited node i (in the case of tied minimum weights, choose a random minimum-weight edge).\nAdd the edge between nodes c and i to the minimum spanning tree.\nSet c to be equal to i.\nReturn to step 2.\nThis algorithm will always terminate and produce a valid spanning tree on the graph, but said spanning tree may not end up having the minimum possible weight at all. To some extent, this depends on how lucky Spiderman gets (in terms of what edge weights are randomly generated for the graph, which node is started at in Step 1 of the algorithm, and which tied minimum-weight edges are chosen in Step 4).\nAssuming Spiderman gets as unlucky as possible, what could be the largest possible difference between the weight of the spanning tree returned by his algorithm, and the weight of the same graph's minimum spanning tree (which Prim's actual algorithm would return)?",
  "Subtasks": "\nIn test cases worth 12/37 of the points, N \u2264 6.\n",
  "Output Format": "\nOutput a single integer, the maximum possible difference between the algorithm's answer and the weight of the graph's actual minimum spanning tree.\n"
}{
  "Example": "Sample Input \n15\n____Ed__vi__eeB_r,u_y_tm_J_umofsanitn_r__Sslmntiuo_vswhet.e.\n7\n__p__SDr__yoa_gr_y_oiy_tdooths:uoe?\n10\n___A__r_tyohale:d___nTaehnwed.\n25\n___S__y__r__i__og_:o__d_T,_h__ea_rn_ed____ih_si__s_o__nn_ladyme_eao_tnihes.\n30\n______St_yh_ri_in_og_:___w_Ae_n__ds__a_ty_h__et_ro_e___d_ie_sa__t_oh_n._l.ty.o__doNanoyet.\n\nSample Output\nEvery man must die, Jon Snow. But first he must live.\nSyrio: Do you pray to the gods?\nArya: The old and the new.\nSyrio: There is only one god, and his name is death.\nSyrio: And there is only one thing we say to death... Not today.\n",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "In text display, word wrap is the feature of moving text to a new line when the current line is full, so that all text is visible without having to scroll horizontally. This makes it so that newlines do not have to be hardcoded in a piece of text, and that the text can be dynamically reflowed when the text editor is resized. When a word (more specifically, a consecutive series of characters that does not contain a space) is too long to fit on the current line, the entire word is displayed on the next line, where the rest text continues. The space that comes before the wrapped word is always on the line above it, meaning that no wrapped line can have a space as the first character. The following diagram illustrates word wrap on a piece of text.\nWord Wrap Cypher is a way of encoding a message based on word wrapping a text and right-aligning it. We are given a width W (1 \u2264 W \u2264 100), along with a single-line message of no more than 1000 ASCII characters. To encode the message using Word Wrap Cypher, we follow these instructions:\nWord wrap the line of text to a width of W characters.\nFill the end of each line with spaces until it is W characters wide (not including the newline character).\nRight align the piece of text, trimming off all trailing spaces and padding each line with leading spaces so that their widths remain W characters long.\nInterpret the resulting right-aligned text column by column into a single-lined string. That is, first take the character at row 1 column 1, then at row 2 column 1, etc. After reaching the end of column 1, we take the character at row 1 column 2, then at row 2 column 2, and so on.\n\nIt is guaranteed that you will not be dealing with original messages that contain words longer than W characters (and thus cannot be wrapped). Nor will you have to deal with messages that contain 2 or more consecutive spaces. Let's say we want to encode the following message for W = 15.\nEvery man must die, Jon Snow. But first he must live.\nFor the purposes of this explanation only, we will use underscores to represent spaces. The text wraps like this:\nEvery_man_must_\ndie,_Jon_Snow._\nBut_first_he___\nmust_live._____\n\nRight aligning the above, we get:\n_Every_man_must\n_die,_Jon_Snow.\n___But_first_he\n_____must_live.\n\nInterpreting the text column by column yields the following encoded string:\n____Ed__vi__eeB_r,u_y_tm_J_umofsanitn_r__Sslmntiuo_vswhet.e.\n\nGiven an encoded string, your task is to determine the original message.",
  "Output": "For each test case, output a line containing the original, decoded message.",
  "Title": "Word Wrap Cypher",
  "Input": "\n\nThe input will contain 5 test cases with 2 lines per test case. The first of these lines contains a single integer W, and the second of these lines contains the resulting encoded string. In the sample input below, spaces are replaced by underscore '_' characters for readability. The actual test input will use spaces, not underscores!"
}{
  "Example": "Sample Input \n5\n3 10\n5 5\n13 42\n666 1337\n1234567 89101112\n\nSample Output\n8\n5\n39\n0\n89998783\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Output Specification": "For each test case, output the (decimal) value of the XOR of all numbers\nbetween S and F, inclusive.",
  "Description": "\nGiven two integers S and F, what is the \nXOR (exclusive-or) of\nall numbers between S and F (inclusive)?\n",
  "Input Specification": "\nThe first line of input is the integer T, which is the number of\ntest cases (1 \u2264 T \u2264 1000).\n\n\nT lines follow, with each line containing two integers S \nand F\n(1 \u2264 S \u2264 F \u2264 1,000,000,000).\n",
  "Title": "Xor"
}{
  "Example": "Sample Input \n1 15\n##.........####\n1\nCROSSWORD\nSample Output 1\n##CROSSWORD####\nSample Input 2\n3 6\n#.....\n....##\n###...\n6\nAT\nME\nDOG\nGOD\nVETO\nMAGIC\nSample Output 2\n#MAGIC\nVETO##\n###DOG",
  "Input Format": "The first line of the input will contain the integers R and C (1 \u2264 R,C \u2264 21), denoting the row and columns in the crossword grid. The next R rows will have a width of C columns, containing the grid of the unsolved crossword. A \"#\" represents a void space (i.e. a space where no letters may be placed) and a \".\" represents an empty space, where a letter should be placed. \nThe following line will contain the integer N (1 \u2264 N \u2264 200). The next N lines will contain the words, in no particular order, that must be placed either horizontally OR vertically on the grid.\nLike a normal crossword, words are only valid when read left-right or up-down. Words must start and end either on the edge of the grid or before/after a void space. \nEach word will only contain the uppercase letters A through Z. You may assume that there will only be one possible solution for every test case, and that all words will be at least 2 letters long.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You are the average grandson, always anxious to impress your grandmother so that she will bake you tasty treats. Your grandmother is a very intelligent word wizard and happens to enjoy crosswords. She has the ability to look at any hint \nand produce the answer. The problem is, she is losing her vision, and is constantly having a hard time reading the number labels on the boxes of her crosswords. \nBeing the wonderful grandchild you are, you have decided to write a program that will position words onto a crossword grid, after your grandma has solved them.",
  "Output Format": "The output should contain the solved crossword.",
  "Title": "Crosswords"
}{
  "Example": "Sample Input \n3 7 9\n\nSample Output\n20\n",
  "Input Format": "\nThe first and only line of input consists of three space-separated integers, E, D, and M.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nE Rings for the Elven-kings under the sky,\nD for the Dwarf-lords in their halls of stone,\nM for Mortal Men doomed to die,\nOne for the Dark Lord on his dark throne,\nIn the Land of Mordor where the Shadows lie,\nOne ring to rule them all, one ring to find them,\nOne ring to bring them all and in the darkness bind them,\nIn the Land of Mordor where the Shadows lie.\n\nAs the above passage indicates, a number of Rings of Power exist in Middle-earth, with exactly one of them owned by the Dark Lord Sauron, and the others distributed amongst Elves, Dwarves, and Men according to the values E, D, and M (2 \u2264 E, D, M \u2264 9). Your task is to determine the total number of Rings of Power which have been forged (that is, the number of rings held by Elves, Dwarves, Men, and Sauron combined).",
  "Output Format": "\nOutput a single integer, the total number of Rings of Power.\n",
  "Sample Explanation": "Elves have 3 Rings, Dwarves have 7, Men have 9, and Sauron himself has 1, for a total of 20.",
  "Title": "WC17 #2 - The Rings of Power"
}{
  "Example": "Sample Input \n1 4 3\n8 14 10\n\nSample Output\n3\n",
  "Input Format": "\nThe first line of input consists of three space-separated integers, Mu, Ou, and Lu.\nThe next line consists of three space-separated integers, Ms, Os, and Ls.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The evil wizard Saruman is breeding himself an army of fearsome Uruk-hai soldiers. Each Uruk-hai can be created out of Mu men, Ou orcs, and Lu litres of mud (1 \u2264 Mu, Ou, Lu \u2264 1000).\nSaruman has at his disposal Ms men, Os orcs, and Ls litres of mud (1 \u2264 Ms, Os, Ls \u2264 1000).\nWhat's the maximum number of Uruk-hai that Saruman can create without exceeding his resources?",
  "Output Format": "\nOutput a single integer, the maximum number of Uruk-hai that can be created.\n",
  "Sample Explanation": "Creating 3 Uruk-hai requires 3 men, 12 orcs, and 9 litres of mud, which doesn't exceed Saruman's resources. However, he would not be able to create 4 Uruk-hai.",
  "Title": "WC17 #2 - Breeding an Army"
}{
  "Example": "Sample Input \n5 6\n3 6 4 1 10\n\nSample Output\n4\n",
  "Input Format": "\nThe first line of input consists of two space-separated integer, N and M.\nThe next line consists of N space-separated integers, J1..N.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Pursued by a swarm of goblins, the N (1 \u2264 N \u2264 9) members of the Fellowship of the Ring are trying to escape from the Mines of Moria. To do so, they must cross a chasm which is M (1 \u2264 M \u2264 10) metres wide. The i-th member of the Fellowship can jump a distance of up to Ji (1 \u2264 Ji \u2264 10) metres. Therefore, they can only cross the chasm by themselves if they can jump a distance of at least M metres.\nFortunately, if someone is able to jump over the chasm themselves, they can also carry at most one other person along with them. This does not affect their jumping distance. Unfortunately, there isn't enough time for them to then jump back and carry yet another person across.\nAssuming that the Fellowship works together, what's the maximum number of its members who can end up getting across the chasm and escaping the Mines of Moria?",
  "Output Format": "\nOutput a single integer, the maximum number of Fellowship members who can escape.\n",
  "Sample Explanation": "One optimal strategy is for the 2nd member to jump across while carrying the 3rd member, and for the 5th member to jump across while carrying the 4th member. Unfortunately, this leaves the 1st member unable to cross by themselves, but there's no way for the entire Fellowship to escape.",
  "Title": "WC17 #2 - Escaping the Mines"
}{
  "Example": "Sample Input \na-lalla-lalla-rumba-kamanda-lindor-burume-burumne-byurstume-a-keema\n\nSample Output\na-lala-ruma-kamana-linor-burume-a-keema\n",
  "Input Format": "\nThe first and only line of input consists of a single string, the word in Old Entish.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The Ents of Fangorn Forest have all convened in order to vote on an important decision - should they go to war against the treachery of Saruman, or continue to mind their own business?\nMerry and Pippin have managed to convince Treebeard, the oldest of the Ents, of the need to take action. As such, Treebeard has prepared a speech designed to convince the other Ents of the same. Unfortunately, he has written it in Old Entish, which is a decidedly unhasty language. The Hobbits suspect that it may take him weeks just to get through it! As such, they'd like to translate it into New Entish, a more compact version of the Ents' language.\nThe two Hobbits will translate one word at a time. They're taking a look at the first word in the Old Entish speech, which is a non-empty string with at most 100 characters. Each character is either a lowercase letter (\"a\"..\"z\"), or a dash (\"-\"). Neither the first nor the last character is a dash, and there are never multiple consecutive dashes. The dashes divide the word up into one or more \"tokens\". In other words, each token is a maximal contiguous sequence of letters.\nTranslating a word from Old Entish into New Entish is a two-step process:\nIn each token, for each contiguous sequence of consonants (letters aside from \"a\", \"e\", \"i\", \"o\", and \"u\"), reduce it down to just the first letter in that sequence.\nFor each contiguous sequence of equal tokens, reduce it down to just a single copy of that token.\n\nPlease determine the result of translating the first word of Treebeard's speech into New Entish by applying the above process to it.",
  "Output Format": "\nOutput a single string, the word translated into New Entish.\n",
  "Sample Explanation": "For example, during the translation process, each of the 7th, 8th, and 9th tokens initially gets reduced to \"burume\". Then, only the first of these three equal consecutive tokens is retained.",
  "Title": "WC17 #2 - Entish Translation"
}{
  "Title": "WC17 #2 - Keeping Score",
  "Example": "Sample Input \n5 4\n84\n6\n105\n54\n30\n91\n84\n28\n66\n\nSample Output 1\n60\n\nSample Input 2\n2 1\n3 3\n3\n\nSample Output 2\n-1\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, L and G.\nL lines follow, the i-th of which consists of a single integer SLi (for i = 1..L).\nG lines follow, the i-th of which consists of a single integer SGi (for i = 1..G).\n",
  "Sample Explanation 2": "In the first case, if X = 60, then Legolas's score will be 2 (with his 1st and 3rd killed enemies counting), while Gimli's score will be 3. Note that there exist other valid values of X which would also be accepted.\nIn the second case, if X \u2264 3, then both Legolas's score will be 2 and Gimli's will be 1. If X > 3, then both scores will be 0. Either way, Gimli can't win.",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "There's nothing like a bit of friendly competition, even when your life is on the line! Legolas and Gimli have taken to counting how many enemies they're each able to kill in each confrontation, in an effort to one-up one another.\nDuring the battle of Helm's Deep, Legolas killed L (2 \u2264 L \u2264 200,000) enemies, the i-th of which had a strength level of SLi (1 \u2264 SLi \u2264 109). Meanwhile, Gimli killed G (1 \u2264 G < L) enemies, the i-th of which had a strength level of SGi (1 \u2264 SGi \u2264 109).\nThough Gimli killed fewer enemies than Legolas did, he's not about to admit defeat to the elf so easily. As such, he's gotten the idea to introduce a new rule: \"All enemies with strength levels smaller than X don't count\" (for some positive integer X no larger than 109). Help Gimli find any value of X which would cause him to \"win\" (in other words, such that Gimli killed strictly more enemies with strength levels greater than or equal to X than Legolas did). If no possible value of X would have this result, output \u22121 instead.",
  "Subtasks": "\nIn test cases worth 7/14 of the points, L \u2264 1000.\n",
  "Output Format": "\nOutput a single integer, any valid value of X which would cause Gimli to win, or \u22121 if there's no such value.\n"
}{
  "Title": "WC17 #2 - Don't Follow the Lights",
  "Example": "Sample Input \n6 5\n**...\n.*...\n.D.*.\n..*..\n.....\n*..S.\n\nSample Output 1\n7\n\nSample Input 2\n2 10\n*....*.D.*\n.S.*....*.\n\nSample Output 2\n-1\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, R and C.\nR lines follow, the i-th of which consists of characters representing the i-th row of the grid, for i = 1..R.\n",
  "Sample Explanation 2": "In the first case, one optimal path is indicated below:\n**...\n.*...\n6D.*.\n5.*..\n432..\n*.1S.\n\nIn the second case, they would need to move up into the 1st row to get around the torch in the 4th cell of the 2nd row.\nHowever, moving rightwards in the 1st row towards the torch in the 6th cell is then forbidden, due to the presence of the torch in the 10th cell as well.",
  "Memory Limit": "256M",
  "Time Limit": "6.00s",
  "Description": "Led by the creature Gollum, Frodo and Sam have set out to sneak their way into Mordor. Their journey takes them through the Dead Marshes, a mysterious, ancient battleground which has a way of leaving travellers lost until they perish.\nThe Dead Marshes can be represented as a 2D grid, with R rows and C columns (2 \u2264 R, C \u2264 1500). The three travellers seek to find their way from a certain starting cell to a destination one. Some of the cells may contain torches, while each other cell appears to be empty, but may contain dangerous boggy water \u2013 it's hard to tell which ones are in fact safe to walk on. Each cell is described by one of four characters:\n\"S\": The starting cell, which is otherwise empty (there's exactly one such cell)\n\"D\": The destination cell, which is otherwise empty (there's exactly one such cell)\n\".\": An empty cell\n\"*\": A cell with a torch\nThe party would like to reach the destination cell from the starting one as quickly as possible. Every minute, they may move from their current cell to an adjacent one (either up, down, left, or right). They may not move outside the grid, and may not move into a cell containing a torch.\nHowever, empty cells may be dangerous as well, so they've agreed to also pay attention to the warning words uttered by Gollum: \"Don't follow the lights\". To be precise, this means that they may not move in a given direction if there are at least two cells containing torches further ahead in that direction, in that same row/column. For example, if C = 6 and a certain row has torches in its 3rd and 6th cells, then the party may not move right from the 1st cell to the 2nd cell in that row, but they may move left from the 2nd cell to the 1st cell, or left/right between the 4th and 5th cells.\nPlease help Frodo, Sam, and Gollum determine the minimum amount of time required for them to reach the destination cell while following the above rules. Output \u22121 instead if they can't make it at all, and are doomed to wander the Dead Marshes forever.",
  "Subtasks": "\nIn test cases worth 18/22 of the points, R \u2264 100 and C \u2264 100.\n",
  "Output Format": "\nOutput a single integer, the minimum amount of time required to reach the destination cell, or \u22121 if it's impossible to do so.\n"
}{
  "Title": "WC17 #2 - Battle of the Pelennor FIelds",
  "Example": "Sample Input \n7\n1 15\n1 22\n2 18 3\n1 19\n2 5 12\n1 23\n1 0\n\nSample Output\n1\n2\n1\n1\n1\n2\n2\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of a single integer, Ei, followed by either 1 more integer Oi (if Ei = 1) or 2 more integers Ai and Ri (if Ei = 2), for i = 1..N.\n",
  "Memory Limit": "128M",
  "Time Limit": "6.00s",
  "Description": "An enormous, decisive battle is about to take place on the Pelennor Fields before the city of Minas Tirith! A noble army of Gondorian men will engage in battle against Sauron's evil army of orcs in an attempt to save their home and all of Middle Earth. Gandalf has given you your own vital task \u2013 not to actually participate in combat, but to report to him the state of the battle as it unfolds.\nThe battlefield can be represented as an infinite number line, and is initially empty. N (1 \u2264 N \u2264 300,000) events will then occur over the course of the battle, one after another. The i-th event's type is indicated by the value Ei (1 \u2264 Ei \u2264 2):\nIf Ei = 1, then an orc arrives on the battlefield at position Oi (0 \u2264 Oi \u2264 109).\nOtherwise, if Ei = 2, then a Gondorian archer arrives on the battlefield at position Ai (0 \u2264 Ai \u2264 109), and having a bow range of Ri (1 \u2264 Ri \u2264 109). Such an archer is able to shoot any orcs which are at most Ri units of distance away from Ai.\nAll N combatants' positions are distinct.\nAn orc is \"vulnerable\" if there's at least one archer on the battlefield who is able to shoot that orc. After each of the N events, you'd like to report to Gandalf the number of orcs currently on the battlefield which are not vulnerable.",
  "Subtasks": "\nIn test cases worth 4/27 of the points, N \u2264 1000 and Ri = 1 for each applicable i.\nIn test cases worth another 4/27 of the points, Ri = 1 for each applicable i.\nIn test cases worth another 8/27 of the points, Ri = 106 for each applicable i.\n",
  "Sample Explanation": "After the 2nd event, there are still no archers on the field, meaning that both orcs are non-vulnerable.\nAfter the 3rd event, the newly-arrived archer is just barely able to shoot the first orc, while the second orc is too far away and so is still non-vulnerable.\nAfter the 7th event, the orcs at positions 22 and 23 are still non-vulnerable, while the remaining 3 orcs are vulnerable.",
  "Output Format": "\nOutput N lines, the i-th of which should consist of a single integer, the number of non-vulnerable orcs on the battlefield after the first i events.\n"
}{
  "Title": "WC17 #2 - One Does Not Simply Walk Into Mordor",
  "Example": "Sample Input \n8\n1 2 4 4 1 1 3 2\n\nSample Output\n3 4\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nThe next line consists of integers L1..N.\n",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "Having walked many a mile over the course of their journey, and with the last of their strength just about depleted, Frodo and Sam have at last changed their mind about the whole \"walking into Mordor to throw the Ring into Mount Doom\" plan. It really does seem rather dangerous! Fortunately, they've devised an alternate strategy to destroy the One Ring, thereby saving Middle Earth from Sauron's impending rule.\nThe Ring is a circle-shaped object with N (3 \u2264 N \u2264 400) evenly-spaced markings inscribed on it. Numbering the markings in clockwise order, the i-th marking is an inscription of the integer Li (1 \u2264 Li \u2264 109) in Sauron's Black Speech. For the sake of science, we can consider the ring to be arbitrarily thin (a circle on a plane, when viewed from above), and the markings to be arbitrarily small (points on that circle).\nThe Ring is normally resistant to simply being cut into pieces with a sword, but Frodo and Sam have realized the secret behind its power. They're going to simultaneously make one or more precise cuts through it. Each cut can be thought of as a line segment intersecting the circle at two points. No cut may pass directly through any of the Ring's markings.\nThe Ring is only able to keep itself together if there exists at least one pair of markings i and j, such that Li \u2260 Lj and none of the cuts intersect the line segment connecting those two markings. As such, Frodo and Sam hope to perform their cuts so as to interrupt the power of all of these pairs of markings, thus destroying the Ring.\nPerforming many cuts simultaneously is a difficult task for a pair of Hobbits, so they'd like to minimize the number of cuts. There's just one detail they can't decide on: Frodo is confident that they'll be able to execute any set of cuts they'd like to, while Sam is concerned that it'll only be doable if none of the cuts' line segments intersect with one another.\nSo, let's consider two different cases \u2013 either any set of possibly-intersecting cuts may be made, or the cuts must all be non-intersecting. For each case, determine the minimum number of cuts which must be made in order for the Ring to be destroyed. At least one cut is guaranteed to be required (in other words, the integers L1..N will not all be equal).",
  "Subtasks": "\nIn test cases worth 6/37 of the points, N \u2264 15.\nIn test cases worth another 16/37 of the points, N \u2264 50.\n",
  "Sample Explanation": "The below two diagrams illustrate sample ways in which the ring can be destroyed with as few cuts as possible, with and without the cuts being allowed to intersect:\n\n\n\n",
  "Output Format": "\nOutput two space-separated integers, the minimum number of cuts which must be made with and without them being allowed to intersect, respectively.\n"
}{
  "Example": "Sample Input \n6\n\nSample Output 1\n4\n\nSample Input 2\n10\n\nSample Output 2\n90\n",
  "Input Format": "\nThe first and only line of input consists of a single integer, S.\n",
  "Sample Explanation 2": "\nIn the first case, the next milestone is 10 subscribers, which you'll hit after gaining another 4 subscribers.\nIn the second case, the next milestone is 100 subscribers.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "At last, your YouTube channel is really taking off in popularity! You currently have S (1 \u2264 S \u2264 100) subscribers (you created an alternate account to give your channel at least 1 subscription).\nTo reward your dedicated viewers and encourage more subscriptions, you'd like to put out a special video when your subscriber count reaches the next \"milestone\" quantity larger than its current value. A milestone is a power of 10 (e.g. 10, 100, 1000, 10,000, etc.). If S is already exactly equal to a power of 10, then you're interested in the next larger one.\nYour subscriber count is quickly growing, and you'd like to estimate how much time you'll have to prepare your special video. As such, you'd like to determine the number of additional subscribers required to hit the next milestone count!",
  "Output Format": "\nOutput a single integer, the number of additional subscribers required to hit the next milestone.\n",
  "Title": "WC17 #3 - Like, Comment, and Subscribe!"
}{
  "Example": "Sample Input \n7\nN\nP\nN\nP\nP\nN\nP\n\nSample Output\n0.6\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of a single character, Ri, for i = 1..N.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A new science fiction psychological thriller action-comedy film, The Codefather, is being released this weekend! You'd love to go see it, but you'll first need to convince your friends that it'll be good. Fortunately, trusted movie review websites such as Rotten Tomatoes exist for this purpose!\nFollowing its release in theatres, The Codefather will receive a series of N (1 \u2264 N \u2264 100) reviews from certified Rotten Tomatoes critics, one after another. The i-th review will either be positive (if Ri = \"P\") or negative (if Ri = \"N\").\nAt any given point in time after its first review, each movie on Rotten Tomatoes is considered to have a certain Tomatometer score. This score is a real number, computed as the number of positive reviews received so far divided by the total number of reviews received so far.\nYou're concerned that The Codefather's final Tomatometer score may end up not being too high, as general audiences may not grasp its subtle competitive programming-driven writing. However, if you keep refreshing its Rotten Tomatoes page as new reviews come in, maybe you can catch a point in time at which it has a higher score, and take a screenshot of it to show to your friends! Determine the maximum Tomatometer score which The Codefather will reach at any point after its first review.\nYour answer must have at most most 10\u22125 absolute or relative error compared to the judge's answer to be considered correct.",
  "Output Format": "\nOutput a single real number, the maximum Tomatometer score achieved by The Codefather.\n",
  "Sample Explanation": "After the first 5 reviews, The Codefather has received 3 positive reviews and 2 negative ones, resulting in a Tomatometer score of 3 / 5 = 0.6. This is the largest score that it achieves at any point in time.",
  "Title": "WC17 #3 - Certified Fresh"
}{
  "Example": "Sample Input \nPassW0rd\n\nSample Output 1\nValid\n\nSample Input 2\nCorrectHorseBatteryStaple\n\nSample Output 2\nInvalid\n",
  "Input Format": "\nThe first and only line of input consists of a single string, the password.\n",
  "Memory Limit": "16M",
  "Sample Explanations": "In the first case, the password has 8 characters, with 5 lowercase letters, 2 uppercase letters, and 1 digit, meaning that all of the rules are satisfied.\nIn the second case, the password has two issues \u2013 it's more than 12 characters long, and it doesn't contain at least one digit.",
  "Time Limit": "2.00s",
  "Description": "You'd like to register an account on an extremely entertaining website. You've already selected a username, but it seems that the requirements for choosing a password are quite strict, in order to completely protect your account from being hacked into. The password must be a string between 8 and 12 characters long (inclusive), such that every character is either a lowercase letter (\"a\"..\"z\"), uppercase letter (\"A\"..\"Z\"), or digit (\"0\"..\"9\"). Furthermore, it must contain at least three lowercase letters, at least two uppercase letters, and at least one digit.\nYou've got a potential password in mind, a non-empty string made up of at most 100 characters, each of which is a lowercase letter, uppercase letter, or digit. Rather than entering the password into the site and risking rejection, you'd like to determine for yourself whether or not your password would validly satisfy all of the rules.",
  "Output Format": "\nOutput a single string, either \"Valid\" if the password is valid, or \"Invalid\" otherwise.\n",
  "Title": "WC17 #3 - Uncrackable"
}{
  "Title": "WC17 #3 - Mutual Friends",
  "Example": "Sample Input \n5\n0 0 0 1 2\n0 0 2 0 0\n0 2 0 0 0\n1 0 0 0 1\n2 0 0 1 0\n\nSample Output 1\n5\n1 2\n2 5\n5 3\n3 1\n2 4\n\nSample Input 2\n3\n0 1 1\n1 0 0\n1 0 0\n\nSample Output 2\nImpossible\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of integers, Mi, 1..N, for i = 1..N.\n",
  "Memory Limit": "16M",
  "Sample Explanations": "In the first case, one valid set of 5 friendships is indicated in the sample output. For this set, users 1 and 5 have exactly 2 mutual friends (users 2 and 3) as required, users 1 and 4 have exactly 1 mutual friend (user 2) as required, and so on. Note that there exist other outputs which would also be accepted. For example, the friendship between users 2 and 4 could be replaced with a friendship between users 3 and 4, the friendships could be outputted in any order, and the users in each friendship could be swapped.\nIn the second case, no set of friendships amongst 3 users would result in the required grid of mutual friend counts.",
  "Time Limit": "2.00s",
  "Description": "The social network Google+ has N (2 \u2264 N \u2264 6) users, with user IDs from 1 to N. Each pair of distinct users are either friends with one another, or not.\nYou're given an N\u00d7N grid of values M, with Mi, j (0 \u2264 Mi, j \u2264 N) being the number of mutual friends which users i and j have in common. This corresponds to the number of other users which are friends with both i and j. Note that it does not depend on whether or not i and j are friends with one another. Mi, j = Mj, i for each pair of users i and j, Mi, i is considered to be 0 for each user i.\nGiven the above information, you'd like to guess which users are friends with one another. If there exists a valid set of friendships which result in the given grid of mutual friend counts, then please output the number of friendships F, followed by F lines each describing one of the friendships (with 2 integers, the IDs of the two users involved in the friendship). No two friendships should involve the same unordered pair of users. If there are multiple valid sets of friendships, you may output any of them. If there are no valid sets of friendships, output \"Impossible\" instead.",
  "Subtasks": "\nIn test cases worth 4/13 of the points, N \u2264 3.\n",
  "Output Format": "\nEither the string \"Impossible\", or 1 integer F followed by F lines, the i-th of which contains 2 integers describing the i-th friendship\n"
}{
  "Title": "WC17 #3 - GleamingProudChickenFunRun",
  "Example": "Sample Input \n6\n11 14\n14 23\n5 22\n12 28\n2 6\n22 31\n\nSample Output\n2\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of two space-separated integers, Ai and Bi, for i = 1..N.\n",
  "Memory Limit": "128M",
  "Time Limit": "6.00s",
  "Description": "You've assembled a set of N (1 \u2264 N \u2264 300,000) Twitch clips from a live stream by your favourite twitch.tv streamer. A clip is a video fragment of the stream, and the i-th clip encapsulates the exclusive time interval from Ai to Bi seconds into the stream (0 \u2264 Ai < Bi \u2264 109). The clips are not all guaranteed to be distinct.\nIn an effort to convince your friends to start watching this stream and join you in spamming its chat, you plan to show them some of the clips. You'd like to choose the smallest possible subset S of the clips which still offer a good representation of the whole stream. In particular, each of the N total clips must have some time in common with at least one clip in S. A pair of clips have some time in common with each other if there's a positive amount of time from the stream which is present in both clips \u2013 in other words, if the intersection of their exclusive time intervals is non-empty. For example, clips with time intervals (0, 5) and (4, 10) have some time in common, while clips with time intervals (0, 5) and (5, 10) do not.\nCan you determine the minimum possible number of clips which S can be made up of?",
  "Subtasks": "\nIn test cases worth 5/23 of the points, N \u2264 15.\nIn test cases worth another 11/23 of the points, N \u2264 1000.\n",
  "Sample Explanation": "No single clip can be chosen such that all 5 other clips have some time in common with it. However, there are various valid sets S made up of 2 clips, such as clips 4 (12..28) and 5 (2..6).",
  "Output Format": "\nOutput a single integer, the minimum possible number of clips which S can be made up of.\n"
}{
  "Title": "WC17 #3 - Down for Maintenance",
  "Example": "Sample Input \n2\n3\n33582\n9061\n62057\n3\n78415\n21592\n1344\n5\n50000\n30000\n9061\n66666\n0\n\nSample Output\nUp\nUnknown\nUp\nUnknown\nDown\n",
  "Input Format": "\nThe first line of input consists of a single integer, I.\nThe next line consists of a single integer, N.\nN lines follow, the i-th of which consists of a single integer, Ui, for i = 1..N.\nThe next line consists of a single integer, M.\nM lines follow, the i-th of which consists of a single integer, Di, for i = 1..M.\nThe next line consists of a single integer, K.\nK lines follow, the i-th of which consists of a single integer, Qi, for i = 1..K.\n",
  "Memory Limit": "128M",
  "Time Limit": "4.00s",
  "Description": "Dave spends most of his free time on the internet, and especially loves hanging out on a hot new website. Unfortunately, in order to be able to handle the heavy traffic that it receives, the site frequently needs to be taken down for maintenance!\nThe site's maintenance schedule repeats every 24 hours. During each 24-hour cycle, it has one or more inactive intervals of time for which it's down. Each interval spans some positive amount of time (though it may be arbitrarily short), is less than 24 hours long, and may span from the end of one day to the start of another. All of the intervals are disjoint from one another (in other words, no point in time is inside multiple intervals, inclusive). The site is neither always up nor always down.\nThe schedule isn't publicly available, but Dave has noted down some observations about the site's status at various times of the day. He's made a list of N (0 \u2264 N \u2264 100,000) times of day (measured in microseconds since midnight) at which he knows that the site is up, the i-th of which is Ui (0 \u2264 Ui < 86,400,000,000). He's similarly made a list of M (0 \u2264 M \u2264 100,000) times of day at which he knows that the site is down, the i-th of which is Di (0 \u2264 Di < 86,400,000,000). All N + M of these times are distinct.\nRecently, one piece of information regarding the maintenance schedule has finally surfaced \u2013 the Government of Canada has reported that their site has exactly I (1 \u2264 I \u2264 1,000,000,000) inactive intervals in each 24-hour cycle. However, Dave isn't quite sure whether the government should be trusted\u2026 As such, he'd first like to determine whether or not it's even possible for there to be exactly I inactive intervals according to his own observations.\nIf it is possible, he'd like to use this additional knowledge to help deduce some additional information about the maintenance schedule, in order to optimize his browsing time. He's interested in a list of K (1 \u2264 K \u2264 100,000) possibly non-distinct times of day, the i-th of which is Qi (0 \u2264 Qi < 86,400,000,000). For each of these times, he'd like to determine whether the site would definitely be up at that time, definitely be down, or that its status would be unknown (it might be either up or down depending on how the I inactive intervals are laid out).",
  "Subtasks": "\nIn test cases worth 8/26 of the points, N \u2264 50, M \u2264 50, K \u2264 50, Ui \u2264 100,000, Di \u2264 100,000, and Qi \u2264 100,000.\nIn test cases worth another 9/26 of the points, Ui \u2264 100,000, Di \u2264 100,000, and Qi \u2264 100,000.\n",
  "Sample Explanation": "Consider the second queried time of day (30,000). It's possible for the site to be up at that time, if the pair of inactive intervals are for example 31,000\u202635,000 and 70,000\u20262000. It's also possible for it to be down at that time, if the pair of inactive intervals are for example 65,000\u20265000 and 25,000\u202660,000. On the other hand, the statuses of three other queried times are guaranteed over all possible sets of two inactive intervals.",
  "Output Format": "\nEither the string \"Impossible\" if there can't be exactly I inactive intervals, or K lines, the i-th of which is a string describing the status of time Qi (either \"Up\", \"Down\", or \"Unknown\")\n"
}{
  "Title": "WC17 #3 - Relevant Results",
  "Example": "Sample Input \n5\n9 3 1 4\n11 1 0\n8 2 1 1\n4 2 1 3\n7 2 1 2\n3\n10\n12\n1\n\nSample Output\n9\n18\n0\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of three space-separated integers, Ri, Ci, and Ki, followed by Ki more integers Li, 1..Ki, for i = 1..N.\nThe next line consists of a single integer, M.\nM lines follow, the i-th of which consists of a single integer, Qi, for i = 1..M.\n",
  "Memory Limit": "128M",
  "Time Limit": "7.00s",
  "Description": "You own a group of N (1 \u2264 N \u2264 400,000) webpages dedicated solely to the art of dynamic programming. Each page i includes links to Ki (0 \u2264 Ki < N) other distinct pages, the j-th of which is page Li, j (1 \u2264 Li, j \u2264 N). The total number of links (\u03a3 K1..N) is at most 400,000. You consider a given page b to be \"accessible\" from a given page a if it's possible to follow a sequence of 0 or more links starting from page a and ending at page b.\nUnfortunately, your pages aren't getting as much traffic as you'd like. It's clear that the most promising way of encouraging more people to come across your pages is to somehow cause them to appear earlier in the search results when someone searches for \"dynamic programming\" on the internet's most popular search engine.\nEach page is assigned an integral \"relevancy score\" for a given search query such as \"dynamic programming\", and pages with higher scores then appear earlier in the results for that query. Page i's initial relevancy score is Ri (1 \u2264 Ri \u2264 109). Fortunately, if you donate Ci (1 \u2264 Ci \u2264 104) dollars to the search engine company, you can increase page i's score by 1! You can choose to do so 0 or more times for any page.\nYou're not yet sure about how much money you'd like to spend on helping to make your pages \"more relevant\", so you'll consider a series of M (1 \u2264 M \u2264 400,000) independent questions. For the i-th question, you'd like to determine the minimum amount of money you'd need to spend in order to make all N of your pages \"accessible\" from search results with relevancy scores no smaller than Qi (1 \u2264 Qi \u2264 109). In other words, after you finish increasing all of the pages' scores as necessary, for each page b (1 \u2264 b \u2264 N), there must exist at least one page a such that page a's final relevancy score is greater than or equal to Qi and page b is accessible from page a. Note that all M questions are independent, with changes to pages' scores not carrying over between them.",
  "Subtasks": "\nIn test cases worth 9/38 of the points, N \u2264 2000, \u03a3 K1..N \u2264 2000, and M = 1.\nIn test cases worth another 15/38 of the points, M = 1.\n",
  "Sample Explanation": "If page 1's relevancy score is increased to 10 (for a cost of $3) and page 5's relevancy score is also increased to 10 (for a cost of $6), then all 5 pages will be reachable from search results with relevancy scores no smaller than 10. Pages 1, 2, and 5 will have sufficiently high relevancy score themselves, and page 1 links to page 4 which then links to page 3. This total cost of $9 is optimal.",
  "Output Format": "\nOutput M lines, the i-th of which should consist of a single real number, the minimum cost (in dollars) required such that all N pages are accessible from search results with relevancy scores no smaller than Qi.\n"
}{
  "Example": "Sample Input \nRun\nRun\n\nSample Output 1\nRun\n\nSample Input 2\nFight\nRun\n\nSample Output 2\nUndecided\n",
  "Input Format": "\nThe first line of input consists of a single string, C.\nThe next line consists of a single string, T.\n",
  "Memory Limit": "16M",
  "Sample Explanations": "In the first case, Captain America and Thor both agree to \"Run\", while in the second case, their differing opinions result in their course of action being \"Undecided\".",
  "Time Limit": "2.00s",
  "Description": "On their way to meet up with the remaining members of the Avengers, Captain America and Thor have fallen into an ambush set up by the evil Thanos! They have suddenly found themselves face to face with the Black Order, a fearsome group of supervillains, each with their own dangerous powers. Thanos hopes to deal a crippling blow to the Avengers by taking out two of their members before the impending Infinity War has even begun!\nDespite Captain America and Thor being skillful fighters in their own right, the fact that they're outnumbered poses a serious problem. With the Black Order bearing down on them, they have only moments to decide on their course of action \u2013 should they engage in combat despite the odds, or attempt to escape?\nCaptain America's opinion is represented by a string C, which is equal to either \"Fight\" or \"Run\". Similarly, Thor's opinion is represented by a string T, which is also equal to either \"Fight\" or \"Run\". If the two of them have the same opinion, then it's clear what they'll do! However, if their opinions differ, then their joint indecision may be their downfall\u2026\nGiven the opinions of the two heroes, determine what their course of action will be \u2013 either \"Fight\" or \"Run\" if they agree, or \"Undecided\" if they disagree.",
  "Output Format": "\nOutput a single string, either the heroes' course of action if they agree, or \"Undecided\" if they disagree.\n",
  "Title": "WC17 #4 - Fight or Flight"
}{
  "Example": "Sample Input \n6\n4\n4\n3\n2\n-4\n1\n\nSample Output\n2\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of a single integer, Ai, for i = 1..N.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Bruce Banner is a scientist with a bit of a problem. Whenever he becomes too angry, he transforms into a large green creature with superhuman strength, known as the Hulk! This can be very useful when he's helping the Avengers battle against the forces of evil, but isn't so useful in his daily life.\nNatasha Romanova, the Black Widow, has become concerned that Bruce may be undergoing his transformation too often, so she's going to monitor his activities in secret over the course of one day. She's noticed that Bruce's mind essentially keeps track of an \"anger level\", an integer which starts at 0 at the beginning of each day. During a particular day, Bruce will undergo a sequence of N (1 \u2264 N \u2264 100) experiences after waking up, with the i-th one causing his anger level to increase by Ai (\u22125 \u2264 Ai \u2264 5). Note that his anger level may become negative during the day.\nBruce takes the form of the Hulk whenever his anger level is 10 or greater. This means that he transforms into the Hulk whenever his anger level goes from being less than 10 to being greater than or equal to 10. Natasha is interested in counting the number of times that this transformation takes place (in other words, the number of experiences which cause Bruce to go from not being the Hulk to suddenly being the Hulk). Can you help her count them?",
  "Output Format": "\nOutput a single integer, the number of times which Bruce Banner transforms into the Hulk.\n",
  "Sample Explanation": "Bruce transforms into the Hulk as a result of the 3rd experience (which increases his anger level from 8 to 11), and again as a result of the 6th experience (which increases his anger level from 9 to 10).",
  "Title": "WC17 #4 - Anger Management"
}{
  "Title": "WC17 #4 - The Infinity Stones",
  "Example": "Sample Input \n1\nSoul\n\nSample Output\nMind\nPower\nReality\nSpace\nTime\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of a single string, Si, for i = 1..N.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The Infinity Stones\u2026 A set of six ancient gems with unrivaled power, scattered across the galaxy. Possessing all six would surely grant one the power to rule over all life with no opposition. Which is exactly what Thanos intends to do!\nThe six Infinity Stones are referred to by the following names in alphabetical order:\nMind\nPower\nReality\nSoul\nSpace\nTime\n\nThanos is already in possession of N (0 \u2264 N \u2264 6) of the Infinity Stones, the i-th of which is Si. Each stone is guaranteed to be one of the six mentioned above, the stones may be listed in any order, and no stone is listed multiple times.\nThanos intends to wage a war against the Avengers and anyone else foolish enough to try to stop him, while finishing his search for the remaining Infinity Stones. Determine the names of the 6 \u2212 N remaining stones which Thanos doesn't yet possess, in alphabetical order.",
  "Subtasks": "\nIn test cases worth 12/26 of the points, N = 1.\n",
  "Sample Explanation": "Thanos already has the Soul Stone, so he still needs the other five.",
  "Output Format": "\nOutput 6 \u2212 N lines, the i-th of which consists of a single string corresponding to the name of the i-th stone (in alphabetical order) which Thanos doesn't possess.\n"
}{
  "Example": "Sample Input \n4 5\n.CCC.\nC....\nC.CHC\n..C..\n\nSample Output\n2\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, R and C.\nR lines follow, the i-th of which consists of C characters representing the i-th row of the grid, for i = 1..R.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "An invasion of Earth is underway, marking the beginning of the Infinity War! Thanos has dispatched a legion of cybernetically enhanced Chitauri soldiers to a field in rural America, ordering them to stand by for further instructions. As luck would have it, the Avengers' expert archer Hawkeye happens to be standing in the same field! Though perhaps he's not so lucky after all, as he's only stocked with a single arrow.\nLooking at the field from above, it can be represented as a grid with R rows and C columns (1 \u2264 R, C \u2264 50), aligned with the four cardinal directions (North/East/South/West). The contents of each of the grid's cells can then be represented by one of three characters:\n\"H\": Hawkeye's location\n\"C\": A Chitauri soldier's location\n\".\": Empty space\nNote that the grid contains exactly one \"H\".\nThinking quickly, Hawkeye has realized that he'll need to be as efficient as possible with his single arrow. He can choose to fire it in a straight line from his location, exactly in one of the four cardinal directions (North, East, South, or West). Upon releasing the arrow, it will travel through all of the cells in the chosen direction until it reaches the edge of the field, even freely passing through (and killing) any Chitauri soldiers along the way.\nAssuming that Hawkeye chooses the best cardinal direction to fire his arrow in, what's the largest number of Chitauri soldiers which he can kill?",
  "Output Format": "\nOutput a single integer, the maximum number of Chitauri soldiers which Hawkeye can kill.\n",
  "Sample Explanation": "Hawkeye will kill two soldiers if he fires his arrow to the West.",
  "Title": "WC17 #4 - Efficiency"
}{
  "Title": "WC17 #4 - Wakandan Sabotage",
  "Example": "Sample Input \n2 4 4\n\nSample Output\n6\n",
  "Input Format": "\nThe first and only line of input consists of three space-separated integers, N, M, and K.\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "The Infinity War has begun! Black Panther is well aware of the importance of rallying his supporters together to help defend Earth from the evil Thanos, so he's working on unifying the Wakandan army. Unbeknownst to him, however, Loki has formed a secret alliance with Thanos and is planning on sabotaging Black Panther's efforts.\nThe nation of Wakanda consists of N\u00d7M cities (2 \u2264 N, M \u2264 1000), arranged in an grid with N rows and M columns. In each of the M columns of the grid, there are N \u2212 1 vertical roads connecting pairs of vertically-adjacent cities. Additionally, in the bottom-most and top-most rows only, there are M \u2212 1 horizontal roads connecting pairs of horizontally-adjacent cities. As such, there are M(N \u2212 1) + 2(M \u2212 1) roads in total throughout Wakanda. Each road is exactly 1 km long.\nFor example, if N = 2 and M = 4, the network of cities and roads looks as follows:\n\nLoki has the explosive resources to destroy K (0 \u2264 K < M(N \u2212 1) + 2(M \u2212 1)) roads of his choice. He'd hate for any of his explosives to go to waste, so he'll destroy exactly K roads, no fewer.\nUpon realizing that some roads have been destroyed, Black Panther will still do his best to assemble the Wakandan army together. He'll ask soldiers to travel amongst various cities which are still connected by the remaining roads. Overall, the amount of time required for this mobilization will depend on a single factor \u2013 the maximum shortest distance (along undestroyed roads) between any pair of cities which are still reachable from one another at all. In other words, if Di, j is equal to the shortest distance between cities i and j if they're connected by roads (or is equal to 0 if they're not connected), then the value of importance is max{ Di, j } over all pairs of cities (i, j).\nFor example, if Loki were to destroy the two roads indicated in red below, then the maximum shortest path between any pair of connected cities would be 3 km long (for example, between the two cities marked in green, along the roads indicated in blue).\n\nNaturally, Loki is interested in selecting a set of K roads to destroy such that this value is maximized. Help him determine the maximum possible shortest distance between any pair of connected cities which his sabotage can result in.",
  "Subtasks": "\nIn test cases worth 8/15 of the points, N = 2.\n",
  "Sample Explanation": "Loki may choose to destroy the four roads indicated in red below. The shortest path between the pair of cities marked in green would then be 6 km long (consisting of the roads indicated in blue).\n",
  "Output Format": "\nOutput a single integer, the maximum achievable shortest distance between any pair of cities which are still connected (in km).\n"
}{
  "Title": "WC17 #4 - Strange Travels",
  "Example": "Sample Input \n4 6\n1 2\n2 3\n3 1\n1 3\n4 3\n3 4\n2\n4 2\n\nSample Output 1\n7\n\nSample Input 2\n4 5\n1 2\n3 1\n1 3\n4 3\n3 4\n2\n4 2\n\nSample Output 2\n-1\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, N and M.\nM lines follow, the i-th of which consists of two space-separated integers, Ai and Bi, for i = 1..M.\nThe next line consists of a single integer K.\nK lines follow, the i-th of which consists of a single integer, Si, for i = 1..K.\n",
  "Memory Limit": "64M",
  "Sample Explanations": "In the first case, Doctor Strange can warp through the following sequence of sanctums:\n1 \u2192 3 \u2192 4 \u2192 3 \u2192 1 \u2192 2 \u2192 3 \u2192 1\nIn the second case, Doctor Strange would be able to recover the first artifact and then reach the second one, but he would then be unable to return to sanctum 1 with it.",
  "Time Limit": "4.00s",
  "Description": "Desperate to find more allies to join in the fight against Thanos, the Avengers have requested assistance from Doctor Strange, a powerful magician. Strange is willing to help, but he'll need some assistance of his own first. To fully apply his powers to the fight, he'll need to gather together a set of artifacts from hidden sanctums around the world!\nThere are N (2 \u2264 N \u2264 100,000) sanctums, numbered from 1 to N, spread out all across the Earth. It would take far too long to travel amongst them by conventional means, but Doctor Strange has access to a convenient alternative \u2013 magical portals. There are M (0 \u2264 M \u2264 200,000) one-way portals, with the i-th of them allowing for instantaneous travel from sanctum Ai to Bi (1 \u2264 Ai, Bi \u2264 N, Ai \u2260 Bi). No two portals connect the same pair of sanctums in the same direction.\nThere are K (1 \u2264 K \u2264 N \u2212 1) artifacts which Strange requires, with the i-th of them being held in sanctum Si (2 \u2264 Si \u2264 N). No artifact is in sanctum 1, and no two artifacts are located in the same sanctum.\nDoctor Strange is initially located in sanctum 1, also known as the Sanctum Sanctorum. He'll need to recover all K artifacts back to the Sanctum Sanctorum, one by one. In particular, for each artifact i in order, he'll need to warp through a sequence of 1 or more portals to reach sanctum Si, collect the artifact, and then warp through a sequence of 1 or more portals to return to sanctum 1 before heading back out for the next one. Note that he may not carry multiple artifacts at a time, and must collect the K artifacts in order. Overall, he'll be required to visit the following sequence of sanctums:\n1 \u2192 S1 \u2192 1 \u2192 S2 \u2192 1 \u2192 \u2026 \u2192 1 \u2192 SK \u2192 1\nDetermine the minimum number of portal warps which Doctor Strange will need to perform to achieve his goal. Unfortunately, it may instead turn out to be impossible to visit the entire required sequence of sanctums, in which case you should output \u22121 instead.",
  "Subtasks": "\nIn test cases worth 6/20 of the points, N \u2264 100 and M \u2264 2000.\nIn test cases worth another 6/20 of the points, N \u2264 2000 and M \u2264 2000.\n",
  "Output Format": "\nOutput a single integer, either the minimum number of warps required to recover all of the artifacts, or \u22121 if not all of them can be recovered.\n"
}{
  "Title": "WC17 #4 - Guardians of the Cash",
  "Example": "Sample Input \n3\n2 3 2\n4 5 4\n5 1 2\n\nSample Output\n4\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of integers, Ci, 1..N, for i = 1..N.\n",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "With the fate of the entire galaxy on the line, the Guardians of the Galaxy have naturally been called in to battle against Thanos as well! That being said, their leader, Star-Lord, has realized the potential for a bit of financial compensation along the way. He's successfully secured a hefty stash of solid gold coins for his team before any fighting has even begun!\nWhile waiting for the action to finally get underway, Rocket Raccoon and Groot have decided to amuse themselves with a game involving the coins. For starters, they've drawn a grid on the ground with N rows and N columns (1 \u2264 N \u2264 1000). Then, in each cell (i, j) (the cell in the i-th row and j-th column), they've placed a stack of Ci, j (1 \u2264 Ci, j \u2264 109) coins.\nIf you look at the resulting coin collection from the South (from beyond row 1), all you can make out is the shape of its \"skyline\". This Southern skyline is a sequence of N positive integers, the i-th of which is the number of coins in the tallest stack in the i-th column. Similarly, its Western skyline (when viewed from beyond column 1) is a sequence of N positive integers, the i-th of which is the number of coins in the tallest stack in the i-th row.\nFor example, consider the following arrangement of stack heights:\n2 3 2\n4 5 4\n5 1 2\n\nIts Southern skyline sequence is {5, 5, 4}, while its Western skyline sequence is {3, 5, 5}.\nRocket Raccoon now poses the following challenge to Groot: Remove 0 or more coins from the collection such that it will look exactly the same from the South as from the West (in other words, such that its Southern skyline sequence will be equal to its Western skyline sequence). Groot has a bit of trouble lifting the heavy gold coins, so he'd like to pass Rocket Raccoon's challenge while removing as few of them as possible. What's the minimum number of coins which he must remove from the stacks in total? Note that this value may not fit into a 32-bit signed integer.",
  "Subtasks": "\nIn test cases worth 9/28 of the points, N \u2264 200 and Ci, j \u2264 2 for each cell (i, j).\nIn test cases worth another 9/28 of the points, N \u2264 200.\n",
  "Sample Explanation": "One option is for Groot to remove one coin from the stack in cell (2, 1), one coin from (2, 3), and two coins from (3, 1), resulting in the following arrangement of stack heights:\n2 3 2\n3 5 3\n3 1 2\n\nNote that both its Southern and Western skyline sequences are equal to {3, 5, 3}.",
  "Output Format": "\nOutput a single integer, the minimum number of coins which Groot must remove.\n"
}{
  "Title": "WC17 Finals - Cownterintelligence",
  "Example": "Sample Input \n6 440\n880\n500\n3520\n441\n1320\n440\n\nSample Output\n2\n4\n5\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, N and F.\nN lines follow, the i-th of which consists of a single integer, Mi, for i = 1..N.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The Great Cow-Monkey War of 2017 has left Scarberia in a fragile and unstable state. Interspecies tension is at an all-time high, and both sides are working relentlessly to rebuild their economies, social systems, and militias. Little do the cows and monkeys know that, amidst the turmoil, the world is at risk of being taken over by an even more dangerous foe \u2014 a group of aliens known as the Party of Extraterrestrial Gangsters (or PEG for short)! PEG has decided that it's the perfect time to divide and conquer Scarberia by exploiting its current internal hostilities.\nPrior to their invasion, PEG would like to obtain some intel on the military of each group, starting with the cows. The entire cow army consists of N (1 \u2264 N \u2264 100) soldiers numbered from 1 to N. PEG has sent S (0 \u2264 S \u2264 N) spies to infiltrate the cow army. Each of the spies has chosen a distinct cow soldier to abduct and steal the identity of. In other words, S of the N cow soldiers are now secretly imposters.\nThe commander of the cow army, Bo Vine, is a sharp leader. Recently, he has sensed something amiss with his subordinates and would like to find out if his army has been compromised. Being one of the greatest military strategists of our time, he had long planned for the day that something like this might happen. During the inception of the cow army, a secret system to identify spies was established. This system is based on the fact that all real cows have perfect pitch, and can moo at any musical frequency at will. In the past, Bo Vine had chosen a single secret musical note to share with every cow soldier on the first day of basic training. The fundamental frequency of the secret note to moo is F (1 \u2264 F \u2264 10000) Hz, where F is an integer. When questioned, they must moo this note or be revealed as a spy.\nBo Vine has questioned all of the cows individually and gathered some data. He has recorded that the cow numbered i moos at a frequency of Mi (F \u2264 Mi \u2264 10000) Hz, where Mi is an integer. However, upon inspecting the data, Bo Vine has noticed a big problem with his plan. He realized that he had only told the name of the secret note to the cows, and not its exact frequency. He forgot that the same musical note can be mooed in different octaves, and hence may have different frequencies. Thus, each real cow soldier could have mooed the secret note at frequency F, or at some higher octave with a frequency larger than the fundamental frequency F.\nTo give you a little background in music theory, pitches that are octaves above a given fundamental pitch will have frequencies 2x, 4x, 8x, and all other powers of two times the fundamental frequency. For example, if Bo Vine chose the secret note to be A at 440 Hz as the fundamental frequency, then any cows mooing at frequencies 440 Hz, 880 Hz, 1760 Hz, 3520 Hz, etc. should be deemed to be real cow soldiers. Any other frequency is indicative of an imposter! Given the fundamental frequency and the moo frequency of every cow soldier, please help Bo Vine identify which of them are actually alien imposters.",
  "Subtasks": "\nIn test cases worth 5/10 of the points, F = 1 and 1 \u2264 Mi \u2264 3 for each i.\n",
  "Sample Explanation": "There are 6 cow soldiers. Cows numbered 2, 4, and 5 mooed at frequencies 500 Hz, 441 Hz, and 1320 Hz respectively, which are not power-of-2 multiples above the fundamental frequency of 440 Hz.",
  "Output Format": "\nOutput S lines with a single integer per line, the numbers of all of the cows that are deemed to be imposters. You should output these numbers in ascending order.\n"
}{
  "Title": "WC17 Finals - Redundant Formations",
  "Example": "Sample Input \nCCCMMCMMCMM\n\nSample Output\n7\n",
  "Input Format": "\nThe first and only line of input consists of a single string, S.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "After capturing and interrogating all of the alien spies from within the cow army, Bo Vine has learned of the Party of Extraterrestrial Gangsters's plans for an imminent invasion of Earth. An important realization then dawned on him \u2014 now is not the time to engage in petty quarrels with the monkeys. All of Scarberia must join forces, at least temporarily, to face an even greater evil. Knowing this, Bo Vine approached the Head-Monkey seeking a truce. After a long night of negotiation, the stubborn Head-Monkey at last admitted to the gravity of the situation. Both the cows and monkeys thus decided to unite their armies against the fearsome PEG!\nNow, Bo Vine and the Head-Monkey must discuss battle formations for each of their battalions. To keep it simple, they have both decided to stick with a standard line formation, organized into platoons of cows and monkeys in sequence. In their discussion, they will denote each possible battle formation as a non-empty string S of up to 20 characters. Each character in the string will either be \"C\" or \"M\", denoting either a cow platoon or a monkey platoon, respectively. Of course, the big question is: what is the best possible arrangement of platoons?\nThe aliens of PEG are a mysterious bunch. Bo Vine and the Head-Monkey know that they should be prepared to face all kinds of battle styles. As such, it is certainly a good idea to maximize variety in the formation they choose. Just what does this mean? For a given cow-monkey formation S, let us define a sub-formation of S to be any pattern of one or more cow/monkey platoons which appears at least once within S as a contiguous subsequence. The commanders realize that any sub-formation occurring more than once in S is unnecessary, especially when it overlaps with another instance of itself. To be precise, a sub-formation is considered to be redundant if it occurs at least twice in the original formation S, and two different instances of it overlap with each other (in other words, they have at least one index of S in common).\nGiven a particular formation of cow-monkey platoons that Bo Vine and the Head-Monkey are considering, can you help them count the number of redundant sub-formations?",
  "Subtasks": "\nIn test cases worth 3/12 of the points, S contains at most 4 characters.\n",
  "Sample Explanation": "The redundant sub-formations are \"CC\", \"CMMC\", \"CMMCM\", \"CMMCMM\", \"MMCM\", \"MMCMM\", and \"MCMM\". For example, \"CC\" is redundant because it appears in S starting at both the first and second indices, and these two instances overlap with each other at the second index.",
  "Output Format": "\nOutput a single line consisting of a single integer, the number of redundant sub-formations.\n"
}{
  "Title": "WC17 Finals - An Interspecific Army",
  "Example": "Sample Input \n4\n5 1 9 1\n2 7 4 6\n\nSample Output\n3\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nThe second line consists of N space-separated integers, C1, \u2026, CN.\nThe third line consists of N space-separated integers, M1, \u2026, MN.\n",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "The Great Cow-Monkey War of 2017 has left Scarberia in a fragile and unstable state. Interspecies tension is at an all-time high, and both sides are working relentlessly to rebuild their economies, social systems, and militias. Little do the cows and monkeys know that amidst the turmoil, the world is at risk of being taken over by an even more dangerous foe \u2014 a group of aliens known as the Party of Extraterrestrial Gangsters (or PEG for short)! PEG has decided that it's the perfect time to divide and conquer Scarberia by exploiting its current internal hostilities. Fortunately, Bo Vine and the Head-Monkey have learned of the impending invasion in time, and an important realization has dawned on them: now is not the time to engage in petty quarrels with one another. All of Scarberia must unite, at least temporarily, to face an even greater evil. The animals have thus formed a truce, and started to plan for the upcoming war!\nWith an overall battle formation decided, the cows and monkeys are now ready to fight against the incoming alien invaders! \u2026Well, almost. You see, the commanders realized that it is not too effective to simply line up large platoons of uniformly cows or uniformly monkeys. They must work together at a more local scale, with each cow and monkey taking immediate advantage of each others' strengths and weaknesses. As such, the commanders have decided to pair up cows and monkeys to form individual combat units on the battlefield.\nBetween the united armies, there are N cows and N monkeys (1 \u2264 N \u2264 100,000). The i-th cow has a combat skill level of Ci (1 \u2264 Ci \u2264 106), while the i-th monkey has a combat skill level of Mi (1 \u2264 Mi \u2264 106). Each cow is to be paired up with a monkey to form a combat unit, such that there are N combat units total and each of the 2N animals is a part of exactly one unit.\nA combat unit is most effective when the skill levels of its two members don't differ too greatly. More formally, we can define the combat skill differential of a given unit to be the absolute difference between the combat skill levels of the two animals making up that unit. For a given pairing of the 2N animals, let D denote the maximum combat skill differential across all N combat units. Bo Vine and the Head-Monkey would like to pair up the animals such that D ends up being as small as possible. Can you help them determine the minimum possible value of D which can be achieved?",
  "Subtasks": "\nIn test cases worth 2/9 of the points, N \u2264 10 and 1 \u2264 Ci, Mi \u2264 2 for each i.\nIn test cases worth another 2/9 of the points, N \u2264 1000 and 1 \u2264 Ci, Mi \u2264 2 for each i.\nIn test cases worth another 4/9 of the points, N \u2264 1000.\n",
  "Sample Explanation": "One possible optimal arrangement is to pair:\ncow 1 with monkey 2 (a combat skill differential of |5 \u2212 7| = 2)\ncow 2 with monkey 1 (a combat skill differential of |1 \u2212 2| = 1)\ncow 3 with monkey 4 (a combat skill differential of |9 \u2212 6| = 3)\ncow 4 with monkey 3 (a combat skill differential of |1 \u2212 4| = 3)\nThe maximum of these differentials is 3, and it is not possible to go any lower.",
  "Output Format": "\nOutput a single integer, the minimum possible value of D which can be achieved.\n"
}{
  "Title": "WC17 Finals - Cowmmunication Network",
  "Example": "Sample Input \n4 5\n1 2 -1\n2 3 -5\n3 4 -3\n4 1 -2\n4 2 -3\n\nSample Output 1\n-6\n\nSample Input 2\n5 4\n1 2 5\n2 3 2\n3 1 -1\n4 5 0\n\nSample Output 2\nImpossible\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, N and M.\nM lines follow, the i-th of which consists of three space-separated integers, Ai, Bi, and Ci, for i = 1..M.\n",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "Great military strategists know that a battle occurs beyond just the front lines. To prepare for the the upcoming war against the Party of Extraterrestrial Gangsters, the cows and monkeys will need to have an impeccable communications network for relaying important military commands behind the scenes. To this end, chief scientist of the bovine army Guglielmoo Marcowni has developed a powerful new technology \u2014 the radio! While his radio technology is very impressive, it sometimes suffers from the issue of poor signals. To quantify the smoothness of a network, Marcowni has developed a measure of signal quality known as Communication Compatibility. A large Communication Compatibility score between radios suggests a great connection, a negative score suggests a very poor connection, and a score of zero suggests a so-so connection.\nThe cow-monkey army is made up of N (2 \u2264 N \u2264 100,000) combat units, numbered from 1 to N. Each unit carries a single radio that can communicate with other radios via specific communication channels. In total, there are M (0 \u2264 M \u2264 200,000) potential communication channels amongst all of the units. Implementing the i-th communication channel would allow units Ai and Bi (1 \u2264 Ai, Bi \u2264 N; Ai \u2260 Bi) to radio each other directly, with a Communication Compatibility of Ci (\u2212106 \u2264 Ci \u2264 106). No two communication channels connect the same unordered pair of combat units.\nBo Vine and the Head-Monkey want to create a communication network out of one or more of the M potential communication channels. The network must be constructed such that every pair of combat units is able to communicate over the network, either directly or indirectly. If a combat unit i can communicate with both combat units j and k (either directly or indirectly), then combat units j and k are also considered able to communicate with each other indirectly.\nBo Vine and the Head-Monkey want to make their network as smooth as possible. Naturally, their choice will be based on the Communication Compability scores of the channels they choose to implement. To help them quantify the overall smoothness of the network, Marcowni has defined a benchmark known as the Cumulative Communication Compatibility (CCC) score. The CCC score of the network is defined to be the sum of the Communication Compatibilities of all communication channels that make up the network. Please help Marcowni determine the maximum possible CCC score that a valid network connecting all N combat units could have (note that this value may not fit into a 32-bit signed integer). Unfortunately, it's possible that no such valid network may exist, in which case you should report \"Impossible\" instead.",
  "Subtasks": "\nIn test cases worth 3/13 of the points, N \u2264 10, M \u2264 10, and Ci < 0 for each i.\nIn test cases worth another 3/13 of the points, N \u2264 1000, M \u2264 2000, and Ci < 0 for each i.\nIn test cases worth another 6/13 of the points, N \u2264 1000, M \u2264 2000.\n",
  "Sample Explanation": "In the first example, one possible optimal network is by implementing the first, third, and fourth communication channels. The CCC score of such a network is (\u22121) + (\u22123) + (\u22122) = \u22126.\nIn the second example, there is no way to allow any of the first three combat units to communicate with any of the last two units, so it is impossible to build a valid network.",
  "Output Format": "\nOutput a single line consisting of either a single integer, the maximum possible CCC score of any valid network, or the string \"Impossible\" if no valid network exists.\n"
}{
  "Title": "WC17 Finals - Ultimatum",
  "Example": "Sample Input \n5\n4 1\n2 50\n6 400\n4 100\n3 33\n3\n5 1 5\n4 2 2\n2 2 4\n\nSample Output\n584.0\n584.0\n550.5\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of two space-separated integers, Hi and Ci, for i = 1..N.\nThe next line consists of a single integer, M.\nM lines follow, the i-th of which consists of three space-separated integers, Xi, Li, and Ri, for i = 1..M.\n",
  "Memory Limit": "64M",
  "Time Limit": "5.00s",
  "Description": "The Party of Extraterrestrial Gangsters are not at all pleased with how their invasion of Earth is going so far. Their soldiers on the ground are losing in combat to the well-prepared battalions of cows and monkeys, and their nuclear bomb has been defused with particular ease. Fortunately for them, PEG's space battleship is also outfitted with an enormously powerful vaporizer beam capable of wiping out Scarberia in an instant. The PEG leaders were hoping to avoid resorting to such a merciless tactic, but they're running out of alternatives. However, before proceeding with any vaporization, they'll issue an ultimatum to the Scarberian leaders, detailing the amount of potential destruction and providing an opportunity for unconditional surrender instead.\nDowntown Scarberia has a row of N (1 \u2264 N \u2264 200,000) skyscrapers, numbered 1 to N from left to right. Skyscraper i has a height of Hi stories (1 \u2264 Hi \u2264 109), and is occupied by Ci citizens (1 \u2264 Ci \u2264 109).\nThe PEG leaders have come up with a list of M (1 \u2264 M \u2264 200,000) possible plans of attack using their vaporizer beam. The i-th plan is defined by three integers, Xi, Li, and Ri (0 \u2264 Xi \u2264 N; 1 \u2264 Li \u2264 Ri \u2264 N). It consists of two phases, as follows:\nThe beam will lock onto the tallest remaining un-vaporized skyscraper, and vaporize it. If there are multiple such skyscrapers with equal heights, they'll choose one of them uniformly at random. They'll repeat this process Xi times, meaning that exactly Xi skyscrapers will get vaporized in this phase.\nThe beam will vaporize all of the un-vaporized skyscrapers numbered between Li and Ri, inclusive. Note that some of these skyscrapers may have already been vaporized in phase 1 of the attack, meaning that anywhere between 0 and Ri \u2212 Li + 1 skyscrapers (inclusive) will get vaporized in this phase.\nFor each possible plan of attack, the PEG leaders are interested in the expected number of citizens who would get vaporized in it (that is, the expected total number of citizens occupying all of the vaporized skyscrapers). Disclosing these statistics in an ultimatum would be sure to drive the Scarberian forces to immediately surrender! Help them determine this value for each of the M plans of attack. Note that none of the plans will actually be executed (yet), meaning that no vaporization will carry over between them.",
  "Subtasks": "\nIn test cases worth 7/26 of the points, N \u2264 2000, M \u2264 2000, and Hi = 1 for each i.\nIn test cases worth another 6/26 of the points, N \u2264 2000 and M \u2264 2000.\n",
  "Sample Explanation": "In the first plan of attack, all 5 skyscrapers would already get vaporized in the first phase.\nIn the second plan of attack, the 4 tallest skyscrapers would get vaporized in the first phase, leaving just skyscraper 2 behind, which would happen to get targeted in the second phase anyway.\nIn the third plan of attack, phase 1 would involve vaporizing skyscraper 3 followed by either skyscraper 1 or 4, with 50% probability each. In the end, either 550 or 551 citizens would be vaporized, with 50% probability each (depending on the skyscraper chosen in phase 1).",
  "Output Format": "\nOutput M lines, the i-th of which contains a single real number, the expected number citizens who would get vaporized in the i-th plan of attack.\nYour answer must have at most 10\u22125 absolute or relative error compared to the judge's answer to be considered correct.\n"
}{
  "Title": "WC17 Finals - Crop Rectangles",
  "Example": "Sample Input \n3\n3 1\n3 2\n1 1\n\nSample Output\n2\n-1\n0\n",
  "Input Format": "\nThe first line of input consists of a single integer, N.\nN lines follow, the i-th of which consists of two space-separated integers, Ri and Ci, for i = 1..N.\n",
  "Memory Limit": "128M",
  "Time Limit": "6.00s",
  "Description": "After weeks of gruelling combat, the unified cow-monkey army has been abruptly called home. Bo Vine and the Head-Monkey have both realized that continuing to fight this war against the Party of Extraterrestrial Gangsters is senseless \u2014 if the aliens are provoked into using their devastating vaporization beam, Scarberia is surely doomed. However, they're not prepared to just surrender the Earth to PEG either. Perhaps an alternative resolution can be found? Perhaps an offer of peace can be extended to PEG?\nUpon consultation with his leading extraterrestrial linguistics experts, Bo Vine has devised a plan for communicating with the aliens \u2014 using the universal alien language of crop formations! Crop circles are difficult to create, but crop rectangles will do just as well. In order to convey a message of peace, Bo Vine has determined that a sequence of N (1 \u2264 N \u2264 20) crop rectangles will be necessary, the i-th of which should be Ri metres tall and Ci metres wide (1 \u2264 Ri, Ci \u2264 80) when viewed from above.\nUnfortunately, having spent just about all of their resources on the war against PEG, the cows and monkeys are having a hard time finding any equipment to mow down crops. The Head-Monkey's old lawnmower will have to do. The lawnmower is able to mow down a 1m\u00d71m square of crops at a time. So, for each crop rectangle i, Bo Vine has drawn out a grid of 1m\u00d71m cells in a field of crops, with Ri rows and Ci columns. What remains is for the Head-Monkey to simply drive the lawnmower around and mow down the crops in all grid's cells! They'll intend to repeat this process independently for all N crop rectangles.\nFor each crop rectangle, the lawnmower will need to start in the bottom-left corner of the grid, facing in any cardinal direction of the Head-Monkey's choice. After that, at any point, the Head-Monkey may either drive the lawnmower forwards by one cell (in the direction it's currently facing), or turn it 90 degrees in either direction (either clockwise or counter-clockwise). Driving it forwards by one cell consumes one litre of gas, while turning it doesn't consume any.\nMuch to the Head-Monkey's dismay, her old lawnmower doesn't handle as well as she seemed to remember. In particular, its turning radius is quite lacking, resulting in her needing to drive it forwards at least twice between any two consecutive turns. For example, she may not turn \u2192 turn or turn \u2192 drive \u2192 turn at any point, but she may turn \u2192 drive \u2192 drive \u2192 turn.\nFor each crop rectangle i, the Head-Monkey will need to keep driving the lawnmower around until it has visited each of the Ri\u00d7Ci cells at least once, thus mowing down crops in the required shape. Note that cells may be driven through multiple times if necessary. The lawnmower must never leave the boundaries of the grid, as that would cause the crop formation to no longer be accurate. Unfortunately, the lawnmower's poor turning radius may result in certain crop rectangles being impossible to create altogether.\nThe Head-Monkey also doesn't want to risk running out of gas before the crop formations are complete, lest they accidentally send a message of war to PEG instead! As such, she'd like to minimize the amount of gas used. For each independent crop rectangle, help her determine the minimum amount of gas required to create it, or report a value of \u22121 if it's impossible to do so.",
  "Subtasks": "\nIn test cases worth 4/35 of the points, 1 \u2264 Ri, Ci \u2264 4 for each i.\nIn test cases worth another 8/35 of the points, 1 \u2264 Ri, Ci \u2264 6 for each i.\n",
  "Sample Explanation": "For the first rectangle, assuming that the lawnmower starts in the bottom-left corner of the grid facing upwards, it can simply drive forwards twice to mow down the remaining two cells.\nFor the second rectangle, it's possible to mow down up to 5 different cells \u2014 if the lawnmower starts facing to the right, it can drive forwards, turn counter-clockwise (to face upwards), drive forwards twice, turn counter-clockwise (to face to the left), and drive forwards once. However, it's impossible to mow down all 6 cells in the grid.",
  "Output Format": "\nOutput N lines, the i-th of which consists of a single integer, the minimum amount of gas (in litres) required to create the i-th crop rectangle, or \u22121 if it's impossible\n"
}{
  "Example": "Sample Input \n12 3\n1\n4\n2\n6\n5\n1\n1\n8\n7\n3\n1\n2\nSample Output\n10",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "Hopscotch is a simple game which can be played with a group or family or individually.\nDiana has been playing the game for years and is easily the best Hopsscotch player on the playground.\nHer friends have decided to challenge her title by inventing a complicated version of Hopscotch called \"Jumpscotch.\"\n\nIn Jumpscotch, a single row of squares is drawn along the ground and a positive integer is drawn inside each square.\nStarting on the first square, Diana must jump from square to square and finish on the last square.\nAfterwards, her 'score' is the sum of all numbers which she has touched.\nThe objective of Jumpscotch is to get a lower score than your opponent.\nDiana knows that she is only strong enough to hop a certain distance (d). \nShe is also smart enough to know that with this limitation, the best 'path' is not always obvious. \nDiana wants your help in determining the best path, given each square's value and her maximum hopping distance.\n",
  "Output": "On a single line, output the smallest possible score that Diana can obtain.",
  "Title": "SMAC 08/09 (Oct) #3 - Jumpscotch",
  "Input": "On the first line, the integers n (1 \u2264 n \u2264 1,000,000) and d (1 \u2264 d \u2264 10).\nThere will be one test case where Diana has super human strength and d = 5,000 while n = 1,000,000.\nThe next n lines that follow have positive integers \u2264 1000, representing the number drawn inside each square.\nThese lines are listed, in order, from start to finish."
}{
  "Example": "Sample Input \n4\n4\n1\n2\n0\nSample Output\n13",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Output": "",
  "Description": "Farmer John has just opened up a new daycare for cows of all sizes. The daycare consists of n (1 \u2264 n \u2264 100, 000) cow pens. Each cow pen is built differently to accommodate cows of a unique size from 1 to n.\nThere is a mother cow inside every pen whose job is to take care of all the cows inside it. When there are no cows inside her pen, she does not need to do any work. For every new cow added to her pen, the amount of work she has to do to take care of each individual cow is increased by 1.\nFor example, if she has 1 cow she does 1 piece of work. If she has 2 cows she does 4 pieces of work. 3 cows is 9 pieces of work. So on and so forth.\nThe daycare had become so popular that Farmer John is taking in more cows than the mother cows  can handle. To fix this, he realizes that he can lessen the number of cows in some pens (and thus the amount of work done by some mothers) by moving smaller cows to the pens built for larger cows.\nOnly smaller cows can be moved to larger pens (larger cows can not be moved to smaller pens). The size of each cow in a pen does not affect the amount of work done by a mother cow (only the quantity does). Moreover, there is no limit to the number of cows that can be moved inside a pen.\nGiven the number of cow pens and the number of cows of each size, move the cows around so that the total amount of work done by all of the mother cows is minimal.",
  "Explanation of Sample Data": "Two of the size 1 cows are moved to pen 2 and another is moved to pen 3. The size 2 cow and one of the size 3 cows move to pen 4. The mothers in 2, 3, and 4 each do four pieces of work while the mother in pen 1 does 1 piece of work. 1 + 4 + 4 + 4 = 13. While there are other equally optimal placements, there exist none better than 13.\nBefore (Total Work = 21)\n\nAfter (Total Work = 13)\n\nMother cows have not been included in these diagrams.",
  "Title": "SMAC 08/09 (Oct) #4 - Daycare",
  "Input": "The first line of the input consists of a single integer, n (1 \u2264 n \u2264 100,000), representing the number of uniquely sized cow pens.\nThe next n lines that follow will each contain a non-negative integer \u2264 100 on the i'th line, representing the number of cows that are size i. There will be one test case where cows rule the planet and each integer may be as large as 100,000."
}{
  "Example": "Sample Input \n7 5 30\n0 4 0 5 5 8 9\n1 1 3 2 2 3 4\n0 1 2 1 4 1 1\n2 9 1 4 5 3 6\n7 7 1 2 4 9 7\nSample Output 1\n17\nSample Input 2\n8 8 145\n1 5 2 3 3 8 0 1\n0 6 6 7 2 5 4 9\n6 5 1 1 1 2 3 4\n4 3 1 2 1 5 6 0\n9 8 1 4 2 1 8 3\n3 2 7 1 8 9 3 5\n5 5 6 0 1 3 0 7\n1 0 8 3 3 2 5 1\nSample Output 2\n44",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "A flat rectangular grid of land separates four cities. Each city is situated on a different edge of the rectange\nThe four cities now wish to be joined by exactly 2 roads so that citizens may travel freely to and from each city. \nOne road will join the North and South cities. \nAnother road will join the West and East cities. The two roads will, of course, intersect somewhere, premitting anyone to travel to and from all four cities. \nEach road is a solid rectange of any width, with sides parallel to x and y axis.\n\nThe land separating the cities is a w x h grid of non-negative integers. \nEach value represents the cost of paving a road over the cell. \nTo pave an entire road, all covered cells are paved and paid for exactly once. \nWhen paving the second road, the intersection does not need to be paved a second time.\nIf the roads are larger, more cars can travel from city to city. \nTherefore, you wish to maximize the total number of paved cells. \nHowever, you can not exceed the budget allocated for this job.\nDetermine the maximum number of cells which can be paved to build exactly 2 roads within the provided budget.",
  "Output": "A single integer representing the largest possible area which can be paved with the given budget. If it is impossible to build both roads, output 0.",
  "Title": "SMAC 08/09 (Oct) #5 - Crossroads",
  "Input": "The first line contains integers w, h (1 \u2264 w, h \u2264 500) and budget (0 \u2264 budget \u2264 2 000 000 000).\nThe next h lines contains w non-negative integers each \u2264 8000, representing the cost of paving a road over that cell."
}{
  "Optimal Sample Interaction (Correct)": "Input in italics.\n324 842 222 11\nThis obtains a score of 3 (which is the maximum).",
  "Hints": "",
  "Suboptimal Sample Interaction (Incorrect)": "Input in italics.\n322 1622 11\nThis obtains a score of 2 (this is not the maximum).",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Grading": "For each interaction where you obtain the maximum possible score, you will have passed that piece of test data. If you ever make an illegal move, or get a lower score than the best possible, you will have failed that piece of test data.",
  "Description": "For this challenge, things are a little different. You are playing a game against Sane himself!\nThe game goes like so, starting with a positive integer n, and a score = 0.\nI input the integer n.\nThe game ends here if n = 1.\nYou respond by outputting two positive integers which multiply to n.\n\t\tThis step increases your score by 1.\nI choose one of the numbers you outputted. Let this number be n.\nRepeat from step 1.",
  "Output": "Every line will be two integers, separated by a space.\nRemember to end each line with a newline character.\nYou should flush the output buffer after each line (fflush(NULL) in C/C++, flush(output) in PAS).",
  "Title": "SMAC 08/09 (Nov) #3 - Factor Game",
  "Input": "Every line will be a legal integer n (1 \u2264 n \u2264 2,000,000,000), according to the rules of the game. I will stop inputting numbers as soon as I enter 1."
}{
  "Example": "Sample Input \nSample Output\n210",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Diagram": "",
  "Description": "",
  "Output": "",
  "Title": "SMAC 08/09 (Nov) #4 - Infinite Degrees",
  "Input": ""
}{
  "Example": "Sample Input \nSample Output\n6Jim 4Gerald 3Noobie111 3Denise 22GudAtChessLOL 2AwesumChessPlyr1337 2",
  "Memory Limit": "128M",
  "Time Limit": "6.00s",
  "Diagram": "",
  "Description": "",
  "Output": "",
  "Title": "SMAC 08/09 (Nov) #5 - Intelligent Stats",
  "Input": ""
}{
  "Example": "Sample Input \n4\n*k**\n**k*\n*k*d\n**d*\nk\n-1\n\nSample Output\n2\n NOTE: this is obtained by placing k at row 2, column 1; area = 2\u00bd * 2\u00bd = 2 ",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "This is the first day of orientation and the frosh are already ready to isolate themselves.\nTherefore, they have been divided into 2 groups or \"tribes\" (and never the two shall meet).\nThe two tribes are called the Keeg and the Dren.\nThe orientation leaders have divided the barren wasteland that is the city of Waterloo into a giant grid;\nboth tribes are to compete in a contest on this grid.\nTo begin the game, a random number will be drawn from a hat to represent\nthe number of turns that will take place before the game is declared over.\nDuring each turn, each tribe will alternately position one of their students at one of the grid positions.\nThe goal is as follows.  If you draw a straight line between students of the same tribe, \nit might turn out that 4 students are positioned so that they form a square (not necessarily parallel to the grid axis).\nOn the last turn, the object of each tribe is to position a student of your tribe on the grid so that the square of \nlargest possible area is formed using the students of that tribe on the grid as vertices of the square \n(the area is calculated from the coordinates of the square).  \nThe tribe that forms that largest area wins and the losing tribe is kicked off the island (translation: kicked out of Waterloo engineering).  Note that this event has been approved by Waterloo faculty as a much more efficient method of weeding out students from first year engineering.",
  "Output": "The area of the largest such square that can be formed by the addition of the last student of the appropriate tribe.",
  "Title": "WC01 - S - Survivor",
  "Input": "N (the size of the square grid, N \u2264 60; N = -1 signals the end of input)\nThe next N lines represent the grid itself at the beginning of the last turn: \"*\" means an unoccupied grid position, k represents a Keeg student, d represents a Dren student.\nThe next line of input is either \"k\" or \"d\".  You must place a student of the appropriate tribe (depending on whether the input is \"k\" or \"d\") on a position on the grid to come up with the square of maximum area.\n"
}{
  "Example": "Sample Input \n5 5\nABCDE\nGGHIJ\nLLMNO\nGQRST\nUVWXY\n96666\n32222\n91222\n89222\n94444\n1 1\n1 2\n2 5\n3 3\n2 1\n\nSample Output\nA\nBCDE\nJOTYX then WVUQMR repeated\nMRWVUQ repeated\nG then LGLG repeated\n\nNote: We are interested in knowing about how the  path loops, not how the ASCII string loops: so for the fifth sample test case, GL repeated, G then LG repeated, GLGL repeated, and G then LGLGLGLG repeated would all be wrong.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Losing the office pools would be an intelligence failure that would certainly cost M her job as chief of MI6. Resorting to means employed during the cold war, she decides to take action on several fronts. She decides to foment a revolution on Survivor Island to kick out the current dominant player and install her choice (Amber) as the winner of Survivor. She quickly deploys John Patrick Mason (a crack commando of the Special Air Service, SAS), a veteran of inserting onto ex-prison islands (his last mission was on Alcatraz). His job would be to infiltrate Survivor Island (Australia) and take the necessary measures to ensure that the \"right\" contestant would win.\nMason paradrops onto the island at night at a designated coordinate and inexplicably blurts out to no one in particular, \"Welcome to the Rock.\" He has been provided with a rather strange map to the main camp. At each coordinate on the map, a number is listed (1-9), that encodes the direction that he must next travel from that coordinate to reach the next coordinate. Note that the map was prepared by P, who isn't always sound of mind, and thus it might turn out that the directions given would lead him to fall of the island or go in circles (and since it is pitch-black he can't tell if he's about to fall off the island).\n Consider the island to be an N by N grid with each coordinate labelled with an ASCII character. The map consists of an N by N grid with each coordinate labelled with a number from 1-9 (N=8, NE=9, E=6, SE=3, S=2, SW=1, W=4, NW=7), as shown below in Figure 1, indicating the direction to travel. Please note that 5 will never appear in the input, and does not correspond to any direction. Your job is to report the grid coordinates that John travels (i.e. a string of ASCII characters). If there is a circular path, report it. If he falls off the island, that is the end of the path.",
  "Output": " For each starting position, describe the path that Mason follows by outputting the labels of the positions he walks along in the format shown below.",
  "Title": "WC01 - The Rock",
  "Input": " The first line contains N, the size of the grid (1 \u2264 N \u2264 100) and T, the number of test cases (starting positions). The next N lines show the labels of the island grid (each line contains N characters). The next N lines similarly show the directions on the grid that Mason should follow. The remaining T lines will each contain a test case in the form R C, (1 \u2264 R,C \u2264 N) the row and column that Mason is to start at (1 1 would be the northwest corner, N N would be the southeast)."
}{
  "Example": "Sample Input \n3\n  7 4 2 1 3 6 5 7\n  8 6 2 1 4 8 9 11 10\n5 9 7 12 5 11\nSample Output\n1 3 2 5 7 6 4\n  1 4 2 10 11 9 8 6\nNo such tree",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "There\u2019s a problem. After following  his map to what should have been the Okagor camp, Mason realizes that the  mission will fail, for he has landed on Temptation  Island, not Survivor Island.  Since John Patrick Mason bears a passing resemblance to Sean Connery, he is  quickly surrounded by a bevy of women who are quite forthcoming with their  phone numbers. Pulling out his standard issue SAS black book, Mason quickly  jots down the numbers he is being given. But what if he is captured by the  men\u2019s camp\u2026who knows what havoc would be wreaked if the phone numbers fell into  their hands. As a result, he encrypts the number using a simple method that  reckons back to his computer science days at Seton Hall. He considers the  digits of the phone number to represent the postfix traversal of a binary  search tree (see next page for an explanation of binary search trees). He  encrypts them by writing down the prefix traversal of the same tree. Later that  evening, someone in the men\u2019s camp steals Mason\u2019s black book and tries to  decrypt the information. Immediately recognizing the code as a post-to-prefix  encryption he sets about decrypting the phone numbers.\nEach phone number is a series of  positive integers no greater than 32767 (each \u201cdigit\u201d is an integer) and no  phone number contains any duplicate digits.\nYour job is to decrypt a series of  numbers (convert them back from prefix to postfix). Although it is guaranteed  that the digits are distinct, for some inputs a search tree with the desired  prefix traversal cannot be formed. If so, print out No\u00a0such\u00a0tree;  otherwise, print out the decryption, i.e. the postfix traversal of the same  tree. Note that with the installation of new area codes, the phone numbers can  be up to 500 \u201cdigits\u201d long.",
  "Output": "For each input, output either the  decoded phone number, or No such tree.",
  "Title": "WC01 - The Island Of Dr. Strangelove",
  "Input": ""
}{
  "Example": "Sample Input \n3\n  64\n  0\n897112\nSample Output\n1\n  0\n106715",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "P constructs the time machine  outlined in Act I and has traveled back in time to this question (Act I is problem  8). However, there is a slight problem in the programming. The machine works in  binary, but by a LIFO (last-in, first-out) queue for all numbers that it  processes. Therefore, when you type in a number (in base 10) corresponding to  the time period you wish to travel to, it converts it to binary (like all  computers) but then reads it in LIFO order. Therefore, the last binary digit in  the binary representation of the time period (ie. the leftmost digit) is the  first one read and the first digit (the rightmost one) is the last one read. \nThe net result is that to  compensate for P\u2019s inadequate programming skills, you need to do the following:  If you wish to go to time period X (0 \u2264 X \u2264 1048575),  you need to convert X to binary, reverse the bit order and then convert  back to base 10. This final number is the one that you will actually enter into  the computer. Making this calculation is your task.",
  "Output": "For each input, output the final  number in base 10 (i.e. with reversed bit order) on a separate line.",
  "Title": "WC01 - Back to the Future",
  "Input": "The first line of the input contains T, the number of test cases.\nThe remaining T lines of  the input each contain a number X to be converted (in its original base  10 format)."
}{
  "Example": "Sample Input \n2\n  5\n  6 4 4 2 6\n  7 8 5 3 7\n  4 2 4 4 3\n  7 1 3 6 5\n  8 6 3 1 2\n  4\n  6 5 4 3\n  5 4 3 2\n  4 3 7 3\n3 2 3 4\nSample Output\n1\nTrapped!",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "We seem to have forgotten about  our lost SAS agent (from problem 1). It\u2019s time for John Patrick Mason to leave  the men\u2019s camp on Temptation   Island. Not by choice.  Every man decided that he was a threat to their respective girlfriends and thus  put a block on him. (Don\u2019t know what a block means? You clearly haven\u2019t been  watching enough TV!) Deciding that that it was no longer worthwhile to remain  on the island, he decides to steal a bobsled from the Jamaican bobsled team  that just happens to be partying it up at the women\u2019s camp. With the bobsled,  he must move from the women\u2019s camp at the northwest corner of the island  to the extraction point on the southeast corner of the island. However,  you know that bobsleds have no motors and thus rely on momentum to move. \nThe bobsled can gain momentum if  it moves downhill (e.g. it gains 4 units of momentum by moving from a point 5  metres high to an adjacent point 1 metre high). Similarly, moving uphill  results in a loss of momentum units. Amazingly, this bobsled has been designed  to be frictionless and thus loses no momentum on flat terrain. Lastly, when you  change direction, all momentum is lost (\u201cWhy,\u201d you ask? How else is it supposed  to turn on a frictionless surface without stopping first?). Clearly, since it  is the momentum keeping you moving, you can\u2019t go anywhere with negative  momentum. However, since the ground is frictionless, you can move with 0  momentum but only downhill or on level terrain.\nYou can move in any of the 8  cardinal directions but must not fall off the island. If you do, you will be  immediately consumed by a ring of hungry sharks that encircle the island. You  have obtained a topographical map of the island which lists the elevation at  each grid location on the island. Note that the island is a square. Mason would  like to leave the island with as much momentum as possible, since this makes  for a better slow-motion escape scene.",
  "Output": "For each test case output the maximum amount of  momentum with which Mason can leave the island, or Trapped! (remember, if  there is no exclamation mark, all is lost) if he cannot reach the extraction  point.",
  "Title": "WC01 - Cool Runnings",
  "Input": "The first line contains T,  the number of test cases to follow.\nEach test case consists of a  positive number N (2 \u2264 N \u2264 100)  representing the size of the island.\nThis is followed by an N x N grid of integers representing heights at different parts of the island. No  height will exceed 100 and all entries will be separated by a single space."
}{
  "Example": "Sample Input \n2\n3\n-1 1 1\n1 -1 2\n1 2 -1\n5\n-1 6 5 3 -1\n6 -1 -1 -1 -1\n5 -1 -1 -1 -1\n3 -1 -1 -1 2\n-1 -1 -1 2 -1\n\nSample Output\n4\nInfinity\n",
  "Output ": "For each test case, output a line with the minimum distance Bond must travel to loop back to the CBS building. If there is no such cyclic route that will allow Bond to return to CBS headquarters, print out Infinity.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Having been briefed by John Patrick Mason that his mission was a failure, M decides on another course of action. Instead of influencing who will be the winner, she will simply find out who it is ahead of time (remember, the series is aired several months after it is shot). She will send her best agent, James Bond, to infiltrate CBS headquarters and determine who will be the winner.\nHaving found an answer, Bond temporarily eludes CBS security (see the declassified documents in problem 9 for how he does it).\u00a0 He now finds himself next to the CBS logo (a big golden eye) on the ground floor of headquarters with the required information. A chopper will meet him there and pick him up shortly. However, CBS security, along with their Apache attack helicopter, has been mobilized and begins to chase Bond into the street. Commandeering a car, Bond drives through the city to avoid the attack helicopter trying to blow him away. However, the attack helicopter cannot seem to hit Bond and keeps taking out the road right behind his car, thus preventing him from traveling the same road (or intersection) again. As Bond drives through the city, he realizes that he has to meet the chopper as soon as possible back at the CBS building where he started. However, since the roads behind him are being taken out, he can never take the same road or the same intersection twice. Fortunately, the OnStar navigation system in his car was programmed by P (Q\u2019s boss, Peter Plachta) and tells him the quickest route to take to get back to the CBS building and the total distance he would be traveling on this cyclic route. Note that it just happens to turn out that the distance the computer quotes is the shortest such route in the entire city. \nYour job is the following. Given a roadmap of the city in the form of an adjacency matrix A (where Aij \u2013 the distance between intersections i and j \u2013 is a positive integer), find out the distance that the computer quotes. Remember some of the rules:\nAll roads are two-way. The CBS building is on one of the intersections.\nNeither the same intersection, nor the same road can be traveled twice (except for the starting intersection, which is the CBS building).\nBond has to start and end in the same place (CBS).\nThe cyclic route that Bond takes from CBS just happens to be the shortest cycle in the city.",
  "Title": "WC01 - The Man With The Golden Eye",
  "Input": "The first line contains T, the number of test cases.\nThe first line of each test case contains N, the number of intersections in the city (1 \u2264 N \u2264 100). The next N lines contain an adjacency matrix giving the distances between  intersections in the city; a distance of -1 is given for Aij then there is no direct connection from intersection i to intersection j or if i=j. Each distance is a positive integer \u2264 300."
}{
  "Example": "Sample Input \n3\n50 3 21\n63 6 8\n34 8 15\n\nSample Output\n16\n15\n6\n",
  "Assumptions": "R, a, b \u2264 32,767\nBonus: R, a, b \u2264 2,000,000,000",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Well, as it turns out, James Bond successfully escaped the CBS attack helicopter and was debriefed at IMF headquarters in Langley, VA. \nUnfortunately, the only information he was able to retrieve was 3 numbers (R, a, b) that would allow an IMF team \nto hack into CBS computers to obtain the name of the last Survivor.  \nCBS computers are encrypted using 1 numerical key that is not divisible by either a or b \n(note that if it was divisible, it would make cracking it substantially easier). \nIt also turns out that R is the maximum number that they could have used for the encryption key.\nWith only this limited information, the only way to hack into the computer would be to determine the decryption key\nfor each possible encryption key and try each of the decryption keys individually to see if they worked.\nNow keep in mind that all secure computers are placed in rooms with 50 ft ceilings and aerial access through ventilation ducts,\nand so the IMF insertion will undoubtedly involve Ethan Hunt hanging upside down from the roof of this room typing on the computer.\nA man can only hang upside down so long before blood pools in his brain causing loss of consciousness,\nso he can only try a limited number of decryption keys before he goes unconscious.\nThe question is this: how many decryption keys can we rule out? i.e. how many positive numbers \u2264 \nR are divisible by either a or b (the more keys we can rule out, the fewer keys need to be tried)",
  "Output": "For each input, print the number of positive integers less than or equal to R that are divisible by a or b.",
  "Title": "WC01 - Mission Impossible 3",
  "Input": "The first line contains T, the number of test cases.\nEach of the remaining T lines is a test case consisting of the three positive integers R a b on a line. \n"
}{
  "Example": "Sample Input \n3\n  3 15\n  if A  = 3 then A = A + 2\n  if A  < 10 then A = A * 3\n  if A  % 7 = 5 then A = A + 3\n  3 12\n  if A  > 5 then A = A + 8\n  if A  > 12 then A = A \u2013 6\n  if A  > 7 then A = A + 1\n  1 3\nif A  > 1 then A = A * 2\nSample Output\n3 4 5  12 15\n  9\nLiar!",
  "Note": "We guarantee that there will be at most 1000 different initial values  of A that produce the desired result and furthermore the same is true if we  ignore the 1st command, or the 1st and 2nd, or  \u2026 all but the last command.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Ghosts were kinda scary and  somewhat unprofitable, so Cole Sear (the psychic kid) has decided to take his  extrasensory perception to new heights and transcend good style and good sense.  He\u2019s going to Vegas \u2014 Caesar\u2019s Palace, specifically \u2014 to start a mind-reading  show. On one particular night, unbeknownst to him, several MI6 agents were in  his audience \u2013 it turns out that hacking into CBS computers didn\u2019t work and  thus the only option M was left with was to see if a mind reader could  determine the winner. This was the opening act they witnessed:\nCole       picks a good looking girl from the audience (note that this is a rule of       the Magician\u2019s Guild).\nHe       asks her to pick any number (a whole number) and then follow his simple       conditional commands to manipulate that number (explained below).\nAfter       a few commands, he asks her to tell him the result she has calculated and       from that he will calculate\u2026(drum roll)\u2026all the possible numbers she could       have chosen. Note that the old-school mind readers would have settled with       only picking the one number that the audience member had chosen, but Cole       wanted to go where no fraud had gone before \u2013 he would state all the       numbers that she could have chosen and <drumroll> \u2026 he would do it       in ascending order.\nEven though he was already  revealed as the masked magician, P decides to write a computer program to  reveal the secret behind this trick. But then he realizes that he can just  write it up as a \u201ccontest problem\u201d and someone else will do the work for him.  The conditional commands will take the following form:\nif A > 7 then A = A / 2\n  if A = 5 then A = A * 3\n  ...\nNote: The  girl doesn\u2019t have that good of a memory, so Cole instructs her to stop and  start over with a different initial choice of A if she ever gets a result with  more than 7 digits in it. (In other words we want only initial values of A for  which |A| < 10,000,000 at each step).",
  "Output": "For each  test case, output all of the possible starting values of A (sorted in increasing  order and space-separated), or Liar! if none are possible.",
  "Title": "WC01 - The Sixth Sense",
  "Input": "The first line contains T, the number of test cases to follow.\n  The first  line of each test case contains an integer L, the number of instructions  to follow (1 \u2264 L \u2264 100) and the final value of A.\nThe next L lines are of the form\nif <condition> then A =  <expression>\nwhere <condition> is one of\nA = #\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A  > # \u00a0\u00a0\u00a0\u00a0\u00a0 A < # \u00a0\u00a0\u00a0\u00a0\u00a0 A % # = #\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A  / # = #\nand <expression> is one of\n A + #\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A - #\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A * #\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A / #\n# stands for any positive constant integer less than  100\n% is to be interpreted as the \u201cmod\u201d operator\n/ is to be interpreted as the \u201cdiv\u201d operator (integer  division, ignoring remainder)"
}{
  "Example": "Sample Input \n3\n  5 5\n  1 2 1\n  2 3 2\n  3 4 3\n  4 5 4\n  5 1 5\n  6 9\n  1 5 6\n  1 6 2\n  2 3 7\n  2 5 1\n  1 2 9\n  3 5 4\n  2 6 3\n  2 4 4\n  1 3 6\n  4 4\n  1 2 82\n  2 3 1\n  1 2 12\n3 1 31\nSample Output\n10\n  14\nRequires more conduits",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The mind reader had no thoughts on  the last Survivor. To salvage a bleak situation, M makes the following  decision. As her last act as chief (before she is fired for losing the pool),  she will mobilize a multinational commando unit from the Delta Force, GIGN,  Mossad, SAS, and Task Force 2 and engage them in an operation quarterbacked by  her 2nd best agent, Austin Powers. The force will perform a great  service to humanity by removing Jerri from the list of applicants who applied  to be on Survivor. Clearly, this requires time travel. However, time travel has  changed somewhat and it turns out that only certain time periods can be reached.  Moreover, only certain time conduits exist that allow travel between certain  two time periods. The final problem is that the time machine needs to be  hardwired with the subspace parameters of these conduits, with each conduit  costing a different amount to hardwire. (Note that the conduits are  bi-directional and that there may be multiple conduits connecting time periods,  each costing different amounts).\nTimes are tough and you want to  build the time machine of minimum cost, but still want to be able to reach all  the time periods from any time period (possibly by stopovers at other time  periods). If it isn\u2019t possible to reach all time periods, then output Requires  more conduits.",
  "Output": "For each test case, output the  minimum cost to connect all time periods, or Requires more conduits if  it is not possible to connect them all.",
  "Title": "WC01 - Time to Get Medieval",
  "Input": "The first line contains T, the  number of test cases to follow.\n  The first line of each test case  contains N, the number of time periods, (2 \u2264 N \u2264 100) and C,  the number of conduits (1\u00a0\u2264\u00a0C\u00a0\u2264\u00a020000)\n  The remaining C lines of  this test case each contain three integers i, j, k indicating that there is a conduit connecting time periods i and j,  with a cost of k (i \u2260 j, 1 \u2264 k \u2264 200)"
}{
  "Example": "Sample Input \n2\n5 3 3 \n1 3 5 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n2 1 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n3 5 2 3\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n2 3 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n4 2 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n1 3 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n2 1 2\n2 3  4\nSample Output\n4 3\nImpossible",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "How James Bond eluded CBS security  in their own headquarters has long been a mystery \u2013 to avoid publicizing the  secret phone number he used, the details were classified, but have now been  cleared for public viewing.\u00a0 Below are excerpts  from his report.\n\u201cWith minimal effort, I was in CBS  headquarters, having acquired my information. However, I was on the top floor  and needed to escape from the building. I quickly made a collect call to London (just by dialing  10-10-321, then 1, then the number, for only 10\u00a2 a minute) where I asked P to  fix the elevators for me. You see, I knew that before CBS security could  mobilize, they needed to hold a board meeting and some focus groups to decide  on an appropriate course of action. To hold a meeting, all the people would  need to be on the same floor at the same time. Thus, if I could slow down their  ability to meet in one place, I would have enough time to escape. Showing an  unusual burst of competence, P quickly hacked into the elevator control system  (which just happens to be accessible by Internet), and changed the elevator  controls so that each elevator now followed a fixed route regardless of what  buttons are pushed (i.e. it might visit floors 2-4-8-3-2-4-8-3\u2026).\nHaving already patched into CBS  communication channels, I knew that security had been notified that a meeting  was urgently necessary. The chief of security had determined that the elevators  were \u201cwonky\u201d and was trying to determine what floor to meet on so that the  meeting could be held at the earliest possible time.\u00a0 I knew where everyone in the building was  located and P had told me the \u201cschedules\u201d that the elevators follow, so I was  able to figure out the shortest amount of time before a meeting could have been  held, and on which floor this meeting could take place.\u00a0 It\u2019s a good thing the building had no  stairs.\u00a0 Now I knew how much time I had  to escape and which floor to avoid.\u201d",
  "Output": "For each test case, output a line  containing M, the least number of minutes before a meeting can be held, and F the floor on which the meeting could take place at this time. If it could take  place on several floors, choose the lowest (nosebleeds can be deadly). If no  meeting is possible, output Impossible.",
  "Title": "WC01 - The Thirteenth Floor",
  "Input": "The first line of contains T,  the number of test cases.\nThe first line of each test case  contains the positive integers F, the number of floors in the building, E,\u00a0 the number of elevators, and P, the  number of people (1 \u2264 F,E,P \u2264 50). The  next line contains P integers giving the locations of all the people in  the building. Each of the next E lines contains the \u201cschedule\u201d for an  elevator: a positive integer N (2 \u2264 N \u2264 50)  representing the number of floors which that elevator visits, followed by N integers between 1 and F giving that elevator\u2019s schedule. No two  consecutive integers in the schedule will be identical (including the first and  last).\nAssume the following:\nAll  elevators move at the speed of 1 floor/minute\nEvery  elevator starts with its doors open on the first floor listed in its schedule  at 12:00\nA  person can get in/out of an elevator instantaneously"
}{
  "Example": "Sample Input \nD\nTIC.AHSOMGI.DEESAES...DS\nE\nMEET.ME.IN.THE.PARK.TONIGHT.AT.SEVEN\n\n(and 3 more commands)\nSample Output\nTHIS.IS.A.CODED.MESSAGE..\nMM.PTH.NEETAOTS.E.HRN.E.TIEKIAV..N..GTE.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You have just found the secret instructions on how to encode a \n  message:\n\"Calculate the message length and round up to the nearest \n  multiple of 5. Write out the message in rows of 5 characters each until the \n  message is complete. Send the message a column at at a time from left to right.\"\nFor example, suppose the message is THIS IS A CODED MESSAGE.\n  It is 23 characters long so two spaces are added at the end to make it 25 characters \n  long. The rows of 5 characters are:\n1 2 3 4 5\n\nT H I S  \nI S   A\nC O D E D\n  M E S S\nA G E\n\nThe characters are sent one column at a time from left to right (a period indicates \n  a space):\nTIC.AHSOMGI.DEESAES...DS",
  "Output": "",
  "Title": "WC95 - Coded Message",
  "Input": "The input will consist of 5 commands to encode/decode a message.\n  The first line of each command is a character to indicate what your program \n  should do: D means decode, E means encode. \n  The second line of each command will contaibn the text to encode/decode."
}{
  "Example": "Sample Input \n1\n5\n\nSample Output\n1 2 3 4 5\n2 1 4 5 3\n3 4 5 1 2\n4 5 2 3 1\n5 3 1 2 4\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A square arrangment of numbers such as\n1 2 3 4 5\n2 1 4 5 3\n3 4 5 1 2\n4 5 2 3 1\n5 3 1 2 4\nis a Latin Square because each whole number 1, 2, 3, 4 and 5 appears \n  exactly once in each row and column of the square.\nOf all the possible 5x5 Latin squares, the one above is the smallest in the \n  following sense: if the digits are strung together (in rows from top to bottom) \n  the resulting integer,\n12345 21453 34512 45231 53124\nis the smallest one possible.",
  "Output": "",
  "Title": "WC95 - Smallest Latin Square",
  "Input": "On the first line is M, an integer indicating the number of test cases.\n  On each of the next M lines is an integer N between 2 and 9."
}{
  "Example": "Sample Input \n6\nBELLS\nTELLS\nFALLS\nDOLLS\nDULLS\nDOLLIES\nSELLS\n*ELLS\nD?LLS\nD?LL*\n*LL*\n\nSample Output\nNO MATCH\nBELLS, TELLS\nDOLLS, DULLS\nDOLLS, DULLS, DOLLIES\nBELLS, TELLS, FALLS, DOLLS, DULLS, DOLLIES\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Wouldn't it be nice to list all of your files that end with the \n  suffix \".PAS\", or only those containing the string \"TST\"? \n  Wouldn't it be nice to retrieve all seven-letter words beginning with \"PSY\" \n  from an electronic dictionary?\nIf you haven't guessed by now, you must write a program that will \n  math strings in a list to various patterns. To make the problem interesting, \n  patterns can have the following wildcards:\n\"?\" - matches any single character\n    \"*\" - matches any series of 0 or more characters\nFor example, the pattern \"*.PAS\" matches all strings ending with \n  the suffix \".PAS\" (eg PRIME.PAS, PRINTER.PAS). The pattern \"*TST*\" \n  matches all strings containing the substring \"TST\" (eg TSTING.PAS, \n  PRIME.TST, ATSTART.EXE, TST). The pattern \"PSY????\" matches all seven-letter \n  words with the prfix \"PSY\" (PSYCHIC, PSYCHED, PSYCHOS).\nWrite a program that can look for matches to a given pattern which can contain \n  any number of wildcards.",
  "Output": "\n  For each of the 5 search patterns, output a comma-separated list of all the \n  matches found in the dictionary. The results should appear in the same order \n  as given in the dictionary. If no match is found output \"NO MATCH\".\n",
  "Title": "WC95 - Wildcard",
  "Input": "The first line contains a number N in the range 1..1000, the number of words \n  in your \"matching dictionary\". \n  The next N lines each contain a unique word for your dictionary. These words \n  will contain only the upper-case letters \"A\"..\"Z\" and periods \n  and be 20 characters or less.\n  The next 5 lines each contain a pattern which your program should find the matches \n  for. These strings will contain only upper case letters, periods, and the wildcards \n  \"?\" and \"*\"."
}{
  "Example": "Sample Input \n1\n2\n5\n10\n52\n\nSample Output\nThe length of 1! is 1\nThe length of 2! is 1\nThe length of 5! is 3\nThe length of 10! is 7\nThe length of 52! is 68\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The factorial of a whole number N (written \"N!\") is defined as follows:\nN! = 1 * 2 * 3 * ... * (N-1) * N\nFor example, 10! = 1 x 2 x 3 x 4 x 5 x 6 x 7 x 8 x 9 x 10 = 3628800.\nThe \"factorial length\" of a number N is defined as the number of digits in N!.\nThus the factorial length of 10 is 7.",
  "Output": "",
  "Title": "WC95 - Factorial Power",
  "Input": ""
}{
  "Example": "Sample Input \n3\n1 1 3 3\n2 2 1 3\n3 3 1 1\n0 0 0 0\n\n(and 4 more data sets)\nSample Output\n1\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "In a cubic fish tank some fishes are swimming around. Little Billy-Bob \n  watched the fishes move around and around until he became dizzy. At some time \n  during the day the fishes were all stacked together in one column, at other \n  times they were scattered randomly in the tank and at still other times they \n  were in an eclipsed configuration. It was this configuration that Billy-Bob \n  enjoyed watching the most.\nIn this eclipsed configuration, the fishes were grouped together \n  in vertical columns of varying length, and in each group the fishes are one \n  on top of another. Never were there two or more groups in the same vertical \n  column, though. Thus the tank looked like it had chains of fish hanging vertically.\nLittle Billy-Bob would try to figure out which level (or depth) \n  in the tank had the most number of fishes when it was in this configuration. \n  But he had to do is fast before the fishes moved past one another and ruined \n  all his fun.\nYou can help Billy-Bob by writing a program that does the work \n  for him. The fish tank will be an n by n by n cube and hence in the eclipsed \n  configuration it will have at most n^2 groups as it has only n^2 separate vetical \n  columns. You are to find the level (or depth) at which there there is the largest \n  number of fishies. The top level of the tank is level 1, and the bottom level \n  of the tank is level n. If mutliple levels each have the most number of fish, \n  give the topmost of these levels.\nFor exmaple, consider the a 3x3x3 cube with a group of 3 fish \n  on the center vertical column, and two single fish in opposite corners. If we \n  label the columns with co-ordinates from (1, 1) to (3, 3) this could be described \n  as:\nIn column (2, 2): A stack of fish from level 1 to level 3\nIn column (1, 1): A stack of fish from level 1 to level 1 (i.e. only in level 1)\nIn column (3, 3): A stack of fish from level 3 to level 3 (i.e. only in level 3)\nIn this case there are two fish each at levels 1 and 3, so we \n  give the topmost (1).",
  "Output": "\nGive the topmost level of all those containing the biggest number of fish.\n",
  "Title": "WC96 - Fishes in a Tank",
  "Input": "\n  In the data file there are 5 data sets.\n  The first line of each data set is n (1\u00a0\u2264\u00a0n\u00a0\u2264\u00a050), the size of the cubic fishtank to be considered.\n  The next lines each contain four integers (x, y, t, b) which indicate a column \n  of fish at (x, y) whose top fish is in level t and whose bottom fish is in level \n  b. (And of course there are fish at each level t+1, t+2 ... b since Billy only \n  likes these particular fish-stack configurations as mentioned above)\n  This set of fish-columns is terminated by a line containing all zeroes."
}{
  "Example": "Sample Input \n4 5\n2A2BB2ABB2ACBA2CB3C\n3 3\n3W3W3W\n\n(and 3 more data sets)\nSample Output\nA4B4ACB2A2C2B3C\n3W3W3W\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "To represent an m by n table of capital letters such as\nin a text file we could either type out all (m*n) characters or \n  figure out some way to compress the data to a smaller size. Two ways we could \n  do this are:\nColumn Compression\nWe could go down each column, left to right, and for consecutive repeated \n  characters within a column replace them by a single occurence of that character \n  preceded by a number indicating how many of that character there are. For this \n  example we have, in the first column, AABB which becomes 2A2B. In the 2nd column \n  we get B2AB and so on... Note that we have dropped the 1s from 1B2A1B and assumed \n  there is only one occurence if there is no number preceding the letter. Thus \n  compression by this method gives 2A2BB2ABB2ACBA2CB3C.\nRow Compression\nLikewise, we could compress each row going from left to right in the same \n  fashion to get A4B4ACB2A2C2B3C in the above example.\nYour task is to convert a column compression into a row compression \n  given the size of the table: m, the number of rows and n, the number of columns.",
  "Output": "",
  "Title": "WC96 - Row and Column",
  "Input": "\n  In the data file there are 5 data sets.\n  The first line of each data set contains m and n, the height and width of the \n  table. Both m and n will be integers from 1 to 10.\n  The second line of each data set will contain a column-compressed representation \n  of the table.\n"
}{
  "Example": "Sample Input \nFor the best value in food and amusements, ask at Chew and View.\nThe protesters are prepared to confront a riot squad.\nShould I jump on to the red target, or on to the blue one?\nThis line is a particularly wasteful and not too productive test case, methinks.\n\n(and 1 more data set)\nSample Output\nSaskatchewan\nOntario\nNO PROVINCE FOUND\nNO PROVINCE FOUND\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Remember those old puzzles where a word was hidden inside a seeming \n  innocuous sentence? For example, \"Should I jump on to the red target, or \n  on to the blue one?\" contains the hidden word \"Toronto\" (... \n  red target, or on to the...) Given a line of text, your task is \n  to search for a hidden province of Canada in it: British Columbia, Alberta, \n  Saskatchewan, Manitoba, Ontario, Quebec, Nova Scotia, Newfoundland, New Brunswick, \n  PEI. The hidden word may appear anywhere in the text with its letters will be \n  in the correct order, may contain upper and/or lower case letters, and may have \n  any non-letter characters such as punctuation or characters in between.",
  "Output": "",
  "Title": "WC96 - Hidden Geography",
  "Input": "\n  There will be five lines in the input, each containing a line of text which \n  your program must search for provinces in.\n"
}{
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nGiven is an M by N grid and on each square of the grid there may or may not\nbe an apple on it. Let A be the bottom left square and B be the upper right\nsquare of the grid. Find the path from A to B (shown below) going up and right\nonly that passes through the most number of squares with apples in them. For\nthis path output the number of apples on it.\n\nFor example, here is a 4 by 4 grid:\n    .a.a <-B\n    ..aa\n    a.a.\nA-> ....\n\n\nEach square can have at most one apple (this includes squares A and B).\n",
  "Output": "\nGive the number of apples on the path with the most number of them. In this\ncase\n\n5\n",
  "Title": "WC96 - Plentiful Paths",
  "Input": "\nYour program should read in the size of the grid, M N, where 1 \u2264 M, N \u2264 100.\nThe locations of the apples where A is at (1, 1) and B is at (M, N). Inputs\nwill end with 0 0 and have the same format as the one below. In our example,\nthe input would be\n\n4 4\n2 1\n2 3\n3 3\n3 4\n4 2\n4 4\n0 0\n"
}{
  "Example": "Sample Input \n12 8\n35 9\n10\n121 7\n121 7\n7\n\n(and 3 more inputs)\nSample Output\n320\n14641\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "In normal everyday usage numbers are thought of in base ten. The reason for \n  this is naturally due to humans having ten fingers on which to perform mathematical \n  operations such as add, subtract and multiply. However, in computer technology, \n  the use of low and high voltage states lends itself to thinking of operations \n  defined on having only these two states. Hence, the binary system as a descriptive \n  tool in computers in quite useful. Moreover, we could easily have a use for \n  other number systems (cartoon characters couting in base 8, some alien species \n  counting in base 97).\nYour task is to take two different-base numbers, calculate their product, and \n  return the answer in another base.\nFor example, \"Find 128 * 359 in base 10.\"",
  "Output": "\n  Give the product of the numbers in the specified base.\n  Each product will be less than or equal to 2 billion (base ten).\n",
  "Title": "WC96 - Bases Multiplication",
  "Input": "\n  The input file contains 5 data sets.\n  The first line of each data set is the first number and its base.\n  The second line of each data set is the second number and its base.\n  The third line of each data set is the base in which the product is to be reported.\n  All bases will be integers from 2 to 10 inclusive.\n"
}{
  "Example": "Sample Input \nis\nthe\nof\nand\nas\na\nbut\n::\ndescent of man\nthe ascent of man\nthe old man and the sea\na portrait of the artist as a young man\na man is a man but bubblesort is a dog\n\nSample Output\na portrait of the ARTIST as a young man\nthe ASCENT of man\na man is a man but BUBBLESORT is a dog\nDESCENT of man\na man is a man but bubblesort is a DOG\ndescent of MAN\nthe ascent of MAN\nthe old MAN and the sea\na portrait of the artist as a young MAN\na MAN is a man but bubblesort is a dog\na man is a MAN but bubblesort is a dog\nthe OLD man and the sea\na PORTRAIT of the artist as a young man\nthe old man and the SEA\na portrait of the artist as a YOUNG man\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Searching and sorting are part of the theory and practice of computer science. \n  For example, binary search provides a good example of an easy-to-understand \n  algorithm with sub-linear complexity. Quicksort is an efficient O(n log \n  n) [average case] comparison sort.\n  KWIC-indexing is an indexing method that permits efficient \"human search\" \n  of, for example, a list of titles.\nGiven a list of titles and a list of \"words to ignore,\" you are to \n  write a program that generates a KWIC (Key Word In Context) index of the titles. \n  In a KWIC-indes, a title is listed once for each keyword that occurs in the \n  title. The KWIC-index is alphabetized by keyword. Any word that is not one of \n  the \"words to ignore\" is a potential keyword. For exmaple, if the \n  words to ignore are \"the\", \"of\", \"and\", \"as\", \n  and \"a\" and the list of titles is\ndescent of man\n  the ascent of man\n  the old man and the sea\n  a portrait of the artist as a young man\nA KWIC-index of these titles might be given by",
  "Output": "",
  "Title": "WC97 - Searching Quickly",
  "Input": "The first few lines of the input are a series of \"words to ignore.\" \n  Each is on a line by itself and is no more than 20 characters in length.\n  The list of words to ignore is terminated by the string :: on a line by itself.\n  The next lines are the titles to be incorporated into the KWIC-index. Each contains \n  no more than 15 words, allin lower case, separated by single spaces. No word \n  is longer than 20 characters, and no title longer than 250 characters.\nThere will be no more than 50 words to ignore, no more than 100 titles, and \n  no more than 200 keywords in the titles. No characters other than 'a' to 'z' \n  and white spaces will appear in the input.\n"
}{
  "Example": "Sample Input \n3\n2\n16\n3\n27\n7\n4357186184021382204544\n\nSample Output\n4\n3\n1234\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Current work in cryptography involves (among other things) computing large \nprime numbers and computing powers of numbers modulo these large primes. Work \nin this area has resulted in the practical use of result from number theory \nand other branches of mathematics once considered to be only of theoretical \ninterest. This problem involves the efficient calculation of integer roots of \nnumbers.\nGiven an integer n \u2265 1 and an integer p \u2265 1 you are to write \na program that determines the nth root of p \u2014 it is guaranteed \nthat p is the nth power of some integer k, i.e. \np=kn for some integer k; this is the \ninteger you are to find.",
  "Output": "",
  "Title": "WC97 - Power of Cryptography",
  "Input": "kn=p. "
}{
  "Example": "Sample Input \n3\n5\n1 3 5 6 12\n5\n5 4 3 2 1\n5\n5 1 2 3 4\n\nSample Output\n0\n1 0\n1 2 0\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Stacks and queues are often considered the bread and butter of data structures \nand find use in architecture, parsing, operating systems, and discrete event \nsimulation. Stacks are also important in the theory of formal languages. This \nproblem involves both butter and sustenance in the form of pancakes rather than \nbread in addition to a finicky server who flips pancakes according to a unique, \nbut complete set of rules.\nGiven a stack of pancakes, you are to write a program that indicates how the \nstack can be sorted so that the largest pancake is on the bottom and the smallest \npancake is on the top. The size of a pancake is given by the pancake's diameter. \nAll pancakes is a stack have different diameters. Sorting a stack is done by \na sequence of pancake \"flips\". A flip consists of inserting a spatula \nbetween two pancakes in a stack and flipping all of the pancakes on top of the \nspatula (reversing the sub-stack). A flip is specified by giving the position \nof the pancake on the bottom of the sub-stack to be flipped (relative to the \nwhole stack). The pancake on the bottom of the sub-stack thus becomes the top \nof the sub-stack (and the top of the whole stack) and vice-versa. The bottom \npancake has position 1 and the top pancake of a stack of n pancakes has position \nn. \nFor example, consider the three stacks of pancakes below:\n8\n          4\n          6\n          7\n          5\n          2 \nThe stack on the left can be transformed into the stack in the middle via flip(3). \nThe middle stack can be transformed into the right stack via the command flip(1).\n[Does this problem get any harder if the orientation of each pancake must \nbe preserved in the end? - Dave]",
  "Output": "",
  "Title": "WC97 - Stacks of Flapjacks",
  "Input": ""
}{
  "Example": "Sample Input \n4\nabcdefghijklmnopqrstuvwxyz\nzyxwvutsrqponm and so on\nthequickbrownfxjmpsvlazydg\nAnd now, for something completely different.\nSample Output\nOK.\nNope.\nOK.\nNope.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "With the introduction of computers in today's life, typing skills are essential \n  for all. As a result, one of the typing teahcers has a booming business. Yesterday, \n  however, she made the mistake of specifying the following test for her students: \n  \"Type lines of 26 characters each, such that each letter of the alphabet \n  occurs only once.\"\nNow that she sits at home and wants to mark the tests, she discovered that \n  instead of typing the alphabet in order, most took the liberty to type a permutation \n  (re-ordering) of the alphabet.\nWhat she would like you to do is write a program which marks the tests for \n  her, meaning that you have to check for each line of characters whether it is \n  correct, i.e. whether it is really a permutation of the 26 lowercase \n  letters of the alphabet.",
  "Output": "",
  "Title": "WC97 - Typing",
  "Input": ""
}{
  "Example": "Sample Input \n2\n2\nHELLOYELLOWWORLD\nHOOY\nLREO\nLWEL\nLLDW\n1\nSUNK\nSU\nKN\n\nSample Output\nO###\n##O#\nO##O\n####\n\nO#\n##\n",
  "Memory Limit": "16M",
  "Time Limit": "10.00s",
  "Description": "A kind of grid is cometimes used for encoding messages. Our naval fleet (!) \nofficials decide to use this method of encoding messages for communication with \ntheir ship captains. The encoding grid is a square sheet of paper divided into \n2Nx2N little squares. N2 of these little squares are cut out (see \nfigure 1).\nLet us briefly describe the encoding process. Take a message of length 4N2 \ncharacters. Then put an encoding grid onto a blank sheet of paper and beigin \nto write the first N2 letters of the message into the cut-out squares \n(one letter per square, write letters in the first line from left to right, \nthen in the second line, etc). See figures 2 for the first step in the message \n\"HELLOYELLOWWORLD.\" After finishing the first step rotate the encoding \ngrid 90 degrees clockwise and continue similarly writing letters. (Figures 3, \n4)\n\nAfter two more steps all of the letters should be written in (figure 5)\nO###\n\t  ##O#\n\t  O##O\n\t  #### \nIt is necessary to have a correctly constructed grid, so that \nwe never get a collision (i.e. we see some alread-written letters through \nholes in the grid after we rotate). We need to always see N2 blank \nsquares after we rotate the grid.\nThe naval fleet officials encoded thousands of messages with \ntheir grid and then they wanted to send them to ships. Unfortunately they \nlost the grid. Fortunately the naval admiral remembered the original text \nof one of the messages.\nYour task is, given this original message text and the filled-in \npiece of paper with this encoded message, to find one possible correctly constructed \ngrid with which the message text could have been encoded.",
  "Output": "",
  "Title": "WC97 - Encoding Grid",
  "Input": "The first line of input contains an integer M specifying the number of \ntest cases.\nThe first line of each test case is N (the encoded message is written on a \n2Nx2N grid).\nN will be an integer between 1 and 10 inclusive.\nThe second line of each test case the message which was encoded: a string \nof 4N2 characters.\nEach of the next 2N lines contains a string of 2N characters representing \nthe letters in the encoded grid. This grid will contain only letters from \n\"A\" to \"Z\".\n"
}{
  "Example": "Sample Input \nV\n*ooooo*\n*ooooo*\no*ooo*o\no*ooo*o\noo*o*oo\noo*o*oo\nooo*ooo\nA\nooo*ooo\noo*o*oo\noo*o*oo\no*****o\no*ooo*o\n*ooooo*\n*ooooo*\n\n**oooooooooo**oooooooooooooooooooooooooooo \n**oooooooooo**oooooooooooooooooooooooooooo\n**oooooooooo**oooooooooooooooooooooooooooo\n**oooooooooo**oooooooooooooooooooooooooooo\noo**oooooo**ooooooooooooooo*oooooooooooooo\noo**oooooo**oooooooooooooo*o*ooooooooooooo\noo**********oooooooooooooo*o*ooooooooooooo\noo**********ooooooooooooo*ooo*oooooooooooo\noooo**oo**ooooooooooooooo*ooo*oooooooooooo\noooo**oo**oooooooooooooo*ooooo*ooooooooooo\noooo**oo**oooooooooooooo*ooooo*ooooooooooo\noooo**oo**oooooooooooooooooooooooooooooooo\noooooo**oooooooooooooooooooooooooooooooooo\noooooo**oooooooooooooooooooooooooooooooooo\noooooooooooooooooooooooooooooooooooooooooo\noooooooooooooooooooooooooooooooooooooooooo\noooooooooooooooooooooooooooooooooooooooooo\noooooooooooooooooooooooooooooooooooooooooo\noooooooooooooooooooooooooooooooooooooooooo\noooooooooooooooooooooooooooooooooooooooooo\noooooooooooooooooooooooooooooooooooooooooo\n\nSample Output\nAV\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Luke Skywalker wants to break into Darth Vader's quarters on an Imperial Cruiser \n  to steal his supply of nasal spray. This nasal spray is rumoured to alleviate \n  his incessant wheezing, resulting in improved Stormtrooper discipline (because \n  they won't be laughing at him so often), resulting in a much deadlier attack \n  force. But alas, Luke is a wimp and so he sends R2D2 to do the dirty work. Unfortunately, \n  Luke was not really a bright lad and didn't find out which room belonged to \n  Vader; therefore R2D2 has to find the correct room based on the name that is \n  printed on the door. However, the Empire is smarter than Luke (heck, Chewy is \n  smarter than Luke) and has made life a little tough for the droid by not orienting \n  all the letters correctly. For example, if the room belonged to VADER, any of \n  the 5 letters could be rotated by some multiple of 90\u00b0 and so, VADER could \n  actually be printed on the door as .\nYour job is equip R2D2 with the algorithm to recognize which door he should \n  break into.",
  "Output": "\n  You will output the word that is shown in each grid (a separate line for each \n  grid). If any of the letters in the grid matches NONE of the 5 letters whose \n  shape you have been given, then output only \"NONE\" (all capitals) for that grid. \n  If there are no letters in the grid at all, then output \"EMPTY\". \n",
  "Title": "WC98 - Optical Recognition",
  "Input": "You will be given the \"shape\" of the 5 letters that make up the name that \n  R2D2 is going to look for as follows (each letter will be represented by a 7 \n  x 7 grid): \nLine 1: 1st letter\n  Line 2-8: The shape of the 1st letter \n  Line 9: 2nd letter \n  Line 10-16: The shape of the 2nd letter \n  Line 17: 3rd letter\n  Line 18-24: The shape of the 3rd letter\n  Line 25: 4th letter \n  Line 26-32: The shape of the 4th letter \n  Line 33: 5th letter \n  Line 34-40: The shape of the 5th letter \nThe next 21 lines will represent a 21line grid (width \u2264 150) which is the \n  grid you have to scan to determine which letters are represented in the grid. \n  Note that, in the grid, a letter can be the same size, twice as big or 3 times \n  as big as the letter you are given. In addition, a letter can be rotated by \n  some multiple of 90o. Letters will be separated by at least one empty column, \n  ie. one column of nothing but the letter \"o\". Letters need not be the same size \n  or rotation, and they don't need to occupy the same lines in the grid.\nYou will then be given more 21-line grids (same letters) that you have to decipher. \n  The number of grids you get will be variable and you must keep expecting grids \n  until you see the end of the file. Note that it is not necessary for the grid \n  to contain any letters."
}{
  "Example": "Sample Input \n2\n22-4/-X -55-42-X -X -4/-54-23\nX -X -X -X -X -X -X -X -X -XXX\n\nSample calculation for player 1 (score for each frame is shown after considering \n  subsequent throws if strike/spare):\n  4 - 20 - 20 - 10 - 6 - 24 - 20 - 15 - 9 - 5 => total = 133\n  Sample for player\n  2 30 - 30 - 30 - 30 - 30 - 30 - 30 - 30 - 30 - 30 => total = 300 (maximum score) \n\nSample Output\n133\n300\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Han Solo is deep in debt to Pizza the Hutt and Atilla the Hutt, Jabba's lesser \n  known but equally blobular cousins. Together, Jabba, Atilla and Pizza form a \n  deadly trio known as the The Other Three Tenors. Pizza, being the nice blob \n  that he is, has made Han an offer he can't refuse to rectify the situation. \n  He has challenged Han to a game of bowling - if Han loses, he will face the \n  ultimate punishment of being put in a holding cell listening to recordings of \n  C3PO's infernal whining for the rest of his life. Unfortunately, the Hutt family \n  have been cursed with no elbows and thus can't bowl; so instead they have hired \n  Peter \"Three Thumbs\" Plachta to bowl for him.Your job is to write a program \n  that will tally up the scores so that they can determine who wins.\nIn case you're unfamiliar with the rules of bowling, here's how it works: \nThere are 10 frames - in each frame, both bowlers, in turn, get 2 throws \n    to try to knock down as many of the 10 pins as possible (the 10th frame is \n    an exception - see below) \nIf a bowler fails to knock down all the pins, he is assigned a score based \n    on the number of pins he knocks down (between 0 and 9) in each throw. At the \n    beginning of each bowler's turn, all the pins are reset, ie. all 10 pins are \n    put back up.\nIf a bowler knocks down all the 10 pins on the first throw, he is awarded \n    a Strike and that bowler does not get a 2nd throw in that frame (except in \n    the 10th frame). If a bowler knocks down all 10 pins in two throws, he is \n    awarded a Spare. \nIf a bowler is awarded a Strike, he gets 10 points for that frame AND he \n    also counts his scores from the next 2 throws towards his score on \n    the current frame (of course, those throws also count for the frame in which \n    they are actually bowled). If a bowler is awarded a Spare, he gets 10 points \n    for that frame AND he also counts his score from the next throw towards \n    his score on the current frame. \nIf a bowler bowls a Strike in the 10th (final) frame, he gets 2 more throws \n    to add to the Strike. If he bowls a Spare in the 10th frame, he gets 1 more \n    throw to add to the Spare. Those throws don't count on their own - they \n    only count towards the Strike or Spare. You get at most 3 throws in the \n    10th frame. ",
  "Output": "\n  Output the total score of each player as shown in the example below: \n",
  "Title": "WC98 - The Hutts Strike Back",
  "Input": "\n  The first line of the input will be the number of bowlers.\n  Following this is the result of each throw by each bowler (X = Strike, / = Spare, \n  0..9=knocked # of pins down).\n  There may be anywhere between 1 and 5 bowlers given - each bowler will be on \n  a different line. \nNote: There is no space between throws in a frame (so for the example below, \n  in the 1st frame, on the first throw, 2 pins were knocked down and on the second \n  throw, 2 more pins were knocked down).\n  Frames are separated using 1 hyphen.\n  If a strike was bowled in a frame, there is no 2nd throw in that frame and so \n  there is a blank space in the data file after the X to signify that there was \n  no 2nd throw. "
}{
  "Example": "Sample Input \n5\n5\n2\noooo*\nooo*o\noo*o*\nooo**\n*ooo*\n5 1\n1 5\n5 5\n1 5\n-1 -1\n\nSample Output\nTHERE IS NO TRY\n2\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Like we said earlier, Luke Skywalker is a wimp and so Yoda is having a really \n  hard time turning him into a worthy Jedi Knight. His first lesson is in the \n  Bogs of Endor, a large swamp that has several solid surfaces in various places. \n  Luke can only stand on one of the solid surfaces, otherwise he will sink into \n  the swamp and be eaten by a really disgusting looking creature (and Yoda won't \n  be too pleased with that). His training exercise consists of the following. \n  Yoda will place him on one of the solid surfaces to start. He must then use \n  the power of the Force to jump between solid surfaces till he reaches Yoda, \n  who is on another solid surface some distance away. Luke is still a Young Jedi, \n  so his jumping range is limited. Yoda is an impatient \"man\" and so Luke must \n  find the quickest way to get to Yoda.\n",
  "Output": "You will output the smallest number of jumps that Luke needs to make to reach \n  Yoda from where he is for each starting position (each one on a separate line). \n  If he cannot reach Yoda, then output \"THERE IS NO TRY\"",
  "Title": "WC98 - Do or Do Not",
  "Input": "\n  You will be given a k x n grid (total grid size \u2264 32000) representing the \n  swamp. Each point in the grid will be marked either \"*\" (representing a solid \n  surface) or the letter \"o\" representing no solid surface. You will also be told \n  of Luke's starting point and Yoda's position. You will also be given the maximum \n  distance that Luke can jump. \nAll inputs will be integers in the range 1 \u2264 number \u2264 32000. \nLine 1: k \n  Line 2: n \n  Line 3: Luke's maximum jumping distance \n  The next k lines will contain the grid (n characters on each line). Note that \n  the topleft corner of the grid is at coordinate (1,1) \n  The next line will contain Luke's starting position as x0 y0 (separated by one \n  space). \n  The next line will contain Yoda's position as x1 y1 (separated by one space). \n  \n  You will then be given more pairs of lines giving new positions for Luke and \n  Yoda. The input will be terminated by a single line containing \"-1 -1\" (ie. \n  starting coordinates are -1, -1). "
}{
  "Example": "Sample Input \nAC\nCCC\nCGT\nTAC\n0\nACCT\nCGA\nCCTACG\n0\n\nSample Output\nTACCCGT\nACCTACGA\n\nNote: the 1st output is not unique\nHow: (this is just for your own reference - you do not need to output how the \n  fragments fit together)\nTAC\n AC\n  CCC\n    CGT\n\n\nACCT\n CCTACG\n     CGA\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Dr. Evil, having escaped from Austin Powers last time, is trying a new strategy \n  to extort money from mankind. He has decided to clone himself so that he can \n  make his own fleet of Dr. Evil stormtroopers. Then, and only then, can he successfully \n  hold the United Nations for ransom for the princely sum of \u2026 1 million dollars. \n  He hires the best Evil scientists to extract his DNA and then determine its \n  sequence so that they can make clones of him. However, sequencing technology \n  is not very efficient and yields several fragments of Dr. Evil's DNA. If you \n  put all the fragments together, you will get his entire DNA. However, as a consequence \n  of DNA sequencing, the ends of a fragment are sometimes duplicated at the beginning \n  of next fragment. His scientists are now trying to put these fragments together \n  to form the shortest possible sequence. This, they figure, will be Dr. Evil's \n  DNA. (Little did they know that this very same technique resulted in tragic \n  consequences when Mr. Bigglesworth was \"cloned\" from Chewbacca's DNA). Note \n  that Dr. Evil is not a bacterium and so his DNA is linear (not circular).",
  "Output": "\n  Put the strings together in some order to produce the smallest DNA strand. Output \n  that DNA strand (one per line for each set). In the event that this strand is \n  not unique, you may output any shortest DNA strand.",
  "Title": "WC98 - GATTACA",
  "Input": "A series of at most 10 strings (each with at most 10 characters) representing \n  DNA fragments (one fragment per line). Note that the strings are in some random \n  order and not necessarily in the order in which they appear in the completed \n  DNA. This will be followed by a 0 (zero) to indicate that the input set is over. \n  This will then be followed by more fragments representing a new DNA strand followed \n  by another 0 and so on till the end of the file. "
}{
  "Example": "Sample Input \n6\n4 3\n2 1\n-2 2\n0 4\n-5 0\n5 -3\n\nSample Output\n-5 0\n0 4\n4 3\n5 -3\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " The Rebel Alliance is in a crisis. The defence systems at their shipyards \n  on Mos Eisely are going to crash because of the Y2K problem (what else did they \n  expect when they gave Luke the programming assignment on that one). The Empire \n  will be sending in their ATACs soon to destroy the site. Time is of the essence \n  but the Rebels do not have enough time to move all the ships to a safer site. \n  Instead, Obi-Wan Kenobi has assembled some of his best Jedi Knights (Luke, of \n  course, not being one of them) to create a ground-level Force field around their \n  assets. This force field will protect them against the attacks of the Empire \n  until reinforcements arrive. The force field extends in a straight line between \n  Knights, thus eventually forming a closed polygon. However, the power of the \n  Force diminshes over distance and so the Knights wish to create the enclosure \n  of smallest possible area such that all assets are either within OR on the boundary \n  of the forcefield (ie. anything within or on the boundary of the polygon is \n  protected). There is an added complication: the force field enclosure must be \n  convex because concave regions are weak and are easy to penetrate (compare, \n  for example, trying to break an egg shell from the outside versus the inside)\n\nGiven a set of points representing ships on the ground, output the locations \n  where the Knights must stand in order to construct the required forcefield. \n  Note that a Knight can be inside a ship (ie. in the same position as the ship, \n  thus protecting the ship). If there are multiple ways to do this, output the one\n  with the smallest possible number of Knights.\n",
  "Output": "\n  One on each line, output the coordinates at which the Jedi Knights must stand \n  in order to construct the required forcefield. The points must be in clockwise \n  order (on a standard xy plane) around the forcefield. Do not repeat the first \n  point.\n",
  "Title": "WC98 - Y2K",
  "Input": "Line 1: n (# of ships, n \u2264 5000)\n  The next n lines represent the coordinates of the ships relative to the center \n  of the shipyard complex. The format is: x y (ie. x and y coordinates separated \n  by 1 space).\n  All coordinates are integers with each number in the range -16000 \u2264 number \n  \u2264 16000.\n  Each ship is on a separate line. \n"
}{
  "Example": "Sample Input \nSample Output\n1\n36000\n0\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Han Solo (who is a pilot), having handily beaten Three Thumbs Plachta at bowling \n  is talking to some friends at a bar. Here, he recounts a tale of the legendary \n  driver known only as \"Forth-and-back\" Plachta. He tells of a day when she was \n  driving a bunch of students down in a foreign land known as the United States. \n  Unsatisfied with the posted speed limit of 70mph, Ms. Plachta makes the calculations \n  to prepare her van for the jump to hyperspace. Of course, everyone knows that \n  this is a difficult task and some complicated calculations need to be made, \n  including the adding of fractions. You will help her make the jump to light \n  speed because, obviously, you want to live. All you have to do is add 2 fractions \n  together and return the resulting fraction in reduced form.\n",
  "Output": "",
  "Title": "WC98 - Return of the Plachta",
  "Input": "\n  4 numbers separated by spaces representing respectively numerator1, denominator1, \n  numerator2, denominator2.\n  Each of the input numbers will be in the range 0 \u2264 numerator \u2264 32000 or 0 \n  < denominator \u2264 32000.\n  There will be 5 such inputs, ie. 5 sets of fractions to add.\n"
}{
  "Example": "Sample Input \n1\n3 3\na A\na B\nb B\nb C\nc C\nc A\n-1 -1\n\nSample Output\nWill\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " The IMF has expanded its budget to hire one more person and both Ethan and \n  Will are trying out for the job. But the IMF is fairly cruel and so they are \n  making them play each other in a simple game of internation intrigue-- the loser \n  of the game doesn't get hired (and since the IMF \"doesn't exist\", we all know \n  what happens to the loser, right?). The game is simple -- it involves a lot \n  of intercontinental flying as a pair.\nThe airports that the 2 will be using are in Europe and North America. At each \n  destination, Ethan and Will must alternately choose a new intercontinental destination \n  to fly to (ie. if they're in America now, they have to fly to somewhere in Europe \n  and vice versa). Obviously, they can only fly by one of the recognized flight \n  routes originating in the city they're currently in. They can also never take \n  the same flight route twice, nor can they land in the same airport twice. Like \n  we said, they must alternate in choosing the next destination. The game starts \n  when Ethan picks an airport to start at. The game ends when no more airports \n  can be gotten to from where they are without retracing steps or visiting one \n  twice. At that point, the winner of the game is the one who last chose an airport. \n  Upto 26 American cities and upto 26 European cities will be used in this game \n  American cities will be designated with small case letters while European cities \n  with upper-case letters. You will be given the cities between which flights \n  exist. Assuming Ethan picks the airport that they start at, your task is to \n  determine whether Ethan has a winning strategy, Will has a winning strategy \n  or whether neither has a winning strategy (meaning that it totally depends on \n  what each does). Output \"Ethan\", \"Will\", \"Neither\" respectively ",
  "Output": "",
  "Title": "WC99 - S - World",
  "Input": ""
}{
  "Example": "Sample Input \n1\n8 10\n5\nWWWWWWWWWW\nW W bW   W\nY a  WX  W\nW W  WWAaW\nW     b  W\nW  WW BWWW\nW  W  W  W\nWWWWWWWWWW\n\nSample Output\n5\n",
  "Memory Limit": "256M",
  "Time Limit": "10.00s",
  "Description": " So if you'll remember, both Ethan Hunt and Will Hunting are janitors at this \n  college and since their collective genius has been untapped, they are coming \n  up with a game to decide who is smarter. One of the them will run through a \n  maze to find the other person in the shortest possible time. If you've ever \n  toured Scarborough Campus, you will appreciate that it can in fact be a maze \n  sometimes.\nIn addition, it is of note that this is a fairly modern college -- \n  so modern in fact is the college that there are teleporters scattered throughout \n  the school. Every teleporter is in 2 parts -- when you step into 1 part, you \n  are teleported into the other part (from here on, \"teleporter\" refers to both \n  parts in total).\nEach teleporter is controlled by a switch located somewhere \n  in the college. When the switch is activated, the teleporter it is associated \n  with is turned on for a specific period of time (ie. a certain number of moves \n  on your part) after which it is turned off again. A switch is located in the \n  hallway and is turned on when you walk on it. If you step on a switch to a transporter \n  that has already been activated, you reset its time. Every transporter has exactly \n  1 switch controlling it.\nThe teleporters are part of the walls. When you walk \n  into a teleporter that is activated, you are instantaneously (ie. At no time \n  cost), transported to your destination which is the other half of the same teleporter. \n  So, your only cost to teleporting is the 1 step it takes you to step onto the \n  teleporter -- you instantly materialize on the other teleporter. Note that if \n  a teleporter is not activated, it behaves just like a wall and if it is activated \n  and you step into it, you will be transported.\nYou will start from a location \n  and you will be given the ending location where Ethan will be. You need to get \n  to Ethan in the least amount of time. Note that it may not be possible to get \n  to Ethan, in which case you output \"IMPOSSIBLE\". If it is possible, you output \n  the least number of steps you need to take to reach Ethan. Note that it takes \n  1 step to step into the exit.",
  "Output": "For each test case, output the least amount of time in which Ethan can reach \n  the finishing location, and \"IMPOSSIBLE\" otherwise",
  "Title": "WC99 - S - Good Hunting Will",
  "Input": "The 1st line of the input sets will consist of m n where m is the number of \n  rows in the maze and n is the number of columns (m,n \u2264 100).\n  The 2nd line contains the length of time that each teleporter is activated for \n  (all teleporters have the same length of time that they are activated for).\nThen, you will be given a mxn maze with the following legend. Every block can \n  either be a \"W\", \" \"(1 blank space), \"X\", \"Y\", \"a\" to \"t\" or \"A\" to \"T\".\nW = Wall\n  X = Starting location\n  Y = Finishing location\n  \" \" = Empty space to walk in\n  a-t = Teleporters. Each teleporter is given a unique designation from \"a\" to \n  \"t\". Both halves of the teleporter are given the same designation.\n  A-T = Switches. Switch A controls teleporter 'a' and so on. "
}{
  "Example": "Sample Input \n1\n6\n11111\n1\n111\n0\n    222\n22222\n  22222\n0\n        3\n      333\n        3\n333333333\n333  3333\n0\n   44\n444444444\n444444444\n0\n555555\n5555\n5\n0\n     666\n   66666\n66666666\n0\n\nSample Output\n111112223\n122222333\n111222223\n333333333\n333443333\n444444444\n444444444\n555555666\n555566666\n566666666\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " James Bond is stuck at sea after his black power raft was destroyed. So far, \n  no one has found him (they just figured he was \"indisposed\") and so he has become \n  desperate. He decides to send a message in a bottle in the hopes that M finds \n  it. But this is after all MI6 and so everything has to be done secretively. \n  He writes his message in invisible ink on a square piece of paper and then cuts \n  the paper into different shapes (at most 10 shapes). He then stuffs these shapes \n  into a bottle and sends it on its way to London. As per protocol, the shapes \n  all have edges parallel to the edges of the paper. The paper is a standard MI6-issued \n  10x9 (height x width) piece of paper. Some time later\u2026\nBack in London, M retrieves the bottle and attempts to put the paper back together \n  in order to retrieve the message. But there's a good reason she's not an active \n  agent because she needs help putting the paper back together. You are given \n  the shapes and you must put it back together into the original square. The shapes \n  will be masked by a character to indicate its shape\nFor example,\n 1111\n 11\n\nwould denote an L-shaped piece. You must output the completed square. Note that \nthe pieces are indicated with a character designation (i.e. this piece has been \ndesignated \"1\") to ensure that in the completed square, the exact positions of \nall the pieces placed are evident. In the event of more than one correct completion, \noutput any of them. ",
  "Output": "Output the original letter as it must have appeared (if more than one exists, \n  print out any one possibility). ",
  "Title": "WC99 - S - Message",
  "Input": ""
}{
  "Example": "Sample Input \n1\n4\n\nSample Output\n3 4 1 0 2\n",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": " The Impossible Mission Force had some cutbacks and Ethan Hunt was disavowed. \n  His story is now told in the sequel to the popular Good Will Hunting, tentatively \n  titled Good Ethan Hunt. Ethan needs to pay the bills in his currently unemployed \n  state and has taken a job as a janitor at a local college. Here, his tasks include \n  resetting the key combinations to several doors periodically. However, the man's \n  a genius and choosing a random code would be beneath him and so he will reset \n  the code in the following way: The code will involve all the numbers from 0 \n  to n, where n \u2264 15000. The code will be a permutation of the numbers 0 to n \n  such that no k-term subsequence (k \u2265 3) of these numbers forms an arithmetic \n  sequence. Note that \"subsequence\" implies that the elements are in the same \n  relative order as in the original code.\nFor example, if n = 4, you must use all the numbers from 0 to 4 and a valid code \n  would be 3, 4, 1, 0, 2. Your task is to generate ONE such code given a value \n  for n. ",
  "Output": "For each value of n, output ONE valid code (each code on a separate line)",
  "Title": "WC99 - S - Good Ethan Hunt",
  "Input": ""
}{
  "Example": "Sample Input \n1\n4\n1 2 1\n2 3 1\n3 4 1\n4 1 1\n0 0 0\n\nSample Output\n1\n",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": " The Star Wars franchise has been so secretive about the plot of the next 2 \n  movies that even their most die-hard fans have been fooled into thinking that \n  Darth Vader uses the Force to track down the Jedi Knights. However, what they \n  don't realize is that Star Wars is really an autobiography of George Lucas. \n  If you don't want to know the plot of the movie, skip to the next problem because \n  some shocking details will be revealed. First, George Lucas is really the Emperor \n  of the Dark Side. Second, he will actually use his acquired wealth (from the \n  first 4 movies) to bribe weak-minded Jedi into revealing information leading \n  to the capture of other Jedi. Lastly, being a greedy impresario, he obviously \n  wants to minimize the total amount of bribes he hands out. So here is the situation \n  he faces: \n1) There are n Jedi, each with knowledge that will reveal the location of 0 \n  or more other Jedi. \n2) Some of these Jedi can be bribed into revealing the location of others. \n  The Jedi are a little greedy and so each one has a price list that he will use \n  to determine the price of bribery, i.e. each Jedi he can compromise has a price \n  and for that price, only that one Jedi will be compromised. Say that Jedi X \n  knows the location of 2 Jedi A and B. He will give up Jedi A for $10 and B for \n  $15. If you bribe him with $15, he will only give up B. If you then want to \n  reveal A, you have to bribe him again with $10 to reveal A.\n3) If you find out the location of a Jedi (by bribing somebody else), you can \n  then use the persuasion powers of the Force to make the captured Jedi reveal \n  everybody he knows about - obviously, these revelations will come at no cost.\n Somehow, you have acquired a list of all Jedi and the prices they charge. \n  You want to come up with a bribery plan such that all Jedi can be captured at \n  a minimum cost. If all the Jedi can be caught, output the minimum bribe required. \n  However, if all the Jedi cannot be caught, output \"IMPOSSIBLE\". Note that bribing \n  a Jedi doesn't mean that he has been captured. Note that there will be at most \n  100 spies and at most 1000 possible briberies to do. ",
  "Output": "For each test case, output the cheapest price for which all the Jedi can be \n  caught, and IMPOSSIBLE if it can not be done.",
  "Title": "WC99 - S - Star Wars",
  "Input": ""
}{
  "Example": "Sample Input \n1\n4 4\n4 4 4 4\n4 1 1 4\n4 1 1 4\n4 4 4 4\nSample Output\n12",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Adam Sandler is now a wedding juicer, i.e. he designs interesting punch-bowl \n  designs. His latest design is as follows: it is built up from a flat board of \n  dimensions nxm (m,n \u2264 100). Onto the board, he pastes nxm solid blocks - each \n  1x1 in width, but with variable heights (height will be integers \u2264 10000), \n  i.e. the entire board is covered with these blocks and no 2 blocks are stacked. \n  To determine if this is a feasible design for a wedding, he needs to determine \n  how much punch can fit into this funky punchbowl. So, you might wonder where \n  the juice is going to go if all the blocks are solid. Keep in mind that juice \n  can get trapped between boxes.\nYou will be given n and m, followed by a grid of n rows of m items (each item \n  separated by ONE space). This grid will contain the heights of the cuboid block \n  at that grid position on the board. Given these numbers, you must output the \n  volume of punch that will fit into the bowl. Assume that there is no surface \n  tension on the board and so an unbounded region can hold no juice. ",
  "Output": "For each test case, output the amount of juice \nthe given bowl can hold.",
  "Title": "WC99 - S - Wedding Juicer",
  "Input": ""
}{
  "Example": "Sample Input \n3\n[3 2 1][1 3 2](a b c)\n2\n[2 1][2 1](a b)\n-1\n\nSample Output\n(b c a)\n(a b)\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Neo is trying to crack the code to break into the computer system of those \n  omnipotent aliens. Whoa!! But even though he has been given the decryption algorithm \n  by Morpheus, he still can't figure it out (remember, this Keanu we're talking \n  about here). So you need to help him break the code.\n\nThe system works as follows. The computer will give you a \"challenge\" - an \n  order set of at most 200 characters, enclosed in round brackets ('(', ')'). \n  To successfully enter the system, you have to answer the challenge by permuting \n  the order of the elements using the given. The correct permutation is obtained \n  by applying one or more permutation matrices to the challenge string as follows: \n  a permutation MATRIX of [1 3 2] means that the 1st character of the challenge \n  string stays 1st, the 3rd character is now 2nd and the 2nd character is now \n  3rd. So for example, if the challenge set is (a b c) and the permutation matrix \n  is [1 3 2], the counterchallenge is (a c b). Like we said, there may be more \n  than one permutation matrix to apply in which case you apply them from right \n  to left. So if the challenge is (a b c) and the permutation matrices are [3 \n  2 1][1 3 2], the counterchallenge is (b c a). And remember the wise words of \n  Morpheus (ie. us): \"everyone will be told what the matrix is.\"",
  "Output": "",
  "Title": "WC99 - The Matrix",
  "Input": ""
}{
  "Example": "Sample Input \n5 5\n01200\n00002\n00002\n00000\n00000\n-1 -1\n\nSample Output\n2\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Due to the unprecedented popularity of the last Mission Impossible movie,\n     and especially the scene with Tom Cruise falling from the vent, John Woo has\n     done what Hollywood does best - repeat the scene with minor variations in the\n     sequel. So Ethan Hunt finds himself again having to crawl through the vents\n     of a high-security building and like most movie-sized vents, it fits a full-person\n     along with all his gear. This time however, he has to drop into a room full\n     of explosives in order to retrieve the top-secret solutions to Woburn Challenge\n     2000. So naturally, he wants to know the exact position of all devices in the\n     room before he drops in. In preparation, he takes the following 2 items: a thermal\n     imager and 1 bottle of hair gel (hey, he has to look good for his entrance,\n     right?) The thermal imager is to scan the room from the ventilation ducts (ie.\n     from above) to determine how many heat signatures there are (it seems that all\n     the explosives give off heat). \n",
  "Output": "For each test case, output the number of explosives are in the room.",
  "Title": "WC99 - Mission Impossible",
  "Input": "Note that each image will be at most of size 20x20. At the start of every\n     input will be a line containing the number of columns / rows (respectively).\n     There may be many images in the file; '-1' denotes the end of input."
}{
  "Example": "Sample Input \n0.0\n-1\nSample Output\n0.00",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " The powerful Carlo crime family was quite unique among villains. In order \n  for the younger generation to participate in the activities of the family, Don \n  Monty Carlo decreed that they must do well in school (just like US College basketball). \n  [For those of you unfamiliar with crime bosses, the Don is the head of the family]. \n  But alas, the future of the Carlo crime family is threatened by the academic \n  incompetence of the eldest son, Carlos, who is failing Law and Ethics. Don Carlo \n  recognizes the futility of trying to get his son to do better in school and \n  so he opts for a more illegal route (just like US College basketball) and decides \n  to manipulate the bell curve of the class. While the exact details of this nefarious \n  plot of coercion and extortion are irrelevant, it suffices to say that he needs \n  to be able to calculate the area under a bell curve. Since Don Monty Carlo wasn't \n  too good at math, he has \"hired\" a computer programmer and made him an offer \n  he can't refuse. And being a run-of-the-mill narcissistic thug, he has instructed \n  the programmer to use the Monte Carlo method of area calculation (also known \n  as integration). Oh yeah, did we happen to mention that you are the programmer?\nThe Monte Carlo method works as follows:\nthe function to be integrated is f(x) = exp(-x2)\nto calculate the area under f(x) from x=0 to x=L, L \u2264 2.0, bound f(x) by \n    a 1 x L rectangle\nthen randomly pick 30000 points inside the rectangle and determine how many \n    of them fall on or under f(x)\nthen the area under f(x) = [Area of rectangle x]*[# of points on or under \n    f(x)]/[total # of points]\nFor all languages: don't forget to call randomize() at the start of your \n    program. \nIn C/C++: (float) rand() / (float) RAND_MAX will give a random number in \n    the range 0..1 \nIn Pascal: random will give a random number in the range 0..1 \nIn Turing: rand(f), where f is a real, will assign to f a random number \n    in the range 0..1 ",
  "Output": " Note that we will check the text of your program to ensure that you are in \n  fact using the Monte Carlo method. You don't want to cross the Don.",
  "Title": "WC99 - The Godfather",
  "Input": ""
}{
  "Example": "Sample Input \n4\n8\n-1\nSample Output\n1 3\n2 2\n\n1 7\n3 5",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Think back to the 1960s. Remember Goldfinger? Well, it appears he was cryofrozen \n  and traveled back in time to the mid 1700s, where he was reanimated as his alter \n  ego Goldbach, the famous mathematician. Coincidentally, MI6 cryofroze James \n  Bond and sent him back to a similar time to thwart the latest evil plan of the \n  evil genius. Goldbach plans to distract all of the world's greatest intelligentsia \n  by having them work with the dreaded ... unproven conjecture. He knows that \n  an unproven conjecture (especially one as fiendish as his Binary Goldbach Conjecture) \n  is sheer craziness and will drive all of the world's mathematicians to insanity, \n  thus resulting in an effective end to mathematical development, thus plunging \n  the world into the Dark Ages once more. But where mathematicians fail, scientists \n  (and doctors) reign supreme and James Bond will attempt to prove the theorem \n  by a tried-and-true scientific method: proof by example. \nGoldbach's Binary Conjecture: Every even number 4 \u2264 n \u2264 16000 may be written \n  as a sum of 2 primes. (Note that Goldbach believed that 1 was prime).",
  "Output": "",
  "Title": "WC99 - Goldfinger",
  "Input": ""
}{
  "Example": "Sample Input \n1234.56\n1.2\n0.098\n0\n\nSample Output\n1.235 x 10^3\n1.200\n9.800 x 10^-2\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Many viewers of the movie were so taken by Matt Damon that they never realized \n  that he knows no physics whatsoever. The painful reality of this was finally \n  revealed at a recent press junket when a bitter physics professor named Dr. \n  Peter Plachta asked Damon to convert a number to scientific notation (apparently \n  Dr. Plachta was incredulous when he realized that somebody in the physics world \n  was more popular than he was). So anyway, when Damon was unable to answer the \n  question, his agent began damage control by hiring a team of programmers to \n  write him a program that would do this conversion for him.\nYou will need to convert a real (floating point) number to scientific notation, i.e. a number \n  of the form x.yzw*10p, where the digit x is non zero, \n  the digits y, z, w are possibly zero, and p is a non-zero integer. \n  If p is zero, simply output x.yzw. Therefore, the number 1234.0 \n  is 1.234 x 103 in scientific notation. However, since superscript \n  is a little tough to do in a text based system, the above answer would be outputted \n  as follows: 1.234 x 10^3 (note that there is ONE space before and after \"x\" \n  and no other spaces elsewhere) All numbers should be rounded to 3 decimal places. \n  The number '0' denotes the end of data. ",
  "Output": "For each test case, output the number in properly formatted scientific notation.",
  "Title": "WC99 - Good Will Hunting",
  "Input": ""
}{
  "Example": "Sample Input \n3 1  3 2  2  4  0 0\n3 1  1 3\n0 0\n-1 -1\nSample Output\n3\nINVALID",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Brad Pitt's Fight Club has become quite big and so he wants to put some kind \n  of organization into it. But remember the first two rules of Fight Club. No \n  one can talk about Fight Club. But just on the off-chance that one of his minions \n  loses his negligible mind in a fight and does talk about Fight Club, he wants \n  to ensure that the entire organization is not compromised. So he does the following: \n  He assigns one of his lackeys to come up with an organizational hierarchy subject \n  to a few rules\nA person at a certain level is in charge of everyone below him in the \n    hierarchy and knows the identity of ONLY those below him(thus, he can only \n    compromise those below him)\nEveryone has exactly 1 person in charge of them, except Brad Pitt (see below). \n    Why? Think about how the club would be compromised if this was not followed. \nBrad Pitt is the head of the hierarchy and thus has no boss. Therefore, \n    no one knows his identity but conversely, he knows the identity of everybody \n    (because everybody is under him).\nThis is all good, but we're forgetting that his followers are not exactly rocket \n  scientists and so the man in charge of doing the hierarchy forgot to label the \n  people in the hierarchy with their names. For extra security, everyone was labeled \n  with a positive integer n (0 < n \u2264 20000). As a result, Brad Pitt doesn't know \n  where he is on the hierarchy; to find out, he needs to scan the entire list. \n  However, he doesn't even know if his rules were followed (writer's note: you \n  just can't hire good help these days). So your job is a) to determine if the \n  rules were followed and b) if so, determine which person in the list represents \n  Pitt.\nWe will give you the hierarchy with numbers in place of the people in the hierarchy. \n  If the rules were not followed, output \"INVALID\". Otherwise, output the number \n  of the person that corresponds to Brad Pitt. (Note: you can safely assume that \n  a valid hierarchy was not the result of multiple mistakes). ",
  "Output": "",
  "Title": "WC99 - Fight Club",
  "Input": ""
}{
  "Example": "Sample Input \n50 20\n11111111111111111111111111111111111111111111111111\n111111100000000000C0000000000000000000001111111111\n11111110111111111111111111111111111111100000000011\n11111110111111111111111111111111111111111111111011\n1S0000000000000000C0000000000000C11111111111111011\n11101110111111111111111111111111011111111111111011\n111C1110111111111111111111111111011111111111111011\n11101110111111111100000000000000000000000000000E11\n111C1110111111111101111111111111011111111111111111\n11101110111111111101111111111111011111111111111111\n111E11100000C0000000000000011111C1111000C000111111\n11101111111101111111111111011111011111111110111111\n11101111111101111111111111011111011111111110111111\n11101111111101111111111111011111011111111110111111\n11101111111100000000000000000000011111100C00111111\n11101111111111111101111111011111011111101111111111\n111000000000C0000001111111011111011111101111111111\n11101111111111111111111111011111011111100011111111\n111C00000000000000C0000000E00000E11111111000E11111\n11111111111111111111111111111111111111111111111111\n-1 -1\nSample Output\n1 39\n(NOTE: There are actually 2 paths of the same length that are correct)",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Scarborough College (aka. the Concrete Palace) was affectionately known to \n  its residents as The Rock. This contest affords a unique opportunity to determine \n  why. While you all are stuck in a small cramped cell, (uh...room) with no food \n  or drink, your proctors/captors will be enjoying themselves in a lavish staff \n  room with coffee and donuts (mmm...Polish donuts). Some preliminary reconnaissance \n  has revealed that they have some sensitive information vital to your sanity \n  - the solutions to the contest. Apparently Tom Cruise failed to procure the \n  solutions (see Problem 4) because he used so much hair gel that it underwent \n  spontaneous combustion and set off the thermal sensors in the air vent. So some \n  ambitious students decide to procure these documents themselves, but all of \n  a sudden, the doors slam shut and the lights go out. Then a voice bursts out \n  of the P.A. system speaker. \"Do not be alarmed. I am The Plachta, the most feared \n  teacher in the world (well, at least at Woburn)! I have wised up to your plan \n  to steal the donuts and have taken corrective action by trapping you in your \n  cell...uh, room. Do not try to escape because there are state-of-the-art surveillance \n  cameras. The Plachta is watching you. Ha ha ha ha ha...\" \nFilled with fear, you do not know what to do. Before the competition started, \n  however, you noticed that all the doors in the school were left unlocked (The \n  Plachta sometimes overlooks these minor details). The doors are not a problem. \n  All you have to do is avoid the security cameras and you will be free. Fortunately, \n  one of the students on the UofT ACM team hacked into the city and stole the \n  blueprints of the college and knows the positions of the cameras. All you need \n  now is to figure out the shortest path that crosses the minimum number of cameras \n  that will lead to an/any exit. Your task is to write a program that will find \n  this path before it is too late... \nSince Scarborough Campus consists of several buildings, there may be several \n  maps in the input. \nThe school map is a rectangular grid containing cells of the following type: \n1 - Wall - You may not walk in these cells.\n0 - Floor - You may walk in these cells. \nC - Camera - This cell is a floor cell containing a camera. You may walk in these cells.\nE - Exit - This is an exit\nS - Starting Position - This is where you start off. \nWoburn cameras actually are not as state-of-the-art as The Plachta thinks \n    and have very short range. Crossing a camera occurs only when you step into \n    a cell containing a camera.\nThere will be at least one exit and at least one path that will lead from \n    the starting position to an exit. \nThere will be only one starting position. \nNot all exits or parts of the maze may be accessible. \nYou may only move to adjacent cells (no diagonal moves) of all types except \n    for type Wall. ",
  "Output": " Output N and L separated by a space. (N = Number of cameras crossed in the \n  path, L = length of the path) Input will be terminated by '-1 -1'. ",
  "Title": "WC99 - The Rock",
  "Input": ""
}{
  "Example": "Sample Input \n8 5\n  1 4\n-1 -1\nSample Output\n6",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "On Monday, the number of frosh  were reduced in half. To further reduce  the number of engineers to a manageable number, the following challenge was  devised for the second day. Each of the  students would have to take this challenge individually.\nEach student would be placed at  a vertex of perimeter fence of Waterloo (oh yeah, some background: to keep UofT\u2019s  engineering Lady Godiva band out of Waterloo, a fence was erected surrounding  the university. The fence just happens  to be an N-gon). At some other vertex  along the fence would be located a temptation so seductive that no Waterloo student could  resist \u2013 an extra-credit assignment. The  challenge of each student is to go from his starting vertex to the vertex with  the prize. There are, however, 3 rules:\nThe student can only travel  from vertex to vertex (backwards or forwards) along the polygonal fence.\nThe student has to make contact  with exactly K vertices (the vertex he starts at doesn\u2019t count unless he  returns to it). The K vertices need not  be unique. The final vertex has to be  the one with the prize.\nIf the student cannot reach the  prize and make contact with exactly K vertices, he fails the test and is kicked  out of the university.\nOf course, no Waterloo student is satisfied with only 1  solution to any problem. Therefore,  inevitably, each student determines all ways that he/she can win. Note that there may be no solution to the  problem (the astute student has figured out that this will result in a class  size of 0 \u2013 this is entirely allowable as the variable used to quantify  enrollment was incorrectly defined as a whole number instead of a natural  number).",
  "Output": "The total number of ways of  reaching the destination from the starting point by following the above  rules. The total number of ways will be  less than 2,147,483,647 (ie. a longint).  Output 0 if there are no solutions.",
  "Title": "WC01 - S - Temptation Island",
  "Input": "N K (N, K \u2264 50)\nA B (A = the starting vertex  number, B = destination vertex number)\nThere will be multiple test cases, one after another: a case where N = -1, K = -1  terminates input."
}{
  "Example": "Sample Input \n3\n  000\n  010\n  000\n000\n  000\n  000\n000\n  000\n  000\n  1 1\n  -1\nSample Output\n26",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "It is a well-known fact that  all engineers like beer. Not so  well-known however, is that one of the qualifying tests to get the engineering  ring is to be able to estimate the amount of beer in a bowl. This important skill is absolutely essential  to determine how long a lunch break is needed.\nNow, Waterloo is a proud institution, and it would  cast a real shadow on their program if one of their graduates failed to get  his/her ring because of failure in the beer-estimation test (who can forget the  great debacle of 2000). So, the  orientation leaders have decided this year to preempt such an embarrassment  from happening by running a beer-estimation test during orientation week. Only those who can successfully pass the test  will be allowed to continue in the program and make their millions at Silicon Valley (now do you get the title?).\nNothing is ever easy at Waterloo and so the beer  bowl is a cubic bowl of dimensions NxNxN.  Some objects have been placed in the bowl that take up volume in the  bowl (these objects may or may not be floating, but they will be fully  submerged). The pouring of the beer will  also be done at a specified coordinate at the top of the bowl. Each student is required to determine the  maximum volume of beer, which can be accommodated from the given pouring  location and pour that amount into the bowl.  Any overfilling of the bowl will result in failure of the test and  inevitable poverty in life. Note that  beer does not flow diagonally between objects  in the bowl.",
  "Output": "The maximum volume of beer that can be poured into the bowl from the  given pouring coordinates.",
  "Title": "WC01 - S - Regis",
  "Input": "Each case begins with a single integer N \u2264 30.\n  The next N lines will represent  N cross-sections, from top to bottom  (the walls of the bowl will NOT be included in the input). A \u201c1\u201d indicates a block, a \u201c0\u201d indicates  empty space.\nFinally, there will be two integers, column and row (the one-based coordinates  where juice is poured at the top). Each  layer (2D array) is separated by a blank line.\nThere will be multiple test cases; keep reading until N = -1."
}{
  "Example": "Sample Input \n5\n1 1 3 2 4\n-1\nSample Output\n4",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "It's Wednesday night and the remaining frosh (the ones that haven't been kicked off) are having a little fun inside the Waterloo compound (ie. inside the convex polygonal fence previously described) arranged by their frosh leaders as a way to unwind.  They are divided into groups and each group is given a map of the fence.  Each vertex of the fence has a number on it and they are told the following things.\nAlong the path connecting any 2 vertices, there are exactly F tokens (where\nF is the multiplicative product of the 2 numbers on the end vertices).  Each\ntoken entitles the group to have an extra \u00bd hour of fun during the week.  The\ngoal is to divide the entire intra-fence region into triangles in the following\nway:\nThe vertices of the triangles have to be vertices of the original polygonal fence.\nThe triangles that the group chooses to form are determined by which paths the group decides to choose (the paths mark the sides of the triangle).  If they choose a path, they pick up all the tokens on that path.  Clearly, since the vertices of the triangles have to be vertices of the original fence, the group cannot choose 2 paths that cross each other.\nSee the accompanying drawing for an example of a correct triangulation (shown in bold).\n\nThese are all the instructions that the group is given.  What they don't know is that this is not really a game.  They are being watched by the leaders to determine which group will triangulate the field by choosing paths that allow them to pick up the least number of tokens, i.e. which group will decide to have the least fun.  The leaders realize that all good engineers eschew fun and thus, the groups that instinctively choose to have the least fun are best qualified for the program.  The rest are kicked out.\nYou are in one of these groups.  You don't like fun (hey, you're writing this contest on a summer day, aren't you?) and want to determine the least amount of fun your group can have, i.e. what is the least number of tokens that a group can pick up and still triangulate the field.",
  "Output": "The least number of tokens that can be picked up.",
  "Title": "WC01 - S - Big Brother",
  "Input": "N (number of vertices in the fence; -1 denotes end of input; N \u2264 100).\nThe next line will contain Fi, the numbers assigned to the jth vertex. 0 < Fi \u2264 10 000 (natural numbers)."
}{
  "Example": "Sample Input \n(a | b) & (a | c)\n(a | a) & (!a | !a)\nSample Output\nsatisfiable\nunsatisfiable",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "So that was enough  craziness. Three whole days of no  studying was just too much and so orientation week was cut back to only 3 days  (or was it?). Today is the first day of  class \u2013 discrete math. The students are  divided into groups of about 10 and are each given a 2-CNF formula (ie. a  formula in conjunctive normal form with 2 variables per clause \u2013 e.g., (a OR b)  AND (c OR a) AND (x OR NOT y) ) for which they have to find a solution. Being engineers not in the math stream, they  set out to solve the formula using the only method they know: brute force (ie.  trying all possible combinations for all the variables). There are however 2 twists on this sinister  day.\nWord has leaked out that this  so-called \u201cclass\u201d is really another test of their orientation week and that  there is a mole within their group who is sabotaging their efforts to find a  solution to the formula.\nThey have discovered that not  all CNF formulas are satisfiable. \nTherefore the following  question arises: are they unable to find a solution because a) they are stupid,  b) the mole is sabotaging their efforts or c) the formula is unsatisfiable.\nFurthermore, being Waterloo keeners, they  want to solve this problem in time O(n lg(n) ) or less, where n is the number  of clauses in the formula and lg is the base 2 logarithm.",
  "Output": "If a formula is satisfiable,  print out \u2018satisfiable\u2019.\nOtherwise, output 'unsatisfiable'.",
  "Title": "WC01 - S - The Mole",
  "Input": "Several  2-CNF formulas: variables will  be characters, & is AND, | is OR and ! is NOT; blank line denotes end of  input. There will be spaces between | and & and brackets around each  clause. There will be at most 10,000 variables per formula."
}{
  "Bonus": "Josh, another Waterloo keener, has solved this program for 0 < K < N < 64000. Simon doesn't want to lose his reputation as the class nerd, so he's desperate to repeat this feat. If you can help him, you'll get twice as many points.",
  "Example": "Sample Input \n2 1\n3 1\n-1 -1\n\nSample Output\n3\ninfinity\n",
  "Memory Limit": "32M",
  "Time Limit": "2.00s",
  "Description": "Ah, it's the end of frosh week and love is in the air.  New couples are forming everywhere and everyone is happy.  Hi, I'm Roger Lodge.  Let's meet our couple, shall we?  Simon is a Computer Engineering frosh who has a \"fetish\" for precision.  His favourite books are \"Advanced Number theory\" and \"The Hermit, The Hospital and The Place: baby names for mathematicians\".  Simone is an electrical engineering frosh who likes sparks to fly on the first date.  She likes to mix psychology with physics and is currently reading \"Jung on Young\" and \"Freud and the solenoid\".  Yikes.\nSimon and Simone are at dinner. When their drinks (ie. beer) arrive, it is in a large glass that holds 2N litres (the glass is full). In addition, the waiter has been kind enough to supply 2 other glasses: a small one that holds N-K litres and a medium one holding N+K litres,\nwhere 0 < K < N.\nThese 2 glasses are empty. Simon, being very precise, wants to pour exactly the same amount of beer for him and his date (so that there are exactly N litres left in the large and medium sized glasses).  However, the only measuring devices he has are the 3 glasses.  \nSince the jugs are not calibrated, the only way that he can know how much volume he is pouring is by emptying a jug fully or filling another jug fully.  Dr. Love says that Simon hasn't been to the gym in a while (he's been too busy reading early 21st century literature), and so he finds the jugs heavy and wants to minimize lifting a glass and pouring it.  Plus, he doesn't want to go pouring back and forth like an idiot, if it isn't even possible to split the beer evenly.",
  "Output": "P (P = the minimum number of pours will fit within a longint; output infinity if it isn't possible to split the beer evenly)",
  "Title": "WC01 - S - Blind Date",
  "Input": "N K (0 < K < N < 4000; -1 -1 denotes end of input) "
}{
  "Example": "Sample Input \n3\n  1 1 1\n1 1 1\n1 1 1\n-10 -10 -10\n\n-10 -10 -10\n-10 -10 -10\n2 2 2\n2 2 2\n2 2 2\n-1\nSample Output\n18",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The  showdown with Sauron was at hand. Dwarfs, humans, hobbits, elves and all other  creatures of Middle-earth like a huge cloud moved over the bad lands of Mordor  towards the castle.\nThen,  he stepped outside. With his huge sword he slashed left, right and as he does  he swept away tens - no hundreds. His strikes precise and vicious....  \"Just how does he do it?\" slipped through Elrond's head. Gandalf, as  though reading his thoughts, explained: \"When the Dark Lord strikes, he  sweeps what is roughly a cuboid. Through the eyes of the ring he sees the total  number of creatures and weapons in each one by one by one square. Note that the  squares stack up and down as well as horizontally, due to the various heights  of the creatures. Next, Sauron evaluates the optimal target box, and  attacks....\"\nElrond's  eyes lit up in the dark, stench-filled Mordor sky. \"We can use this  against him. We will distribute our people so as to minimize the damage he can  do. First we need to calculate the maximum damage in any rectangular prism.  Then....\"\nElrond  gasped as the legions near him were struck to oblivion by another carefully  placed Sauron blow. Elrond himself fell to the blow, badly wounded.\n  It  was all up to the little human, then, to calculate the damage as prescribed...\nCalculate  the maximum damage Sauron can achieve given his maximum strike area - a cube of  dimensions A x A x A, A\u00a0\u2264\u00a030. Note that the maximum strike area will be  a cuboid (a.k.a. rectangular pism a.k.a. right prism a.k.a. rectangular  parallelepiped a.k.a. box) within the latter.\nAt each square within the box  there will be an integer corresponding to the number of creatures, weighted by  strength, minus the number of weapons, again weighted by strength (note that  this number will be in the range [-10000..10000]).  Each creature's weight and beer drinking habits are also compensated for. The  cube will be input layer by layer, starting from the top. Any partial sum will  fit within a signed 32-bit integer.",
  "Output": "The maximum damage Sauron can inflict.",
  "Title": "WC02 - S - Dark Lord",
  "Input": "Each case starts with a single integer, A.\n[cube,  layer by layer]\nThere will be multiple test cases; the cases will end when A = -1."
}{
  "Example": "Sample Input \n1 1 1\n-1 -1 -1\nSample Output\n7",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "As  Gandalf hit the walls reeling from yet another shot from Saruman's magic staff,  he noticed that they moved to a large room, with shiny violet walls.  Immediately he knew what had taken place, but it was too late - with one  movement of his staff, Saruman had shut the door.\nWhat  awaited Gandalf was an old wizard challenge, known as the Klingon Roulette.  Gandalf would be placed in one corner, Saruman in another. They would shoot a fire ball, one at a time, which would then proceed to ricochet off the  shimmering violet walls. Gandalf felt his power fading, so he knew his yellow  flaming ball would only last about one billion (1,000,000,000) standard life  times.\nThe  contest was won when only one man was left standing. Gandalf focused to try to  foresee the path of the ball\u2026\nGiven  a rectangular room of dimensions A x B x C, A, B, C \u2264 2,147,483,647, and given  that Gandalf fired his shot at an angle of 45 degrees to the horizontal and  vertical from corner #1, print out which corner would be hit first, or, if no  corner is hit, print out SENILE.\nThe  fire ball travels at a speed such that 1 unit is traversed in one life  time. The  corners are labelled in clockwise manner - (0, 0, 0) is 1, (0, B, 0) is 2, (A,  B, 0) is 3, (A, 0, 0) is 4, (0, 0, C) is 5, (0, B, C) is 6, (A, B, C) is 7 and  (A, 0, C) is 8. \nYou  may also like to know that Gandalf can do this problem using a signed 32-bit integer for his calculations.",
  "Output": "Print which corner would be hit first, or SENILE.",
  "Title": "WC02 - S - Klingon Roulette",
  "Input": "Each test case consists of a line with 3 integers  - A, B, and C.\nThere will be multiple test cases; the last test case will simply have A, B, C = -1. "
}{
  "Example": "Sample Input \n2 2\n  1 1 1\n  2 2 1\n  -1 -1 -1\n-1 -1\nSample Output\n1\n1(1) 2(2)",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "As  Frodo woke up from his near eternal nightmare, having been stabbed by the  enchanted sword of the Lost Kings, he began to consider the events carefully.  How did the orcs and the Black Riders always stay just one step behind them?  What secret power did they possess? Just then, Bilbo Baggins entered the elf  chamber. \u201dThere you are my dear Baggins\" - he noticed Frodo deep in  thought - \"What is troubling you?\"\n\"I  am wondering how the evil forces can remain so efficient....\"\n\"'Tis  not a real secret\" answered Bilbo. \"Before his defeat at Mordor,  Sauron had invented a machine he called a computer. Apparently, it is a kind of  counting device, very efficient at creating a sort of bug. Next, if you possess  the dark and secret knowledge of lacsap it is apparently possible for the  machine to hand out tasks for all the members of Sauron's forces. Well, at  least that's how the story goes. I don't know, I really don't know.\" \nBilbo  shook his head \"What did I get you into. I'm sorry dear Frodo, I'm  sorry....\" He left the room, sad and solemn.\nFrodo  started wondering, \"A dynamic, parallel task scheduling program... if only  I had brought my Z/Z-- book...\". Before he could complete his train of  thought it was interrupted by the late arrival of a familiar and most welcome  figure: Gandalf.\nGiven  a number N \u2264 101 of evil guys and a number M \u2264 101 of evil tasks,  where each task takes a multiple of 1 standard hour, find the shortest time to  execute all of the tasks. The evil guys - orcs, especially - are not so clever  so you will also need to print out a schedule for them, as to when to execute  the task. Also, the orcs are not very coordinated so only one orc can work on  one task during any given time interval.\nNote  that the evil guys/tasks which appear in the input will be in the range [1..N]  / [1..M] (respectively), although not all the numbers in a range have to be  used.",
  "Output": "Time  required (standard hours)\nFor  each 1 hour time period, print out the orcs which will be completing their  tasks \u2013 as well as the corresponding task in parentheses \u2013 during that period,  as shown below.",
  "Title": "WC02 - S - Evil Tasks",
  "Input": "Each case begins with two integers, N and  M.\nThe following lines will specify the possible combinations of orc-task assignments with 3 integers: orc  #, task #, and time units required for said orc to finish said task (-1 -1 -1 denotes end of orcs /  tasks)\nThe last test case will have N, M = -1."
}{
  "Example": "Sample Input \n0 0 -1\n  0 10 0 -1\n  0 10 -1\n-1\nSample Output\n100.000\n  20.000\n14.142",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Pressed  against the icy mountain Caradhras, trying to dodge yet another avalanche  caused by Saruman\u2019s chant, Gandalf began to wonder, \"It is as though the  trail was getting longer and longer... and steeper and steeper.\" He  focused his power to read the mind of his former master.\n\"We  must turn back!\" he yelled through the thundering snow, \"We must turn  back!\"\nThe  fellowship, slightly at loss, obeyed at once.\n  What  Gandalf had realized was shocking, shocking indeed. Not since Lord Ruru has the  \"mountain raising\" spell been used. Lord Ruru, the six-legged Serpent  of Doom, used it to torture his subordinates. He would set them off on a  mountain trail, and then lower and raise mountains to make the trail  indefinitely longer than it seemed, trapping the victim, forever going forth,  but never reaching the end.\nLord  Ruru's power was unparalleled, so it seemed like Saruman was unable to raise  the mountains completely at will. Still, the danger was there.\nAt  his castle's keep, Saruman with his arms raised high in the air, was amidst a  chant. His eyes were closed, deeply focused, as he was predicting the trail the  fellowship would take - the shortest, of course - and using Lord Ruru's evil  spell on that path...\nGiven  a one dimensional mountain range, consisting of a sampling of heights (positive  ints), and given that the fellowship must either stay on top of the range  and/or cut horizontally across a peak (or peaks) to another place on top of the  range, what is the shortest distance that will be traveled?\nOh  yeah, if you recall all mountains in Middle-earth have slopes of 45 degrees. Also,  Gandalf didn\u2019t bring his \u201cwalking-on-air\u201d spell, so the fellowship can\u2019t cut  across valleys. If  two points of the same elevation appear, assume a horizontal distance of 100  standard units between them, and there will be no more than 30000 samplings of  heights!",
  "Output": "Output  the shortest distance that will be traveled by the fellowship.\nYour answer should be precise to 3 decimal digits.",
  "Title": "WC02 - S - The Spell of Lord Ruru",
  "Input": "There will be multiple test cases.\n  Each test case will consist of a list of heights in the format height  #1 height #2 \u2026., terminated by a -1. \nThe last case will simply be a single -1."
}{
  "Example": "Sample Input \n2\n1 2\n-1 -1\n-1\nSample Output\n1\n1 2 1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Frodo  was running frantically, mapping out his portion of the mines. In fact, all  members of the Fellowship, barring Strider and Gimli, were doing the same.\n  But  not out of laziness was Strider not participating - certainly not, given how  honourable and courageous he was. Strider was busy preparing fasola mines.  Those, once placed in a corridor, would explode as soon as anyone dared enter  the mined corridor.\nGimli  was quite busy too, huffing and chopping happily the dark mine walls - he was  connecting all the corridors to create a path for Strider - who was to leave  the mines - such that the latter could get through all of the corridors without  re-entering a corridor where he had already placed a mine, for clearly, that  would mean his demise.\nThe  fellowship, while scouting the mines, worried about Strider. Just how did he  plan to accomplish this task?\n  And  yet, it was clear that the only thing that stood between the Fellowship and the  yellow, crooked teeth of the monkey-like orcs of Moria was the fasolas...\nWe  like Striker and don\u2019t want him to die. Given the maps of the corridors  returned by the members of the fellowship, design a path which would allow  Strider to set the mines without getting himself killed. Also give the minimum  number of corridors that must be dug by Gimli in order to complete the trail...\nOh  yeah, some corridors may only be dug one way. Also, Gimli is easily confused  and so he does not dig multiple corridors between intersections in the same  direction. We guarantee that every test case will be solvable\u2026 You can thank us  later.",
  "Output": "The first line should contain a single integer, the # of  corridors created.\n  Following should be the path (a list of intersections starting  from intersection 1 and ending at that intersection)",
  "Title": "WC02 - S - The Mines of Moria",
  "Input": "There will be multiple test cases.\n  Each test case begins with a single integer, the # of  intersections (-1 denotes end of input) There will be no more than 200  intersections.\n  For each corridor, a line with two integers follows: intersection_i intersection_j (-1 -1 denotes end of corridors) - denotes corridor from i to j (one-based)\nThere  will be no more than 10000 corridors."
}{
  "Example": "Sample Input \n3\n11:59\n3\n01:00\n15\n12:11\n33\n\nSample Output\n1\n59\nInfinite\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The cows have been advancing steadily against a weak monkeys' front. The\nHead-Monkey, employing logic not used since the debacle of the Polish Un-Truth\nTable, decides to expose the monkeys' backs, hoping for better luck.\nUnfortunately, this tactic is not successful, and the monkeys are forced to\nretreat further into the deep recesses of Scarberia, with sore bottoms, no less.\nThe Head-Monkey decides it's time for action. But before anything can be\ndone, a meeting must be called to decide what must be done. And in this\nmeeting, several debates must be fought, each lasting several hours, and each\nleading to the inevitable conclusion, \"Just leave it as it was last year!\" The\nHead-Monkey sends forth word to her disciples to meet at the top of the\nEnchanted Tree at the next time when the digits of the time sum to a\ncertain number, N (1 \u2264 N \u2264 32000). Several of the younger\nmonkeys want to continue playing their games for as long as possible, and\nconsequently, want to know how many minutes are left before the meeting is to begin.",
  "Output": "A single integer that is the number of minutes left before a meeting occurs\nor \"Infinite\" if a meeting never occurs. Note that the output will never\nbe 0 since we are asking for THE NEXT TIME when a meeting is possible.",
  "Title": "WC02 - A Planning Session",
  "Input": ""
}{
  "Example": "Sample Input \n1\n2 2\n1 10\n10 1\n\nSample Output\n2\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The monkeys and cows have marched to the place designated to host the final\nbattle. It's surprising how much people cooperated even when it came to\nscheduling wars during the old days! As the cows line up, the monkeys assume\ntheir positions as well. This time, the monkeys have protected themselves with\nmetal underwear; you'll no doubt remember the many hours spent rehabilitating\nthe front of their backsides! Bo and the Head-Monkey come face to face in the\nmiddle of the field, and engage in a made for TV stare-down. Then, just as the\ntwo leaders are about to signal their factions to advance, the skies open, and\ndown descends an alien spaceship.\n\"We are the intergalactic arbitrators. We cannot allow this battle to\ncontinue, for many lives would needlessly be lost. Instead, we propose a game,\nthe winner of which shall gain custody of SCARBERIA!\"\nThe leaders are stunned by this twist, but nonetheless, they agree to the\nterms proposed by the alien arbitrators. Then, the aliens explain the game.\nN members, 1 \u2264 N \u2264 100, of each group will be teleported\nto a distant planet, and placed in identical mazes. This maze has M,\n1 \u2264 M \u2264 100, doors, and each of these must be opened in order to\n\"solve\" the maze. The first group that solves their maze shall be declared the\nwinner. Please remember that the doors must be opened in order and that the\nsame monkey cannot open two consecutive doors!\"\nSince you are currently in Scarberia, it would be in your best interest to\nhelp the Monkeys win this game, so that they may retain control of Scarberia.\nOtherwise\u2026",
  "Output": "",
  "Title": "WC02 - The Final Battle",
  "Input": ""
}{
  "\u00a0": "\n\n\n\n\n\n\n\n\n\n[recipe for CHEESE]\n\n\n[recipe for SAMMICH]\n\n\n\n\n\n[recipe for MAYO]\n\n\n\n[thing we want to make]\n\nSample Output\n3.3 milk\n0.58 salt\n1 turkey\n1 ham\n0.06 egg\n0.03 vinegar\n1 bread\n\nNote: The comments off to the side won't appear in the input file!",
  "Example": "Sample Input \n1\n10\nCHEESE\nmilk\nSAMMICH\nsalt\nturkey\nham\negg\nvinegar\nMAYO\nbread\n2\n1.5 milk\n0.25 salt\n5\n2.2 CHEESE\n1 bread\n1 turkey\n1 ham\n0.3 MAYO\n3\n0.2 egg\n0.1 vinegar\n0.1 salt\nSAMMICH\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "So how is the monkeys' meeting going, you ask? Well, the Head-Monkey is\nquite big on food and whenever there's a meeting atop the Enchanted Tree, it\nis a necessity that dinner is served (pun intended). What the monkeys don't\nrealize is that the Head-Monkey is not really a good cook. But then, how many\narmy leaders are good cooks? The answer is, none. This time, the Head-Monkey\nhas purchased a cookbook. The cookbook has a certain number of recipes, but\nany recipe may require an ingredient which must be prepared according to some\nother recipe! This is all quite confusing for the Head-Monkey. She wants you\nto tell her how much of each base ingredient she needs for her recipe.",
  "Output": "",
  "Title": "WC02 - The Big Book of Recipes",
  "Input": ""
}{
  "Example": "Sample Input \n2\n2 3 4\n-3 2 5\nSample Output\n14\n7",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Cow-Bot was a success! With him roaming the streets of Scarberia gathering valuable information about the monkeys, Bo Vine feels very secure, and decides to throw a party for the cows. Bo invites all the dignitaries to his shindig, including the always popular Hugh Heifer who arrives with his escorts, Bessie and Jersey. Once the party is in full gear, however, Bo realizes that there remains a flaw with Cow-Bot: He forgot to program the instructions for him to return home!\nThis is a cow-tastrophe! Should Cow-Bot fall into the wrong hoofs, there could potentially be a coup attempt, for he who controls Cow-Bot, is automatically anointed the leader of the cows! Bo Vine cannot allow this to happen. He summons his best warrior, and informs him of the plan: The warrior will begin at a stepping-stone a (-10000 \u2264 a \u2264 10000) units, from the party hall. Bo has already hacked into one of NASA's GPS satellites and has acquired the current location of Cow-Bot; it turns out that he is located at a stepping stone. Accordingly, Bo Vine equips the warrior with a pogo-stick that can jump a fixed distance of b (1 \u2264 b \u2264 1000) units. The stones are located a fixed distance of c (1 \u2264 c \u2264 1000) units apart. Bo has chosen b such that the first stone that the warrior lands on is the stone at which Cow-Bot is located. Your task is to tell Bo Vine how far from the party hall Cow-Bot is actually located.\n\nFrom the figure, we see that the Party Hall is located at one end of this one-dimensional \"street\". The markers represent stones, a fixed distance apart. Note that the warrior only jumps in one direction. Note also that the warrior initially starts off at a stone and keeps jumping even if he doesn't land on a stone.",
  "Output": "A single integer that is the distance Cow-Bot is from the party hall.",
  "Title": "WC02 - It's Party Time",
  "Input": "The first line of input contains a single integer T indicating the number of test cases.\nEach test case consists of a single line containing a, b, and c."
}{
  "Example": "Sample Input \n5\nBlah\nIggity (piggity) jiggity\n/*/uu(((laksd[]{}{{()}}))^^$)\nEmoticons are fun =o)\nPr(x < 3) + Pr(x >= 3) = 1.\n\nSample Output\nTRUE\nTRUE\nTRUE\nFALSE\nFALSE\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Finally, the monkeys have made a breakthrough. During a routine trip to the\nsummit of the Enchanted Tree to gather sustenance (in the form of bananas) for\nthe Head-Monkey, a \"Tiny\" helper-monkey found a sheet of paper, left behind by\nsome cows, discussing their plan of attack against the monkeys. Now Tiny was a\nclever little monkey and knew to deliver this information to the Head-Monkey\nin order to receive a reward. Upon delivery, Tiny did receive his reward: An\nassignment to code a neural net in 5 minutes flat, or risk having his fur\nshaved off, in a frenzy of monkey excitement.\nAnyways\u2026 It turns out that the note was written in some kind of code\nthat, appropriately enough, had to be decoded. The Head-Monkey summoned the\nlegendary Big-White Monkey, to help her with the decryption algorithm. They\nused the classic decryption strategy of \"Put yourself in the encoder's shoes\".\nWorking with the knowledge that Bo Vine is a clever cow and a simple encryption\nwould be beneath him, they concluded that to decrypt the message, they have to\ndetermine whether the parentheses are correctly nested. As an example, in the\nsequence { a [ ] ( m, ) ] bb }, the parentheses are NOT properly\nnested. Knowing this information, the Big-White Monkey can calculate the exact\nday that the cows will attack, using algorithms known only to the MIT species.",
  "Output": "",
  "Title": "WC02 - Intercepted Cowmmunication",
  "Input": ""
}{
  "Example": "Sample Input \n3\n3\n1 1\n-1 2.5\n1 2\n0 0\n2\n6\n1\n0 0\n100 -100.124\n11.2\n124\n4\n1 1\n-1 2.5\n-1 1\n1 -1\n0 0\n2\n6\n\nSample Output\n0.707\n1\n1.414\n\nThe monkeys need help!\n\n0.707\n1 3 4\n1.414\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Cow-Bot has been successfully recovered! Bo Vine is very happy that he was\nable to retrieve his main spy, for now he can view all of the information that\nCow-Bot gathered through his reconnaissance. Bo learns that the monkeys are\nstill huddled in the middle of Scarberia, clumped tightly together, as would\nbe expected of any friendly group, tending to their wounds. He wishes to seize\nthis moment and attack while he has all the monkeys located near each other.\nTo this end, he has invented A field Proven to Engulf (APE) its victims. Bo's\nplans are to deploy Cow-Bot, armed with an APE. The APE, once activated, will\ncreate a circular field emanating from the centre of the group of monkeys,\nradiating outwards with its radius growing at a fixed rate. Now, the APE is so\nstrong, that no monkey can penetrate it and escape once it engulfs the monkey.\nHowever, if the growing APE comes into contact with an obstacle other than a\nmonkey, it malfunctions and is destroyed! Note that once it attains a size\nlarge enough to engulf the monkeys, it stops growing.",
  "Output": "The time it takes for the APE to hit the first obstacle.\nThe number of the obstacle that it hits (If more than one obstacle is hit\nsimultaneously, output all)\nThe radius of the APE at this time",
  "Title": "WC02 - Obstacles Galore",
  "Input": ""
}{
  "Example": "Sample Input \n3\n10 16 21 9\n10 24 19 6\n11 25 20 6\n\nSample Output\n1 2 3 4\n4 3 2 1\nFUNNY FARM\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "It seems as though the monkeys are really getting their act together. The\nHead-Monkey, with the help of the Big-White Monkey, managed to commandeer a\nFlowers By Irene truck, gaining access to the finest spy equipment the NSA can\ndevelop. Armed with these tools, the Head-Monkey's loyal minion, Tiny, snuck\ninto Bo Vine's complex and overheard his plan to use the dreaded APE on the\nmonkeys. The Head-Monkey, upon hearing these shocking developments, was\ncompelled to enlist the services of her trusty friends, the apes, bison,\nparrots and three-eyed fish, of Old MacDonald's Farm, of course. You see, Old\nMacDonald and the Head-Monkey go back many years, but that's a story for\nanother day. There seems to be a problem, however. The Head-Monkey has counted\nthe total number of heads, feet, tails and eyes that there are, but she can't\nkeep the collection of animals still for long enough to count exactly how many\nof each type there are! The Head-Monkey knows the following:\nEach animal has one head!\nAn ape has two feet, two eyes, and no tail.\nA bison has four feet, two eyes, and one tail.\nA parrot has two feet, one eye (it's a pirate's bird, and it has an eye\npatch) and a tail.\nA three-eyed fish has zero feet, three eyes (\u2026) and one tail.",
  "Output": "",
  "Title": "WC02 - Old Macdonald's Farm",
  "Input": ""
}{
  "Example": "Sample Input \n12\n2 5 4 3 11 1 2 7 2 3 41 1\n3\n2 11 1000\nSample Output\n3 3 0",
  "Memory Limit": "16M",
  "Time Limit": "0.50s",
  "Description": "The battle is drawing to an end.  Bo Vine has gathered his warriors in front\nof The Sacred Barn, for some words of inspiration before the final battle.  The\nN, 1 \u2264 N \u2264 10000, cows line up in a single line, face Bo, and listen\nattentively.  \"My loyal servants, we are gathered here to prepare for an epic\nbattle. Today, we go forth and win back SCARBERIA, the most coveted of all\nlands. Once in our control, we shall live as the lions, the true kings of our\nland. I have here an APE. (Panic and chaos\u2026) HEY! Get back here! It is\nnot a real ape, just our weapon, with which we shall destroy the monkeys, and\nreclaim Scarberia for ourselves.\"\nWhile Bo is continuing with this nonsensical rant, he notices that he can assign a value to each cow that is lined up before him, indicating the overall rating of the cow as a warrior. \nNote that he only assigns positive numbers to the cows. \nAs he continues to indoctrinate the cows, he wonders how many consecutive subsequences of cows \nhave a total rating equal to some number X, 1 \u2264 X \u2264 214783647, that he is thinking of. \nIf he can determine this, then he can assign these groups of cows to particular locations on the battlefield, just according to his brilliant plan!",
  "Output": "",
  "Title": "WC02 - Deploying Troops",
  "Input": ""
}{
  "Example": "Sample Input \n2\n1 3 2 3\n1 5 2 5\n\nSample Output\n1/2\n1/3\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The Head-Monkey is a brilliant tactician, and what's more, she is brilliant\nat having her troops prepared for battle. This time the battle is for all the\nproverbial marbles. The Head-Monkey addresses her legion and says: \"My fellow\nmonkeys, this battle is for all the marbles!\", to which Tiny responds, \"Umm,\nno offence, do we get marbles if we win, Sir?!\" After this issue is dealt with,\nthe Head-Monkey decides it's time for the monkeys to prepare themselves for\nbattle. The Head-Monkey is quite a pacifist, and firmly believes in brains\nbefore brawn. Confident of the fact that no matter how difficult the final\nbattle, her monkeys will end up victorious if their minds are sharp, she poses\nthe following problem: Given two fractions a/b and c/d find the fraction m/n\nbetween a/b and c/d (i.e. a/b < m/n < c/d) that has the smallest\ndenominator (i.e. n is minimum). If there is more than one such fraction,\noutput the smallest one. The Head-Monkey has guaranteed the following\nconstraints:\na < b; c < d; 0 < b,d < 1000; a/b < c/d\na and b will have no common factors\nc and d will have no common factors\nBONUS: For the truly nerdy monkeys, the Head-Monkey has agreed to give\na bonus (i.e., this problem will count as 1.5 problems solved) if the \nproblem is solved for larger constraints: namely, a, b, c and d up to\n2\u00d7109.",
  "Output": "",
  "Title": "WC02 - A Nerd's Preparation",
  "Input": ""
}{
  "Example": "Sample Input \n1\n5\n0 1 1 0 0\n1 0 0 0 1\n0 1 0 1 1\n1 1 1 0 1\n1 0 0 0 0\nSample Output\n5",
  "Explanation": "There are 5 monkeys at the meeting. The paths taken are:\n0\u20131\u20134\n0\u20132\u20134\n0\u20132\u20131\u20134\n0\u20132\u20133\u20134\n0\u20132\u20133\u20131\u20134\nThere cannot be any more monkeys at the meeting because the paths they travelled\nwouldn't be distinct or would visit a town more than once during their trip.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "We all know of the centuries-long battle between the monkeys and the cows. In\nan attempt to defeat the cows once and for all, the monkeys are holding a\nmeeting to discuss battle strategy. The land in which the monkeys live consists\nof N (3 \u2264 N \u2264 15) towns, numbered from 0 to\nN-1. Some towns are\nconnected by one-way roads. It is known that all the monkeys live in town 0 and\nthat the meeting will be held in town N-1.\nIt is the day of the meeting, and all the monkeys are mingling with each\nother. To their amazement, they discover that each of the monkeys traveled from\ntown to 0 to town N-1 along a path that didn't visit any town more\nthan once. They also discover that each monkey traveled a path distinct from all\nother monkeys. Finally, they come to realize that there could not be any more\nmonkeys at the meeting, otherwise one of the earlier conditions would have been\nviolated. How many monkeys are at the meeting?",
  "Output": "A single integer that is the number of monkeys at the meeting. This number should be outputted modulo 13371337.",
  "Title": "Strategy Meeting",
  "Input": "The first line of the input file contains a single integer T,\nbetween 1 and 10, inclusive, indicating the number of testcases to follow.\nEach testcase begins with a single line containing the integer N.\nThe next N lines each contain N space-separated integers,\neither 0 or 1, giving the one-way connections between towns in the land (0\nmeans no connection exists, 1 means a connection does exist)."
}{
  "Example": "Sample Input \n3\n5 4 3\n5 2 3\n55 48 9\nSample Output\nNO\nYES\nYES",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The Head Monkey has decided to give the monkeys some recreation time since\nthey've been working so hard lately. She introduces them to a two-player game\ncalled the Drain Game. The game is played on an N\u00d7N\n(5 \u2264 N \u2264 1001) grid of unit squares, with N an odd\ninteger. The square at the center\nof the grid (this is well defined, as N is odd) is designated the\ndrain. A single marker is placed on the grid at (row,column) =\n(R,C), where R, C (0 \u2264\nR, C \u2264 N-1) are 0-based\nindices.\nPlayers alternate turns. At each turn, a player can move the marker any\nnumber of squares horizontally, vertically, or diagonally under the constraint\nthat the Manhattan distance between the new location and the drain is strictly\nsmaller than the Manhattan distance between the current location and the drain.\nIn other words, you must move the marker \"towards\" the drain. Recall that the\nManhattan distance between the pairs (x,y) and\n(s,t) is simply\n|x-s|+|y-t|. The player to move the\nmarker into the drain wins.\nYou are playing against the Head Monkey. It's your turn, and the marker is\ncurrently located at (R,C). Can you win?",
  "Output": "A single line containing the word \"YES\" (if you can win) or \"NO\"\n(otherwise).",
  "Title": "Drain Game",
  "Input": "The first line of the input file contains a single integer T\n(1 \u2264 T \u2264 50), indicating the number of testcases to follow.\nEach testcase is a single line listing the three integers N,\nR, and C."
}{
  "Example": "Sample Input \n2\n3 3 1\n00\n1\n100\n3 2 4\n00\n101\n110\nSample Output\n2\n2",
  "Explanation": "Case 1: You can create the first two bitstrings in the list.\nCase 2: Make the last two bitstrings this time!",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A cow has just issued you a challenge! You are given a list of N\n(1 \u2264 N \u2264 100) possibly empty bitstrings (i.e., strings\nconsisting of only 0s and 1s), whose lengths do not exceed 50. You are also\ngiven n0 zeroes (0 \u2264 n0\n\u2264 300) and n1 ones (0 \u2264 n1\n\u2264 300) at your disposal. The\ncow wants to know the maximum number of bitstrings in the list that you can\ncreate using those 0s and 1s. Of course, once you use a 0 or 1, you cannot use\nit again.",
  "Output": "A single integer that is the maximum number of bitstrings you can create.",
  "Title": "BitStrings",
  "Input": "The first line of the input file contains a single integer T\n(1 \u2264 T \u2264 10), indicating the number of testcases to follow.\nEach testcase begins with a single line listing the integers N,\nn0, and n1 as described above. The\nnext N lines list the bitstrings in your list. The bitstrings don't\nappear in any particular order, and may contain duplicates."
}{
  "Example": "Sample Input \nRED\nBLUE\n\nSample Output\nWHITE\n",
  "Input Format": "\nThere will be two lines of input given to your program. Each line will contain one of Woburn's colours in all uppercase letters.\nEach of the colours will be one of \"RED\", \"BLUE\", or \"WHITE\" (without quotation marks), and the two colours given are guaranteed to be distinct.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Welcome to the first Woburn Challenge in over a decade! We hope you find these contests fun and challenging.\nLet's start by getting to know Woburn a little more. Woburn's school cheer is the legendary Wildcat Song, and it starts like this:\nCHEER! CHEER! FOR WOBURN...\nCHEER WITH ALL YOUR MIGHT.\nCHEER FOR OUR COLOURS,\nRED AND BLUE AND WHITE.\n\n\nA true Woburnite obviously knows Woburn's colours by heart.\nDo you think you have what it takes to identify them?\n\nGiven any two of the three Woburn colours in no particular order, your task is to name the third one.",
  "Output Format": "\nOutput a single line containing the Woburn colour that was not mentioned in the input. Your output must be in all uppercase.\n",
  "Title": "WC15 #1 - Do You Know Your Woburn Colours?"
}{
  "Example": "Sample Input \n21\n5\n\nSample Output 2\n4 group(s) of 4\n1 group(s) of 5\n",
  "Explanation 1": "\nThere are 30 recruits and three senior members. We can just do three nice groups of 10 recruits each.\n",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line of input will contain a single integer N representing the number of recruits to be split up.\nThe second line of input will contain a single integer M representing the number of groups that must be made.\n",
  "Time Limit": "2.00s",
  "Description": "\nNow that you know a little more about Woburn, let's learn a bit more about the amazing computer science enrichment opportunity that it holds. You might not know that every couple of years, Woburn's very own Programming Enrichment Group recruits elementary and middle school students who aspire to be talented little computer scientists. Indeed, training programmers from such a young age has been a key principle behind the club's success.\n\n\nSince the number of recruits is usually very high, the PEG leader(s) will often have trouble handling them alone and all at once. Thus, an age-old solution has been devised \u2013 splitting them up into groups, each of which will be taught by a senior member of the club! However, this is a more challenging task than it seems, since senior members tend to complain amongst themselves about how unfair it is that some of them have to deal with teaching significantly more recruits than others.\n\n\nLet's say that there are N recruits and M senior members within the club (1 \u2264 M \u2264 N \u2264 100). We would like to \"evenly\" divide the N recruits up into M groups such that the numbers of recruits the senior members have to handle are roughly equal to each other. More precisely, we would like to split up the recruits into M groups such that the difference between the size of the largest group and the size of the smallest group is as small as possible. Only this way can we prevent certain senior members from complaining that their duty is too hard and unfair compared to other senior members.\n\nPlease help PEG divide the recruits into \"fair\" groups.",
  "Output Format": "\nOutput one line for each group size in the format \"X group(s) of Y\" where Y is the size of the group and X is the number of groups with this size in your grouping scheme.\nYou may output the lines in any order. Consult the sample outputs if you need further clarification of the format.\n",
  "Explanation 2": "\nThere are 21 recruits and five senior members. The fairest option would be to create four groups of 4 and one group of 5 (where the difference between the smallest and largest group is 5 \u2212 4 = 1).\nThis is more \"fair\" than, for instance, creating four groups of 5 and one group of 1 (where the difference between the largest and smallest group sizes is 5 \u2212 1 = 4).\n",
  "Title": "WC15 #1 - Grouping Recruits"
}{
  "Example": "Sample Input \n4\n10\n10\n20\n25\n\nSample Output\n120\n",
  "Input Format": "\nLine 1 of input will contain a single integer N, representing the number of songs in the band's repertoire.\nN lines will follow, with the i-th of these lines (for i = 1..N) containing a single integer Ti, representing the duration of the i-th song in minutes.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The renowned Woburn Jazz Band is putting on a concert!\nTheir current repertoire consists of N (2 \u2264 N \u2264 100) different songs that are numbered with distinct integers from 1 to N. The i-th of these songs (for i = 1..N) has a duration of Ti (1 \u2264 Ti \u2264 100) minutes.\nSince the band is so spectacular, they are always receiving requests to fill more and more time. Unfortunately, rehearsal times are tight and practicing any more than these N pieces is simply not feasible. Through Mr. Farrow's decades of experience as conductor of the band, he has observed that they can always get away with repeating at most two of their N songs to extend the concert (surely the audience won't notice). With that in mind, the band has decided to pick two songs to play twice, while each of the N \u2212 2 remaining songs will be played exactly once. Furthermore, there will always be a 10-minute intermission in the middle of the concert.\nWith all this information, Mr. Farrow needs to know ahead of time the length of the entire concert so that he can report it to the principal for scheduling purposes. Given the lengths of all the pieces in the Jazz Band's repertoire, please help Mr. Farrow determine the maximum amount of time (in minutes) that the concert could possibly last, including the intermission time and given that optimal choices will be made for which two songs are to be repeated.",
  "Output Format": "\nOutput a single integer representing the maximum possible length of the concert in minutes.\n",
  "Title": "WC15 #1 - Jazz Concert"
}{
  "Example": "Sample Input \n50 2000 20000 4000\n5\n30 300 20000 400\n40 500 30000 2000\n10 100 15000 800\n30 500 11000 1000\n20 400 20000 500\n\nSample Output\n24600\n",
  "Explanation": "\nThe team wants to achieve a minimum of 50 units of excitement, and has given the five attractions with excitement ratings of 30, 40, 10, 30, and 20 respectively. By choosing every attraction except for number 2, the team is actually able to achieve 90 units of excitement at a cost of 24600 dollars. The costs are calculated as follows:\n\nTransportation costs 2000 + 300 + 100 + 500 + 400 = 3300 dollars.\nThe most expensive hotel across all of the attractions being attended costs 20000 dollars.\nFood was original going to cost 4000 dollars, but 400 + 800 + 1000 + 500 = 2700 dollars were saved by eating at the venues of the attractions.\nThus, the total cost of the trip is 3300 + 20000 + (4000 \u2212 2700) = 24600 dollars. In fact, this is the best possible answer.",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 will contain four space-separated integers in the following order: Emin, Tbase, Hbase, and Fbase.\nLine 2 will contain a single integer N.\nThere will be N lines to follow. The i-th of these lines (for i = 1..N) will contain four space-separated integers: Ei, Ti, Hi, and Fi.\n",
  "Time Limit": "2.00s",
  "Description": "The PEG trip at the end of the school year is a long-lasting tradition of the club. The leaders usually decide on three teams (junior, intermediate, and senior) based on whom they find to be most attentive and hard-working throughout the years. Then, the deserving teams are taken to some place in the USA (a different city every year!) where they will compete, and most probably dominate, in the American Computer Science League (ACSL) All-Star competition. The trip will then consist of several action-packed days of competing, dining, frolicking, and touring the local attractions. While most PEG students who are selected to go are simple enlightened by the fantastic opportunity, few of them are aware of the rigorous planning and budgeting that takes place behind-the-scenes.\n\nBudgeting is a complex task. We must account for transportation, hotel, food, and most importantly \u2013 attractions. Choices must be made in each of these categories with consideration for how much money is going to be spent, and how exciting the trip is expected to be. To make each trip memorable enough for the PEG history books, the PEG leaders would like this year's trip to have at least an excitement level of Emin (1 \u2264 Emin \u2264 109) units. Funding has always been a complicated matter due to Woburn's Student Activity Council (SAC). The SAC is willing to help the club satisfy its minimal excitement level, provided that it is done in the cheapest way possible. The cost and excitement of the trip will be calculated with the following rules:\n\nThe base costs of transportation, hotel, and food in dollars are respectively Tbase, Hbase, and Fbase (1 \u2264 Tbase, Hbase, Fbase \u2264 107).\nThere are N (1 \u2264 N \u2264 20) attractions numbered from 1 to N. The team can attend each attraction at most once.\n    \nEach attraction has an Ei, Ti, Hi, and Fi value associated with it (0 \u2264 Ei, Ti, Hi, Fi \u2264 107).\nIf attended, the i-th attraction (for i = 1..N) will contribute Ei units of excitement to the overall trip.\nBy going to a particular attraction, money may be saved or extra money may be spent. For instance, the team might have to pay extra transportation costs to reach the event. The team might also have to pick a more expensive hotel in order to be close enough to attend it. Conversely, many attractions provide free food, so the team might actually save money on food.\nBy choosing attraction i, the team must be prepared to also pay an additional Ti dollars for transportation on top of Tbase. That is, the overall transportation cost is the sum of the base transportation cost and the transportation costs incurred across all of the attractions they decide to visit.\nEach attraction has an associated hotel nearby that costs Hi dollars to stay at. Since the team will not be attending more than one hotel, we have to prepare for the worst and assume that the overall hotel cost for the entire trip will be the maximum of Hbase and Hi  across all of the attractions that the team eventually decides to attend.\nBy choosing attraction i, the team will actually save Fi dollars on food because it will be provided at the venue. That is, the overall food cost will be the base food cost Fbase subtract the Fi for each attraction i that was attended. The base food cost cannot go below zero \u2013 after Fbase has been reduced to zero, attending additional attractions will have no effect on the nonexistent overall food cost.\n\n\nEach attraction has an Ei, Ti, Hi, and Fi value associated with it (0 \u2264 Ei, Ti, Hi, Fi \u2264 107).\nIf attended, the i-th attraction (for i = 1..N) will contribute Ei units of excitement to the overall trip.\nBy going to a particular attraction, money may be saved or extra money may be spent. For instance, the team might have to pay extra transportation costs to reach the event. The team might also have to pick a more expensive hotel in order to be close enough to attend it. Conversely, many attractions provide free food, so the team might actually save money on food.\nBy choosing attraction i, the team must be prepared to also pay an additional Ti dollars for transportation on top of Tbase. That is, the overall transportation cost is the sum of the base transportation cost and the transportation costs incurred across all of the attractions they decide to visit.\nEach attraction has an associated hotel nearby that costs Hi dollars to stay at. Since the team will not be attending more than one hotel, we have to prepare for the worst and assume that the overall hotel cost for the entire trip will be the maximum of Hbase and Hi  across all of the attractions that the team eventually decides to attend.\nBy choosing attraction i, the team will actually save Fi dollars on food because it will be provided at the venue. That is, the overall food cost will be the base food cost Fbase subtract the Fi for each attraction i that was attended. The base food cost cannot go below zero \u2013 after Fbase has been reduced to zero, attending additional attractions will have no effect on the nonexistent overall food cost.\nThe total cost of the trip is equal to the sum of the overall costs of transportation, hotel, and food respectively.\nThe excitement of the trip is equal to the sum of Ei across all of the attractions that the team decides to attend.\nGiven this, please help the PEG leaders determine the minimum possible total cost that will produce at least Emin units of excitement for the overall trip. It is guaranteed that this is possible.",
  "Output Format": "\nOutput a single integer \u2013 the minimum cost (in dollars) required to achieve at least Emin units of excitement on the trip.\n",
  "Title": "WC15 #1 - Trip Budgeting"
}{
  "Example": "Sample Input \n4\n40 40\n80 60\n120 30\n130 80\n\nSample Output\n80\n",
  "Explanation": "\nThere are four assignments, respectively due 40, 80, 120, and 130 minutes from now and respectively requiring 40, 60, 30, and 80 minutes to complete. One way to optimally tackle the assignments is as follows:\n\nImmediate start working on assignment 1. You'll be done just in the nick of time and incur no penalty marks.\nRight after you hand in assignment 1 (at 40 minutes in), start working on assignment 2. Unfortunately, you'll only have 40 minutes to work on the assignment, and so you'll have to incur 60 \u2212 40 = 20 penalty marks.\nRight after you hand in assignment 2 (at 80 minutes in), start working on assignment 4. You'll be able to get 50 minutes of work on it before the due date (at 130 minutes in). You'll have to incur 80 \u2212 50 = 30 penalty marks.\nUnfortunately, there was no time at all to tackle assignment 3, so you'll have to accept a zero and incur the full 30 penalty marks.\n\nIn total, there are 20 + 30 + 30 = 80 penalty marks incurred. There may be other ways to tackle the assignments, but it turns out that they will all incur 80 penalty marks or more.",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line of input will contain a single integer N, representing the number of assignments to follow.\nN lines will follow, with the i-th of these lines containing two space-separated integers Mi and Ti, respectively representing the number of minutes from now at which assignment i is due and the number of minutes it takes to complete assignment i.\n",
  "Time Limit": "2.00s",
  "Description": "\nWelcome to the first Woburn Challenge in over a decade! We hope you find these contests fun and challenging.\n\n\nLet's start by getting to know Woburn a little more. The motto of Woburn Collegiate Institute is Studium Eruditionis Crescat, or Let the Zeal for Learning Flourish. Clearly, Woburn values academic excellency, so it's no surprise that students often receive a hefty workload. There are also many extracurricular opportunities available to students, including Woburn Music, drama, and of course, the Programming Enrichment Group. Members of PEG meet Wednesdays and Fridays after school to study advanced computer science concepts, and are often assigned a fair amount of programming homework. Not only has PEG made students superb at programming, they've made students love programming. In fact, PEG students are often so hooked onto their programming homework that they forget about actual homework and become swamped with upcoming deadlines!\n\n\nBeing the natural problem-solvers they are, PEG students have realized that programming is once again the solution. They've decided to write a program to help them handle the workload of Woburn's courses, and they've asked you for help! Specifically, there are N (1 \u2264 N \u2264 100) homework assignments that they would like to feed to your program. Each assignment is labeled with a unique integer from 1 to N, and will be given to your program in order. Each assignment i is due Mi (1 \u2264 Mi \u2264 106) minutes from now. Any given assignment can only be worked on up until the time at which it's due. The assignments will be given to your program in strictly increasing order of due date (in other words, M1 < M2 < \u2026 < MN).\n\n\nFurthermore, each assignment i takes Ti (1 \u2264 Ti \u2264 106) minutes to fully complete. The amount of marks you get on an assignment is obviously proportional to the amount of time you spend working on it. Since spending all Ti minutes is guaranteed to be your best work, if you spend Si minutes working on assignment i, where Si \u2264 Ti (spending extra time on an assignment does no good), you'll have to incur Ti \u2212 Si penalty marks.You can only work on one homework assignment at a time, but you can switch from one assignment to another at any point in time. Time is tight, so you might not be able to fully complete every assignment. The goal of the program is to help the user allocate their precious time amongst the assignments. Your program must answer the question: what's the minimum total number of penalty marks that can be incurred across all of the assignments?\n",
  "Output Format": "\nOutput a single integer representing the minimum total penalty marks that can be incurred across all of the assignments, if your program schedules the assignments optimally.\n",
  "Title": "WC15 #1 - Woburn Workload"
}{
  "Example": "Sample Input \n6\n7\n10\n10\n10\n5\n10\n10\n3\n2\n5\n\nSample Output\n9\n",
  "Explanation": "There are 6 W's, 7 I's, 5 A's, and 10 of each remaining letter card. We fill in 1/3 of our @ wildcards as I and the remaining 2/3 as A. We fill both of our # wildcards as W. Finally, we fill in one * wildcard as W, one as I, and two as A. This will be enough to create 9 signs with 6 cards to spare (namely, one each of L, D, C, T, S, and a * wildcard).",
  "Memory Limit": "16M",
  "Input Format": "\nThe input will consist of 11 lines, each containing a single nonnegative integer less than or equal to 108.\nThe first 8 integers will represent the number of cards for each letter of \"WILDCATS\", in the order they occur in the word.\nThe last 3 integers will represent the number of @, #, and * wildcards, in that order.\n",
  "Time Limit": "1.00s",
  "Description": "The mascot of Woburn is the Wildcat. The Woburn Wildcats are soon going to be playing in the finals of the Scarborough Halo 2 Association (SHA-2) and the rest of the school would like to make signs to cheer them on. The Student Activity Council (SAC) has purchased heaps of giant cards for the sole purpose of creating signs that spell out the word \"WILDCATS\". Specifically, we can construct one such sign by combining 8 cards with the letters W, I, L, D, C, A, T, and S on them, respectively.\nThere are two types of cards \u2013 letter cards and wildcards. Printed on each letter card is what you would expect\u2026 a single letter that is part of the word \"WILDCATS\". On the other hand, there are three types of wildcards \u2013 the @ card, the # card, and the * card. A wildcard marked with a @ may be filled in with any vowel of your choice (in this case, either an A or an I). Similar, each wildcard marked with a # may be filled in with any consonant (in this case, one of W, L, D, C, T, or S). Finally, each wildcard marked with a * may be filled in with any letter at all!\nAfter counting inventory, the SAC was able to come up with 11 integers, the number of cards they have marked with W, I, L, D, C, A, T, S, @, #, and *, in that order. There are at most 108 (100,000,000) of each type of card. The Woburn SAC would like you to write a program to help them maximize the number of \"WILDCATS\" signs that can be made, given that you choose to fill in the wildcards optimally.\n\nIn test cases worth 50% of the points, there will be at most 1000 of each type of card.\nIn a subset of those test cases worth 10% of the points, there will be no wildcards (the last 3 integers of the input will each be 0).\n",
  "Output Format": "\nOutput a single integer \u2013 the maximum number of \"WILDCATS\" signs that can be constructed if the wildcards are filled in optimally.\n",
  "Title": "WC15 #1 - Wildcat Wildcards"
}{
  "Example": "Sample Input \n4 5 5\n2\n1\n5\n7\n1 2 1\n3 2 1\n3 4 1\n4 1 1\n4 3 1\n\nSample Output\n13\n",
  "Explanation": "There are 4 towns and 5 roads between them. At most 5 people may attend the second contest site. Each road happens to have a distance of 1. An optimal travel strategy is as follows.\nWe let competitors from towns 1 and 2 attend the contest sites at their respective towns (incurring an additional 0 kilometres to our total distance).\nWe let all 7 of our competitors from town 4 travel to the main contest site (incurring a total of 7 kilometres).\nWe let 4/5 of the competitors from town 3 travel to the secondary contest site (incurring a total of 4 kilometres).\nWe let the remaining competitor from town 3 must travel to the main site through town 4 (incurring an additional 2 kilometres to our total distance).\nThe total distance traveled across all of the competitors is 0 + 7 + 4 + 2 = 13 kilometres.",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 of input will contain three space-separated integers, the values of N, M, and K, respectively representing the number of towns, roads, and the maximum number of Woburnites that may attend the second site.\nThere will be N lines to follow. The i-th of these lines (for i = 1..N) will contain a single integer Ci, representing the number of Woburnites living in town i.\nThere will be M lines to follow. The i-th of these lines (for i = 1..M) will contain three space-separated integers,\nthe values of Ai, Bi, and Di representing the i-th one-way road.\n",
  "Time Limit": "2.00s",
  "Description": "It's no surprise that the Programming Enrichment Group at Woburn participates in a wide number of programming contests. However, not all contests are held at the same place (worry not \u2013 the Woburn Challenge finals will be held at a single location). In fact if too many people register for a contest, the contest organizers may even demand that the same contest be held in two entirely different towns! This will make it a lot harder for our young Woburnites to compete in the contest, but certainly won't stop them from trying.\nThere are N (2 \u2264 N \u2264 105) towns uniquely numbered with integers from 1 to N, and M (1 \u2264 M \u2264 105) one-way roads running amongst them. Specifically, the i-th road (for i = 1..M) allows one to travel from a town Ai to a different town Bi (1 \u2264 Ai, Bi \u2264 N; A \u2260 B) and has a distance of Di (1 \u2264 Di \u2264 100) kilometres. No two roads run between the same pair of towns in the same direction. A very large programming contest is soon to be held across two locations, with the main contest site located in town 1 and the secondary contest site located in town 2. A non-zero number of Woburnites will be competing in this contest, with Ci (0 \u2264 Ci \u2264 106) of them living in town i (for each i = 1..N). Each competitor must select one of the two contest sites and travel to it using a sequence of roads. This sequence is possibly empty, if they're fortunate enough to live in the same town as their chosen contest site.\nThere is a catch! Resources are limited at the second contest site, so the contest organizers have insisted that no more than K (0 \u2264 K \u2264 109) of the competitors attend the secondary site (located in town 2). Given that the Woburnites collaborate to come up with the best travel strategy, you must help them determine the minimum total combined distance that they must travel in order to all attend the contest, such that no more than K of them travel to the secondary site.\n\nIn test cases worth 60% of the marks, N \u2264 100.\nIn a subset of those cases worth 30% of the marks, Ci \u2264 1 (for i = 1..N).\n",
  "Output Format": "\nThe output should consist of a single integer. If it is possible for the Woburnites to travel to all contest sites with no more than K of them attending the secondary site, then output the minimum total combined distance that they must travel to do so. Output -1 if it is impossible for all of them to reach a contest site while satisfying the condition. Please note that the answer may not necessarily fit in a 32-bit integer.\n",
  "Title": "WC15 #1 - Contest Sites"
}{
  "Example": "Sample Input \n5 2\n20 1 50\n20 1 30\n20 2 5\n40 2 30\n\nSample Output\n90\n",
  "Explanation": "\nThere are 5 cisterns and we're allowed to upgrade 2 of the pipes. The network of cisterns and pipes is depicted in the following diagrams. The numbers on the pipes represent the maximum rates of chocolate milk flow, and the bottom numbers on the cisterns represent the rate at which chocolate milk is being pumped into them. The left diagram depicts the original configuration, and the right diagram depicts the system after pipes have been upgraded.\n\n\nBy upgrading the pipes flowing down from cisterns 2 and 4, cistern 1 in the cafeteria is able to receive 20 litres/second from cistern 3, 20 litres/second from cistern 2 directly, and 50 litres/second from cistern 2 indirectly (20 of which came from cistern 4 and 30 of which came from cistern 5). In total, this allows cistern 1 to receive 20 + 20 + 50 = 90 litres/second.",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 of input will contain two space-separated integers N and K, respectively representing the number of cisterns and the number of upgrades allowed.\nLine 2 to N of input will each contain information about a cistern. Specifically, line i of input (for i = 2..N) will contain three space-separated integers Pi, Ci, and Fi, respectively representing the rate at which chocolate milk is being pumped into cistern i (in litres per second), the cistern that the pipe from cistern i flows into, and the maximum rate at which chocolate milk (in litres per second) can flow through this pipe.\n",
  "Time Limit": "2.00s",
  "Description": "After the finals of the 2015-16 Woburn Challenge, young programmers from all over the region will be invited to Woburn for a top-secret after-party (not really though)! The school has generously agreed to nourish them with copious amounts of chocolate milk.\nTo this end, the Student Activity Council (SAC) has acquired N (2 \u2264 N \u2264 200) cisterns with infinite capacities, and positioned them at distinct heights off the ground. The cisterns are uniquely numbered from 1 to N in order of their heights from lowest to highest. For each cistern i (such that 2 \u2264 i \u2264 N), there will be Pi (0 \u2264 Pi \u2264 107) litres of chocolate milk pumped into it per second, directly from Scarborough's local chocolate milk farm. Additionally, there will be a pipe leading down from each cistern i to a different cistern Ci. According to the laws of gravity, chocolate milk can only flow from a higher cistern to a lower cistern, so it's guaranteed that i > Ci. The pipe coming out of i will be wide enough to allow at most Fi (1 \u2264 Fi \u2264 107) litres of chocolate milk to flow through it per second. Chocolate milk flows through the system as one might expect \u2013 for every cistern, the amount of chocolate milk flowing out of it cannot exceed the total amount flowing into it (both directly from the farm and down from the other cisterns).\nHowever, PEG has received enough funding this year to be able to upgrade K (0 \u2264 K < N) of the N \u2212 1 pipes. When a pipe is upgraded, it permanently becomes able to support an infinite amount of chocolate milk flowing through it.\nCistern 1 is located in Woburn's cafeteria, and the students will have permission to drink from it at will! Coding is a strenuous sport, so we know that everyone will be extremely thirsty. So the more chocolate milk flows into that cistern, the more they will collectively drink. And the more chocolate milk they consume, the more their coding skills will improve for next year's Challenge. Given the configuration of cisterns and pipes, and provided that we choose the optimal set of K pipes to upgrade, what's the maximum rate of incoming chocolate milk flow (in litres per second) that cistern 1 can attain?\n\nIn test cases worth 25% of the marks, K \u2264 2.\nIn a subset of those test cases worth 10% of the marks, K = 0.\n",
  "Output Format": "\nOutput a single integer, the maximum rate of incoming chocolate milk flow that cistern 1 can attain, in litres per second.\n",
  "Title": "WC15 #1 - Chocolate Milk"
}{
  "Example": "Sample Input \n1\n\nSample Output 1\nA long time ago in a galaxy far away...\n\nSample Input 2\n4\n\nSample Output 2\nA long time ago in a galaxy far, far, far, far away...\n",
  "Input Format": "The input consists of a single integer N.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\u201cIt is a period of civil war. Rebel programs, striking from a hidden computer, have won their first victory against the evil System Tests.\u201d\nYou might be aware that the events of the Star Wars saga took place a long time ago, in a galaxy that was rather far away. But just how far away was it? We can try to describe it by repeating the word \"far\" a certain number of times in the following sentence format:\nA long time ago in a galaxy far, far away...\nIn the above example, the word \"far\" is repeated twice. However, we'd instead like to repeat it exactly N (1 \u2264 N \u2264 5) times without changing the rest of the sentence at all. There should be a comma right after each occurrence except for the last one.\nGiven N, can you produce the correct sentence?",
  "Output Format": "Output on a single line the appropriate sentence with \"far\" repeated N times. It must match the correct answer exactly!",
  "Title": "WC15 #2 - A New Hope"
}{
  "Example": "Sample Input \n6 8\n4\n9\n8\n12\n7\n1\n\nSample Output\n20\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nThe next N lines each consist of a single integer Wi, for i = 1..N.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\u201cDo. Or do not. There is no try/catch.\u201d\nAs part of his intensive Jedi training at the hands of Master Yoda in the Dagobah system, Luke has been given the task of moving some rocks. That may sound simple, but he'll have to move them with his mind, using the power of the Force! Also, some of the rocks are rather heavy.\nYoda has laid out N (1 \u2264 N \u2264 100) rocks on the ground, with the i-th rock having a mass of Wi (1 \u2264 Wi \u2264 100) pounds. He's instructed Luke to move all of them to another location, one at a time. Unfortunately, Luke's control of the Force is only strong enough to allow him to lift a rock if its mass is no larger than M (1 \u2264 M \u2264 100) pounds.\nAssuming that Luke tries his best and moves as many of the rocks as he can, what's the total mass of the rocks that he'll lift?",
  "Output Format": "\nOutput a single integer \u2013 the total mass of rocks that Luke can lift with the force.\n",
  "Sample Explanation": "\nThe 2nd and 4th rocks are too heavy for Luke, but he can lift the remaining 4 rocks, which have a total mass of 4 + 8 + 7 + 1 = 20 pounds.\n",
  "Title": "WC15 #2 - The Empire Strikes Back"
}{
  "Example": "Sample Input \n4 6 5\n1 10 10\n1 11 9\n2 16 10\n3 11 10\n1 1\n12 10\n22 10\n7 12\n10 6\n13 15\n\nSample Output\n3\n",
  "Explanation": "\nThere are four stormtroopers with the first two carrying an E-11, the third carrying an E-11b, and the fourth carrying an E-11s.\nThe 2nd Ewok is in danger due to being only 2 units away from the 1st stormtrooper (type 1) and 4 units away from the 3rd stormtrooper (type 2).\nThe 4th and 5th Ewoks are also in danger, as they are within range of the 1st stormtrooper (type 1) and 4th stormtrooper (type 3).\nThe remaining three Ewoks are safe.\n",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line of input consists of three space-separated integers S, E, and R.\nThe next S lines each consist of three space-separated integers Wi, Xsi and Ysi, for i = 1..S.\nThe next E lines each consist of two space-separated integers Xei and Yei, for i = 1..E.\nAll pairs of coordinates in the input are distinct \u2014 i.e. no two individuals (Ewoks or stormtroopers) are at the same location.\n",
  "Time Limit": "2.00s",
  "Description": "\u201cCoding? What do you mean, you're coding? Coding what, Artoo? No, wait! Artoo! This is no time for heroics!\u201d\nThings are coming to a head on the forest moon of Endor. E (1 \u2264 E \u2264 100) friendly Ewoks have been sent out to scout the area, in preparation for an attack on the shield generator protecting the Empire's devastating weapon \u2013 the Death Star. From a bird's eye view, the forest can be modelled as a Cartesian plane, with the i-th Ewok located at integer coordinates (Xei, Yei) (0 \u2264 Xei, Yei \u2264 1000).\nUnfortunately, the Empire seems to be onto the rebels' plan! S (1 \u2264 S \u2264 100) stormtroopers have similarly been dispatched into the woods to guard the perimeter, with the i-th one stationed at coordinates (Xsi, Ysi) (0 \u2264 Xsi, Ysi \u2264 1000). Each stormtrooper is also classified as one of four types, depending on the weaponry they carry. Namely, the i-th stormtrooper is of type Wi (1 \u2264 Wi \u2264 4). The BlasTech E-11 rifles may be the standard weapon of these imperial stormtroopers, but most don't know that there are variants of the E-series weapons which serve different purposes and possess different strengths for attacking an opponent. The variants are:\nThe E-11 blaster rifle \u2013 a powerful and compact weapon that is the most widely used in the galaxy.\nThe E-11b blaster rifle \u2013 an expert version of the standard E-11 with expensive cooling units.\nThe E-11s sniper blaster rifle \u2013 a modified blaster for long-range use by imperial scout troopers.\nThe E-15 \"Vindicator\" sniper blaster rifle \u2013 a heavy-power weapon with a short design, making it greatly feared throughout the galaxy.\nEach stormtrooper can hit targets that are located up to a distance of R (1 \u2264 R \u2264 10,000) units away with deadly accuracy. Ewoks are quick enough to handle any number of a single type of stormtrooper using their nifty spears and slingshots. However, any more than a single type of stormtrooper poses a risk to them, since varying types of blasters are much more difficult to handle. In other words, any given Ewok is in danger if there are two or more types of stormtroopers which are no more than R units away.\nAs a reminder, if the absolute difference between the x-coordinates of two points is x, and the absolute difference between their y-coordinates is y, then the (Euclidean) distance between them is \u221a(x2\u00a0+\u00a0y2).\nHow many of the E Ewoks are in danger?",
  "Output Format": "Output a single integer \u2013 the number of Ewoks that are in danger.",
  "Title": "WC15 #2 - Return of the Jedi"
}{
  "Example": "Sample Input \n5 6\n/.\\...\n./.\\.X\n\\.....\n/\\./X#\n\\/.#\\.\n\nSample Output\n12\n",
  "Explanation": "The following images depict the scenario in the sample input. Cells labeled with blue circles are considered deadly.\n\n \n",
  "Memory Limit": "128M",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nThe next N lines each consist of M characters Gi, 1..M, for i = 1..N.\n",
  "Time Limit": "2.00s",
  "Description": "\u201cMeesa gonna finish\u2026 what yousa started.\u201d\nAfter the destruction of the Death Star and death of Darth Sidious, victory for the rebel forces seemed apparent. However, that proved to be far from the truth, as the true puppeteer behind the Galactic Empire finally revealed himself \u2013 Sith lord Jar Jar Binks. His vengeance was swift, as he all but eradicated the rebels' resistance and the Jedi presence.\nFortunately, Han Solo was able to survive Jar Jar's wrath, and has a plan to destroy him and topple the Empire. Jar Jar has been tricked into entering an abandoned mirror factory, where he will hopefully bring about his own doom.\nViewed from above, the factory can be divided into a regular grid of cells, with N rows and M columns (1 \u2264 N, M \u2264 2000). The nature of the j-th cell in the i-th row is given by the character Gi,j, with the following possibilities:\n. \u2002 The cell is empty.\n# \u2002 The cell contains a non-reflective barrier.\n/ \u2002 The cell contains a diagonal mirror running from the top-right to the bottom-left, which reflects any incoming laser at a 90-degree angle (for example, a laser entering from the top would leave through the left).\n\\ \u2002 The cell contains a diagonal mirror running from the top-left to the bottom-right, which reflects any incoming laser at a 90-degree angle (for example, a laser entering from the left would leave through the bottom).\nX \u2002 The cell contains a set of mirrors which reflect any incoming laser back the way it came (for example, a laser entering from the top would leave back through the top).\nAs Jar Jar walks through the factory, Han will goad him into firing a blaster shot in some cardinal direction (directly up, down, left, or right) from some empty cell. He hopes that the laser will happen to reflect off some mirrors and end up re-entering that same cell, thus killing Jar Jar! That might sound like an unlikely plan to work\u2026 but never tell him the odds.\nThat being said, enquiring minds might like to know what kind of a chance it does have. An empty cell is considered to be \"deadly\" if, for at least one of the four cardinal directions, Jar Jar would shoot himself if he were to fire a shot from that cell in that direction. How many of the empty cells are deadly?\nNote: In test cases worth 80% of the points, N \u2264 50 and M \u2264 50.",
  "Output Format": "Output a single integer \u2013 the number of empty cells that are considered deadly.",
  "Title": "WC15 #2 - The Force Awakens (Junior)"
}{
  "Example": "Sample Input \n8\n0 4 1 0 0 1 3 0\n\nSample Output\n14123131\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nThe second line consists of N space-separated integers S1 to SN.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\n\u201cThere is no doubt. The mysterious coder was a Sith.\u201d\n\u201cAlways two there are, no more, no less. A master and a n00b.\u201d\n\u201cBut which was destroyed, the master or the n00b?\u201d\n\nThe exciting climax of the highly-anticipated 1999 Star Wars prequel features four distinct action sequences occurring simultaneously:\nJar Jar Binks leads the Gungan army in a diversionary battle against the Trade Federation's droid army on the plains of Naboo.\nQueen Amidala and her security force storm the palace in Theed in an attempt to locate and arrest Viceroy Nute Gunray.\nObi-Wan Kenobi and Qui-Gon Jinn have a lightsaber duel against the Sith lord Darth Maul.\nAnakin Skywalker pilots a Naboo starfighter into orbit amidst a massive dogfight, attempting to take out the Trade Federation's droid control ship.\nDuring this time, the film needs to cut back and forth between these settings. In particular, there are N (1 \u2264 N \u2264 10,000) scenes to fill, with each scene observing one of the 4 settings. Additionally, no two consecutive scenes may be assigned to the same setting.\nSome of the scenes have already been assigned to settings, while others haven't been. The status of the i-th scene is indicated by the value of Si (0 \u2264 Si \u2264 4). If Si = 0, then the scene is currently unassigned, and if Si > 0, then the scene must observe setting Si.\nYour job is to assign each of the unassigned scenes to one of the 4 settings, such that no two consecutive scenes are assigned to the same one. It's guaranteed that this will be possible. However, it may be possible in multiple ways, in which case you must choose the one that minimizes the \"numeric representation\" of the scenes. The numeric representation consists of concatenating the values of the N scenes' assigned settings, in order from 1 to N, and treating the result as an integer (with each digit in the range 1..4).",
  "Output Format": "Output on a single line the numeric representation of your finalized scenes.",
  "Title": "WC15 #2 - The Phantom Menace"
}{
  "Example": "Sample Input \n7\n5 3\n5 2\n2 4\n6 1\n1 4\n3 1\n6 6\n\nSample Output\n6\n6\n10\n13\n13\n15\n21\n",
  "Explanation": "The following diagram depicts the scenario in the sample input. Green represents the senate building, blue represents a normal intersection, and yellow represents potential locations at which Zam might be hiding.\n\n\n",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line of input consists of a single integer N.\nThe next N lines each consist of two space-separated integers Si and Ai, for i = 1..N.\n",
  "Time Limit": "3.00s",
  "Description": "\n\u201cYou know I don't like it when you do that.\u201d\n\u201cSorry, master. I forgot that you don't like coding.\u201d\n\u201cI don't mind coding, but what you're doing is suicide!\u201d\n\nUpon thwarting an attempt on Senator Amidala's life, Obi-Wan Kenobi and Anakin Skywalker must pursue the bounty hunter Zam Wesell through the bustling streets of Coruscant in order to apprehend and question her. Unfortunately, they've already lost her trail! Fortunately, they have some ideas of where she might be hiding.\nThe city of Coruscant is laid out in a regular grid of intersections. There are many parallel avenues running North-South, numbered from West to East starting from 1. Similarly, there are many parallel streets running East-West, numbered from North to South starting from 1. The position where street s and avenue a intersect can be denoted as (s, a).\nAll of the streets and avenues are one-way, and even in this emergency, the Jedi must respect the law. Every avenue may only be travelled along towards the South. However, the directions of the streets alternate \u2013 every odd-numbered street may only be travelled along towards the East, while every even-numbered street may only be travelled along towards the West. It takes 1 minute to travel from a certain intersection to an adjacent one (either to the South, East, or West, while obeying the traffic laws).\nThe Jedi are currently in the Senate building at intersection (1, 1). There are N (1 \u2264 N \u2264 200,000) potential locations at which Zam might be hiding, numbered from 1 to N in decreasing order of likelihood, with the i-th one being intersection (Si, Ai) (1 \u2264 Si, Ai \u2264 40,000). None of the N locations is (1, 1), and no two of them are at the same intersection.\nA decision must be made on how many of the locations to try. As such, for every i in the range 1..N, you must determine the minimum amount of time (in minutes) that it would take for the Jedi to theoretically visit all of the first i locations (in any order), starting from (1, 1).\n\nIn test cases worth 75% of the points, N \u2264 2000.\nIn a subset of those cases worth 30% of the points, N \u2264 100, Si \u2264 100, and Ai \u2264 100.\n",
  "Output Format": "\nThe output should consist of N lines, where the i-th line is a single integer representing the minimum amount of time (in minutes) that it would take for the Jedi to theoretically visit all of the first i locations (in any order), starting from (1, 1).\n",
  "Title": "WC15 #2 - Attack of the Clones"
}{
  "Example": "Sample Input \n6 7\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n6 1\n\nSample Output\n0.5\n",
  "Explanation": "There are 36 possible, equally-likely ordered pairs of starting chambers for Obi-Wan and Anakin. It so happens that for 18 of them, the probability of an eventual encounter is 100% (including the pairs (1, 1) and (2, 4)), while for the other 18, it's 0% (including the pairs (1, 6) and (5, 6)).",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nThe next M lines each consist of two space-separated integers Ai and Bi, for 1 = 1..M.\n",
  "Time Limit": "2.00s",
  "Description": "\n\u201cIf you're not with me, then you're my enemy!\u201d\n\u201cOnly a Sith deals in absolute values.\u201d\n\nObi-Wan Kenobi and Anakin Skywalker, once the best of friends, find themselves about to have a vicious duel on a volcanic planet in the Mustafar system. Their fight will take place in the Separatists' hideout, a base consisting of N (2 \u2264 N \u2264 45,678) chambers and M (0 \u2264 M \u2264 234,567) corridors. The i-th corridor connects chambers Ai and Bi, and can be traversed in either direction. No pair of chambers are directly connected by multiple corridors.\nThere's just one hold up \u2013 Obi-Wan and Anakin must find each other first. Anakin is waiting in a random chamber, and Obi-Wan is similarly about to land in a random chamber. With each of these locations chosen uniformly at random from the set of possible chambers, there are N2 possible, equally-likely ordered pairs of starting chambers.\nAs soon as Obi-Wan lands in his chamber, he and Anakin will start looking for one another. Exactly once every minute, each of them will travel along a random corridor connected to their current chamber (chosen uniformly at random from the set of such corridors), unless their current chamber isn't connected to any corridors, in which case they'll stay where they are. If the two of them find themselves in the same chamber during any given minute, they'll commence their duel. Otherwise, they'll continue this process infinitely (Jedi do live for a long time). Note that, with the power of the Force, they each travel through their chosen corridor extremely quickly every minute \u2013 therefore, they can never meet up in a corridor, even if they both travel through the same one at the same time (in opposite directions).\nWhat's the probability that Obi-Wan and Anakin will eventually meet up and actually have their duel?\n\nIn cases worth 40% of the points, N \u2264 1234 and M \u2264 4567.\nIn a subset of those cases worth 20% of the points, N \u2264 34 and M \u2264 456.\n",
  "Output Format": "\nOutput a single real number between 0 and 1, the probability that Obi-Wan and Anakin will eventually duel.\nYour answer must have an absolute error of no more than 10\u22126.\n",
  "Title": "WC15 #2 - Revenge of the Sith"
}{
  "Example": "Sample Input \n3 14\n-2 -1 3 3\n7 2 -2 0\n-1 -6 1 2\n-1 0 0 3\n1 0 5\n1 1 7\n2 1 2\n2 1 3\n1 1 1\n1 0 1\n2 1 3\n1 1 30\n1 2 6\n1 1 1000\n2 1 1\n2 2 2\n2 3 3\n2 2 3\n\nSample Output\n0\n12\n14\n32\n30\n12\n42\n",
  "Explanation": "The first charge is set off immediately, and the second occurs 1 second later - during both of these, only the 3rd ship is within the blast zone, so it takes 12 damage. The next 2 charges both occur 1 second after that, at which point the 3 ships are at coordinates (3, 2), (1, \u22122) and (\u22121, 6), respectively \u2013 as such, only the 1st ship is hit, sustaining 2 damage. The following charge deals 30 damage to both ships 1 and 2, while neither of the last 2 charges hit any ships.",
  "Memory Limit": "256M",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nThe second line consists of four space-separated integers X1, Y1, X2, and Y2\nThe next N lines each consist of four space-separated integers sxi, syi, dxi, and dyi, for i = 1..N.\nThe next M lines each consist of three space-separated integers Ai, Bi, and Ci, for i = 1..M.\n",
  "Time Limit": "3.00s",
  "Description": "With the Death Star reduced to stardust, the evil Galactic Empire has been forced to pull out all stops in their fight against the rebels. N (1 \u2264 N \u2264 400,000) heavily-armed Imperial starships have been deployed to fly across the galaxy, destroying all rebel resistance in their paths. All hope would seem lost, but the rebels have a powerful new Jedi ally on their side\u2026 and his name is John Cena.\nJohn Cena has devised a plan to deal massive amounts of damage to the Imperial squadron. Upon studying stolen flight plans, he's realized that all of the enemy ships will always stay within a single plane of space. Then, treating it as a 2D Cartesian plane, he's set up a \"blast zone\" \u2013 a rectangle with its bottom-left corner at coordinates (X1, Y1) and its top-right corner at (X2, Y2) (\u2212105 \u2264 X1 < X2 \u2264 105, \u2212105 \u2264 Y1 < Y2 \u2264 105). He has access to a device which can set off a powerful electrical charge throughout the blast zone, damaging ships within it (including ones right on its border)!\nAs mentioned, John Cena has access to the Imperial flight plans, which happen to be quite simple. The i-th ship will initially be located at coordinates (sxi, syi) (\u2212105 \u2264 sxi, syi \u2264 105), and will then fly in a straight line at a constant velocity of dxi horizontal units and dyi vertical units per second (\u2212105 \u2264 dxi, dyi \u2264 105). No ship is stationary \u2013 that is, |dxi| + |dyi| > 0. Additionally, multiple ships may occupy the same location at any point in time.\nNow, John Cena's battle plan will consist of M (1 \u2264 M \u2264 400,000) steps. The i-th step can be of one of two types, given by the value of Ai (1 \u2264 Ai \u2264 2):\nAi = 1: First, wait Bi (0 \u2264 Bi \u2264 5000) seconds after the previous step, and then set off a charge to deal Ci (1 \u2264 Ci \u2264 105) damage to each ship which is currently within the blast zone (inclusively)\n Ai = 2: To assess success, determine the total amount of damage dealt so far to ships Bi..Ci (1 \u2264 Bi \u2264 Ci \u2264 N)\nJohn Cena's time is now, but can you help him determine the results of each of his steps of type 2?\nNote: In cases worth 20% of the points, N \u2264 500 and M \u2264 2000.",
  "Output Format": "For each step in the input where Ai = 2, output a single integer on a separate line \u2013 the total amount of damange dealt so far to ships in the range specified by Bi and Ci. Note that each result may not fit within a 32-bit signed integer.",
  "Title": "WC15 #2 - The Force Awakens (Senior)"
}{
  "Example": "Sample Input \n12 31\n100 60\n\nSample Output 1\nSuperman\n\nSample Input 2\n1 4\n2 3\n\nSample Output 2\nInconclusive\n\nSample Input 3\n50 51\n50 50\n\nSample Output 3\nInconclusive\n",
  "Input Format": "\nThe first line will contain the two space-separated integers AB and DB.\nThe second line will contain the two space-separated integers AS and DS.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "What is a savior but an emblem of hope \u2013 but a monument for the people to look up to? Should he be anything that the world needs him to be \u2013 or should he be none of it? What does a savior owe the world?\nThe time has come for the man of steel to finally face these difficult questions. Meanwhile, feelings of fever, rage and powerlessness are festering within the dark knight of Gotham. He can do nothing but watch as the planet praise an alien capable of annihilating it. The peace of Gotham he fought so long to protect is now compromised by a godly figure that has unworthily gained the world's reverence.\nTo take care of this threat for good, the masked billionaire will have to elaborate a plan like no other he's ever concocted. In particular, Batman plans to use Kryptonite-based weapons and a heavily-armored mech suit to defeat the most powerful being on Earth. The success of the battle is hugely dependent on the strength/purity of the Kryptonite weapons as well as the durability of the mech suit. He has aggregated the attack power provided by his weapons and the defense power provided by his suit into two ratings AB and DB respectively. Being a master detective, Batman has also carefully scrutinized Superman's strength and techniques from past battles. Through this, he has aggregated Superman's attack power and defense power into two ratings AS and DS respectively. Each of these four ratings is a positive integer no greater than 100.\nClearly, Batman will emerge victoriously if his attack power is strictly greater than Superman's defense power, and his defense power is strictly greater than Superman's attack power. On the other hand, Superman will prevail if his attack power is strictly greater than Batman's defense, and his defense is also strictly greater than Batman's attack. If neither of these situations occur, then unfortunately it will be unclear who will win, so the outcome will be difficult to predict.\nBatman is the type of hero who needs contingency plans for his contingency plans, so there's no way he'll be willing to enter the fight with surprises. Can you help him predict the results of the upcoming battle or determine that it's inconclusive so Batman knows he must further prepare?",
  "Output Format": "Output on a single line the result of the showdown \u2013 Batman if Batman will win, Superman if Superman will win, or Inconclusive otherwise.\n\n",
  "Title": "WC15 #3 - Battle Predictions"
}{
  "Example": "Sample Input \n4\n2 1 3 2\n\nSample Output\n24\n",
  "Input Format": "\nThe first line will contain a single integer N.\nThe second line will contain N space-separated integers, the values of H1 through HN respectively.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Having found the battle predictions to be inconclusive, Batman has decided to employ another powerful weapon to guarantee his victory against Superman \u2013 electricity! After all, the man of steel should be a good conductor.\nAlthough Batman is a genius-level physicist, it doesn't take a genius to know that a stupendous amount of energy is required to bring down a being who draws his power from the sun. Clearly, the quantity of energy to weaken Superman is too massive to be stored and carried around in the Batmobile. Through a stroke of brilliancy, he realized that he could simply tap into the city's power grid. So his plan is as follows: Batman will engineer his mech-suit to conduct electricity without doing any harm to himself, the wearer. When the time is right, Batman will plug the suit into any point in the power grid that he will have hooked up before the battle. Then, he will grip both hands onto Superman's body (closing the circuit) and direct an immense wave of electricity through the man of steel.\nThe challenge of this plan is all in the preparation: properly wiring up the city's power grid to the street on which the battle will take place. Batman already knows the location of the battle, and he knows that on that street, there are N (1 \u2264 N \u2264 500) adjacent buildings numbered from 1 to N. The i-th building (for i = 1..N) has a total of Hi (1 \u2264 Hi \u2264 500) floors. From inspecting a map of the city's power system, Batman noticed that he will need to wire up every building on the street to maximize his power output. To make his circuit as resilient as possible, he has decided to also wire up every floor on each building to the same floors of adjacent buildings (if they exist). This way, if the connection breaks in any one building, the circuit is still quite likely to be connected. Wires will run horizontally along the top of buildings, vertically across the sides of buildings, as well as horizontally across each floor of each building. However, the same floor across two adjacent buildings will share a vertical wire.\nFor example, if there are N = 4 buildings with heights H = {2, 1, 3, 2}, his circuit should look as follows:\n     _\n _  |_|_\n|_|_|_|_|\n|_|_|_|_|\n\nEach horizontal and vertical unit of wiring will require the same length of wire. For example, the above structure will require 24 units of wire. Batman may be a billionaire, but you don't stay rich by wasting money. Thus, he would like to use the minimum amount of wiring to create his weapon. Can you help him determine the length required?",
  "Output Format": "Output a single integer, the length of wires required to build the circuit, in units.",
  "Title": "WC15 #3 - Electroshock Therapy"
}{
  "Example": "Sample Input \n4 3\n10 3 23 27 1 5 109 110\n5 2 7 9 41 42\n5 2 7 9 40 42\n100 1 100 100\n0\n2\n4\n\nSample Output\nN\nY\nN\n",
  "Explanation": "Batman predicts the battle to last a measly 4 minutes. It's impossible for Batman to weaken Superman for 0 minutes, since he'll always be emitting the appropriate frequency to produce red sun radiation the last round (the RSS radiation is fixed at 100 MHz during that minute, which is a multiple of the solar radiation of 100 MHz). It's also impossible for him to weaken Superman in all 4 minutes, since there's no way he can produce red sun radiation in the second minute (the RSS cannot possibly emit a frequency which is a multiple of 5 MHz). However, there are various ways in which Superman can be weakened for exactly 2 minutes, such as if the following frequencies happen to be emitted by the RSS:\n1st minute: 110 MHz (producing red sun radiation when interfered with the sun's 10 MHz)\n2nd minute: 8 MHz (not producing red sun radiation when interfered with the sun's 5 MHz)\n3rd minute: 42 MHz (not producing red sun radiation when interfered with the sun's 5 MHz)\n4th minute: 100 MHz (producing red sun radiation when interfered with the sun's 100 MHz)",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line will contain two space-separated integers N and Q.\nThe next N lines will each start with 2 space-separated integers Fi and Mi, followed by Mi space-separated pairs of integers Ai,j and Bi,j (for i = 1..N and j = 1..Mi).\nThe last Q lines will each contain a single integer Ti (for i = 1..Q).\n",
  "Time Limit": "2.00s",
  "Description": "Being a masterful tactician, Batman wants to take advantage of his opponent's every weakness in battle. Too bad there just aren't many weaknesses of Superman. Though Superman's most famous weakness is Kryptonite, Batman's Kryptonite-laced weapons may still not be enough to help him win. A lesser known weakness of Super is the red sun. The red sun on Krypton is much less radiant than the yellow sun on Earth, which is why native Kryptonians aren't naturally as strong as Superman. It is only because Superman grew up on Earth that his powers are acquainted to and magnified by our powerful yellow sun's radiation.\nWithout a yellow sun, Superman's powers will be temporarily weakened. Even for Batman, it is quite near impossible to block out yellow sun radiation altogether. However, Batman believes that if he is able to temporarily convert the yellow sun radiation to red sun radiation, then he will be able to weaken Superman to the same effects. With the help of Lucius Fox, WayneTech was able to secretly develop a device to perform this exact conversion. This sophisticated technology, known as the Red Sun Simulator (RSS) will be installed onto the batplane which will idle in the sky during their fight. When the time is right, the device will continuously diffuse electromagnetic waves that will create an interference pattern with the electromagnetic radiation of the sun. The radiation generated by the RSS should be at precise frequencies so that the resulting wave exactly matches the frequency of the red sun of Krypton. Unfortunately for Batman, the frequency of solar radiation is going to be constantly changing due to small factors such as atmospheric conditions and their altitude. Due to these constraints, the ability of the RSS to produce waves at a certain frequency will also be limited.\nThe masterful tactician he is, Batman has planned out how every moment of the battle is going to go down. In particular, he predicts that there will be N (1 \u2264 N \u2264 50000) minutes in the entire battle. During the i-th minute, the frequency of the solar radiation is forecasted to be Fi (1 \u2264 Fi \u2264 109) megahertz. In order for Superman to be weakened by red sun radiation during minute i, the frequency produced by the RSS must be a multiple of the solar frequency during that minute. In minute i, the RSS will randomly produce a frequency from a set of Mi (1 \u2264 Mi \u2264 5) intervals. The j-th of these intervals will consist of the integers from Ai,j to Bi,j (1 \u2264 Ai,j \u2264 Bi,j \u2264 109) inclusive, meaning that during minute i, the RSS is capable of emitting radiation at any one frequency from Ai,j megahertz to Bi,j megahertz for any j from 1 to Mi. For each minute i, the Mi intervals will be non-overlapping, meaning that any integer will be part of at most one of the intervals.\nBatman is interested in whether he can weaken Superman for a particular number of minutes in total. Thusly, he wants to answer Q (1 \u2264 Q \u2264 N + 1) questions, where the i-th question is: \"is it at all possible to weaken Superman during exactly Ti minutes of the total N minutes of the battle?\" (0 \u2264 Ti \u2264 N). Please write a program to analyze the solar data and answer Batman's queries.\n\nIn cases worth 20/30 of the points, Fi \u2264 100 and Bi,j \u2264 100.\nIn a subset of those cases worth 10/30 of the points, N \u2264 8.\n",
  "Output Format": "Q lines with one character per line. The i-th of these lines is \"Y\" if Batman can weaken Superman using simulated red sun radiation during exactly Ti minutes, or \"N\" otherwise.",
  "Title": "WC15 #3 - Red Sun Simulator"
}{
  "Example": "Sample Input \n5 6 5\n..#.#.\n..####\n.#..##\n#..##.\n..###.\n1 1 4\n1 3 4\n2 1 2\n2 3 1\n1 1 4\n\nSample Output\n3\n0\n1\n-1\n2\n",
  "Explanation": "If we label each control room cell with the rank of its control room, the map initially looks as follows:\n11#3#3\n11####\n1#00##\n#00##2\n00###2\n\nThere are 5 control rooms. The largest one (the one that includes the south-west cell) has size 6, so its rank is 0. The two size-1 rooms near the top right of the map both have rank 3.\nThe 3rd event causes the north-west control room to be gassed, leaving the map looking as follows:\n**#2#2\n**####\n*#00##\n#00##1\n00###1\n",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input will contain three space-separated integers R, C, and N.\nThe next R lines will each contain C characters Mi,1, Mi,2, \u2026, Mi,C, for i = 1..R.\nThe next N lines will each contain three space-separated integers Ti, Ai, and Bi, for i = 1..N.\n",
  "Time Limit": "1.00s",
  "Description": "While the dust settles in the battle between the dark knight and the last son of Krypton, the two have suddenly come to recognize the true mastermind behind it all. After General Zod's invasion on Earth, LexCorp was contracted by the U.S. government to carefully reverse-engineer leftover Kryptonian technology. As it turns out, the battle between the heroes had simply been Lex Luthor's test in his greater conspiracy to craft a powerful biotechnological weapon against Superman. At that point, it became clear to both that the world is in much graver danger than ever before. Luthor's international masquerade as a humanitarian has attracted the attention of Princess Diana of Themyscira, also known as Wonder Woman. After joining forces with Superman and Batman, the trio obtain intel of Luthor's dangerous bio-weapon project \u2013 Doomsday.\nBut it's too late. To destroy the reputation of Superman, Doomsday has already been deployed by Luthor and is wreaking havoc and causing wanton destruction upon Metropolis. Doomsday was originally a deadly monster born from the depths of ancient Krypton. As Luthor has reanimated the abominable legend from his own laboratories on Earth, Doomsday is actually being puppeted from the very control rooms in LexCorp Tower. To stop this vicious foe, Wonder Woman will have to infiltrate LexCorp Tower and use Batman's knockout gas to shut down these control rooms one at a time.\nUsing his X-ray vision, Superman has helped devise a map of the control floor of LexCorp Tower. He knows that the floor can be represented as a rectangular grid of R rows and C columns (1 \u2264 R, C \u2264 1000). The rows are numbered 1..R from north to south, while the columns are numbered 1..C from west to east. The j-th cell in the i-th row can be referred to as cell (i, j). Each cell (i, j) is either part of a control room or a wall, which is indicated by the value of character Mi,j on the map (with \".\" indicating it is part of a control room and \"#\" indicating it is a wall). At least one cell will be part of a control room.\nThe control floor will obviously consist of some number control rooms (at least one), where each control room on the map consists of a consecutive region of \".\" characters. More formally, every \".\" cell is part of exactly one control room, and if a pair of \".\" cells are adjacent to one another, then they must be part of the same control room. Two cells (i1, j1) and (i2, j2) are adjacent if and only if |i1 - i2| + |j1 - j2| = 1 (in other words, if they share a side). The size of a control room is the number of \".\" cells that are part of it.\nReleasing knockout gas in a given room will knock out of all its controlpersons, permanently preventing the room from conveying a particular type of vital information to Doomsday's operations. Since Doomsday is already terrorizing Metropolis at a substantial rate, the order in which Wonder Woman infiltrates the rooms is vital in minimizing damage done to the city. Since it's likely that larger control rooms convey more important information, assigning ranks to rooms based on their size may help Wonder Woman workout her plan. At any time during the mission, the rank of control room r is an integer equal to the number of active control rooms whose sizes are strictly larger than control room r's size.\n\n\nAll that said, N (1 \u2264 N \u2264 3000) events will take place in the mission, one after another. Each event i concerns a \".\" cell (Ai, Bi) (1 \u2264 Ai \u2264 R, 1 \u2264 Bi \u2264 C), and can be of one of 2 types, indicated by the value Ti (1 \u2264 Ti \u2264 2):\nWonder Woman assesses the situation of the control room that cell (Ai, Bi) is part of.\nWonder Woman travels to cell (Ai, Bi) and gasses the entire control room containing that cell.\n\nTo make her mission smooth, she has asked you to help her write a program to keep track of her progress. Right before each event i takes place, your program should determine the current rank of the control room containing cell (Ai, Bi) and output it. However, if that cell belongs to a control room that she has already gassed (in one of the first i \u2212 1 events), you should instead output -1 to remind her. When a control room is gassed, it ceases to convey signals to Doomsday, meaning that the ranks of other control rooms may change. On the other hand, gassing an already gassed room has no effect. Superman's reputation is dwindling with every moment of Metropolis's destruction, so you'd better code fast!\n\nIn test cases worth 20/40 of the points, there will be no type-2 events.\n",
  "Output Format": "\nOutput N lines with a single integer per line.\nLine i should contain the rank of the control room of the cell targeted by the i-th event (or -1 if the room has already been previously gassed), for i = 1..N.\n",
  "Title": "WC15 #3 - LexCorp Infiltration"
}{
  "Example": "Sample Input \n4 3\n-3 5 -3 -3\n2 3 4\n\nSample Output\n0\n3\n4\n",
  "Explanation": "\nIf Batman's suit starts with 2 units of damage sustained from the sabotage, then punching him would give him energy and immediately lower the damage done to \u22121, so Superman won't do it.\nIf the suit starts with 3 units of damage, it will be lowered to 0 units of damage after receiving the first blow, but raised to 5 units of damage after the second blow, and lowered to 2 units of damage after the third blow. By then, Superman will have realized that it's not worthwhile to make the fourth blow (which will make the net damage \u22121).\nIf the suit starts with 4 units of damage, it will have sustained 3 units of damage going into the final blow. Thus Superman will be able to deal the last punch and still have a nonnegative damage of 0 sustained by the suit. Although this last punch seems to be suboptimal in Superman's favor, he will still deal it nonetheless because he wants the battle to be as long as possible to fatigue Batman.\n",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input contains two space-separated integers N and M.\nThe second line of input contains N space-separated integers D1, \u2026, DN.\nThe third line of input contains M space-separated integers Q1, \u2026, QM.\n",
  "Time Limit": "2.00s",
  "Description": "\nWhat is a savior but an emblem of hope \u2013 but a monument for the people to look up to? Should he be anything that the world needs him to be \u2013 or should he be none of it? What does a savior owe the world? The time has come for the man of steel to finally face these difficult questions. And while Superman is nothing short of a god amongst mortals, Batman is\u2026 well, Batman.\nSuperman knows that fighting the dark knight is going to be no easy task. He knows that Batman will enter the battle with a heavily armored mech-suit with a multitude of unpredictable special abilities. It is very likely that Batman's armor will already be prepped to take on the stupendously powerful blows that Superman can deal. From collaborating with the U.S. government, Superman has received intel saying that Batman's suit has the ability to absorb the kinetic energy from any strike dealt onto it and store it for later use to power Batman's own offensive blows. This is an incredibly sneaky technology, and seems to give Batman a huge edge in battle. However, he has also learned this advanced technology has not yet been perfected. That is, the armor itself may fail at capturing the kinetic energy of the blows, resulting in actual damage being done. Luckily, Superman found out about it beforehand and now has a chance to plan out his attack strategy.\nIn particular, Superman plans to land N (1 \u2264 N \u2264 106) punches onto Batman's armor. The punches are numbered from 1 to N, and he will deal them in order. By analyzing the stolen blueprint of the mech-suit, Superman knows that the i-th punch he lands on Batman will deal Di (\u22121000 \u2264 Di \u2264 1000) units of damage to his suit. Specifically, the damage will be negative if Batman's suit happens to absorb |Di| units of Superman's kinetic energy, or it will be positive if the absorption fails and Superman successfully deals Di units of damage.\nSuperman is no fool. In the battle, he will continue to perform punches 1 to N in order, but will stop as soon as the next punch would cause the net damage on Batman's suit to become negative. The government will do its best to help Superman by sabotaging Batman's suit beforehand, so when the battle starts, the amount of initial damage sustained by Batman's suit will be positive. Still, Superman would like to land as many hits onto Batman as possible because it will nonetheless exhaust the aging hero beneath the armor.\nSince the only piece of information that Superman doesn't have is the initial damage to Batman's suit when he enters the fight, he would like your help in writing a program that can quickly compute how many punches he'll throw based on the original damage to Batman's suit. In particular, your program must answer M (1 \u2264 M \u2264 500,000) queries where the i-th query asks: \"if Batman's suit were to have Qi (1 \u2264 Qi \u2264 109) units of damage done to it when he enters the battle, what is the number punches Superman will throw before making the net damage to Batman's suit negative?\"\nIn test cases worth 6/15 of the points, N \u2264 1000 and M \u2264 1000.",
  "Output Format": "\nM lines with a single integer on each line, the answers to queries 1..M.\n",
  "Title": "WC15 #3 - Energy Absorption"
}{
  "Example": "Sample Input \n4 6\n2 0 3 0 0 0\n0 0 0 0 4 0\n0 1 1 2 0 0\n2 0 3 0 0 1\n\nSample Output\n15\n",
  "Explanation": "One optimal pair of rescue zones is as follows:\nr = 3, c = 5, h = 1, w = 1 (containing 4 + 2 = 6 prisoners)\nr = 4, c = 3, h = 3, w = 2 (containing 3 + 1 + 3 + 2 = 9 prisoners)",
  "Memory Limit": "256M",
  "Input Format": "\nThe first line contains two space-separated integers N and M.\nThe next N lines each contain M integers, where line i contains integers Pi,1, \u2026, Pi,M, for i = 1..N.\n",
  "Time Limit": "2.00s",
  "Description": "While the dust settles in the battle between the dark knight and the last son of Krypton, the two have suddenly come to recognize the true mastermind behind it all. After General Zod's invasion on Earth, LexCorp was contracted by the U.S. government to carefully reverse-engineer leftover Kryptonian technology. As it turns out, the battle between the heroes had simply been Lex Luthor's test in his greater conspiracy to craft a powerful biotechnological weapon against Superman. At that point, it became clear to both that the world is in much graver danger than ever before. Now, the heroes have decided to team up and together, track down Luthor to end the evil mastermind's ploys once and for all.\nThey have tracked down Luthor's activities preceding their fight to Cadmus, a LexCorp subsidiary dedicated to genetic research on the outskirts of Metropolis. Unbeknownst to even the government, Cadmus has been conducting dangerous human experimentation for a secret biotechnology project. Infiltrating the facility, the heroes have discovered a huge number of human subjects that are held prisoner by Luthor. As they plan to secretly rescue all of them, Lex has already discovered their presence. Immediately, he sets his men, armed with advanced weaponry, into action to capture Batman and Superman. With a limited amount of time before they can escape, the duo must try to rescue as many prisoners as possible.\nThe Cadmus facility can be represented as a rectangular grid with N rows of M cells each (2 \u2264 N, M \u2264 2000), with the rows numbered 1..N from north to south, and the columns numbered 1..M from west to east. The j-th cell in the i-th row can be denoted as cell (i, j). Each cell (i, j) happens to contain Pi, j (0 \u2264 Pi, j \u2264 105) prisoners. Batman and Superman must work together to rescue as many as they can \u2013 but with the clock ticking, they have to make their rescue plan as efficient as possible.\nThus, Batman and Superman will each decide on their own \"rescue zone\". Each rescue zone is defined by a central point (r, c), a non-negative height h, and a non-negative width w. A rescue zone consists of h + w + 1 cells \u2013 the central cell itself, the h cells directly above it, and the w cells directly to the left of it. This zone is only valid if all of its cells are within the grid \u2013 that is, 0 \u2264 h < r \u2264 N and 0 \u2264 w < c \u2264 M must hold true. However, to avoid getting in each other's way, their chosen rescue zones should not overlap with one another. In other words, no cell in the Cadmus facility may be part of both rescue zones. Following this, all prisoners in each cell which are either part of Batman or Superman's attack zones will be rescued.\nPlease write a program to help the Earth's greatest heroes determine the maximum number of prisoners that can be rescued this way.",
  "Output Format": "Output a single integer, the maximum number of prisoners that can be rescued by Batman and Superman.",
  "Title": "WC15 #3 - Rescue Mission"
}{
  "Example": "Sample Input \n4 4\n10 5 12\n4 5 6\n15 1 1\n20 10 80\n101\n100\n0\n14\n\nSample Output\n0\n3\n1\n4\n",
  "Explanation": "\nPosition 101 is too far to be within any possible explosion.\nPosition 100 will be engulfed by the 4th landmine's explosion if either the 1st, 2nd, or 4th landmine is initially set off. If the 2nd one is set off, for example, its explosion will set off the 1st landmine, which will set off the 4th one, which will just barely reach the point.\nPosition 0 will only be engulfed if the 2nd landmine is initially set off.\nNo matter which landmine is initially set off, position 14 will always be engulfed.\n",
  "Memory Limit": "512M",
  "Input Format": "\nThe first line of input will contain two space-separated integers N and M.\nThe next N lines will each contain three space-separated integers Xi, Li, and Ri, for i = 1..N.\nThe next M lines will each contain a single integer Ci, for i = 1..M.\n",
  "Time Limit": "4.00s",
  "Description": "Lex Luthor's international masquerade as a humanitarian has attracted the attention of Princess Diana of Themyscira, also known as Wonder Woman. Thanks to her unexpected addition to team Batman and Superman, all the prisoners from Cadmus have fortunately been rescued. But it's too late. Luthor has already unleashed his dangerous bio-weapon of unimaginable power \u2013 Doomsday. To destroy the reputation of Superman, Doomsday has been wreaking havoc and causing wanton destruction upon Metropolis. Doomsday was originally a deadly monster born from the depths of ancient Krypton. Having worked so hard to reanimate the abominable legend from his very own laboratories on Earth, Luthor might as well make this moment count.\nThe mastermind knows for a fact that while Doomsday is trampling the city, the heroes will be intently focused on minimizing civilian casualties. To further tie up their hands during their clash with Doomsday, he has decided to throw in the age-old weapon of landmines. The current street of the fight can be represented as a number line of integer positions numbered from 0 to 109, inclusive. Luthor has planted N (1 \u2264 N \u2264 106) landmines at (not necessarily distinct) positions on the street, where each landmine is numbered uniquely from 1 to N. The i-th landmine is located at position Xi (0 \u2264 Xi \u2264 109) on the street. But there is a catch \u2013 these landmines have been specially engineered to explode in an asymmetrical fashion. When the i-th landmine goes off, its explosion reaches Li (1 \u2264 Li \u2264 109) units to the left (in the negative direction), and Ri (1 \u2264 Ri \u2264 109) units to the right (in the positive direction). As such, its explosion reaches all positions in the inclusive range [Xi \u2212 Li, Xi + Ri] on the street.\nLex Luthor will control Doomsday to set off exactly one landmine of his choice \u2013 however, this may start a chain reaction! If any other landmines are within the initial landmine's explosion range, they'll also go off. Their explosions may in turn set off even more landmines, and so forth. As if fighting the deadly beast isn't enough on their plates, Batman, Superman, and Wonder Woman will need to evacuate the citizens of the street to safety from the landmines. To do so, they will have to evaluate how dangerous certain positions on the street are. They know that M (1 \u2264 M \u2264 300,000) civilians numbered from 1 to M are currently located at possibly non-distinct points on the street, where the i-th civilian is located at position Ci (0 \u2264 Ci \u2264 109). For each civilian i, they'd like to know the number of different initial landmines that Doomsday could set off which would cause that civilian to be engulfed in at least one of the resulting explosions. Please write a program to help the trio answer these questions. Superman's reputation is dwindling with every moment of Metropolis's destruction and countless civilian lives are at stake, so you'd better code fast!\nFor cases worth 30% of the points, N \u2264 500 and M \u2264 500.",
  "Output Format": "\nOutput M lines, each containing a single integer \u2013 the number of initial landmines which would cause the civilian at position Ci to be engulfed by an explosion, for i = 1..M.\n",
  "Title": "WC15 #3 - Lex Luthor's Landmines"
}{
  "Example": "Sample Input \n4 2000\n6000\n1000\n2000\n20001\n\nSample Output\n2\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and G.\nThe next N lines each consist of a single integer Fi, for i = 1..N.\n",
  "Memory Limit": "16M",
  "Time Limit": "7.00s",
  "Description": "James Bond is preparing to embark on a particularly dangerous mission \u2013 catching ruthless Canadian ice wine smugglers. He'll be attending a secret (but elegant) wine tasting party at the smugglers' hideout, with the intention of causing a huge distraction and sneaking further into their lair. If only there were a way to suddenly disrupt the wine tasting process for all of the guests...\nFortunately for Bond, Q has an idea. According to his research, the glass which the wine glasses are made of has a resonance frequency of G (800 \u2264 G \u2264 8000) Hz. If a loud noise were to be emitted in the room, with a frequency which is an exact multiple of the glass's resonance frequency, the wine glasses could be made to all shatter at once, giving Bond just the kind of distraction he'll need!\nQ has developed N (1 \u2264 N \u2264 100) fancy watches for this mission. Aside from helping Bond look the part of a rich wine collector (and be able to tell the time), the watches have powerful auditory emitters embedded within them! The i-th watch can emit noise at a frequency of Fi (500 \u2264 Fi \u2264 100,000) Hz.\n\n\nThough all N watches can keep time accurately, only the ones with frequencies which are exact multiples of G Hz will be of use to Bond for this mission. Please help Q count how many of his watches he could potentially give to Bond!",
  "Output Format": "Output a single integer \u2013 the number of watches which are able to break the glass.",
  "Title": "WC15 #4 - Telling Time"
}{
  "Example": "Sample Input \nSample Output\n4\n",
  "Input Format": "The first and only line of input consists of a single string representing a transcript of the the mission briefing.",
  "Memory Limit": "16M",
  "Output Format:": "Output a single integer \u2013 the number of different agents (from 001 to 009) whose code names appear in the mission briefing.",
  "Time Limit": "2.00s",
  "Description": "You've gotten your hands on M's writeup of plans for an upcoming MI6 mission. This mission briefing is a single string, whose length is between 1 and 1000 (inclusive), and which consists only of letters, digits, periods, and commas (no whitespace).\nYou know that 9 different MI6 agents may be involved in this mission \u2013 the agents with code names 001, 002, 003, 004, 005, 006, 007, 008, and 009. Some of their code names may appear in the mission briefing, even multiple times, while others may not. Their code names may occur anywhere in the string, not necessarily immediately before or after punctuation. You're interesting in counting the number of different agents whose code names can be found in the text at least once.",
  "Title": "WC15 #4 - Mission Briefing"
}{
  "Title": "WC15 #4 - Target Practice",
  "Explanation": "\nBond's total score is 21 if P = [1, 9, 10].\nBond's total score is 30 if P = [10, 9, 1].\n",
  "Example": "Sample Input \n3 5\n10\n100\n1000\n10\n1\n9\n4 20\n0 -10\n1001 0\n0 0\n-300 -300\n\nSample Output\n21\n30\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nThe next N lines each consist of a single integer Ri, for i = 1..N.\nThe next N lines each consist of a single integer Pi, for i = 1..N.\nThe next M lines each consist of two space-separated integers Xi and Yi, for i = 1..M.\n",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "In between missions, Bond makes sure to keep his trigger finger in shape. Today, he's hitting the firing range at MI6 headquarters.\nHis target consists of N (1 \u2264 N \u2264 105) concentric rings drawn on a piece of graph paper, centered at the origin. The rings are numbered 1 to N from smallest to largest, with the i-th ring having an outer radius of Ri (1 \u2264 R1 < R2 < \u2026 < RN < 109). Each ring includes its outer radius, but not its inner radius \u2013 for example, if a bullet hits exactly Ri units away from the origin, then it's considered to land inside ring i, but if it's slightly further away, then it instead lands inside ring i + 1. If a shot strikes no further than R1 units away from the origin, then it naturally lands inside ring 1. The i-th ring is worth Pi (1 \u2264 Pi \u2264 1000) points if it's hit.\nBond has fired M (1 \u2264 M \u2264 106) shots at the target, with the ith one striking at coordinates (Xi, Yi) (\u2212109 \u2264 Xi, Yi \u2264 109), and is now waiting to be notified of his total score. Each shot will be awarded points based on which ring it landed in, except for shots which landed strictly outside the outer radius of ring N, which will receive 0 points.\nQ is in charge of tallying up the points, but he's decided to play a little trick on Bond \u2013 rearranging the rings' point values! Given that he may permute the values P1..N in any way he'd like before computing and adding up the M shots' scores, he's wondering how small or large Bond's total score could possibly end up being. After the stunt Bond pulled last week with taking Q's brilliant new automobile for a little unauthorized test drive, and promptly causing it to internally combust (and not in a good way), we can only imagine whether Q will choose to give Bond the smallest or largest possible score... However, in any case, can you please help him determine both of these values?",
  "Subtasks": "\nIn test cases worth 6/40 of the points, N \u2264 10 and M \u2264 20.\nIn test cases worth another 10/40 of the points, N \u2264 800 and M \u2264 400.\nIn test cases worth another 12/40 of the points, N \u2264 105 and M \u2264 400.\n",
  "Output Format": "\nOutput two integers \u2013 the minimum and maximum total scores that Bond could possibly get.\n"
}{
  "Title": "WC15 #4 - Shootout",
  "Example": "Sample Input \n5 4\n2\n300\n4\n15\n1000000000\n200\n3\n100\n301\n\nSample Output\n1\n3\n4\n5\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nThe next N lines each consist of a single integer Hi, for i = 1..N.\nThe next M lines each consist of a single integer Di, for i = 1..M.\n",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "James Bond's latest mission is not going as planned. He's suddenly found himself at one end of a long, narrow corridor which is filled with N (1 \u2264 N \u2264 200,000) of Blofeld's henchmen. The i-th henchman is standing Hi (1 \u2264 Hi \u2264 109) metres away from Bond along the corridor.\nThere are also M (0 \u2264 M \u2264 200,000) doors in the corridor, all of which are initially closed, with the i-th door Di (1 \u2264 Di \u2264 109) metres away from Bond along the corridor. Of the N + M henchmen and doors, no two of them are at the same location.\nThe building's security system will open all of the doors in order, one after another, starting from door 1 and ending\nwith door M. Once each door has been opened, it will stay open permanently. In order to do his best to die another day, Bond will need to quickly assess how many of the henchmen are currently in his line of fire after each door is opened. A given henchman is in Bond's line of fire if there are no closed doors between them and Bond.\nFortunately, Bond brought along his personal computer to the gunfight to help with these computations. Unfortunately, he forgot to get the floppy disk containg the program from Q! As quickly as you can, for each i from 1 to M, please help Bond determine how many of the N henchmen will be in his line of fire after the first i doors have been opened.",
  "Subtasks": "\nIn test cases worth 3/17 of the points, N \u2264 100 and M \u2264 100.\nIn test cases worth another 4/17 of the points, N \u2264 200 and M \u2264 3000.\nIn test cases worth another 4/17 of the points, N \u2264 200 and M \u2264 40,000.\n",
  "Output Format": "\nOutput M lines with one integer per line. The i-th line of output (for i = 1..M) should consist of the number of henchmen in Bond's line of fire after i doors have been opened.\n"
}{
  "Title": "WC15 #4 - World Tour",
  "Example": "Sample Input \n4\n4\n1\n2\n1\n\nSample Output\n2\n3\n4\n2\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nThe next N lines each consist of a single integer Ci, for i = 1..N.",
  "Memory Limit": "64M",
  "Time Limit": "6.00s",
  "Description": "James Bond is in trouble \u2013 the fearsome Jaws is after him! Jaws will stop at nothing to find Bond and take him out (and not out to eat, though biting will be involved), and he's gotten incredibly skilled at picking up Bond's trail as he travels around the world on his assignments.\nUnfortunately for Jaws, this ability to follow Bond's trail will be his undoing. Bond intends to take Jaws on a little world tour, tricking him into flying to all sorts of cities by leaving behind fake clues about where he himself is headed.\nThere are N (1 \u2264 N \u2264 500,000) cities of interest, and in the i-th of these cities, Bond will leave a clue suggesting that he travelled from that city to a different city Ci (1 \u2264 Ci \u2264 N, Ci \u2260 i). This means that, if Jaws ever finds himself in city i, he's sure to fly to city Ci from there!\nDepending on which city Jaws starts in, the sequence of flights he'll be obligated to take while following Bond's supposed trail will differ. In fact, each such sequence of flights will be infinitely long, as poor Jaws will always blindly go on chasing his adversary's scent, even if he passes through some of the cities multiple times along the way! It's a good thing he'll be able to file an expense report to get reimbursed for all of these flights afterwards (they're for business purposes, after all). That being said, over the course of his infinitely-long trip, he certainly won't visit an infinite number of different cities. For each of the N potential starting cities, can you count the number of different cities (including that one) which Jaws will end up visiting if he starts there and continues taking his required flights forever?",
  "Subtasks": "\nIn test cases worth 7/23 of the points, N \u2264 2000.\n",
  "Output Format": "\nOutput N lines, one integer per line. The i-th line (for i = 1..N) should consist of the number of different cities that Jaws will end up visiting if he starts in city i.\n"
}{
  "Title": "WC15 #4 - Coded Paper",
  "Explanation": "\nBond should place a 1\u00d72 rectangle in the middle of the first row (covering \u221210 and \u22121), and a 1\u00d71 rectangle in the bottom-right corner (covering \u22126). The visible numbers will then be 20, \u22125, 5, \u22122, 3, 1, and \u22125, which sum to 17.\n",
  "Example": "Sample Input \n2 -1\n-10 -20\n-30 -40\n\nSample Output 2\n-1\n\nSample Input 3\n2 1\n-10 -20\n-30 -40\n\nSample Output 3\n4\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and R.\nThe second line consists of N integers, C1, 1..N.\nThe third line consists of N integers, C2, 1..N.\n",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "Bond has gotten his hands on a mysterious slip of paper. It's divided into a grid of square cells, with 2 rows and N (1 \u2264 N \u2264 105) columns. The j-th cell in the i-th row has the integer Ci, j (\u2212100 \u2264 Ci, j \u2264 100) printed in it.\nBond also has access to a curious machine which can print rectangular pieces of cardboard on demand. He can use it to print as many rectangles as he'd like, each of them having any integral dimensions of his choice. Each rectangle produced by this machine will have a single integer R (\u2212100 \u2264 R \u2264 100) printed on it, regardless of its size. Bond may choose to place these cardboard rectangles on top of the slip of paper such that they cover some of its cells, as long as they're aligned with the grid, they fit within the grid, and none of them overlap with one another.\nHe has reason to believe that the purpose of this slip of paper is actually to encode a single, secret integer, which is the maximum possible sum of visible integers after zero or more cardboard rectangles have been placed on it. This sum includes the integers written on the rectangles used, of course, and doesn't include any integers in cells which are underneath a rectangle. Can you help him crack the code by determining the maximum possible sum that can be achieved?",
  "Subtasks": "\nIn test cases worth 2/25 of the points, N \u2264 2.\nIn test cases worth another 5/25 of the points, N \u2264 6.\n",
  "Output Format": "\nOutput a single integer, the maximum sum of visible integers that Bond can achieve by placing cardboard rectangles optimally.\n"
}{
  "Title": "WC15 #4 - Stakeout",
  "Explanation": "If M hires agents 1 and 2 (for a cost of 21 + 22 = 6 dollars), each building will be in sight of a single agent, which is just enough to satisfy the first question. Hiring agents 1, 2, and 4 will allow each building to be in sight of at least two agents. It's impossible to have each building be in sight of three or more agents.",
  "Example": "Sample Input \n2 4 3\n10\n20\n14 5\n22 11\n0 1\n15 5\n1\n2\n3\n\nSample Output\n6\n22\n-1\n",
  "Input Format": "\nThe first line of input consists of three space-separated integers N, M, and Q.\nThe next N lines each consist of a single integer Bi, for i = 1..N.\nThe next M lines each consist of two space-separated integers Ai and Ri, for i = 1..M.\nThe next Q lines each consist of a single integer Ci, for i = 1..Q.\n",
  "Memory Limit": "64M",
  "Time Limit": "7.00s",
  "Description": "MI6 has received intelligence that members of the evil Spectre organization may be holding a gathering somewhere along a certain street in London. Unfortunately, they're not sure exactly in which building this gathering will take place. As such, they'll need to recruit some agents to stake out the street and look for suspicious acitivity.\nThe street can be represented by a number line. There are N (1 \u2264 N \u2264 300,000) suspicious buildings which must be monitored, with the i-th one at position Bi (\u2212109 \u2264 Bi \u2264 109). There are also M (1 \u2264 M \u2264 300,000) agents stationed along the street, with the i-th one at position Ai (\u2212109 \u2264 Ai \u2264 109). All N + M of these positions are distinct. Agent i has a sight range of Ri (1 \u2264 Ri \u2264 109), meaning that they're able to keep watch over all buildings at positions in the inclusive range of positions [Ai \u2212 Ri, Ai + Ri]. Times are tough at MI6, with the agents not even willing to take this assignment for free \u2013 M will have to pay agent i a fee of 2i dollars to stay at their post, otherwise they'll get bored of the stakeout and go out for some steak instead.\nIn light of this monetary issue, M will need to decide on a tradeoff between cost and thoroughness. A hired agent can successfully keep an eye on all buildings in his range simultaneously, but it might not be sufficient to have each building only be watched by a single agent, in case they're taken out. As such, M would like to ask himself Q (1 \u2264 Q \u2264 10) questions, with the i-th one asking \"What's the minimum cost to hire agents such that each suspicious building is in sight of at least Ci (1 \u2264 Ci \u2264 M) of them, if this is possible at all?\". Can you help M answer each of these questions, for the sake of the MI6 fundraising department? If it's impossible to have each building covered by at least Ci agents, you should output \u22121 instead. Otherwise, the total cost (in dollars) may be quite large, so you only need to output it modulo 109 + 7.",
  "Subtasks": "\nIn test cases worth 4/35 of the points, N \u2264 10 and M \u2264 10.\nIn test cases worth another 5/35 of the points, N \u2264 100 and M \u2264 100.\nIn test cases worth another 8/35 of the points, N \u2264 2000 and M \u2264 2000.\n",
  "Output Format": "\nOutput Q lines, one integer per line. The i-th line (for i = 1..Q) should consist of the answer to the i-th query (modulo 109 + 7) or \u22121 if it's impossible.\n"
}{
  "Example": "Sample Input \ngetREKTcows\n\nSample Output\ng e t R E K T c o w s\ne\nt\nR\nE\nK\nT\nc\no\nw\ns\n",
  "Input Format": "\nThe first and only line of input consists of a single string of at most 20 uppercase/lowercase letters from A to Z.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "After 14 years of living in fearful hiding, the Head-Monkey and her band of primates have finally perfected their battle strategy to regain control of their native home of Scarberia. At last, they're ready to launch a ruthless series of attacks against the wicked cows who, under the leadership of Bo Vine, unjustly exiled the monkeys all those years ago!\nNow, the cows had really become quite content with their Scarberian lives, free to eat their feed on farmer Daniel MacDonald's farm in peace. However, they weren't about to be taken by surprise by this turn of events. As everyone knows, all cows possess a geomagnetic sixth sense, which historically guided their ancestors during migrations. One day, while Bo Vine was out chewing his cud, his particularly potent sixth sense picked up on something rather peculiar. Detecting a disturbance in the electromagnetic field surrounding the Sacred Farm, Bo Vine swiftly realized that the monkeys' long overdue counterattack was imminent! As fast as he could, he rushed back to the barn, where the lethargic farmer had been nibbling a stalk of wheat. Standing before him, Bo Vine let out a thunderous bellow which could be heard throughout the entire countryside \u2013 \"Dang, Daniel! The monkeys are back at it again with the bright plans!\"\nJust what is the monkeys' bright plan? Well for starters, they know that the imminent war will be fought in 2016. Preparing to be belligerents of the 21st century, they concluded that the only true way of declaring war is by trash-talking their enemies on the Internet. A recent trend on many online forums is known as vertical posting, where the poster writes a message vertically and horizontally, joined by the first letter. For example, the word BRAVO can be vertically-posted as follows:\nB R A V O\nR\nA\nV\nO\n\nNote that, to account for the difference in dimensions of most computer fonts, a single space must be added between adjacent horizontal letters.\nThis method of spamming is a very effective in provoking rage amongst members of a community. As such, the monkeys plan on vertically posting nasty messages over the cows' social networks! The problem is, it takes lots of time and effort to manually create such hateful (yet beautiful) works of art in a text editor. To speed up this process, the Head-Monkey has designated you to write a program to automatically generate the vertical posting from any desired message.",
  "Output Format": "\nOutput the resulting vertical posting, preserving the case of every letter in the input. Your output must match the format of the sample output exactly!\n",
  "Title": "WC15 Finals - Vertical Posting"
}{
  "Example": "Sample Input \n23\nBefore we engage in battle, each cow soldier may choose to have spam, ham or eggs. Good luck and that will be all.\n\nSample Output 1\nBefore we engage in battle, each cow soldier may choose to have spam, ham, or eggs. Good luck and that will be all.\n\nSample Input 2\n22\nTo my parents, Bessie And Buttercup. They taught me that the breakfast of a healthy cow consists of coffee, grass and toast.\n\nSample Output 2\nTo my parents, Bessie And Buttercup. They taught me that the breakfast of a healthy cow consists of coffee, grass, and toast.\n",
  "Input Format": "\nThe first line of input consists of a single integer representing the number of words in the battle plan.\nThe second line of input contains the battle plan itself, in the format described above. The battle plan will be at most 1000 characters in length.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Knowing that the monkeys are back to take over Scarberia, Bo Vine and Old MacDonald determined that it was time to plan their defense strategy. Bo, a master tactician, knows that the best defense is a good offense. He has thus contracted the services of his good friends, the oxen, who are some of the most hardened mercenaries the world has ever seen. Bo Vine instructed the oxen to report back at once with a battle plan, consisting of a sequence of sentences. Each sentence consists of a sequence of words terminated by a single period (\".\"). A word is a string of non-whitespace characters (lowercase/uppercase letters from A to Z, as well as digits from 0 to 9). Words are case sensitive, so for example, \"ox\" and \"OX\" are not considered the same word. Adjacent words in any given sentence are separated by a single space. Every word in a sentence except for the last is optionally followed by a comma, which comes before the adjoining space before the next word. Every sentence ends with a period, and every sentence except for the last one is followed by a single space to separate it from the following sentence.\nAfter slaving away through the night, the oxen were able to produce a thick stack of papers containing their battle plan, which they laid out in front of the cow lord. However, upon reading it over, Bo Vine was less than impressed by its grammar. \"You call yourselves oxen? No ox of mine neglects to follow The Oxford Style Guide. Look at all of these missing Oxford commas! Just imagine if our enemies got a hold of this. They'd mock us and question your status as true oxen!\"\nIn English language punctuation, the Oxford comma refers to the comma placed immediately before the coordinating conjunction (usually the words and or or) in a list. For example, a list of cattle breeds may be written \"Jersey, Holstein and Angus\" (without the Oxford comma) or \"Jersey, Holstein, and Angus\" (with the Oxford comma). While controversial, there are many benefits of the Oxford comma, such as resolving ambiguity. For example, Bo Vine may write his dedication of the battle plan as \"To my parents, Bessie and Buttercup\" or as \"To my parents, Bessie, and Buttercup\". The former phrase implies that he considers Bessie and Buttercup to be parental figures, while the latter phrase implies that Bessie and Buttercup are simply two other individuals to whom he's choosing to dedicate the work. For the purposes of this problem, we will always choose to follow the latter interpretation.\nA list is a substring of a sentence with three or more entries in one of the following two forms:\n[entry], \u2026, [entry](,) and [entry]\nor\n[entry], \u2026, [entry](,) or [entry]\nwhere each [entry] is a single word and (,) means that the second-to-last entry on the list may or may not be immediately followed by the Oxford comma. Every other entry in the list must be directly followed by a comma, except for the last entry, which may be directly followed by a comma, period, or space. For each sentence, it is guaranteed that either there is exactly one instance of the word and (but no instances of or), exactly one instance of the word or (but no instances of and), or no instances of either word. Your task is: given the battle plan produced by Bo Vine's ox mercenaries, insert the Oxford comma into each list which is missing one. Everything else should be left the same.",
  "Output Format": "Output a single line, the same battle plan but with an Oxford comma added to every list which doesn't already have one, in accordance with the specifications above.",
  "Title": "WC15 Finals - The Oxford Comma"
}{
  "Example": "Sample Input \n16 3\nook\nfizz\nook\n\nSample Output 1\n2\n\nSample Input 2\n16 3\nook\nbuzz\nfizzbuzz\n\nSample Output 2\n0\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nM lines follow, with the i-th of these lines consisting of a single word that is either \"ook\", \"fizz\", \"buzz\", or \"fizzbuzz\" (for i = 1..M).\n",
  "Memory Limit": "32M",
  "Time Limit": "3.00s",
  "Description": "After 14 years of living in fearful hiding, the Head-Monkey and her band of primates have finally perfected their battle strategy to regain control of their native home of Scarberia. At last, they're ready to launch a ruthless series of attacks against the wicked cows who, under the leadership of Bo Vine, unjustly exiled the monkeys all those years ago!\nNow, the cows had really become quite content with their Scarberian lives, free to eat their feed on farmer Daniel MacDonald's farm in peace. However, they weren't about to be taken by surprise by this turn of events. As everyone knows, all cows possess a geomagnetic sixth sense, which historically guided their ancestors during migrations. One day, while Bo Vine was out chewing his cud, his particularly potent sixth sense picked up on something rather peculiar. Detecting a disturbance in the electromagnetic field surrounding the Sacred Farm, Bo Vine swiftly realized that the monkeys' long overdue counterattack was imminent! As fast as he could, he rushed back to the barn, where the lethargic farmer had been nibbling a stalk of wheat. Standing before him, Bo Vine let out a thunderous bellow which could be heard throughout the entire countryside \u2013 \"Dang, Daniel! The monkeys are back at it again with the bright plans!\"\nHowever bright these plans are, the Head-Monkey knows that victory will require a great deal of money to purchase supplies and ammunition. Alas, the monkeys have been in hiding for so many years that they were never able to find jobs and make money. To make up for this financial deficit, the Head-Monkey has decided to run a business on the side. Unfortunately, the monkeys do not possess many belongings that are in demand by the market... except for one \u2013 monkey fur is one of the most luxurious and prized materials in the fashion industry! The smooth, silky locks of any monkey's fur are in high demand by the world's finest coat designers and couturiers. In a stroke of genius, the Head-Monkey ordered all of her subordinates to shave off the fuzz on their bodies and donate it to the business. Before long, sales seemed to be booming \u2013 and yet, there were still some problems.\nMonkeys aren't particularly renowned for their arithmetic. As sales grew, accounting errors were slipping through the cracks, resulting in unnecessary losses to their income. To practice their division skills, the Head-Monkey proposed that her accountants play the classic game of FizzBuzz. In FizzBuzz, players sit around in a circle and take turns counting incrementally, replacing any number divisible by three with the word \"fizz\", and any number divisible by five with the word \"buzz\". Numbers divisible by both three and five are replaced with \"fizzbuzz\". The game ends once a player misspeaks or once they hit N (1 \u2264 N \u2264 109). For example, a perfect game of FizzBuzz where N = 16 would sound like this:\n1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz, 16\nMonkeys aren't particularly renowned for their articulateness. When the game gets long, no monkey is a fan of saying \"\u2026, five thousand seven hundred and ninety two, fizz, five thousand seven hundred and ninety four, buzz, \u2026\". Thus, the Head-Monkey invented her own variation of the game \u2013 FizzBuzzOok \u2013 which is streamlined for primates. The rules of FizzBuzzOok are almost identical to FizzBuzz, except that whenever a number is supposed to be said in FizzBuzz, the player should instead say \"ook\". As such, a perfect game of FizzBuzzOok where N = 16 would sound like this:\nook, ook, fizz, ook, buzz, fizz, ook, ook, fizz, buzz, ook, fizz, ook, ook, fizzbuzz, ook\nMonkeys aren't particularly renowned for their memory. Sometimes, games of FizzBuzzOok would have to be paused as the monkeys went on banana breaks. When they returned, they would quickly lose track of where they had stopped! However, they would be able to remember what their desired goal of N was, along with what may have been said in the past M (1 \u2264 M \u2264 105; M \u2264 N) turns. For example, the monkeys may remember that they were going for a game of N = 16 turns and vaguely recall the last M = 3 turns had been \"ook, fizz, ook\". In this case, there are two possible positions at which they could have paused \u2013 after either turn 4 or 13.\nGiven a sequence of words representing the past M turns, your task is to determine the number of possible positions at which the accountants could have paused, within a perfect game of N turns. Their recollection of what was said in the past M turns could very well be faulty, in which case the given sequence may not be a contiguous subsequence of the N turns of the game. In that case, you should report 0 as the number of possible positions.\nIn test cases worth 3/9 of the points, N \u2264 1000 and M \u2264 1000.",
  "Output Format": "Output a single integer \u2013 the number of possible positions that the game could have been paused at, or 0 if the given sequence of turns will never occur in a game of FizzBuzzOok up to N.",
  "Title": "WC15 Finals - Fuzzbiz"
}{
  "Example": "Sample Input \n2 1 0\n1\n1000000000\n999999999\n\nSample Output 2\n-1\n",
  "Input Format": "\nThe first line of input consists of three space-separated integers N, M, and K.\nN lines follow, with the i-th of these lines consisting of a single integer Ci (for i = 1..N).\nM lines follow, with the i-th of these lines consisting of a single integer Ti (for i = 1..M).\n",
  "Memory Limit": "64M",
  "Sample Explanation 1": "The following is one optimal sequence of events:\n1st minute: The 4th cow drinks from trough 2 and the 2nd cow drinks from trough 4.\n2nd minute: The 3rd cow drinks from trough 2.\n3rd minute: The 1st cow drinks from trough 2.",
  "Time Limit": "4.00s",
  "Description": "The monkeys have made a booming business out of selling their fur, and their newfound cash flow has been directed towards purchasing all kinds of dangerous weapons to be used against the cows. While the cows have sensed the general fact that the monkeys are about to strike, they are puzzled by how their enemies could be acquiring the necessary funds. Watching shipments of nondescript boxes move in and out of the monkeys' lair has put the entirety of Old MacDonald's farm on edge. To address the frustrating turn of events, Bo Vine has decided to send an elite group of N (1 \u2264 N \u2264 106) cow spies on an important mission. This group of highly trained agents are to infiltrate the Sacred Tree, gathering intelligence about the monkeys' source of income and other vile plans! There's just one problem... he's noticed that the cows are all rather thirsty. Needing to ask for water during this assignment could very well blow their cover, so Bo Vine needs to ensure that they all get a drink before heading out! Fortunately, there are M (1 \u2264 M \u2264 106) water troughs available in the barn.\nThe i-th cow is Ci (1 \u2264 Ci \u2264 109) centimetres tall, while the i-th trough is Ti (1 \u2264 Ti \u2264 109) centimetres high. Each cow is willing to drink from a trough if it's no taller than them, and no more than K (0 \u2264 K \u2264 109) centimetres shorter than them \u2013 in other words, cow i can drink from trough j if Ci \u2212 K \u2264 Tj \u2264 Ci.\nEach cow will need to drink from a trough of their choice for exactly 1 minute. The cows certainly like their privacy, so during each minute, each trough can be used by at most one cow. With not much time left until the start of their mission, Bo Vine needs your help to determine the minimum amount of time required for all of them to get a drink, if it's even possible!\nIn test cases worth 7/14 of the points, N \u2264 100 and M \u2264 100.",
  "Output Format": "\nOutput a single integer \u2013 the minimum number of minutes required for all of the cows to drink from a trough, or \u22121 if it's impossible.\n",
  "Title": "WC15 Finals - Hydration"
}{
  "Example": "Sample Input \n2\nR 1\nR 10\n\nSample Output 2\n2\n13\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nThe next N lines each consist of a character and integer Di and Pi, separated by a space, for i = 1..N.\n",
  "Memory Limit": "32M",
  "Sample Explanation 1": "The third and final time that Tiny completes the course, one optimal sequence of actions that he can take is as follows:\nDrive East\nDrive South\nFire a missile (hitting target 2)\nDrive East\nDrive South\nFire a missile (hitting target 3)\nDrive East\nFire a missile (hitting target 1)",
  "Time Limit": "3.00s",
  "Description": "With intel from the Sacred Tree stolen by hydrated bovine spies, times are getting ever more desperate for the monkeys. The Head-Monkey has decided it's time to send out her own elite special agent \u2013 Agent Tiny. Tiny has been ordered to journey to Old MacDonald's farm and perform a precision strike against the cows' military headquarters. For this extremely dangerous mission, Tiny is being outfitted with a sophisticated piece of monkey technology \u2013 a fully functional car made of branches and leaves, and powered by banana juice. This car will offer him more than enough speed and maneuverability to infiltrate the barn. Also, it can shoot missiles from its front headlights.\nIn an effort to ensure that Tiny actually accomplishes something useful with his car in the field, the Head-Monkey has instructed him to take it for a spin on the monkeys' specialized driving course. The course will take place in a very large room, which can be represented as a 2D grid of cells, with some targets on the walls. The rows are numbered in increasing order from North to South (starting from 1), and similarly the columns are numbered in increasing order from West to East. Tiny will be required to drive around and fire missiles at all of the targets.\nTiny will start in the Northwestern-most cell (in the first row and first column), with his car facing South. Each second, he may either drive to an adjacent cell, or fire a missile in the direction that his car is currently facing. If he chooses to drive, he may do so in one of the four cardinal directions (North, South, East, or West) as long as he stays within the room (he can't drive North from row 1 or West from column 1), and his car will be left facing the direction in which he just drove.\nThe Head-Monkey will add N (1 \u2264 N \u2264 105) targets to the course, one after another, and make Tiny complete the current course after each one is added. Each time, Tiny will have to start in the Northwestern-most cell and hit all of the targets which have been added so far with missiles, in any order. That is, he will have to complete the course N separate times, and on his i-th run, he'll be required to hit targets 1..i.\nThe i-th target's position is described by a character Di (either \"R\" or \"C\") and an integer Pi (1 \u2264 Pi \u2264 109). If Di = \"R\", then the i-th target is at the far East end of row Pi, meaning that it can be hit by firing a missile Eastward from any cell on row Pi. Otherwise if Di = \"C\", then the i-th target is instead at the far South end of column Pi. No two targets are at the same location.\nTo help convince the Head-Monkey of Tiny's driving skills, can you help Tiny determine how quickly the course can be completed each of the N times?\n\nIn test cases worth 4/19 of the points, N \u2264 10 and Pi \u2264 10.\nIn test cases worth another 7/19 of the points, N \u2264 40 and Pi \u2264 40.\n",
  "Output Format": "\nOutput N lines, one integer per line.\nThe i-th line of output (for i = 1..N) should consist of the minimum number of seconds required to complete the course for the i-th time.\n",
  "Title": "WC15 Finals - Driving Range"
}{
  "Example": "Sample Input \n4\n840350\n341796875\n1584\n735166567\n\nSample Output\n1\n",
  "Explanation": "\nComputer 1's public key has the prime factorization 840350 = 21 \u00d7 52 \u00d7 75, so its private key is [2, 1, 5, 2, 7, 5].\nComputer 2's public key has the prime factorization 341796875 = 511 \u00d7 71, so its private key is [5, 11, 7, 1].\nComputer 3's public key has the prime factorization 1584 = 24 \u00d7 32 \u00d7 111, so its private key is [2, 4, 3, 2, 11, 1].\nComputer 4's public key has the prime factorization 735166567 = 267831 \u00d7 274491, so its private key is [26783, 1, 27449, 1].\nTherefore, both computers 1 and 3 are valid weakpoints that will be accepted.\n",
  "Memory Limit": "32M",
  "Input Format": "\nThe first line of input consists of a single integer N.\nN lines follow, with the i-th of these lines containing Ai (for i = 1..N).\n",
  "Time Limit": "0.20s",
  "Description": "The Center for Exploration of Monkey Cryptography (CEMC) is an organization dedicated to wartime cryptography research amongst the primate community. As the monkeys are once again at war with the cows, this institution has become indispensable to their success in combat. After all, taking over Scarberia in the 21st century will require some of the most sophisticated code-breaking techniques in existence to infiltrate the enemies' communications. As it turns out, the cows possess a slight technological edge over the monkeys, due to their experimentation with Cow-Bots in 2002. They were therefore able to reverse engineer the structure of the CEMC's servers!\nThe cows have learned that the server is a network consisting of N (1 \u2264 N \u2264 100,000) computers arranged in a line topology. Specifically, the computers are numbered from 1 to N, and are connected in a line in ascending order. For example, computer 1 is connected only to computer 2, computer 2 is connected only to computers 1 and 3, and computer N is connected only to computer N \u2212 1. The network is encrypted using a simple public key cryptosystem. Each computer i has a distinct public key, an integer Ai (1 \u2264 Ai \u2264 109). The private key to access computer i is a sequence of integers based on the prime factorization of Ai. Consider Ai = 1200 with the prime factorization of 24 \u00d7 31 \u00d7 52 when the prime factors are listed in ascending order. Its private key is then the sequence [2, 4, 3, 1, 5, 2].\nTypical brute force attacks rely on trying every possibility to gain access. In this case, a private key is easier to guess if it comes \"earlier\" in an exhaustive list of possible guesses. So for two different computers i and j, we will call the public key of i weaker than the public key of j if and only if the private key sequence of i is lexicographically smaller than the private key sequence of j. A sequence X is considered to be lexicographically smaller than another sequence Y if Xi < Yi for the smallest index i such that Xi differs from Yi. If every value in X is equal to the values at corresponding indices in Y and X is a shorter sequence (i.e. if X is a prefix of Y), then X is also considered lexicographically smaller than Y. For example, [2, 2, 7, 1] is lexicographically smaller than [2, 3] and [2, 3] is lexicographically smaller than [2, 3, 5, 7].\nHaving discovered the weak cryptographic scheme of the CEMC's servers, the cows now wish to assert their dominance and generate chaos amongst the monkeys by performing a distributed denial-of-service (DDOS) attack on the network to take it down.  However, they will need a weakpoint from which to initiate the attack. In particular, a weakpoint is a computer whose public key is weaker than that of every other computer that it is directly connected to. Please help the cows write a program to find a weakpoint and crash the CEMC's servers. If there are multiple such weakpoints, then any one of them will suffice.\nIn test cases worth 5/25 of the points: N \u2264 1000.",
  "Output Format": "\nOutput a single integer between 1 and N, your chosen weakpoint.\n",
  "Title": "WC15 Finals - Server Hacking"
}{
  "Example": "Sample Input \n4 5 4\n5\n4\n2\n8\n3 5\n1 100\n2 1\n5 20\n6 4\n2 2 100\n1 4 3\n1 4 4\n2 2 1\n\nSample Output\n62\n58\n33\n333\n",
  "Explanation": "\nOn the first day, the first truck will deliver 5 bananas each to pastures 2, 3, and 4. The second truck, now weighing 100 pounds, won't deliver any bananas. The third truck will deliver 1 banana to each of those 3 pastures, the fourth will deliver 20 bananas to pastures 2 and 4, and the fifth will deliver 4 bananas to just pasture 4. The total number of bananas delivered on this day will then be 5\u00d73 + 1\u00d73 + 20\u00d72 + 4\u00d71 = 62.\n",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input consists of three space-separated integers, N, M, and D.\nN lines follow. The i-th of these lines consists of a single integer, Si (for i = 1..N).\nM lines follow. The i-th of these lines consists of two space-separated integers, Wi and Bi (for i = 1..M).\nD lines follow. The i-th of these lines consists of three space-separated integers, Ti, Xi, and Yi (for i = 1..D).\n",
  "Time Limit": "5.00s",
  "Description": "At last, the final battle for Scarberia is upon us! The cows and monkeys have agreed that the fighting will take place on a circle of N (3 \u2264 N \u2264 300,000) pastures, connected to one another in a cycle by N two-way bridges. The i-th bridge can support a weight of at most Si (1 \u2264 Si \u2264 106) pounds, and connects pastures i and i + 1 (if 1 \u2264 i < N), or pastures N and 1 (if i = N).\nThe monkeys' base of operations is located in pasture 1, and they have troops stationed in all of the other pastures. The monkeys, being masterful makers of war, are keenly aware that the most effective soldiers are well-fed soldiers. As such, they have a convoy of M (1 \u2264 M \u2264 300,000) trucks which will deliver bananas from their base daily. The i-th truck has a weight of Wi (1 \u2264 Wi \u2264 106) pounds, and every day, it will depart from pasture 1, driving around amongst the pastures and delivering Bi (1 \u2264 Bi \u2264 106) bananas to each other pasture that it can reach. Each truck can only cross bridges which can at least support its weight, and it can drive back and forth as much as necessary (even revisiting pastures multiple times), but it will only deliver a load of bananas to each pasture at most once. Therefore, each day, the i-th truck will deliver between 0 and Bi\u00d7(N \u2212 1) bananas in total.\nThe battle is scheduled to last for D (1 \u2264 D \u2264 300,000) days, and in order to manage their banana hoard successfully, the monkeys would like to determine how many bananas their trucks will deliver on each day. However, this aspect of the war promises to be particularly dynamic, as those dastardly cows are also well aware of the military importance of the supply chain and will attempt to sabotage it, while the monkeys will hopefully enact the necessary countermeasures. One event will occur at the start of each day (before the trucks roll out to make their deliveries, with the type of the event on the i-th day indicated by Ti (1 \u2264 Ti \u2264 2):\nIf Ti = 1, the cows will undermine the structural integrity of the Xi-th (1 \u2264 Xi \u2264 N) bridge, permanently reducing its maximum supported weight by Yi (1 \u2264 Yi < 106) pounds. It's guaranteed that it will still be able to support a weight of at least 1 pound.\nIf Ti = 2, the monkeys will remodel their Xi-th (1 \u2264 Xi \u2264 M) truck such that it henceforth weighs Yi (1 \u2264 Yi \u2264 106) pounds. Note that this could cause its weight to increase (thanks to cows cleverly disguised as monkey mechanics).\nThe outcome of the entire war, and the monkeys' opportunity to reclaim Scarberia once and for all, depends on this supply chain! Can you help the monkeys determine how many bananas their trucks will deliver in total on each of the D days of the battle?\n\nIn test cases worth 6/33 of the points, N \u2264 200, M \u2264 200, and D \u2264 200.\nIn test cases worth another 8/33 of the points, N \u2264 2000, M \u2264 2000, and D \u2264 2000.\nIn test cases worth another 8/33 of the points, Ti = 1.\nIn test cases worth another 8/33 of the points, Ti = 2.\n",
  "Output Format": "\nOutput D lines. The i-th line of output should consist of a single integer representing the total number of bananas delivered on the i-th day (for i = 1..D).\nNote that each of these values may not fit within a 32-bit integer.\n",
  "Title": "WC15 Finals - Supply Chain"
}{
  "Example": "Sample Input \n5\n\nSample Output\nspoooooky\n",
  "Input Format": "\nThe first and only line of input consists of a single integer S.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Late October can be a rather frightening time of year. Night begins to fall ever earlier, ancient Pagan rituals make demons stir, and at the end of the month, hordes of small creatures can even be seen roaming the streets! It's a spooky sight if there ever was one.\nBut just how spooky is this demonic festival? Its spookiness level can, in fact, be measured and represented as a single integer S (2 \u2264 S \u2264 20). However, a simple number doesn't truly do the spooky sensation justice. As such, it can also be described with the word \"spoo...oooky\", with exactly S o's.\nGiven the integer S, can you cast a spooky incantation on your computer to have it produce the corresponding spooky word?",
  "Output Format": "\nOutput a single line consisting of a single string \u2013 the spooky word corresponding to the given value of S.\n",
  "Title": "WC16 #1 - A Spooky Season"
}{
  "Example": "Sample Input \nFrankenstein.rose.from.his.slab.to.confront.the.evil.Dracula..The.vampire.swung.at.Frankenstein's.face,.but.at.the.last.moment,.Frankenstein.was.shielded.from.the.blow.by.his.ally,.the.mummy.Imhotep.\n\nSample Output\nFrankenstein's.monster.rose.from.his.slab.to.confront.the.evil.Dracula..The.vampire.swung.at.Frankenstein's.face,.but.at.the.last.moment,.Frankenstein's.monster.was.shielded.from.the.blow.by.his.ally,.the.mummy.Imhotep.\n",
  "Input Format": "\nThe first and only line of input consists of a single string representing the content of the story.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Frank is upset. \"Frankenstein is so big and scary, Frankenstein this, Frankenstein that\", he thinks to himself. \"Doesn't anyone know that Frankenstein is the name of the scientist, and who they're actually referring to is Frankenstein's monster!?\".\nHe's determined to remedy the situation once and for all. How? It's quite simple. Since everyone derives their knowledge entirely from the internet, Frank will just have to find every occurrence of the word \"Frankenstein\" on every website, and replace it with \"Frankenstein's monster\". Problem solved!\nFor starters, Frank is tackling a Universal Pictures monster fanfiction site. He's downloaded the raw text of one particular story, a string with at most 1000 characters. For convenience, every space has been replaced with a period. As such, the string contains no whitespace, and consists of only lower/uppercase letters, digits, and common punctuation.\nA \"word\" is a maximal consecutive sequence of non-period characters in the string. That is, each word is either preceded by a period or is at the start of the string. Similarly, each word is followed by a period or is at the end of the string. Frank wants to replace each instance of the word \"Frankenstein\" with the two words \"Frankenstein's\" \"monster\" (separated by a period). Frank distinguishes uppercase and lowercase letters, so he doesn't want to replace the word \"frankenstein\", for example.",
  "Output Format": "\nOutput a single line consisting of a single string representing the \"corrected\" story.\n",
  "Title": "WC16 #1 - Frankenstein's Monster"
}{
  "Example": "Sample Input \n22 4\n..#.#...##.#.....###.#\n\nSample Output\n2\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and D.\nThe second line consists of a single string representing the floor plan.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "It's Halloween night in Haddonfield, Illinois. Not exactly in the mood for trick-or-treating, Laurie Strode has instead invited her friend, Michael Myers, to join her for a friendly game of hide and seek.\nLaurie's house has a hallway with a number of rooms. The floor plan of this section of the house can be represented as a string with N (1 \u2264 N \u2264 200,000) characters, each of which is either a \".\" (representing empty space) or a \"#\" (representing a wall). A room is a maximal consecutive sequence of empty space in this floor plan. That is, each room is either preceded by a wall or is at the start of the floor plan. Similarly, each room is followed by a wall or is at the end of the floor plan. The floor plan includes at least one room.\nNo doubt you're familiar with the rules of hide and seek \u2013 Laurie is hiding in one of the rooms, and it's Michael's job to find her. When he enters a room, he can immediately determine if Laurie is hiding anywhere in it, so he could simply visit each of the rooms in the hallway and be sure to find her eventually.\nHowever, maybe he can do even better than that. Michael has a superb sense of hearing, so when he enters a room, he can also determine if Laurie is hiding in any of the rooms which are no further than D (1 \u2264 D \u2264 109) units away from that room. The distance between two rooms (in units) is equal to the minimum distance between any parts of those rooms in the floor plan (in characters). For example, if the floor plan is \".#..##..\", then the distance between the left room and the middle room is 2, the distance between the middle room and the right room is 3, and the distance between the left room and the right room is 6.\nMichael is certainly looking forward to winning this game of hide and seek, but he values efficiency. He's wondering \u2013 what's the minimum number rooms which he must enter in order to guarantee that he'll determine Laurie's location, no matter which room she's hiding in? In particular, to ensure victory, every room in the hallway must be within D units of at least one of Michael's chosen rooms.\n\nIn test cases worth 3/15 of the points, N \u2264 1000 and D = 1.\nIn test cases worth another 6/15 of the points, N \u2264 1000.\n",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the minimum number of rooms which Michael must enter to determine Laurie's location.\n",
  "Sample Explanation": "\nThere are 6 rooms in the house. If Michael enters the 3rd room from the left, he'll be able to hear if Laurie is in any of the 4 leftmost rooms. If he enters the 5th room from the left, he'll be able to hear if she's in any of the 3 rightmost rooms. Therefore, entering the 3rd and 5th rooms from the left will be sufficient. Entering the 3rd and 6th rooms from the left would also do the job.\n",
  "Title": "WC16 #1 - Hide and Seek"
}{
  "Example": "Sample Input \n7 4\n1 2 5\n1 7 2\n2 4 3\n2 5 8\n5 6 1\n7 3 10\n4\n5\n3\n7\n\nSample Output\n28\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and K.\nN \u2212 1 lines follow, with the i-th of these lines consisting of three space-separated integers Ai, Bi, and Mi (for i = 1..N \u2212 1).\nK lines follow, with the i-th of these lines consisting of a single integer Ci (for i = 1..K).\n",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "What a horrible night to have a curse! Alucard has returned to the ancient castle of his evil father, Dracula, determined to wake him from his slumber and then destroy him once and for all. However, something tells him that it won't be easy - though Dracula remains fast asleep in his coffin for now, his monstrous servants are scattered throughout the castle, armed to the teeth and hungry for blood.\nThe castle consists of N (1 \u2264 N \u2264 200,000) chambers, with N \u2212 1 passageways running between them. The i-th passageway connects distinct chambers Ai and Bi (1 \u2264 Ai, Bi \u2264 N), and has Mi (1 \u2264 Mi \u2264 5000) monsters in it. It's possible to reach any chamber from any other chamber by following a sequence of one or more passageways \u2013 in other words, the system of chambers and passageways forms a tree structure when modelled as a graph.\nDracula's resting place is in the 1st chamber, and fortunately for Alucard, he's already infiltrated the castle and also finds himself in the 1st chamber! However, he's realized that he's not quite ready to battle Dracula yet. In order to stand a chance, Alucard will surely need some holy water, stronger weapons (a whip should come in handy), a wider range of magical spells to cast, and of course an oak stake to plunge into his father's heart and finish him off permanently. In particular, Alucard will first need to gather K (1 \u2264 K < N) items. Conveniently, all of these items can be found in distinct chambers of Dracula's castle, with the i-th item in chamber Ci (2 \u2264 Ci \u2264 N).\nAlucard will need to travel around the castle through its passageways, starting from the 1st chamber, visiting all K chambers that contain his required items (in any order), and arriving back in the 1st chamber to finally wake and confront Dracula. If he chooses to travel through a passageway that contains m monsters, he'll first need to destroy them by casting a spell and using up m of his \"magic points\". That passageway will then be permanently cleared of monsters, so he'll be able to freely travel through it any number of times afterwards.\nConserving magic points for his battle with Dracula is vital, so Alucard will need to carefully plan out a route through the castle which will allow him to collect all K items while requiring him to use as few magic points as possible. Can you help him?\n\nIn test cases worth 3/20 of the points, N \u2264 1000 and K = 1.\nIn test cases worth another 7/20 of the points, N \u2264 1000.\n",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the minimum number of magic points required for Alucard to collect all K items and return to Dracula's chamber.\n",
  "Sample Explanation": "\nOne optimal route that Alucard can take, passing through all 4 chambers that contain items and then returning to the 1st chamber, is as follows:\n\n1 \u2192 7 (2 magic points)\n7 \u2192 3 (10 magic points)\n3 \u2192 7 (already cleared)\n7 \u2192 1 (already cleared)\n1 \u2192 2 (5 magic points)\n2 \u2192 4 (3 magic points)\n4 \u2192 2 (already cleared)\n2 \u2192 5 (8 magic points)\n5 \u2192 2 (already cleared)\n2 \u2192 1 (already cleared)\n\nThe total number of magic points required on this route is 2 + 10 + 5 + 3 + 8 = 28.\n",
  "Title": "WC16 #1 - Alucard's Quest"
}{
  "Example": "Sample Input \n4 2000 500\n123 4\n400 20\n100 5\n751 999\n\nSample Output\n25\n",
  "Input Format": "\nThe first line of input consists of three space-separated integers N, M, and T.\nN lines follow, with the i-th of these lines consisting of two space-separated integers Pi and Ci (for i = 1..N).\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Oh boy! It's Tricky's favourite time of year, Halloween! He can't wait to put on his awesome dinosaur costume and take a walk around his neighbourhood. Of course, what he's looking forward to the most are the loads of treats his neighbours are sure to give him!\nTricky lives at one end of a long street. There are N (1 \u2264 N \u2264 105) other houses on the street, with the i-th one being Pi (1 \u2264 Pi \u2264 109) metres away from his own house. No two houses are at the same location. If Tricky visits the i-th house and scares its residents with a fearsome dinosaur roar, he's sure to receive Ci (1 \u2264 Ci \u2264 104) treats from them. Of course, he can only visit each house at most once, though.\nTricky would love to get as many treats as possible, but one thing may stand in his way - time! He absolutely must be home no later than midnight (that's when the real monsters come out). Fortunately, he may be getting quite a head start on his trick-or-treating expedition - he'll be leaving home M (1 \u2264 M \u2264 43,200,000) milliseconds before midnight.\nDespite his elaborate costume and the potential weight of many treats, Tricky can get around pretty quickly. He can walk down the street in either direction at a rate of 1 metre per millisecond. If he decides to stop at a house along the way to collect its treats, it'll take him T (1 \u2264 T \u2264 104) milliseconds to do so before he can continue on his way.\nGiven that Tricky must be back in the safety of his house at the end of the street after no more than M milliseconds of trick-or-treating, how many treats can he possibly end up with, and what's the probability of him developing long-lasting health issues as a result of the following excessive sugar consumption? (Just kidding, he'll be just fine!)\n\nIn test cases worth 3/30 of the points, N \u2264 10 and M \u2264 2000.\nIn test cases worth another 6/30 of the points, N \u2264 500 and M \u2264 2000.\nIn test cases worth another 6/30 of the points, N \u2264 1000.\n",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the maximum number of treats that you can receive while still returning home by midnight\n",
  "Sample Explanation": "One optimal strategy is for Tricky to walk to the 2nd house, collect its treats, walk to the 3rd house, collect its treats, and then walk back home. This takes 400 + 500 + 300 + 500 + 100 = 1800 milliseconds, and yields a bounty of 20 + 5 = 25 treats. If the 4th house were 1 metre closer to Tricky's house, then he would have just enough time to walk straight to it, collect its 999 treats, and make it back home at midnight.",
  "Title": "WC16 #1 - Tricky's Treats"
}{
  "Example": "Sample Input \n3 2\n\nSample Output\n2.666667\n",
  "Input Format": "\nThe first and only line of input consists of two space-separated integers N and M.\n",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "You and your friends have had enough of this Halloween nonsense. You nabbed your fair share of candy in the past, sure, but you wouldn't be caught dead parading around in a costume now that you're in high school. That doesn't mean this dumb excuse for a holiday has to go to waste, though... No way. It's time to have some real fun.\nThere are N (2 \u2264 N \u2264 107) nice-looking houses on your street, but they won't be looking nice for long. Having borrowed your family car for the night, you'll be taking a joy ride down the street with your friends and some bathroom supplies in tow. Your plan is to take M (1 \u2264 M \u2264 2000) passes along the street, and on each pass, you'll choose a random pair of distinct houses (chosen uniformly at random from all possible pairs) to be your targets. Then, those two houses will each receive a little punishment... Bam! Toilet paper to the face!\nOnce you've TP-ed a house in this fashion, it will be thoroughly covered in the stuff. It may get chosen as a target again on future passes, but applying toilet paper multiple times will have no additional effect on it.\nThis is sure to be a sweet night, but now you're wondering just how much carnage you and your friends will inflict on your lame neighbourhood. What's the expected number of different houses which will have been TP-ed at least once by the end of Halloween?\n\nIn test cases worth 4/35 of the points, N \u2264 5 and M \u2264 5.\nIn test cases worth another 5/35 of the points, N \u2264 10 and M \u2264 10.\nIn test cases worth another 18/35 of the points, N \u2264 1000 and M \u2264 1000.\n",
  "Output Format": "\nOutput one line consisting of a single real number \u2013 the expected number of houses which will be covered in toilet paper after all M passes, with at most 10\u22125 absolute or relative error.\n",
  "Sample Explanation": "\nThere are 3 possible pairs of distinct houses \u2013 1&2, 1&3, and 2&3. Therefore, there are 9 equally-likely pairs of pairs of houses which will be TP-ed on the two passes. 3 of these result in only 2 distinct houses being covered in toilet paper (for example, 1&2 being targeted on both passes). The other 6 of them result in all 3 houses being covered. Therefore, the expected number of houses which will be covered in toilet paper is (3\u00d72 + 6\u00d73) / 9 = 8 / 3.\n",
  "Title": "WC16 #1 - TP"
}{
  "Example": "Sample Input \n5\nMereg 7 0\nWerf 15 10\nKehless 14 0\nKerek 14 0\nStex 2 3\n\nSample Output 1\nKehless\n\nSample Input 2\n1\nJacob 100 1\n\nSample Output 2\nNone\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nN lines follow, with the i-th of these lines consisting of a single string Si, followed by a space, followed by two space-separated integers Wi and Li (for i = 1..N).\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Lieutenant B'Elenne Terres is one unsatisfied Klingon. Her engineering working aboard the Starship Enterprise is all well and good, but what she really needs is a mate!\nFortunately for her, the Enterprise has happened across a Klingon colony, which has N (1 \u2264 N \u2264 100) warriors living there. The i-th warrior's name is Si (a unique string consisting of at most 20 letters), and according to a survey which Terres has conducted, they've won Wi (0 \u2264 Wi \u2264 100) battles and lost Li (0 \u2264 Li \u2264 100) battles in their lifetime. She's not too concerned about which of the warriors actually happen to be single at the time.\nAny warrior who has lost at least one battle would clearly not make a suitable mate \u2013 weakness is unacceptable. Of the warriors who have never lost any battles, the perfect mate is the one who has won the greatest number of battles. If multiple suitable warriors have won the same number of battles, then the one earliest in the list of N warriors is preferable.\nPlease help Terres determine the name of this perfect mate! Of course, it's also possible that there's no such mate, if none of the N warriors are suitable.",
  "Output Format": "\nOutput a single line consisting of a single string \u2013 either the name of the perfect mate, or \"None\" if there are no suitable mates.\n",
  "Title": "WC16 #2 - The Perfect Mate"
}{
  "Example": "Sample Input \n2 100 15\n85\n61\n\nSample Output\n2\n",
  "Explanation": "\nOne possibility is to place two holographic emitters 30 metres and 40 metres away from the mess hall. If only the first of these emitters is added, then the EHC won't be able to traverse the section of the hallway between 45 and 46 metres from the mess hall (exclusive).\n",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input consists of three space-separated integers N, M, and R.\nN lines follow, with the i-th of these lines consisting of a single integer Ei (for i = 1..N).\n",
  "Time Limit": "3.00s",
  "Description": "\"Please state the nature of the culinary emergency!\" exclaims the Enterprise's EHC (Emergency Holographic Chef), having just been activated. It seems that Lieutenant Commander Le Ferge is extremely hungry, and will need to be brought a hot meal, stat!\nThe EHC is currently in the mess hall, and will need to make his way to the bridge to save Le Ferge. The bridge is at the end of a hallway, which is M (1 \u2264 M \u2264 109) metres long. There's just one complication \u2013 being a hologram, the EHC must remain within a distance of R (1 \u2264 R \u2264 109) metres (inclusive) of a holographic emitter at all times.\nFortunately, there's a holographic emitter installed right at the entrance to the mess hall, and there are N (0 \u2264 N \u2264 200,000) other emitters located at various points along the hallway. The i-th of these emitters is Ei (1 \u2264 Ei < M) metres away from the mess hall (and thus, M \u2212 Ei metres away from the bridge). No two emitters are in the same location.\nThe existing set of N + 1 holographic emitters may not provide enough unbroken coverage for the EHC to be able to successfully walk from the mess hall to the bridge. If that's the case, some more emitters may need to be installed along the hallway, at any chosen locations.\nLe Ferge is very, very hungry, and only the EHC is qualified enough to feed him! Given that time is of the essence, what's the minimum number of additional holographic emitters which must be installed in order for every point in the hallway to be at most R metres away from at least one emitter?\n\nIn test cases worth 8/20 of the points, N \u2264 2000 and M \u2264 2000.\nIn test cases worth another 8/20 of the points, N \u2264 2000.\n",
  "Output Format": "\nOutput a single integer \u2013 the minimum number of additional emitters required.\n",
  "Title": "WC16 #2 - EHC"
}{
  "Example": "Sample Input \n3\ntrue or false\n\nSample Output 1\ntrue\n\nSample Input 2\n3\nunknown and false\n\nSample Output 2\nfalse\n\nSample Input 3\n5\nfalse or true and unknown\n\nSample Output 3\nunknown\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nThe second line consists of N space-separated strings representing the Boolean expression.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Mr. Speck, the Vulcan chief engineer aboard the Starship Enterprise, has grown tired of his crewmates' illogical tendencies. He's found that, not only is the veracity of their statements often questionable, they sometimes even make claims which are objectively false! He'd like to ascertain the truth of some statements made by his colleagues in order to set them straight.\nMr. Speck has modeled a certain statement made by one of his crewmates as a Boolean expression, consisting of a sequence of N (3 \u2264 N \u2264 99, N is odd) strings. Starting from the first string, every other string is a Boolean literal representing the veracity of a particular claim, which is either \"true\", \"false\", or \"unknown\". Starting from the second string, every other string is a Boolean operator, either \"or\" or \"and\".\nOrder of operations applies to this expression, with \"and\" having higher precedence than \"or\". For example, the expression \"false or true and false\" evaluates to \"false or (true and false)\" = \"false or false\" = \"false\".\nMr. Speck is interested in the accuracy of the entire statement - that is, the value of the whole Boolean expression. If every Boolean literal within it was known to be either \"true\" or \"false\", then the expression could be evaluated to similarly be either \"true\" or \"false\". However, each \"unknown\" literal may independently be either \"true\" or \"false\", which may cause the expression's value to be uncertain. If the expression can either evaluate to \"true\" or \"false\" depending on the actual values of its \"unknown\" literals, then the expression's value is considered to also be \"unknown\".\nPlease help Mr. Speck determine the value of the Boolean expression, so that he may reprimand his crewmate accordingly!\n\nIn test cases worth 3/15 of the points, all of the operators will be \"or\".\nIn test cases worth another 3/15 of the points, all of the operators will be \"and\".\nIn test cases worth another 3/15 of the points, none of the Boolean literals will be \"unknown\".\n",
  "Output Format": "\nOutput a single line consisting of a single string representing the result of the Boolean expression.\n",
  "Title": "WC16 #2 - Most Illogical"
}{
  "Example": "Sample Input \n3 2\n200 0 123\n0 42 122\n5 200 99\n\nSample Output 2\n2\n",
  "Explanation 1": "One optimal set of shirts is as follows (with each one notated as (r, g, b)):\n(200, 0, 200)\n(0, 42, 99)\n(123, 122, 5)\n\nOf these, only the last one is red. Unfortunately, it's impossible for none of the shirts to be red.",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and Q.\nThe next line consists of N space-separated integers R1..N.\nThe next line consists of N space-separated integers G1..N.\nThe next line consists of N space-separated integers B1..N.\n",
  "Time Limit": "3.00s",
  "Description": "During its travels, the Starship Enterprise has come across a rather curious planet which appears to be contain vast deposits of kironide, a rare and valuable mineral. Captain Kerk has ordered N (1 \u2264 N \u2264 200,000) of his crewmembers to go on an away mission to the planet's surface in order to confirm the sensors' readings. If all goes well, they'll be able to locate the kironide and collect some samples\u2026 before anything on the planet collects them as samples.\nEach of the N crewmembers will need to be outfitted with a shirt, of course. It's standard Starfleet procedure for shirts to be manufactured on demand, with the use of a shirt replicator. The replicator is fed three Colour Component Chips (CCCs) \u2013 a red, green, and blue one \u2013 which determine the colour of the resulting shirt. Each CCC, in addition to corresponding to a particular colour component (either red, green, or blue), is encoded with an integral value between 0 and 255, inclusive. Kerk has N red CCCs with values R1..N at his disposal. He similarly has N green CCCs with values G1..N, and N blue CCCs with values B1..N.\nKerk may feed the CCCs into the shirt replicator in any combinations he'd like to in order to create N shirts, as long as the replicator is always given CCCs corresponding to all three different colour components at a time, and each of the 3N CCCs is only used once.\nA shirt is considered \"red\" if its red CCC's value is strictly larger than its other two CCCs' values. In other words, if a shirt was produced using red, green, and blue CCCs with values r, g, and b, then it's red if both r > g and r > b.\nUnfortunate accidents have a way of happening to crewmembers wearing red shirts, so producing as few red shirts as possible would be beneficial. However, a strange anomaly has recently struck the Enterprise, which may be having unusual psychological effects on its crew, based on the value of Q (1 \u2264 Q \u2264 2). If Q = 1, then Kerk has remained resilient and is determined to arrange his CCCs such that as few as possible of the N shirts are red. Otherwise, if Q = 2, then Kerk's psychological state has been compromised, and he'll instead maximize the number of red shirts produced!\nIn either case, please help estimate the number of \"accidents\" which might occur on the away mission by determining how many of the crewmembers will end up wearing red shirts.\n\nIn test cases worth 4/20 of the points, N \u2264 2000 and Bi = 0 for i = 1..N (and in exactly 50% of these, Q = 1).\nIn test cases worth another 8/20 of the points, N \u2264 2000 (and in exactly 50% of these, Q = 1).\nIn exactly 50% of the remaining test cases, Q = 1.\n",
  "Output Format": "\nOutput a single integer \u2013 either the minimum possible number of red shirts that must be made if Q = 1, or the maximum possible number that can be made if Q = 2.\n",
  "Explanation 2": "One optimal set of shirts is as follows:\n(200, 0, 99)\n(0, 42, 200)\n(123, 122, 5)\n",
  "Title": "WC16 #2 - Away Mission"
}{
  "Example": "Sample Input \n2 3 3\nDDUU\nU\n2\n1\n2\n1\n6\n4\n\nSample Output\n0 1\n-1 2\n-1 1\n",
  "Explanation": "\nThe turbolift will receive 6 button presses in total, with the following results:\n\nButton | Floor\n--------------\n   U   |   1\n   D   |   0\n   D   |  -1\n   U   |   0\n   U   |   1\n   U   |   2\n",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input consists of three space-separated integers N, M, and Q.\nN lines follow, the i-th of which consists of a single string Bi (for i = 1..N).\nM lines follow, the i-th of which consists of a single integer Si (for i = 1..M).\nQ lines follow, the i-th of which consists of a single integer Pi (for i = 1..Q).\n",
  "Time Limit": "4.00s",
  "Description": "Lieutenant commander Scetty has been assigned quite the tedious task - testing a turbolift. Hardly a job worthy of the Enterprise's chief engineer! This particular turbolift has just 2 buttons \u2013 one to take the turbolift up 1 floor, and another to take it down 1 floor.\nOne \"button press\" is an action consisting of, well, pressing one of the buttons. It can be represented as a single character, either \"U\" if the up button is pressed, or \"D\" if the down button is pressed.\nOne \"button sequence\" is an ordered sequence of one or more button presses. The turbolift has the ability to perform N (1 \u2264 N \u2264 200,000) different types of button sequences, numbered from 1 to N, with the i-th one represented by the string Bi. The j-th character in this string represents the j-th button press in the sequence. The strings B1..N are not necessarily distinct, and the sum of their lengths is at most 200,000.\nThe turbolift will start on floor 0 of the Enterprise. Due to recent technological advances, the ship has infinitely many floors above floor 0 (numbered upwards from 1), and infinitely many basement floors below it (numbered downwards from \u22121). As part of the testing process, it will then be programmed to execute M (1 \u2264 M \u2264 200,000) button sequences, one after another. The i-th button sequence in this sequence of sequences will be button sequence is Si (1 \u2264 Si \u2264 N). Note that some button sequences could be executed multiple times during the testing, while others could not be executed at all.\nThroughout the process, Scetty will make notes about how low and high the turbolift ends up getting. In particular, he has Q (1 \u2264 Q \u2264 200,000) questions to answer. The i-th one asks: \"After the first Pi button presses, what are the minimum and maximum floor numbers that the turbolift will have reached up to that point?\". Pi is a positive integer no greater than the total number of button presses which will be executed throughout the sequence of M button sequences. Note that both Pi and the answers may not fit within a 32-bit integer.\nIn test cases worth 12/27 of the points, N \u2264 3000, M \u2264 3000, and no single button sequence consists of more than 3000 button presses.",
  "Output Format": "\nOutput Q lines, the i-th of which should consist of two space-separated integers \u2013 the lowest and highest floors that the turbolift will reach after no more than Pi button presses (for i = 1..Q).\n",
  "Title": "WC16 #2 - Turbolift Testing"
}{
  "Example": "Sample Input \n4\n64 100 35 55\n100 200 10 40\n111 190 39 69\n12 120 38 38\n\nSample Output\n3\n",
  "Explanation": "\nThe first, second, and fourth humanoids will all be satisfied if the temperature is set to 100 and the gravity is set to 38. Any other configuration results in at most two humanoids being satisfied.\n",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input consists of a single integer N.\nN lines follow, the i-th of which consists of four space-separated integers Ai, Bi, Ci, and Di (for i = 1..N).\n",
  "Time Limit": "3.00s",
  "Description": "Having run low on dilithium, the Enterprise has stopped at an isolated space station to refuel. The station is inhabited by N (1 \u2264 N \u2264 200,000) humanoids of various races. Unfortunately, it seems that their differences have been creating an increasingly heated conflict. In particular, there are constant debates over the station's artificial environmental settings! Some species prefer a warmer environment than others, or one with a stronger gravitational force. Though this might seem like a trivial matter, the frequent changing back and forth of the environmental settings appears to pose a serious threat to the state of tentative peace aboard the station, with threats of violent conflict in the air.\nAs a neutral third party, it'll be up to the crew of the Enterprise to step in and make a fair decision. The Enterprise's ambassador, Neelex, has been entrusted with selecting environmental settings in a neutral fashion, with the space station's residents agreeing to abide by his decision. However, if he makes a poor decision, there could still be serious trouble!\nTwo aspects of the space station's environmental settings may be set \u2013 its temperature (in degrees Celsius) and its gravity (in m/s2). Each of these values may be set to any positive integer. The i-th humanoid aboard the station would like the temperature to be anywhere between Ai and Bi (1 \u2264 Ai \u2264 Bi \u2264 109), inclusive, and the gravity to be anywhere between Ci and Di (1 \u2264 Ci \u2264 Di \u2264 109), inclusive. They'll only be content if both the temperature and the gravity lie within their requested ranges (they don't care if only one of their requests is satisfied).\nNeelex may not be able to choose a set of environmental settings to leave everyone happy, but he'd like to get as close to that as possible, in order to minimize the chance of a dispute. What's the maximum number of humanoids that can be satisfied by any possible choice of temperature and gravity settings?\n\nIn test cases worth 4/38 of the points, Bi \u2264 200, Di \u2264 200, and N \u2264 200.\nIn test cases worth another 6/38 of the points, N \u2264 200.\nIn test cases worth another 10/38 of the points, N \u2264 2000.\n",
  "Output Format": "\nOutput a single integer \u2013 the maximum number of humanoids that can be simultaneously satisfied.\n",
  "Title": "WC16 #2 - Diplomacy"
}{
  "Example": "Sample Input \n20 5 5 2 5\n5\n6\n11\n17\n19\n\nSample Output\n91\n",
  "Input Format": "\nThe first line of input consists of five space-separated integers N, M, A, B, and S.\nM lines follow, with the i-th of these lines consisting of a single integer, Ti (for i = 1..M).\n",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "You've been hooked on the latest game in the Pok\u00e9mon series, Pok\u00e9mon Navy Green, and have finally reached the final challenge! In the original game, this challenge would've been the Elite 4, a series of 4 dangerous Pok\u00e9mon trainers to defeat in a row. By now, it's been generalized to be the Elite N (1 \u2264 N \u2264 109). Its N members are numbered from 1 to N in the order in which they must be defeated.\nYou've brought just two Pok\u00e9mon with you to get the job done, Aeroxis and Brinoble \u2013 you've trained both to be incredibly powerful, so they're all you'll need. You initially have Aeroxis as your active Pok\u00e9mon, with Brinoble stored away in a backup Pokeball. Before each of the N battles (including the first one), you may choose to swap your Pok\u00e9mon, changing which of the two is active. Doing so takes S (1 \u2264 S \u2264 109) seconds. You'll then use your currently active Pok\u00e9mon to battle against the next of the N trainers. It takes Aeroxis A (1 \u2264 A \u2264 109) seconds to defeat a trainer, and it takes Brinoble B (1 \u2264 B \u2264 109) seconds to do the same. Note that you may not swap Pok\u00e9mon during a battle.\nSome members of the Elite N will be using different types of Pok\u00e9mon, however. In particular, M (1 \u2264 M \u2264 1000) of the trainers will be using cloud-type Pok\u00e9mon, which Brinoble is extremely weak against \u2013 as such, you absolutely must use Aeroxis to battle each of them. The i-th of these M cloud-type Pok\u00e9mon trainers is trainer number Ti of the Elite N. The numbers T1..M are distinct, and are given in increasing order (1 \u2264 T1 < T2 < \u2026 < TM \u2264 N).\nGiven that you optimally choose when to swap Pok\u00e9mon, what's the minimum total amount of time required to defeat all N members of the Elite N in order?\n\n\nIn test cases worth 15/20 of the points, N \u2264 105.",
  "Output Format": "\nOutput a single line consisting of a single integer \u2013 the minimum total amount of time required to defeat the Elite N, in seconds.\nNote that the answer may not necessarily fit within a 32-bit signed integer (you may need the long long type in C++, or long in Java).\n",
  "Sample Explanation": "One optimal strategy is as follows:\nSwap to Brinboble before the 1st battle (5 seconds).\nUse Brinboble for battles 1..4 (8 seconds).\nSwap to Aeroxis (5 seconds).\nUse Aeroxis for batles 5..6 (10 seconds).\nSwap to Brinboble (5 seconds).\nUse Brinboble for battles 7..10 (8 seconds).\nSwap to Aeroxis (5 seconds)\nUse Aeroxis for battle 11 (5 seconds).\nSwap to Brinboble (5 seconds).\nUse Brinboble for battles 12..16 (10 seconds).\nSwap to Aeroxis (5 seconds).\nUse Aeroxis for battles 17..20 (20 seconds).",
  "Title": "WC16 #3 - The Elite N"
}{
  "Example": "Sample Input \n3\n3\n1\n2\n\nSample Output\n1\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nN lines follow, with the i-th of these lines consisting of a single integer Si (for i = 1..N).\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Pok\u00e9marts are stores which are always stocked with useful items to help Pok\u00e9mon trainers on their journeys. However, keeping Pok\u00e9marts sufficiently stocked is at least as difficult as catching Pok\u00e9mon!\nYou've been placed in charging of planning out an upcoming shipment of N (1 \u2264 N \u2264 105) items. The items are numbered from 1 to N, and are currently arranged in a single stack in an initial warehouse I such that the i-th item from the top is item number Si (1 \u2264 Si \u2264 N). Your job is to ensure that they get transported to a certain destination warehouse D, and end up arranged in a single stack such that the i-th item from the top is item number i.\nUnfortunately, items are only allowed to be moved in a particular fashion. The only type of operation which may be performed consists of taking a single item from the top of one warehouse's stack, and moving it to the top of another warehouse's stack. Items may never be moved away from warehouse D, and may never be moved back to warehouse I, as this would make it look like progress was not being made. Furthermore, each warehouse is only large enough to contain a single stack, and no stacks may be formed outside of warehouses. As such, in order to make the shipment possible to complete, you may ask for 0 or more intermediate warehouses to first be constructed.\nOf course, constructing entire warehouses is expensive, so you'd like to avoid doing so. As such, you'd like to determine the minimum number of intermediate warehouses which must be constructed, such that the shipment may then be completed successfully.",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the minimum number of intermediate warehouses required to complete the shipment.\n",
  "Sample Explanation": "With one intermediate warehouse W, the following sequence of actions may be performed:\nMove item 3 from warehouse I to D.\nMove item 1 from warehouse I to W.\nMove item 2 from warehouse I to D.\nMove item 1 from warehouse W to D.",
  "Title": "WC16 #3 - Pok\u00e9warehouses"
}{
  "Example": "Sample Input \n2 5 4\n\nSample Output 2\n-1\n",
  "Input Format": "The first and only line of input consists of three space-separated integers N, M, and K.",
  "Sample Explanation 2": "Even if trees are placed in all 8 valid cells, the player will still be able to move from the top-left to the bottom-right cell after cutting down 4 of them.",
  "Memory Limit": "16M",
  "Sample Explanation 1": "One optimal arrangement of trees is shown below (trees are indicated with \"#\", while empty cells are indicated with \".\"):\n.###.\n.###.\n\nIf the players cut down any 2 of these 6 trees, they still won't be able to move from the top-left to the bottom-right cell.",
  "Time Limit": "1.00s",
  "Description": "You've landed a job as one of the level designers for the latest game in the Pok\u00e9mon series, Pok\u00e9mon Navy Green! You've always hated those nerdy Pok\u00e9mon fans, always having fun with their childish Pok\u00e9mon nonsense, so this is your chance to get back at them.\nOne of the screens in the game is a grid of cells with N rows and M columns (2 \u2264 N, M \u2264 2,000,000,000). The player will start in the top-left cell, with the goal of reaching the bottom-right cell by repeatedly moving up, down, left, or right.\nAs a level designer, you may decide that some subset of the cells in the grid should contain trees. The top-left and bottom-right cells may not contain trees, but any of the others are fair game. The player may not move into a cell which contains a tree. However, they do have the ability to teach a move called Cut to one of their Pok\u00e9mon. Each time Cut is used, a single tree can be destroyed, allowing the player to move into its cell. However, Cut may only be used at most K (0 \u2264 K \u2264 2,000,000,000) times in total.\nYou love the idea of frustrating the player with a subtly impossible level, but don't want to make your treachery too obvious, for fear of losing your job before the game gets released. As such, you'd like to determine the minimum number of trees that must be present on the grid such that it's impossible for the player to move from the top-left cell to the bottom-right one, even after optimally using Cut at most K times. Unfortunately, it may also be the case that the level will be possible to complete no matter how many trees you place on the grid.\nIn test cases worth 10/12 of the points, N \u2264 106 and M \u2264 106.",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the minimum number of trees required to make the level impossible, or \u22121 if no number of trees will suffice.\nNote that the answer may not necessarily fit within a 32-bit signed integer (you may need the long long type in C++, or long in Java).\n",
  "Title": "WC16 #3 - Cutting Edge"
}{
  "Example": "Sample Input \n6 8\n14\n5\n8\n10\n2\n4\n1 4 5\n1 2 8\n4 5 12\n3 1 2\n6 3 11\n2 3 14\n5 6 4\n2 4 6\n\nSample Output\n71\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nN lines follow, with the i-th of these lines consisting of a single integer, Ti (for i = 1..N).\nM lines follow, with the i-th of these lines consisting of three space-separated integers Ai, Bi, and Ci, (for i = 1..M).\n",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "In the world of Pok\u00e9mon Navy Green, there are N (2 \u2264 N \u2264 200,000) towns, with M (0 \u2264 M \u2264 200,000) routes running amongst them. At the beginning of the game, you find yourself in town 1 with a starting Pok\u00e9mon of your choice \u2013 a cute level 1 Pyglion! Your objective is to reach town N by following a sequence of routes.\nThe i-th route connects distinct towns Ai and Bi (1 \u2264 Ai, Bi \u2264 N), and can be walked along in either direction. No pair of towns are directly connected by multiple routes. However, the routes are also crawling with dangerous Pok\u00e9mon. As such, you can only dare venture along the i-th route if your Pyglion's level is currently no smaller than Ci (1 \u2264 Ci \u2264 109).\nAs mentioned, your Pyglion's level is initially 1, but it can be increased through intensive training. Each town has its own training gym for that purpose. However, some gyms are more efficient than others \u2013 in particular, in the i-th town, it takes Ti (1 \u2264 Ti \u2264 109) minutes of training to increase your Pyglion's level by 1. This Ti\u2013minute process can be repeated as many times as you'd like.\nYou'd hate to tucker out your poor Pyglion more than necessary, so you'd like to reach town N after spending as little total time training in gyms as possible. Note that time spent walking along routes isn't relevant, and that you may revisit towns on your adventure as often as you'd like. Please determine the minimum number of minutes of training required to reach town N, or determine that you can't complete your trip no matter how much training you put your Pyglion through.\nIn test cases worth 13/18 of the points, N \u2264 500, M \u2264 500, and Ci \u2264 500.",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the minimum number of minutes of training required to reach town N, or \u20131 if it can't be done.\nNote that the answer may not necessarily fit within a 32-bit signed integer (you may need the long long type in C++, or long in Java).\n",
  "Sample Explanation": "One optimal sequence of actions is as follows:\nTrain in town 1 for 14 minutes (up to level 2).\nWalk to town 3.\nTrain in town 3 for 32 minutes (up to level 6).\nWalk to town 1.\nWalk to town 2.\nTrain in town 2 for 25 minutes (up to level 11).\nWalk to town 1.\nWalk to town 3.\nWalk to town 6.",
  "Title": "WC16 #3 - Training Regimen"
}{
  "Example": "Sample Input \n2\n2\n3\n\nSample Output\n5\nS.\n#.\n..\nE#\n8\n...\n.#E\n..#\n..S\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nN lines follow, the i-th of which consists of a single integer Ci (for i = 1..N)\n",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "Among other things, the Pok\u00e9mon series of video games is known for having interesting 2D puzzles for the player to solve. The latest installment, Pok\u00e9mon Navy Green, is no exception!\nAs one of the game's level designers, you've been given the responsibility of turning N (1 \u2264 N \u2264 50) different rooms into a series of puzzling challenges. However, rather than designing thought-provoking puzzles which would require careful solutions from the player, you'd much rather annoy them by crafting as tedious a gaming experience as possible.\nThe i-th room is a grid of cells with 4 rows and Ci (1 \u2264 Ci \u2264 100) columns. You'll designate one of the cells to be the player's starting cell, and another one to be their destination. You may then choose some subset of the remaining cells to contain walls. The player's objective will then be to navigate from the starting cell to the destination cell by moving up, down, left, and right, without entering any cells that contain walls. Mazes are passable as puzzles, right?\nSince your own objective is to make the players' lives miserable, you want to design each room in such a way that the shortest possible path from the starting cell to the destination cell is as long as possible. The distance covered by a path between two cells is the number of up/down/left/right moves that it involves. For each room, you'll need to determine the maximum possible length of such a shortest path, and come up with a room design (an arrangement of walls and starting/destination cells) which yields that optimal distance between its starting and destination cells. A room can be described as 4 strings of N characters each, with the j-th character of the i-th string representing the cell in the i-th row and the j-th column. The single starting cell should be indicated with an \"S\", the single destination cell with an \"E\", each wall with a \"#\", and each remaining empty cell with a \".\". If there exist multiple optimal room designs, any of them will do.\n\nIn test cases worth 8/35 of the points, Ci \u2264 6.\nIn test cases worth another 8/35 of the points, Ci \u2264 12.\n",
  "Output Format": "For each room, output five lines. The first of these lines should consist of a single integer \u2013 the largest possible shortest distance between the starting and destination cells.\nThe last four of these lines shall describe any valid room design which yields that optimal distance.",
  "Sample Explanation": "Note that, for both rooms, there exist other valid room designs (besides the ones shown here) which would also yield the same optimal distances of 5 and 8, and which would also be accepted.",
  "Title": "WC16 #3 - Puzzle Rooms"
}{
  "Example": "Sample Input \n6\n10\n3\n11\n10\n8\n42\n1 2\n1 3\n1 4\n5 3\n6 3\n\nSample Output\n13\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nN lines follow, the i-th of which consists of a single integer Di (for i = 1..N).\nN \u2212 1 lines follow, the i-th of which consists of two space-separated integers Ai and Bi (for i = 1..N\u22121).\n",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "In the world of Pok\u00e9mon Navy Green, there are N (2 \u2264 N \u2264 500,000) towns, with N \u2212 1 routes running amongst them. The i-th route runs between distinct towns Ai and Bi (1 \u2264 Ai, Bi \u2264 N), and can be travelled along in either direction. No pair of towns have multiple routes running directly between them, and it's possible to reach every town from every other town by following a sequence of one or more routes. The player starts the game in some initial town, with the objective of reaching some other given final town by travelling along a sequence of one or more routes, without ever retracing their path.\nEvery time you play through the game, you get to choose which ordered pair of towns will be the initial and final towns for your adventure. That means that you might get to experience a whopping N\u00d7(N \u2212 1) distinct playthroughs of Pok\u00e9mon Navy Green \u2013 what a bargain! Unfortunately, some of those playthroughs may not turn out well, though.\nEach town i has a difficulty rating Di (1 \u2264 Di \u2264 109), indicating the strength of the Pok\u00e9mon Gym Leader residing in it. It would sure be a poor gameplay experience if you were to visit a town with a smaller difficulty rating than that of the previous town you visited. As such, it's vital that the sequence of difficulty ratings of the towns you visit on the path from the initial to the final town (including both the initial and final town) is non-decreasing.\nDespite this limitation, it seems that this game may still have plenty of replay value. Just how many times can you play through the game such that each playthrough features a distinct ordered pair of initial and final towns, while also resulting in you visiting towns with a non-decreasing sequence of difficulty ratings?\n\nIn test cases worth 8/35 of the points, N \u2264 2000 and Di \u2264 2.\nIn test cases worth another 14/35 of the points, Di \u2264 2.\n",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the number of distinct valid playthroughs.\nNote that the answer may not necessarily fit within a 32-bit signed integer (you may need the long long type in C++, or long in Java).\n",
  "Sample Explanation": "One of the 13 valid playthroughs has initial town 4 and final town 6. The sequence of towns involved in this playthrough is [4, 1, 3, 6], which have the non-decreasing sequence of difficulty ratings [10, 10, 11, 42].",
  "Title": "WC16 #3 - Replay Value"
}{
  "Example": "Sample Input \n5\n3 2\n2 1 1 2 2\n\nSample Output\n4\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nThe second line consists of two space-separated integers O1 and O2.\nThe third line consists of N space-separated integers P1, \u2026, PN.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\n\"I don't have to cower in a herd anymore. Instead, I can be an astronaut!\"\n\"I don't have to be a lonely hunter anymore. Today I can hunt for tax exemptions; I'm gonna be an actuary!\"\n\"And I can make the world a better place, I am going to be\u2026 a police officer!\"\n\nIn an ever more progressive and open-minded society, Zootopia's slogan \"Anyone can be Anything\" is becoming a reality at last. Its animal inhabitants are no longer strictly bound to traditional professions based on their species, and are instead free to pursue any careers that they please.\nThere are 2 different categories of jobs in Zootopia, with jobs which have typically been performed by predators falling into category 1, and jobs traditionally associated with prey falling into category 2. There are also N (1 \u2264 N \u2264 15) young animals who are preparing to join the workforce. Each animal will get assigned to one of the job categories. However, their assignment will no longer be dictated by their species \u2013 instead, the i-th animal will apply for their preferred job category Pi (1 \u2264 Pi \u2264 2), and will have a fair shot of getting a spot in it, with the help of the city's strict anti-discrimination hiring laws.\nUnfortunately, however, even the overcoming of deep-rooted social prejudices doesn't mean that everyone can end up happy. For example, even if everybody wants to become an astronaut, society can realistically only continue running smoothly if the majority of its members contribute in more practical roles, regardless of their wishes. To that end, the i-th job category has Oi (0 \u2264 Oi \u2264 N) openings, indicating that exactly Oi new animals must be assigned to it. The total number of openings O1 + O2 is equal to the number of animals N, meaning that once every animal has been assigned to a job category, both categories' openings should be exactly filled.\nPerhaps everyone can't be anything, but at least some animals can be allowed to live out their dreams. Once all N animals have been assigned to job categories in some valid fashion, what's the maximum number of animals which can end up having been assigned to their preferred job category?",
  "Output Format": "\nOutput a single line consisting of a single integer \u2013 the maximum number of animals who can be assigned to their preferred job category.\n",
  "Sample Explanation": "\nOne optimal arrangement is to assign the first and last animals to the 2nd job category, and the remaining 3 animals to the 1st job category.\nIn this situation, all of the animals will be assigned to their preferred job category besides the 4th animal, who will get stuck with job category 1 instead of 2.\n",
  "Title": "WC16 #4 - Anyone Can Be Anything"
}{
  "Example": "Sample Input \n9 3 5\n34\n24\n20\n26\n23\n25\n28\n28\n29\n\nSample Output\n4\n",
  "Input Format": "\nThe first line of input consists of three space-separated integers N, S, and L.\nN lines follow, the i-th of which consists of a single integer Ti (for i = 1..N).\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\n\"Scorching sandstorm! You're dead, bunny bumpkin.\"\n\"One-thousand-foot fall! You're dead, carrot face!\"\n\"Frigid ice wall! You're dead, farm girl!\"\n\"Enormous criminal! You're dead!\"\n\nJudy Hopps is determined to earn her place onto Zootopia's Police Department as the city's first rabbit cop, but it won't be easy. In order to graduate from the policy academy, she'll need to demonstrate her skills by completing a series of N (1 \u2264 N \u2264 1000) physical challenges. The i-th challenge takes place in an environment with a temperature of Ti\u00b0 Celsius (\u221250 \u2264 Ti \u2264 50). Judy has decided to dedicate one training session to each challenge in advance to ensure that she'll then ace it in her graduation exam.\nOn every day leading up to the exam, Judy will have time for at most S (1 \u2264 S \u2264 1000) training sessions. In each session, she can choose one challenge to train for. However, there's a limit to how quickly her body is able to adapt to wildly varying temperatures. As such, the temperatures of all of the challenges which Judy trains for on any single day must differ from one another by no more than L\u00b0 (1 \u2264 L \u2264 100). In other words, for each day, the difference between the maximum and the minimum temperatures of all of the challenges chosen on that day must be no greater than L.\nJudy will only take her graduation exam once she's spent one training session on each of the N challenges, but she'd love for that to be the case as soon as possible \u2013 she needs to get out there and make the world a better place! Given that she optimally chooses which challenges to dedicate each day's training sessions to, what's the minimum number of days which she must spend training before she's sufficiently prepared?",
  "Output Format": "\nOutput a single line consisting of a single integer \u2013 the minimum number of days which Judy must spend training.\n",
  "Sample Explanation": "One optimal training schedule is as follows:\nDay 1: Challenges 1 (34\u00b0) and 9 (29\u00b0)\nDay 2: Challenges 2 (24\u00b0) and 4 (26\u00b0)\nDay 3: Challenges 3 (20\u00b0), 5 (23\u00b0), and 6 (25\u00b0)\nDay 4: Challenges 7 (28\u00b0) and 8 (28\u00b0)\nNote that the temperatures of all of the challenges which Judy trains for on any single day differ by no more than 5\u00b0.",
  "Title": "WC16 #4 - You're Dead!"
}{
  "Example": "Sample Input \n5\n10 4 16\n14 7 13\n20 11 8\n23 11 10\n24 10 10\n\nSample Output\n1.060660172\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nN lines follow, the i-th of which consists of three space-separated integers Ti, Xi, and Yi (for i = 1..N).\n",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "\n\"Parking duty? You probably forgot, but I was top of my class at the academy.\"\n\"Well then, writing one hundred tickets a day should be easy.\"\n\"A hundred tickets\u2026 I'm not gonna write a hundred tickets. I'm gonna write two hundred tickets! Before noon!\"\n\nJudy Hopps is not pleased about being assigned to parking duty on her first day as an officer of the Zootopia Police Department, but she's still going to give the task her all in order to prove herself.\nThere are N (1 \u2264 N \u2264 200,000) parking meters within Judy's assigned area. Representing the area as a Cartesian plane, the i-th meter is located at coordinates (Xi, Yi) (\u20131,000,000 \u2264 Xi, Yi \u2264 1,000,000), and is going to expire Ti (1 \u2264 Ti \u2264 1,000,000) seconds after the start of Judy's shift. No two meters are at the same location, and the meters are given in strictly increasing order of expiration time (T1 < T2 < \u2026 < TN).\nJudy suspects that none of the parked cars' owners will arrive before their meters expire, but they may move their cars shortly afterwards. As such, if she can be at a meter's location exactly when it expires, she'll be able to write a parking ticket for it! Writing a ticket can be done instantly, so if she's got a fast enough vehicle, she could drive around to visit all N meters at the appropriate points in time, and end up writing N parking tickets. However, she's going to take it a little bit easy on her first day \u2013 her goal is to write just N \u2212 1 parking tickets, meaning that she may skip visiting any single meter of her choice.\nAt the start of the day, Judy can request a vehicle of her choice from the police department to use throughout the day. There are a variety of vehicles to choose from, with various top speeds, and Judy doesn't want to take a faster vehicle than she needs to get her job done. As such, she'd like to determine the minimum possible top speed of a vehicle which she'd need to be able to write N \u2212 1 parking tickets throughout the day. Note that she'll have time before her shift starts to drive to any initial location of her choice.\nIn test cases worth 6/14 of the points, N \u2264 1000.",
  "Output Format": "\nOutput one line consisting of a single real number, the minimum possible top speed (in units/second) which would allow Judy to write N \u2212 1 parking tickets.\nYour answer must have no more than 10\u22125 absolute or relative error.\n",
  "Sample Explanation": "\nUsing a vehicle with a top speed of \u221a18 / 4 = 1.060660172 units/second, Judy can drive from the first meter to the second one in exactly 4 seconds, allowing her to be present for each of their expiration times and write two parking tickets. She should then proceed directly to the fourth meter, and then to the fifth one, each with some time to spare. Using this strategy, she'll be able to write 4 parking tickets.\n",
  "Title": "WC16 #4 - Parking Duty"
}{
  "Example": "Sample Input \n9 9\n2 0 0 1 2 3 4 4 3\n1 4 9\n4 2 3\n2 1 4\n5 4 1\n5 6 4\n7 2 9\n3 1 2\n3 7 3\n3 9 4\n\nSample Output\n27\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nN lines follow, the i-th of which consists of a single integer Ti (for i = 1..N).\nM lines follow, the i-th of which consists of three space-separated integers Ai, Bi, and Ci (for i = 1..M).\n",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "\n\"All right, slick Nick, you're under arrest.\"\n\"Really, for what?\"\n\"Gee, I don't know. How about selling food without a permit, transporting undeclared commerce across borough lines, false advertising\u2026\"\n\"Here: Permit, receipt of declared commerce, and I did not falsely advertise anything. Take care.\"\n\"You told that mouse the pawpsicle sticks were redwood!\"\n\"That's right. Red wood. With a space in the middle. Wood that is red.\"\n\nNick Wilde has got quite the clever money-making scheme going on. Every day, he\u2026\nHeads to an ice cream parlor, purchases a \"Jumbo Pop\" popsicle (unless he can hustle someone else into purchasing it for him), and melts it down into a sugary liquid.\nTransports it to Zootopia's Tundratown district, makes paw prints in a snowy field, fills them with the popsicle liquid, places a popsicle stick in each one, and waits for the resulting \"Pawpsicles\" to solidify.\nSets up a sales booth outside a lemming bank just in time for the end of the workday, and sells his Pawpsicles to the lemmings as they leave the bank, collecting the discarded popsicle sticks.\nDelivers the popsicle sticks to a miniature construction site in Little Rodentia, passing it off as lumber.\nBy following this sequence of steps, Nick is able to pull in a handsome profit of $200 every day. And the whole operation is perfectly legal! (Well, he may be failing to record his income on his tax returns, but that's besides the point.)\nStill, time is money, so Nick's wondering if he's going about things as efficiently as possible. After all, Zootopia's a big place, so studying its map more carefully may suggest some improvements to his daily route.\nZootopia has N (1 \u2264 N \u2264 100,000) key locations, with M (0 \u2264 M \u2264 100,000) roads running amongst them. The i-th road runs between distinct locations Ai and Bi (1 \u2264 Ai, Bi \u2264 N), and can be travelled along in either direction in Ci (1 \u2264 Ci \u2264 100) minutes. No pair of locations are directly connected by multiple roads.\nFor Nick's purposes, he's classified each location i with a type Ti (0 \u2264 Ti \u2264 4). He has no interest in type-0 locations, but the other 4 location types correspond to the 4 steps of his Pawpsicle operation. Specifically, type-1 locations are ice cream parlors, type-2 locations are fields in Tundratown, type-3 locations are lemming banks, and type-4 locations are construction sites in Little Rodentia.\nNick starts each day in location 1, and needs to travel along a sequence of roads to visit a sequence of locations such that, at some point, he visits a type-1 location, then visits a type-2 location sometime later, then visits a type-3 location sometime after that, and finally visits a type-4 location sometime after that. He's considered to initially visit location 1, and on his way, he may travel through any locations as many times as he'd like.\nIn order to optimize the efficiency of his Pawpsicle operation, Nick would like to determine the minimum amount of time in which he can complete a route which visits the 4 useful types of locations in the required order. Unfortunately, it may also turn out that no such route exists, in which case Nick may need to consider making a more honest living\u2026\nIn test cases worth 10/20 of the points, N \u2264 200.",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the minimum number of minutes required for Nick to complete his Pawpsicle operation, or \u22121 if it can't be done.\n",
  "Sample Explanation": "One optimal route which Nick can take is as follows (with the 4 locations at which he'll carry out the steps of his Pawpsicle operator indicated with an asterisk \"*\"):\n\n  1 \u2192 2 \u2192 4* \u2192 2 \u2192 1* \u2192 3 \u2192 9* \u2192 3 \u2192 7*\n\nThis route will take 4 + 3 + 3 + 4 + 2 + 4 + 4 + 3 = 27 minutes to complete.",
  "Title": "WC16 #4 - Pawpsicles"
}{
  "Example": "Sample Input \n7 2\n6 8\n10 12\n12 10\n8 1\n3 5\n13 7\n5 4\n\nSample Output\n3\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and K.\nN lines follow, the i-th of which consists of two space-separated integers Pi and Ai (for i = 1..N).\n",
  "Memory Limit": "64M",
  "Time Limit": "7.00s",
  "Description": "\n\"Ugh. Timber wolves. Look at these dum-dums. Bet ya a nickel one of them's gonna howl.\"\n\"And there it is. I mean, what is it with wolves and the howling?\"\n\nJudy and Nick's search for a group of kidnapped animals has led them to the abandoned Cliffside Asylum. The building is being guarded by a pack of N (1 \u2264 N \u2264 200,000) wolves, who will all need to somehow be distracted if Judy and Nick are to sneak by and investigate the premises.\nThe wolves are all standing in a row, which can be represented as a number line. The i-th wolf is at position Pi (1 \u2264 Pi \u2264 109) on the line, and has an alpha rank of Ai (1 \u2264 Ai \u2264 109), with the pack's most respected members having the smallest ranks. All of the wolves are standing at distinct positions, and have distinct ranks.\nWolves sometimes like to howl out of the blue, and they sometimes like to howl when they hear other wolves howling. If wolf i decides to start a howl, then each wolf with a larger alpha rank standing within some howling radius R of wolf i will be obligated to join in (in other words, each wolf j such that Aj > Ai, Pj \u2265 Pi \u2212 R, and Pj \u2264 Pi + R). Each wolf j which joins the howl in this fashion may in turn cause even more wolves to start howling themselves (wolves k which have larger alpha ranks than wolf j and are standing close enough to him), and so on.\nJudy and Nick figure that they can trick any K (1 \u2264 K < N) wolves of their choice into starting to howl. They're hoping that this plan can result in all N wolves joining the howl, allowing them to sneak by. Unfortunately, they don't know how large the howling radius R is, only that it's some positive integer, so they can't predict how things will go! Still, they'd like to get an idea of how likely their plan is to work, by determining the minimum howling radius R which would be necessary to allow them to get all N wolves to join a howl initially started by some K of the wolves.\n\nIn test cases worth 12/30 of the points, N \u2264 2000.\n",
  "Output Format": "\nOutput a single integer \u2013 the minimum howling radius R necessary such that all N wolves can be made to join a howl started by K of them.\n",
  "Sample Explanation": "\nIf R = 3 and wolves 4 and 6 start a howl, all 7 wolves will end up joining it.\nOn the other hand, if R = 2, then no 2 initial wolves can be chosen such that all 7 wolves will end up howling.\n",
  "Title": "WC16 #4 - Night Howlers"
}{
  "Example": "Sample Input \n7\n1\n1\n0\n1\n1\n1\n1\n1 2\n2 3\n1 4\n5 4\n6 4\n7 4\n\nSample Output\n6\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nN lines follow, the i-th of which consists of a single integer Ci (for i = 1..N).\nN \u2212 1 lines follow, the i-th of which consists of two space-separated integers Ai and Bi (for i = 1..N \u2212 1).\n",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "\n\"Hopps, Wilde\u2026 parking duty. Dismissed.\"\n\"Just kidding! We have reports of a street racer tearing up Savannah Central. Find him. Shut him down.\"\n\nNick has ended up joining the ZPD as Zootopia's first fox cop, and as Judy's partner, no less! They've been assigned a case to track down a dangerous street racing criminal, but it won't be easy \u2013 they'll need to do some investigative work before they can begin to assemble a list of suspects.\nZootopia has N (2 \u2264 N \u2264 200) key locations, with N \u2212 1 roads running amongst them. The i-th road runs between distinct locations Ai and Bi (1 \u2264 Ai, Bi \u2264 N), and can be traveled along in either direction in 1 minute. It's possible to reach every location from every other location by following a sequence of roads.\nThe ZPD headquarters are located in location 1, and aside from that, some other locations may be of significance to the investigation. For each location i, if Ci = 1, then Judy and Nick believe that it contains a clue, and will need to go check it out. Otherwise, if Ci = 0, then the location is of no interest to them. At least one location besides location 1 is guaranteed to contain a clue.\nJudy and Nick will both start at the ZPD headquarters, and will then split up to each travel around Zootopia, inspecting all of the locations that contain clues. On the way, each of them may travel through any locations as many times as they'd like, and they may both be present in the same location at the same time. They've agreed to meet back at the headquarters once they're done. What's the minimum amount of time in which Judy and Nick can independently travel around by following sequences of roads, such that they both end up back at the ZPD headquarters, and such that every location with a clue ends up being visited by at least one of the two cops?\n\nIn test cases worth 10/36 of the points, N \u2264 15 and Ci = 1 for each i.\nIn test cases worth another 10/36 of the points, N \u2264 50 and Ci = 1 for each i.\nIn test cases worth another 8/36 of the points, Ci = 1 for each i.\n",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the minimum number of minutes required for Judy and Nick to visit all locations with clues (between the two of them) and both return to the ZPD headquarters.\n",
  "Sample Explanation": "Judy can complete the following route in 6 minutes:\n1 \u2192 2 \u2192 1 \u2192 4 \u2192 5 \u2192 4 \u2192 1\nDuring the same 6 minutes, Nick can complete the following route:\n1 \u2192 4 \u2192 6 \u2192 4 \u2192 7 \u2192 4 \u2192 1\nAll 6 locations with clues end up being visited by either Judy or Nick at least once.",
  "Title": "WC16 #4 - Hopps and Wilde on the Case"
}{
  "Example": "Sample Input \n5\n0 4 0 9 2\n5 0 9 2 2\n9 0 0 0 0\n1 4 9 0 2\n1 6 9 1 0\n\nSample Output\n4\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nN lines follow, the i-th of which consists of N space-separated integers Si, 1, \u2026, Si, N (for i = 1..N).\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Bo Vine, beloved leader of the peace-loving cows of Scarberia, has gotten wind that his land may be in danger. It seems that his long-time nemesis, the Head Monkey, may be planning to end their year-long armistice and lead her troops to invade Scarberia! To confirm this intelligence, Bo Vine will need to send in a spy to infiltrate the monkeys' ranks.\nThere are N (2 \u2264 N \u2264 100) trained cow spies, numbered from 1 to N, any of whom would surely be able to complete the mission successfully. As such, Bo Vine will have them engage in a round robin fencing tournament, with the victor earning the honour of being sent on the mission. As it turns out, the cows are quite lazy, and none of them actually want to be chosen. As such, they'll all try their best to lose (without being too obvious about it), but at the end of the day, one of them is sure to win the largest number of fencing matches and be forced to go on the mission.\nOver the course of the tournament, each of the N cows will partake in one match against each of the remaining N \u2212 1 cows. During the match between each pair of distinct cows i and j, cow i will score Si, j points, while cow j will score Sj, i points (0 \u2264 Si, j, Sj, i \u2264 10, Si, j \u2260 Sj, i). Whichever of them scores more points than the other will be declared the winner of that match. Note that there are no ties. Also note that cows don't play against themselves, so Si, i is given to be 0 for each i.\nAt the conclusion of the tournament, the cow who has won the largest number of their N \u2212 1 matches will be crowned the champion. It's guaranteed that there will be a unique cow with strictly the largest number of wins. Given the results of all of the matches, can you help Bo Vine determine the winner?",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the number of the cow who will be sent on the spy mission.\n",
  "Sample Explanation": "\nThe 5 cows won 2, 2, 1, 3, and 2 matches, respectively. As such, cow 4 won the largest number of matches.\n",
  "Title": "WC16 Finals - Fencing"
}{
  "Example": "Sample Input \n6 7\n??zz?k\nattack\ncattle\ntreats\nfarmer\nmissed\nbattle\nsleepy\n\nSample Output\n3\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nThe second line of input consists of the string W.\nM lines follow, the i-th of which consists of the string Di (for i = 1..M).\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Well, this is suspicious\u2026 after a year of living in begrudging peace after having been evicted from their homeland of Scarberia, the monkeys have just intercepted a secret message from the cows. The Head Monkey is no fool \u2013 this can only mean that her long-time nemesis, Bo Vine, is looking for trouble once again!\nThe message is a single word, a string W consisting of N (1 \u2264 N \u2264 100) lowercase letters. Knowledge of this word may give the monkeys valuable insight into the cows' military plans, but there are two problems.\nThe first problem is that the string has been encrypted! Fortunately, the Head Monkey is well aware of the naive Enigmoo encryption algorithm which Bo Vine likes to use when transmitting information. Bo Vine has surely chosen some integral shift value S (1 \u2264 S \u2264 25), and then cyclically shifted each letter in the string forward in the alphabet by S spots. For example, if S = 2, then the original message \"hey\" would get encrypted into the string \"jga\". Note that even Bo Vine wouldn't have been stupid enough to choose S = 0, as that would have resulted in the encrypted string being equal to the original one.\nThe second problem is that the message may have been damaged, rendering some of its letters unreadable. If the monkeys can't identify the i-th letter in the encrypted string, then Wi = \"?\". It's possible that all of the letters are still readable, or none of them, or anything in between.\nThe Head Monkey has dug out her comprehensive dictionary of cow words, which contains M (1 \u2264 M \u2264 100) distinct words of length N. The i-th of these words is Di, and consists of N lowercase letters. Given that the cows may have chosen any possible shift value, and that each unreadable letter in W might actually be equal to any lowercase letter, can you help the monkeys narrow their search by counting the number of different words in the dictionary which, when encrypted, might correspond to W? It's possible that the original message is actually some gibberish which doesn't match anything in the dictionary.\n\nIn test cases worth 4/13 of the points, none of the characters in W are equal to \"?\".\nIn test cases worth another 4/13 of the points, exactly one of the characters in W is equal to \"?\".\n",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the number of different words in the dictionary which the encrypted string might match.\n",
  "Sample Explanation": "\nThe original message might have been \"cattle\" \u2013 if the cows had chosen S = 6, then the encrypted string would've become \"igzzrk\", which is consistent with the message found by the monkeys.\nHowever, the original message might've also been \"battle\" (also with S = 6) or \"missed\" (with S = 7).\n",
  "Title": "WC16 Finals - Enigmoo"
}{
  "Example": "Sample Input \n7 7 4\n4\n0\n4\n2\n6\n4\n4\n\nSample Output\n34\n",
  "Input Format": "\nThe first line of input consists of three space-separated integers N, E, and B.\nN lines follow, the i-th of which consists of a single integer Mi (for i = 1..N).\n",
  "Memory Limit": "32M",
  "Time Limit": "3.00s",
  "Description": "It would seem that war is inevitable. Bo Vine's communication with his cow spy has been intercepted by the devious monkeys, confirming his suspicions that the Head Monkey is up to no good! In preparation for the impending conflict with the monkeys, Bo Vine has ordered the construction of a new, state-of-the-art Cow-Bot model from scratch.\nThe schematics call for N (1 \u2264 N \u2264 200,000) different modules to be installed, in any order. Bo Vine's cow engineers require E (1 \u2264 E \u2264 10,000) minutes to install any single module. However, the Cow-Bot (being a sophisticated, artificially intelligent piece of hardware) may also be able to help out! If at least Mi (0 \u2264 Mi \u2264 N) different modules have already been installed into the Cow-Bot up to a certain point in time, then it becomes able to install the i-th module into itself in B (1 \u2264 B \u2264 10,000) minutes. Only one module may be in the process of being installed into the Cow-Bot at any time, meaning that the engineers and Cow-Bot may not simultaneously install two different modules at once.\nPlease help the cows determine the minimum amount of time required for all N modules to be installed into the Cow-Bot.\nIn test cases worth 7/9 of the points, N \u2264 2000.",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the minimum number of minutes required for all N modules to be installed into the Cow-Bot.\n",
  "Sample Explanation": "One optimal sequence of module installations is as follows (with each step's completion time indicated):\nModule 2 by the Cow-Bot (4 minutes)\nModule 3 by the engineers (11 minutes)\nModule 7 by the engineers (18 minutes)\nModule 4 by the Cow-Bot (22 minutes)\nModule 6 by the Cow-Bot (26 minutes)\nModule 1 by the Cow-Bot (30 minutes)\nModule 5 by the Cow-Bot (34 minutes)",
  "Title": "WC16 Finals - Cow-Bot Construction"
}{
  "Example": "Sample Input \n3\n4 2 4\n\nSample Output\n10\n",
  "Input Format": "\nThe first line of input consists of a single integer N.\nThe second line of input consists of N space-separated integers F1, \u2026, FN.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The worst has come to pass, with the war between the monkeys and cows now officially in full swing. In fact, the first major battle has been scheduled for next week! As an experienced military leader, the Head Monkey is well aware of the importance of an often under-appreciated aspect of war \u2013 the nutritional well-being of the soldiers. She's taken it upon herself to personally prepare the upcoming battle's rations.\nThe Head Monkey has N (1 \u2264 N \u2264 100) different types of fruit ingredients to work with, numbered from 1 to N. Fruit type 1 corresponds to the monkeys' beloved bananas, of course, while the other fruit types are less tasty but have their own nutritional benefits. There are Fi (1 \u2264 Fi \u2264 1,000,000,000) fruits of the i-th type available.\nThe Head Monkey intends to come up with a smoothie recipe, which will call for combining a certain set of fruits together to create a single smoothie. The recipe R will dictate that exactly Ri fruits of type i must go into the smoothie, where Ri is a strictly positive integer for each i between 1 and N. It's unclear exactly what recipe she'll come up with, though \u2013 we can only hope that it will be edible, for the monkeys' sake.\nIt's also unclear how many monkeys will actually be participating in the upcoming battle, though the number of monkeys will surely be some positive integer. However, it's imperative that each of them receive a single smoothie, with all of the smoothies having been created using the same recipe as one another.\nOf course, the number of available fruits is a serious limiting factor. If there are m monkeys, and some recipe R is chosen, then m \u00d7 Ri fruits of each type i will be required in total, and this quantity cannot exceed Fi. However, there's an additional restriction \u2013 due to the high value placed on bananas, it's important that there be no leftover bananas, as they'd go to waste. Therefore, it must be the case that m \u00d7 R1 = F1.\nThe Head Monkey has lots of great recipes in mind, but she's willing to accept that some of them might not work out in terms of producing a valid set of smoothies for 1 or more monkeys. That being said, she's wondering exactly how many different possible recipes she could validly choose. This quantity may be quite large, so she's only interested in its value when taken modulo 10,007.\nAs a hint, the following properties of modular arithmetic may be useful:\n\n(A + B) mod M = ((A mod M) + (B mod M)) mod M\n(A \u00d7 B) mod M = ((A mod M) \u00d7 (B mod M)) mod M\n\n\nIn test cases worth 2/12 of the points, N \u2264 3 and Fi \u2264 100 for each i.\nIn test cases worth another 3/12 of the points, Fi \u2264 100 for each i.\nIn test cases worth another 2/12 of the points, Fi \u2264 10,000 for each i.\n",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the number of different possible recipes which might be used (modulo 10,007).\n",
  "Sample Explanation": "3 possible recipes are as follows:\nR = [4, 1, 3] (serving 1 monkey)\nR = [4, 2, 1] (serving 1 monkey)\nR = [2, 1, 2] (serving 2 monkeys)\nThere are 7 other possible recipes.",
  "Title": "WC16 Finals - Rational Recipes"
}{
  "Example": "Sample Input \n7 2\n2 0 5 0 1 3 1\n\nSample Output\n3\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and K.\nN lines follow, the i-th of which consists of a single integer Ci (for i = 1..N).\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "It's almost time to head into battle, but Bo Vine's cow soldiers insist on taking a nice long drink of water first. All N (1 \u2264 N \u2264 400) of his army's cows have lined up at a trough to drink water. However, the cows like their privacy when drinking, and the i-th cow insists that they must drink from a trough from which at most Ci (0 \u2264 Ci < N) other cows are also drinking.\nThe cows refuse to budge until they get hydrated, so to help make that possible, Bo Vine is prepared to install at most K (0 \u2264 K < N) dividers at various points along the trough, effectively dividing it into multiple troughs as far as the cows are concerned. For example, if he installs a single divider between cows i and i + 1, then cows 1..i will be considered to drink from one trough, while cows (i + 1)..N will be considered to drink from a different trough.\nIt may turn out that the cows' demands can't all be met even after the installation of K dividers. As such, Bo Vine may also need to \"encourage\" some of them to relax their requirements. Each cow is willing to increase their C value by 1 in exchange for 1 treat. Bo Vine may bribe any cow as many times as he'd like.\nWhat's the minimum total number of treats which Bo Vine must give to the cows such that, once at most K dividers are installed, each cow will be willing to drink from its trough?\n\nIn test cases worth 4/17 of the points, N \u2264 50 and K \u2264 1.\nIn test cases worth another 8/17 of the points, N \u2264 50.\n",
  "Output Format": "\nOutput one line consisting of a single integer \u2013 the minimum total number of treats required such that the cows can all be satisfied after the installation of K dividers.\n",
  "Sample Explanation": "\nOne optimal strategy is to give the second cow 2 treats to increase its C value from 0 to 2, and the fourth cow 1 treat to increase its C value from 0 to 1. Then, Bo Vine can install one divider between cows 3 and 4, and one more between cows 5 and 6, in order to yield the following valid set of troughs:\n\n  [ 2 2 5 | 1 1 | 3 1 ]\n",
  "Title": "WC16 Finals - Privacy"
}{
  "Example": "Sample Input \n10 2\n1 4\n0 0\n0 8\n0 10\n0 0\n1 0\n1 4\n1 4\n1 5\n0 7\n\nSample Output\n1 6\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and Q.\nN lines follow, the i-th of which consists of two integers Bi and Li (for i = 1..N).\n",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "Having fortunately gotten wind of the Cow-Bot's construction before meeting it in battle, the monkeys are in the process of frantically creating a virus, with the hopes of installing it into the robot and shutting it down! They've finished writing their program, which consists of N (1 \u2264 N \u2264 300,000) lines of code, but unfortunately its quality may be somewhat lacking...\nAt any point in time, each line of code either contains a bug, or doesn't. Initially, each line i contains a bug if Bi = 1, and otherwise doesn't if Bi = 0 (0 \u2264 Bi \u2264 1).\nEach minute, the monkeys can select one line of code which contains a bug, and fix that bug! Unfortunately, their code is so fragile that fixing some bugs may introduce others. If a bug is fixed on line i, then if Li = 0, there are no consequences. Otherwise, one other line Li (1 \u2264 Li \u2264 N, Li \u2260 i) will begin to have a bug (regardless of whether it already had one or not).\nIn order to efficiently proceed with making their viral code as correct as possible, the monkeys are interested in the answers to two questions. Firstly, what's the minumum possible number of lines of code which can be left containing bugs after they fix as many bugs as they'd like to? And secondly, how quickly can that minimum number of outstanding bugs be achieved? If Q = 1, then you only need to answer the first of these questions, and if Q = 2, then you must answer both.\n\nIn test cases worth 5/30 of the points, Q = 1 and N \u2264 2000.\nIn test cases worth another 4/30 of the points, Q = 1.\nIn test cases worth another 6/30 of the points, N \u2264 2000.\n",
  "Output Format": "\nIf Q = 1, then output a single integer \u2013 the minimum possible number of bugs which can remain in the code.\nOtherwise if Q = 2, then output two space-separated integers \u2013 the minimum possible number of bugs which can remain in the code, and the minimum number of minutes required to achieve that number of bugs.\n",
  "Sample Explanation": "\nOne optimal sequence of lines to debug is: 1, 6, 7, 8, 9, 5.\nAfter this sequence, the only line containing a bug will be line 4. It's impossible to eliminate all of the bugs from the monkeys' code (hopefully the same isn't true for yours\u2026).\n",
  "Title": "WC16 Finals - Bug Infestation"
}{
  "Example": "Sample Input \n3 3\n2 4 3\n1 5\n2 1 1\n3 2 1\n3 2 1\n2 1 -1\n\nSample Output\n17 29\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers N and M.\nN lines follow, the i-th of which consists of an integer Gi, followed by a space, followed by Gi space-separated integers Pi, 1, \u2026, Pi, Gi (for i = 1..N).\nM lines follow, the i-th of which consists of three space-separated integers Ai, Bi, and Di (for i = 1..M).\n",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "Angus and Bessie are the most well-known grenadiers in Bo Vine's army, and they're constantly trying to out-do one another. Even on the very eve of the war's first major battle, they've ended up in an argument! On this occasion, they're fighting over how to split up the army's supply of grenades - of course, each of them wants the most powerful grenades to themselves! In an attempt at fairness, they're going to play a game to divide up the grenades.\nThere are N (1 \u2264 N \u2264 300,000) boxes of grenades. The i-th box contains Gi (1 \u2264 Gi \u2264 300,000) grenades, with the j-th of those grenades having a \"grenade power\" of Pi, j (1 \u2264 Pi, j \u2264 10,000,000), indicating its explosive strength. There are at most 300,000 grenades in total across all of the boxes.\nAngus and Bessie will take turns performing actions, with Angus going first, until each of the grenades has been taken by one of them. All N of the boxes are initially sealed. In one turn, a cow may either unseal a sealed box, or take one grenade from an unsealed box. Both cows will make optimal actions with the goal of maximizing the total grenade power of the grenades that they'll get their hands on throughout the game (and thus minimizing the total grenade power obtained by their opponent).\nTo make things more exciting, the entire game will actually be independently re-played M (1 \u2264 M \u2264 300,000) separate times. Before the i-th time the game gets played, a single grenade will get swapped out for a slightly different one. In particular, the Bi-th grenade in the Ai-th box (1 \u2264 Ai \u2264 N, 1 \u2264 Bi \u2264 GAi) will be replaced with a new grenade whose grenade power is Di (\u22121 \u2264 Di \u2264 1) larger than that of the removed grenade. It's guaranteed that the new grenade's power will still be positive. Each such replacement will carry over to all subsequent times the game gets played, and the new grenade itself may get replaced later on.\nHelp Angus and Bessie determine the outcome of their set of games by predicting how much grenade power each of them will end up with each time they play. Rather than outputting all 2M such values (the grenade power obtained by Angus and Bessie each time they play), you only need to compute the sum of Angus's M values, as well as the sum of Bessie's M values.\n\nIn test cases worth 5/32 of the points, N = 1, M \u2264 2000, and G1 \u2264 2000.\nIn test cases worth another 4/32 of the points, N = 1.\nIn test cases worth another 6/32 of the points, N \u2264 2000, M \u2264 2000, and there are at most 2000 grenades in total.\n",
  "Output Format": "\nOutput a single line consisting of two space-separated integers \u2013 the total grenade power obtained by Angus and Bessie, respectively.\n",
  "Sample Explanation": "\nAfter the first grenade replacement, assuming both cows play optimally, Angus will end up obtaining 5 grenade power (for example, he may get 4 from the 1st grenade in the 1st box, and 1 from the 1st grenade in the 3rd box), while Bessie will obtain 10 from the remaining grenades.\nAfter the second replacement, Angus will obtain 6 while Bessie will obtain 10. After the third replacement, Angus will obtain 6 while Bessie will obtain 9. In total, then, Angus will have obtained 5 + 6 + 6 = 17 grenade power, while Bessie will have obtained 10 + 10 + 9 = 29.\n",
  "Title": "WC16 Finals - Bovine Grenadiers"
}{
  "Example": "Sample Input \nSnow\n\nSample Output\nSnow, eh\n",
  "Input Format": "\nThe first and only line of input consists of a single string, S.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Your friend Jim prides himself on doing the best impressions. On this occasion, he's showing off what Canadians sound like. Unfortunately, his idea of a Canadian accent simply consists of following words with \"eh\". Maybe that's not so inaccurate, eh?\nJim is given a single word, a non-empty string S made up of at most 10 lowercase/uppercase letters. He'll then produce his Canadian-ified version of that word, simply by appending the string \", eh\" onto the end of S.\nGiven S, help Jim determine the resulting string which he should pronounce in order to achieve the perfect Canadian accent!",
  "Output Format": "\nOutput a single string, S with a \"Canadian accent\" (that is, with \", eh\" added onto the end).\n",
  "Title": "WC17 #1 - Canadian Accent"
}{
  "Example": "Sample Input \n20\n\nSample Output\n68\n",
  "Input Format": "\nThe first and only line of input consists of a single integer, C.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\n\"Ugh, It's been so hot out lately, why does it have to be 32 degrees\u2026\"\n\"32 degrees? That's freezing!\"\n\nYou're had quite enough of confusing conversations with Americans who assume you're using Farenheit when Celsius is clearly the way to go. Rather than argue with them, you've settled for writing a program to conveniently convert temperatures measured in degrees Celsius to Farenheit instead.\nYou came across the following formula, which holds true given that F is a temperature in degrees Farenheit while C is that same temperature in degrees Celsius:\nC = 5/9 \u00d7 (F \u2212 32)\nGiven a value of C, which is an integer between \u221240 and 40 (inclusive), determine the corresponding value of F, so that you can express the equivalent temperature in degrees Farenheit for the Americans' benefit.\nIt's guaranteed that C will be chosen such that F will come out to exactly an integer, but you may output it with 0 or more digits after the decimal point.",
  "Output Format": "\nOutput a single integer, the temperature in degrees Farenheit which is equivalent to C degrees Celsius.\n",
  "Title": "WC17 #1 - How's the Weather?"
}{
  "Example": "Sample Input \n5 3\n4 1\n1 5\n1 4\n0 6\n0 2\n3 1\n\nSample Output\n2 4\n",
  "Input Format": "\nThe input consists of seven lines, the i-th of which consists of two space-separated integers, Ai and Bi (for i = 1..7).\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "This is it \u2013 the exciting finals of the Stanley Cup playoffs are about to begin! The format is a best-of-7 series, in which the first team to win 4 games will claim the Cup!\nIn each game, the team which scores more points than the other team wins (there are no ties). The series ends as soon as one team has won 4 games, and no further games are played after that point. This means that the series may last between 4 and 7 games, inclusive.\nBy collecting data on all hockey games which have ever been played, and performing some sophisticated data analysis, you've managed to predict all of the upcoming games' scores with absolute certainty. You know that, in the i-th game, Team A will score Ai points and Team B will scores Bi points (0 \u2264 Ai, Bi \u2264 10, Ai \u2260 Bi). In fact, you have these values for all 7 potential games in the series, even though the 5th, 6th, and/or 7th games may not actually get played, in which case their scores should be ignored.\nAll that's left is to place your bets on the winning team. You can rake in even more cash if you bet on the exact final game counts. As such, given your predicted scores, determine the number of games won by each of the teams when the series ends.",
  "Output Format": "\nOutput two space-separated integers, the number of games won by Teams A and B respectively when the series ends.\n",
  "Sample Explanation": "After the 6th game, Team A has won 2 games (games 1 and 2), while Team B has won the remaining 4 (games 3, 4, 5, and 6). Because Team B has just reached a total of 4 games won, the series ends. Note that the potential scores for game 7 are included in the input, but aren't considered because that game doesn't end up getting played.",
  "Title": "WC17 #1 - Stanley"
}{
  "Title": "WC17 #1 - Canuck Detection",
  "Example": "Sample Input \ncolorusedtobemyfavoriteword\n\nSample Output 1\nY\n\nSample Input 2\ntorontousedtobemytowneh\n\nSample Output 2\nN\n",
  "Input Format": "\nThe first and only line of input consists of a single string, S.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Nice, you've just landed your first software engineering internship at a popular blog site! Your first task is to collect data about which countries all of the site's bloggers live in, for further analysis.\nNow, you don't exactly have the most experience with such things, but it's important that you get it done somehow. Asking for help would make you look weak! As a first step, it shouldn't be too hard to figure out whether or not a given user is Canadian, right?\nYou've already gotten a script together to load the text from a single blog post and strip it down into a more convenient format \u2013 a non-empty string S consisting of at most 50,000 lowercase letters.\nUnfortunately, from there, your algorithm is questionable at best. You know that a characteristic of words written by Canadians is that they sometimes end in \"our\" rather an \"or\". However, due to faulty programming, your script will decide that the blogger is Canadian if their text contains at least one instance of the *subsequence* \"our\".\nA string subsequence is an ordered but possibly non-consecutive set of characters in it. For example, the string \"abac\" contains subsequences \"ab\", \"ac\", \"bc\", and \"abc\", among others. However, it does not contain the subsequence \"ca\", as an \"a\" never appears anywhere after a \"c\".\nThings aren't looking great for your internship, but might as well at least test out your approach. Given a string S, output \"Y\" if your script would determine that the blogger is Canadian, or \"N\" otherwise.",
  "Subtasks": "In test cases worth 26/32 of the points, S contains at most 50 letters.",
  "Sample Explanation": "In the first case, though the blogger doesn't seem very Canadian, the subsequence \"our\" is present at least once in S. One instance of it is indicated below:\n  col[o]r[u]sedtobemyfavoritewo[r]d\n\nIn the second case, though the blogger is clearly Canadian and S does contain the subsequence \"rou\", it does not contain the subsequence \"our\".",
  "Output Format": "\nOutput a single character, either \"Y\" if the blogger is identified as a Canadian, or \"N\" otherwise\n"
}{
  "Title": "WC17 #1 - On the Rocks",
  "Example": "Sample Input \n2 4\n205 44\n33 146 14 45\n\nSample Output\n0 2\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, N and M.\nThe next line consists of integers, A1..N.\nThe next line consists of integers, B1..M.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Two teams have just finished playing a riveting round of Canada's national sport, curling, and it's time to tally up their scores! Team A has N (0 \u2264 N \u2264 8) stones in play, with the i-th of them at a distance of Ai (0 \u2264 Ai \u2264 370) cm away from the \"button\" (the centre of the scoring ring). Meanwhile, Team B has M (0 \u2264 M \u2264 8) stones, with the i-th of them at a distance of Bi (0 \u2264 Bi \u2264 370) cm away from the button. No two stones are equidistant from the button.\nIf there are no stones in play at all, neither team will score any points. Otherwise, only the single team which owns the closest stone to the button will score points. That team will score 1 point for each of their stones which is closer to the button than all of the other team's stones are. If the other team doesn't even have any stones in play, then each of the scoring team's stones counts for a point.\nPlease help tally up the two teams' final scores! Note that at least one of these two scores must be equal to 0.",
  "Subtasks": "In test cases worth 3/13 of the points, N = 1 and M = 1.",
  "Sample Explanation": "Team B owns the closest stone to the button (their 3rd one), so they'll be the team scoring some points. In particular, their 1st and 3rd stones will count for 1 point each. On the other hand, Team B's 2nd and 4th stones won't count for any points, as they're further from the button than Team A's 2nd stone is.",
  "Output Format": "\nOutput two space-separated integers, the number of points scored by Teams A and B respectively.\n"
}{
  "Title": "WC17 #1 - Ride the Rocket",
  "Example": "Sample Input \n2 2 2 1\n3 5\n2\n2\n2\n\nSample Output 1\n11\n\nSample Input 2\n10 3 1 2\n4 2\n4\n3\n5\n4\n\nSample Output 2\n17\n",
  "Input Format": "\nThe first line of input consists of four space-separated integers, N, P, B, and C.\nThe next line consists of two space-separated integers, M and W.\nM lines follow, the i-th of which consists of a single integer, Di, for i = 1..M.\n",
  "Sample Explanation 2": "In the first case, one optimal strategy is as follows:\n\nStudent 1: Board the first bus immediately, and disembark at stop 2 (2 minutes)\nStudent 2: Wait for 2 minutes, board the second bus at time 2, and disembark at stop 2 (4 minutes)\nStudent 3: Walk to stop 2 (5 minutes)\n\nIn the second case, one optimal strategy is as follows:\n\nStudent 1: Board the first bus immediately, and disembark at stop 4 (3 minutes)\nStudent 2: Walk all the way to stop 3 (4 minutes)\nStudent 3: Board the first bus immediately, and disembark at stop 5 (4 minutes)\nStudent 4: Walk to stop 2, wait for 2 minutes, board the second bus at time 4, and disembark at stop 4 (6 minutes)\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "A certain TTC bus route involves a sequence of N (2 \u2264 N \u2264 109) bus stops, numbered from 1 to N.\nEvery P (1 \u2264 P \u2264 100) minutes, starting at time 0, a new bus will arrive at stop 1. It will wait a brief moment to allow new passengers to board and/or existing passengers to disembark, and then proceed onwards to stop 2, reaching it after another B (1 \u2264 B \u2264 100) minutes. There, it will similarly give passengers an opportunity to board/disembark, before continuing onwards and reaching stop 3 after another B minutes, and so on. In this manner, B * (N \u2212 1) minutes after any given bus starts its route, it will arrive at stop N, drop off any remaining passengers, and then go out of service. Note that a new bus drives along the route described above every P minutes, meaning that there may be multiple buses on the road at any time.\nEach bus has a maximum capacity of C (1 \u2264 C \u2264 105) passengers. If some passengers want to get off a bus while others simultaneously want to get on it, the former can happen first to make room for the new passengers. Note that buses take no extra time to pick up or drop off any number of passengers at a stop.\nAt time 0, your entire class of M (1 \u2264 M \u2264 105) students is waiting at stop 1, the i-th of whom wants to get to stop Di (2 \u2264 Di \u2264 N) as quickly as possible. At any moment, each student not currently on a bus may either wait at their current stop, walk to the next stop along the route in W (1 \u2264 W \u2264 100) minutes, or board a bus (if there's a below-capacity bus at their current stop at that moment). Meanwhile, each student currently on a bus may get off the bus if it's currently at a stop.\nEach student's \"travel time\" is the amount of time which goes by (after time 0) before they arrive at their destination stop. You're thinking it would be nice if the sum of all M students' travel times could be as small as possible. As such, you'd like to determine the minimum possible value this sum could have, assuming that all of the students work together to minimize it. Though, on second thought, getting everyone in your class to cooperate might be the more difficult part\u2026\nPlease note that the answer may not fit into a 32-bit signed integer.",
  "Subtasks": "\nIn test cases worth 4/22 of the points, N \u2264 10 and M \u2264 10.\nIn test cases worth another 11/22 of the points, N \u2264 105 and M \u2264 1000.\n",
  "Output Format": "\nOutput a single integer, the minimum possible sum of travel times for all M students to reach their desired stops.\n"
}{
  "Title": "WC17 #1 - Crosscountry Canada",
  "Example": "Sample Input \n6 10 6 3\n0 1 0 1 0 0\n1 3 3\n1 4 6\n1 4 7\n2 4 2\n2 5 4\n2 6 3\n3 4 6\n4 5 1\n4 6 6\n5 6 5\n\nSample Output 1\n14\n\nSample Input 2\n2 1 10 1\n1 1\n2 1 11\n\nSample Output 2\n-1\n",
  "Input Format": "\nThe first line of input consists of four space-separated integers, N, M, L, and T.\nThe next line consists of integers, R1..N.\nM lines follow, the i-th of which consists of three space-separated integers, Ai, Bi, and Ci, for i = 1..M.\n",
  "Sample Explanation 2": "In the first case, one optimal route is as follows:\n1 \u2192 4 (6 mins)\nStop at Tim Horton's (3 mins)\n4 \u2192 2 (2 mins)\n2 \u2192 6 (3 mins)\nIn the second case, the single road between the cities is just too long for the trip to be possible, as driving along it would result in a lack of Tim Horton's for more than 10 minutes.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "There are N (2 \u2264 N \u2264 1000) cities, with M (0 \u2264 M \u2264 10,000) roads running amongst them. The i-th road connects two different cities Ai and Bi (1 \u2264 Ai, Bi \u2264 N), and can be driven along in either direction in Ci (1 \u2264 Ci \u2264 100) minutes. There may be multiple roads running directly between any given pair of cities.\nYou're taking a roadtrip across Canada from city 1 to city N. You'd like to reach your destination in as little time as possible, by following a sequence of roads from city to city. However, as every Canadian knows, Tim Horton's pit stops are an essential part of any trip. It's vital that you stop at a Tim Horton's every L (1 \u2264 L \u2264 100) minutes or less. In particular, you must never spend strictly more than L consecutive minutes during your trip outside of Tim Hortons' establishments, not counting any time before you leave city 1 or after you arrive at city N.\nSomehow, not every city has a Tim Horton's! If Ri = 0, then the i-th city doesn't have one, and if Ri = 1, then it does (0 \u2264 Ri \u2264 1). Whenever you arrive in a city which has a Tim Horton's, you may choose to stop at it before continuing on your trip, which takes T (1 \u2264 T \u2264 100) minutes.\nWhat's the minimum amount of time required to reach city N from city 1 without ever spending more than L consecutive minutes outside of Tim Horton's establishments? If it can't be done, output -1 instead.",
  "Subtasks": "\nIn test cases worth 7/28 of the points, L = 1 and Ci = 1 (for i = 1..M).\nIn test cases worth another 10/28 of the points, Ci = 1 (for i = 1..M).\n",
  "Output Format": "\nOutput a single integer, the minimum amount of time required to validly reach city N from city 1, or -1 if it's impossible.\n"
}{
  "Title": "WC17 #1 - Change",
  "Example": "Sample Input \n7 4\n3 7 6 1\n\nSample Output 1\n2\n\nSample Input 2\n4 1\n3\n\nSample Output 2\n0\n",
  "Input Format": "\nThe first line of input consists of two space-separated integers, K and N.\nN lines follow, the i-th of which consists of a single integer, Di, for i = 1..N.\n",
  "Sample Explanation 2": "In the first case, one possibility is to give your friend the set of denominations (2, 4}. His algorithm would use a 4 coin followed by a 2 coin, and then give up.\nIn the second case, you must resort to giving your friend no denominations, as his algorithm would achieve a total of 4 if given any non-empty subset of the denominations {1, 2, 4}.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Your friend is just getting into competitive programming, and is trying to solve the classic \"change\" problem. You'll give him a target value K (1 \u2264 K \u2264 109) and some distinct coin denominations (each of which is between 1 and K, inclusive), and he'll try to determine whether or not a total of K can be produced using a set of (possibly duplicate) coins having only those denominations. The algorithm he's come up with to do so is greedy - starting from an empty set of coins, it repeatedly adds on the largest possible coin which won't cause the total to exceed K, until it either reaches a total of K, or is unable to add on any more coins and gives up.\nYou're not sure what coin denominations you'd like to give him, but there are N (0 \u2264 N \u2264 2000) distinct denominations which you definitely don't want to include. The i-th of these is Di (1 \u2264 Di \u2264 K).\nYour friend is convinced that his so algorithm is so good that he'll be able to attain a total of K no matter what denominations he's given! This is quite the bold claim. You'd like to prove him wrong by choosing a (possibly empty) set denominations such that his algorithm will fail to reach a total of K using them. Note that it doesn't matter whether or not a more correct algorithm would succeed, as long as your friend's greedy algorithm fails to achieve a total of K.\nClearly, one option would be to simply give your friend 0 denominations to use. However, that's too easy - you'd like to prove as convincingly as possible that their algorithm is sub-par. As such, you'd like to determine the maximum number of distinct denominations which you can give your friend, such that their algorithm will still fail to reach a total of K using them.",
  "Subtasks": "\nIn test cases worth 6/37 of the points, K \u2264 20.\nIn test cases worth another 20/37 of the points, K \u2264 1000.\n",
  "Output Format": "\nOutput a single integer, the maximum number of distinct denominations which you can give your friend.\n"
}{
  "Example": "Sample Input \n4\n3\n2.7\n5.12\n-0.63\nSample Output\n3.00\n2.70\n-0.63\n5.12",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nWrite a program where you are given a list of N distinct real numbers where 0 \u2264 N \u2264 100. Take the largest item of the list and print it last. All other items in the list should remain in their original order.\n",
  "Output": "Output the largest number at the end rounded to two decimal places. Do not rearrange the rest of the numbers and output them as inputted (rounded to two decimal places).",
  "Title": "BlueBook - Max is Last",
  "Input": "The first line of input will be an integer, N (0 \u2264 N \u2264 100). Next will be N real numbers."
}{
  "Example": "Sample Input \nF4 0 2 1\nJ1 90 2 2\nA4 180 1 4\nC2 270 2 3\n\nSample Output\n16\n6\n4\n3\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Blokus is an abstract strategy board game for two to four players, invented by\nBernard Tavitian and first released in 2000 by Sekko\u00efa, a French company. The ACSL\nversion of the game is played on a square board divided into 10 rows and 10 columns. Rows\nare labeled A - J and columns 1 - 10. Pieces made of square tiles are used.\nThe following pieces will be used:\nThe object of the game is to place the pieces corner-to-corner on the\n  board.  Edges cannot touch.  Tiles cannot overlap. All pieces must fit on the\n  board. A clock-wise rotation amount for all pieces of 0, 90, 180, or 270\n  degrees is allowed. In the rotation tile 1 is always the pivot tile. The 3\n  diagrams below show the rotations of piece A with tile #1 placed at location\n  B3.",
  "Output": "",
  "Title": "ACSL Blokus (Senior)",
  "Input": "A 2-character starting location in row-column order for piece A.\n    Example: C2 tells you to put tile #1 of piece A at location C2.\nA rotation amount for piece A. In the rotation tile #1 is always the\n    fixed pivot tile. Tile 1 does not change its location in any rotation.\nA tile number for piece A. Example: Since piece A is made with just 2\n    tiles, this tile number will be a 1 or a 2.\nA second tile number to be used with all 4 tiles. This is the tile\n    number that will be used to link with piece A.\nSample Input #1 tells you to go to location row F-column 4 and place tile\n  #1 of piece A rotated 0 degrees at that location. Using just tile #2 of piece\n  A, try to place all of the pieces corner-tocorner with it using tile #1 of\n  the other pieces as the link point. Shown are some examples of the pieces\n  connecting with various rotations."
}{
  "Example": "Sample Input \n1 2 8 C\n1 1 9 H\n2 4 10 H\n2 2 11 T\n2 3 6 S\nSample Output\n40 0 0 0 \n70 60 0 0 \n70 60 120 0 \n0 60 70 90 \n0 360 70 90",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Bridge is a 4-handed, 2-team card game that consists of bidding, play and scoring.\nAccurate bidding is rewarded and inaccurate bidding is penalized.\nBidding before the start of play is based upon how many of the 13 possible \"tricks\" a player thinks his team will win.\nDuring play each player lays down one card and a winner of that \"trick\" is determined by the rules of the game.\nScoring is based upon how many tricks above 6 are won by the bid winner.\nA bid of 1 says that the team will win at least 7 tricks, a bid of 2 says that the team will win at least 8 tricks and so on.\nThe bid establishes a \"line\" and only points awarded for tricks under the \"line\" count towards winning the game.\nIn addition to the bid number, a suit for trump (hearts, diamonds, spades, clubs or no trump) is specified.\nThe table below gives point values for scoring:\nIf a player bids two hearts (needs to win at least 8 tricks ) and wins 8 (2 more than the base amount of 6) tricks,\n\this team wins a game of that match and gets 60 under the line points.\nIf a player bids two clubs and wins 9 (one more than the line amount of 8) tricks,\n\this team wins a game of that match and gets 40 under the line points and 20 over the line points.\nIf a player bids 4 no trump and wins 11 ( one more than the line amount of 10) tricks,\n\this team wins a game of that match and gets 130 under the line points and 30 over the line points.\nIf a player bids two hearts ( needs 8 tricks to score points) and the team wins only 6 tricks (two undertricks),\n\tthe team loses that game of the match and is penalized by awarding over the line points to the other team.\nThe penalty differs depending upon whether the bidding team has won a game in that match or not.\nNot vulnerable means the team has not won a game in that match.  Vulnerable means the team has won a game in that match.\nThe first team to accumulate at least one hundred points below the line wins that match.  At that point both under the line scores are reset to zero. Multiple matches are played but over the line points are never reset. ",
  "Output": "",
  "Title": "ACSL Bridge (Senior)",
  "Input": ""
}{
  "Example": "Sample Input \nD\nATKQQJ\nAKQQ\nKQQJN\nA\nC\nKQN\nATTQN\nAQJ\nATKQJ\nS\nATKQJN\nTKJ\nATKQJ\nJN\nH\nAKN\nATKJN\nQN\nATQQJN\nSample Output\n23\n10\n25\n0",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Pinochle uses a deck of 48 cards that is dealt out to the players (16 cards each).\nA deck has 2 of each type of card (Ace, King, Queen, Jack, 10, 9) per suit (diamonds, clubs, spades, hearts).\nThe first step in playing the game is to count the number of points in a hand using the following rules:\nThe same card can be used in multiple cases but only once in each case.\nIf a hand has two Jacks of diamonds and two Queens of spades, those cards could be used in Case #3 and Case #10 to accumulate 38 points.\nThe only exception to the above rule is the King and Queen that are in the single book (Case #1).\nThey may not be the King & Queen in the trump marriage (Case #8).\nThe only way to have a single book and a trump marriage in the same hand is to have the Ace, King, Queen, Jack and 10 for the book,\nwhile also having another King and another Queen in trump to earn the 19 points.\nIn general, one can have multiple marriages within the same suit during the same hand - each getting the appropriate points.",
  "Output": "",
  "Title": "ACSL Pinochle (Senior)",
  "Input": ""
}{
  "Example": "Sample Input \n5F 6D 5C 5G 4C 5B ##\n4C 4F 5F 4B 4G 5G 4A ##\n3D 6D 5F 2D 7D 5G 1D ##\n6D 3D 4F 6E 7D 2D ##\nSample Output\n8\n10\n12\n1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "According to Wikipedia, Reversi (also known as Othello) is an abstract\nstrategy board game which involves play by two parties on an eight-by-eight\nsquare grid with pieces that have two distinct sides. Pieces have an X on one\nside and an O on the other side, each side representing one player. The object\nof the game is to make your pieces constitute a majority of the pieces on the\nboard at the end of the game, by flipping as many of your opponent's pieces as\npossible. At the start of every game the pieces are placed as in the figure in\nupper left.\nX goes first. X tries to (but does not have to) place a piece with the X side\nup on the board next to an O, in such a position that there exists at least one\nstraight (horizontal, vertical, or diagonal) line between the new piece and\nanother X piece, with one or more contiguous O pieces between them. In the\nfigure in the upper right, X has the options indicated by #'s if he decides to\nflip a piece.\nAfter placing the piece, X flips over all O pieces lying on a straight line\nbetween the new piece and any anchoring X pieces. All flipped pieces now show\nthe X side, and X can use them in later moves \u2014 unless O has flipped them\nback in the meantime.\nIf X decided to place the piece at location 6E, the result would be as in the\nfigure on the lower left. Now, it's O's turn to play. O can put a piece at any\nof the locations indicated with a # as shown in the figure on the lower\nright.",
  "Output": "For each line of input, print the total number of pieces that were\nflipped.",
  "Title": "ACSL Reversi (Senior)",
  "Input": "There will be 5 input lines. Each line will give the position of the pieces\nplayed (in X \u2013 O order) after the initial start pieces are placed. That is\nthe four pieces shown in the upper-left figure are on the board at the start of\neach input line. Each line will have a series of 2-character locations in\nrow-column order. The last location on each line will be ## signifying the end\nof the data."
}{
  "Example": "Sample Input \n14 5\n2 1 2 4 2 6\n3 1 1 6 4\n6 1 2 9 6 8\n8 1 1 9 12\n12 3 0 12 13 2\nSample Output 1\n5\nSample Input 2\n12 7\n1 1 1 1 5\n5 1 1 5 7\n5 0 3 5 7 9\n7 1 1 7 9\n9 1 1 9 11\n9 3 0 9 11 1\n11 1 1 11 1\nSample Output 2\n6",
  "Explanation": "The first sample case is the example discussed earlier, in which all C = 5 children can be made\nhappy. The second sample case is an example in which it is impossible to make all C = 7 children\nhappy.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The pride of the Asia-Pacific region is the newly constructed Great Circular Zoo. Situated on\na small Pacific island, it consists of a large circle of different enclosures, each containing its own\nexotic animal as illustrated below.\n\nYou are in charge of public relations for the zoo, which means it is your job to keep people as\nhappy as possible. A busload of schoolchildren has just arrived, and you are eager to please them.\nHowever, this is no easy task\u2014there are animals that some children love, and there are animals\nthat some children fear. For example, little Alex loves monkeys and koalas because they are cute,\nbut fears lions because of their sharp teeth. On the other hand, Polly loves lions because of their\nbeautiful manes, but fears koalas because they are extremely smelly.\nYou have the option of removing some animals from their enclosures, so that children are not\nafraid. However, you are worried that if you remove too many animals then this will leave the\nchildren with nothing to look at. Your task is to decide which animals to remove so that as many\nchildren can be made happy as possible.\nEach child is standing outside the circle, where they can see five consecutive enclosures. You\nhave obtained a list of which animals each child fears, and which animals each child loves. A child\nwill be made happy if either:\nAt least one animal they fear is removed from their field of vision, or:\nAt least one animal they love is not removed from their field of vision.\nFor example, consider the list of children and animals illustrated below:\n\nSuppose you remove the animals from enclosures 4 and 12. This will make Alex and Ka-Shu\nhappy, because at least one animal that they fear has gone. This will also keep Chaitanya happy,\nsince both enclosures 6 and 8 still contain animals that he loves. However, both Polly and Hwan\nwill be unhappy, since they cannot see any animals that they love but they can still see all the\nanimals that they fear. This arrangement therefore gives a total of three happy children.\nNow suppose you put these animals back into their enclosures, and remove the animals from\nenclosures 4 and 6 instead. Alex and Polly will be happy because the animals that they fear in\nenclosures 4 and 6 have gone. Chaitanya will be happy because, even though animal 6 has gone,\nhe can still see the animal in enclosure 8 which he loves. Likewise, Hwan will be happy because\nshe can now see the animal in enclosure 12, which she loves. The only person unhappy will be\nKa-Shu.\nFinally, suppose you put the animals back once more and then remove only the animal from\nenclosure 13. Ka-Shu will now be happy since one animal that he fears has been removed, and\nAlex, Polly, Chaitanya and Hwan will all be happy since they can all see at least one animal that\nthey love. Thus this arrangement gives five happy children, the largest number possible.",
  "Output": "Output must consist of a single integer, giving the largest number of children that can be made\nhappy.",
  "Title": "APIO07 #3 - Zoo",
  "Input": "The first line of input will be of the form N C, where N is\nthe number of animal enclosures (10 \u2264 N \u2264 10000) and C is the number\nof children (1 \u2264 C \u2264 50000). The enclosures are numbered 1, 2, ..., N\nclockwise around the circle.\nFollowing this will be C additional lines of input, where each line describes a\nsingle child. Each of these lines will be of the form\nE F L X1 X2 ... XF\nY1 Y2 ... YL\nwhere:\nE is the first enclosure that the child can see (1 \u2264 E \u2264\nN). In other words, the child can see enclosures E, E+1,\nE+2, E+3 and E+4. Note that numbers larger than N\nwrap back around the circle, so if N=14 and E=13, the child can see\nenclosures 13, 14, 1, 2 and 3.\nF is the number of animals that the child fears, and L is the number\nof animals that the child loves.\nEnclosures X1, ..., XF contain the animals that\nthe child fears (1 \u2264 X1, ..., XF \u2264 N).\nEnclosures Y1, ..., YL contain the animals that\nthe child loves (1 \u2264 Y1, ..., YL \u2264 N).\nNo two of the integers X1, ..., XF,\nY1, ..., YL are equal, and all of these integers\ndescribe enclosures that the child can see.\nChildren will be listed in sorted order according to the first enclosure E (so the child with\nlowest E will appear first and the child with largest E will appear last). Note that more than one\nchild may have the same first enclosure E."
}{
  "Title": "APIO08 #2 - Roads",
  "Task": "Given a description of roads in New Asia and the number of cobblestone roads that the King wants\nto keep free, write a program to determine if there is a road maintaining plan that satisfies the King's\ncriteria, and output a valid plan if there is one.",
  "Scoring": "The score for each input scenario will be 100% if the correct answer is outputed and 0% otherwise. In test scenarios worthing 20 points, K will be at most 10.",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "The Kingdom of New Asia contains N villages connected by M roads. Some roads are made of\ncobblestones, and others are made of concrete. Keeping roads free-of-charge needs a lot of money, and\nit seems impossible for the Kingdom to maintain every road. A new road maintaining plan is needed.\nThe King has decided that the Kingdom will keep as few free roads as possible, but every two\ndistinct villages must be connected by one and only one path of free roads. Also, although concrete\nroads are more suitable for modern traffic, the King thinks walking on cobblestones is interesting. As\na result, he decides that exactly K cobblestone roads will be kept free.\nFor example, suppose the villages and the roads in New Asia are as in Figure 1a. If the King wants\nto keep two cobblestone roads free, then the Kingdom can keep roads (1,2), (2,3), (3,4), and (3,5) free\nas in Figure 1b. This plan satisfies the King's criteria because (1) every two villages are connected\nvia one and only one path of free roads, (2) there are as few free roads as possible, and (3) there are\nexactly two cobblestone roads: (2,3) and (3,4).\n\nFigure 1: (a) An example configuration of villages and roads in the Kingdom of New Asia. Solid lines\ndenote concrete roads, and dashed lines denote cobblestone roads. (b) A road maintaining plan that\nkeeps two cobblestone roads free. Only free roads are shown.",
  "Output": "If there is no road maintaining plan that satisfies the King's criteria, your program should print no\nsolution on the first line of the output.\nOtherwise, your program should output a valid road maintaining plan by listing roads that will\nbe kept free, one road per line. To list a road, print the line in the input that describes it. The roads\ncan be listed in any order. If there are more than one valid plan, you can output any such plan.",
  "Example": "Sample Input \n5 7 2\n1 3 0\n4 5 1\n3 2 0\n5 3 1\n4 3 0\n1 2 1\n4 2 1\n\n(This input agrees with Figure 1a.)\nSample Output\n3 2 0\n4 3 0\n1 2 1\n5 3 1\n\n(This output agrees with Figure 1b.)",
  "Input": "The first line contains three integers separated by one space:\nN, the number of villages (1 \u2264 N \u2264 20,000)\nM, the number of roads (1 \u2264 M \u2264 100,000)\nK, the number of cobblestone roads the King wants to keep free (0 \u2264 K \u2264 N - 1)\n\nThe following M lines describes the roads in New Asia, which are numbered 1 to M.\nThe (i + 1)st line describes Road i. It contains three intergers separated by one space:\nui and vi, the two villages connected by road i. Villages are numbered 1 to N\nci, the type of road i; ci = 0 if road i is made of cobblestone, and ci = 1 if it is made of concrete.\nThere will be no more than one road connecting a pair of villages."
}{
  "Example": "Sample Input \n9 9 3\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 8 8 8 8 8 1 1 1\n1 8 8 8 8 8 1 1 1\n1 8 8 8 8 8 1 1 1\n1 1 1 1 8 8 8 1 1\n1 1 1 1 1 1 8 8 8\n1 1 1 1 1 1 9 9 9\n1 1 1 1 1 1 9 9 9\nSample Output\n208",
  "Description": "The Government of Siruseri has decided to auction off land in its oil-rich\nNavalur province to private contractors to set up oil wells. The entire area\nthat is being auctioned has been divided up into an M \u00d7\nN rectangular grid of smaller plots.\nThe Geological Survey of Siruseri has data on the estimated oil reserves\nin Navalur. This information is published as an M \u00d7\nN grid of non-negative\nintegers, giving the estimated reserves in each of the plots.\nIn order to prevent a monopoly, the government has ruled that any\ncontractor may bid for only one K \u00d7 K square block\nof contiguous plots.\nThe AoE oil cartel consists of a group of 3 colluding contractors who\nwould like to choose 3 disjoint blocks so as to maximize their total yield.\nSuppose that the estimated oil reserves are as described below:\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 8 8 8 8 8 1 1 1\n1 8 8 8 8 8 1 1 1\n1 8 8 8 8 8 1 1 1\n1 1 1 1 8 8 8 1 1\n1 1 1 1 1 1 8 8 8\n1 1 1 1 1 1 9 9 9\n1 1 1 1 1 1 9 9 9\nIf K = 2, the AoE cartel can take over plots with a combined\nestimated reserve of 100 units, whereas if K = 3 they can take over\nplots with a combined estimated reserve of 208 units.\nAoE has hired you to write a program to help them identify the maximum\nestimated oil reserves that they can take over.",
  "Memory Limit": "128M",
  "Time Limit": "3.00s",
  "Note on grading": "In 30% of the test cases, M and N will not exceed\n12.",
  "Output": "A single line with a single integer indicating the maximum estimated oil\nreserves that can be taken over by the AoE cartel.",
  "Title": "APIO09 #1 - Oil",
  "Input": "The first line of the input contains three integers M\n(M \u2264 1500), N (N \u2264 1500),\nand K (K \u2264 M,N),\nwhere M and N are the\nnumber of rows and columns in the rectangular grid of plots and K\nis the size of the square block for which bids can be made. The next\nM lines contain N non-negative integers\u2014each line\ndescribes the estimated oil reserves for one row of plots. The estimated oil\nreserve for a plot never exceeds 500, and it will always be possible to select\nat least three distinct K \u00d7 K plots."
}{
  "Example": "Sample Input \n4\n4 9\n9 11\n13 19\n10 17\nSample Output\n2\n1 3",
  "Description": "The Government of Siruseri has constructed a new Convention Centre. A\nnumber of companies have expressed an interest in renting the auditorium\nin the Convention Centre to hold their conferences.\nA client is willing to rent the auditorium only if it is granted to him\nexclusively for the entire duration of his conference. The marketing head of\nthe Convention Centre has decided that the best strategy would be to rent\nto as many clients as possible. Clearly there\nmay be more than one way to do this.\nConsider, for instance, the following example with 4 companies. The\ncompanies are listed in the order in which they made requests for the\nauditorium, with the duration of each conference indicated by the starting and\nending day.\nIn this example, it is possible to rent out the auditorium to a maximum of\ntwo companies. The choices are 1 and 3, or 2 and 3, or 1 and 4. Note that\nthe auditorium can be rented out to only one company on any day. Thus, 1\nand 2 cannot both be granted the auditorium because their requests overlap\non day 9.\nThe marketing head believes in fairness and he has decided on the following\nprocedure to choose the combination to which he will rent out the\nauditorium. A set of requests is a candidate to be chosen if it is of maximum\nsize. Observe that the companies are numbered according to the order in\nwhich they make their requests. The companies in each candidate set are\nlisted out in ascending order. Among these, the lexicographically smallest\ncandidate set is chosen.\nIn this example the auditorium will be rented out to companies 1 and\n3\u2014the three candidate sets are {(1, 3), (2, 3), (1, 4)} and\n(1, 3) < (1, 4) < (2, 3) when ordered lexicographically.\nYour task is to help the marketing head decide the set of companies to\nwhich the auditorium is to be rented.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Note on grading": "In 50% of the test cases, N \u2264 3000.",
  "Output": "The first line of the output should consist of an integer M, the\nmaximum number of companies to which the auditorium can be rented. This should\nbe followed by a line containing M integers listing the identities\nof the companies that appear in the lexicographically smallest such set.",
  "Title": "APIO09 #2 - Convention",
  "Input": "The first line contains an integer N (N \u2264 200000),\nthe number of companies\nthat have applied for renting the auditorium. Lines 2 to N+1\ncontain two integers. The integers on line i+1 are the starting and\nending dates for the request from company i. The starting day is always\nat least 1 and the ending day never exceeds 109."
}{
  "Example": "Sample Input \n8 1\n1 4\n3 2\n7 9\n5 4\n9 5\n6 7\n9 1\n11 8\nSample Output\n34.408",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Diagram": "",
  "Description": "There is a dangerous minefield somewhere in Bulgaria.\nYou have been assigned to enclose them all with a \"warning band\"\nso that future travellers are aware of the danger.\nAfter searching around with a metal detector, you have \nlocated all of the mines. Each mine is a perfectly round shape\nwith radius R at location x, y. Can you write a program\nto determine the length of the shortest band that will enclose\nall of the mines?",
  "Output": "",
  "Title": "BOI09 - Minesweeper",
  "Input": "On the first line of the standard input two integers N and R\nwill be given - the number of the mines and their radius. On the next N\nthe coordinates x and y of the center of a mine will be given.\nThe mines will overlap (in order to create a more powerful blast, for example)\nN will be between 1 and 10,000, inclusive, and x,y\nwill be between -20,000 and 20,000."
}{
  "Example": "Sample Input \n4\n2\n1\n2\n4\n3\n3\n3\n3\nSample Output\n2 1",
  "Explanation": "In the first test case the 4th box must be broken, because it contains its own key.\nThen, you can simply break the 1st box - it contains the key for box 2, which contains the key for box 3.\nIn the second case, you can just break box 3 to enter everything.",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "The programmer Pesho is a very thrifty person. The money\nwhich he earns from web-site design he stores in N\nmoney boxen (1 \u2264 N \u2264 100,000), labeled by the\nintegers from 1 to N. The intention of Pesho is to buy a new\nsuper-computer. In order to avoid the temptation to spend the \nmoney for rubbis, before the necessary sum is collected, he\ndropped all keys of the money-boxen in a random way inside \nthe boxen themselves.\nFortunately, Pesho marked on a list of paper where the key\nfor each money-box is stored. Now, the necessary money is finally\ncollected and Pesho has to open all the money-boxen to take the money.\nUnfortunately, no keys are available: Pesho must break the boxen!\nPesho doesn't like breaking things, so he'd like to break as few boxen\nas possible. He realized that when a broken money-box contains a key\nof another money-box then the second money-box could be simply unlocked.\nWrite a program to determine the minimal number of money-boxen that have\nto be broken in order to collect all the stored money.",
  "Output": "",
  "Title": "BOI09 - Boxen",
  "Input": ""
}{
  "Example": "Sample Input \n8\n3 1 4 5 6 2 3 8\n1 2 1 3 4 2 1 2\nSample Output 1\n4 5 5 -1 -1 8 8 -1\nSample Input 2\n6\n7 8 9 1 2 3\n2 2 2 2 2 2\nSample Output 2\n9 -1 -1 3 -1 -1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The frog-mutants in the metropolitan region have lost their mind.\nAfter years in the garbage, they are looking for a better life.\nThe boulevard they are living on is now fully covered with garbage bales.\nIn particular, there are N bales, labeled from left to right\nwith the numbers from 0 to N-1, with positive heights Hi (0 \u2264 i < N).\nOn each of the bales there is a frog that is very tired and can\nonly make up to Ji (0 \u2264 i < N) jumps.\nEvery jump is to the nearest bale on the right that is strictly higher\nthan the current bale. A frog that can jump over all the bales succeeds \nin leaving the city - indicated with a height of -1. Find the maximal\nheight that each frog can reach.",
  "Output": "",
  "Title": "BOI09 - Frogs",
  "Input": ""
}{
  "Example": "Sample Input \n12\nSample Output\n20102",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Consider the positive integers whose squares contain only (and all) the digits 0,4,9. Let's call them \"special\".\nFor example, 2120 is special, because 21202 = 4494400 and the square contains only (and all) of 0,4,9.\n97 is also special: 972 = 9409. 13 and 7 are not special - 132 = 169 (1 and 6 aren't allowed) and 72 = 49 (there's no 0)\nConsider the sequence of special numbers, in order:\n{70, 97, 700, 970, 997, 2120, 3148, 7000, 9700, 9970, 9997, 20102, 21200, 31480, 70000, 97000, ...}.\nWrite a program to find the Nth number in this sequence.",
  "Output": "",
  "Title": "BOI09 - Special Sequence",
  "Input": ""
}{
  "Example": "Sample Input \n3 3 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n0 0 0 3 3 2\n1 0 1 3 2 2\nSample Output\n171\n52",
  "Memory Limit": "32M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "BOI09 - Diamonds",
  "Input": "C1,1,1, C1,1,2, ..., C1,1,L,\nC1,2,1, C1,2,2, ..., C1,2,L,\n...\nC1,M,1, C1,M,2, ..., C1,M,L,\nC2,1,1, C2,1,2, ..., C2,1,L,\n...\nC2,M,1, C2,M,2, ..., C2,M,L,\n...\nCN,M,1, CN,M,2, ..., CN,M,L"
}{
  "Example": "Sample Input \n5 5\nXX.XX\nX.X.X\n.XXX.\nX.X.X\nXX.XX\nSample Output 1\nYou have to tap 5 tiles.\nSample Input 2\n5 5\n.XX.X\n.....\n..XXX\n..X.X\n..X..\nSample Output 2\nDamaged billboard.",
  "Description": "The marketing and public-relations department of the Czech Technical University has designed\na new reconfigurable mechanical Flip-Flop Bill-Board (FFBB). The billboard is a regular\ntwo-dimensional grid of R\u00a0\u00d7\u00a0C square tiles made of plastic. Each\nplastic tile is white on one side and black on the other. The idea of the billboard is that you can\ncreate various pictures by flipping individual tiles over. Such billboards will hang above all\nentrances to the university and will be used to display simple pictures and advertise upcoming\nacademic events. To change pictures, each billboard is equipped with a \"reconfiguration device\". The\ndevice is just an ordinary long wooden stick that is used to tap the tiles. If you tap a tile, it\nflips over to the other side, i.e., it changes from white to black or vice versa. Do\nyou agree this idea is very clever?\nUnfortunately, the billboard makers did not realize one thing. The tiles are very close to each\nother and their sides touch. Whenever a tile is tapped, it takes all neighboring tiles with it and\nall of them flip over together. Therefore, if you want to change the color of a tile, all neighboring\ntiles change their color too. Neighboring tiles are those that touch each other with the whole\nside. All inner tiles have 4 neighbors, which means 5 tiles are flipped over when tapped. Border\ntiles have less neighbors, of course.\n\nFor example, if you have the billboard configuration shown in the left picture above and tap the\ntile marked with the cross, you will get the picture on the right. As you can see, the billboard\nreconfiguration is not so easy under these conditions. Your task is to find the fastest way to\n\"clear\" the billboard, i.e., to flip all tiles to their white side.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Note on grading": "",
  "Output": "Print one line containing the sentence \"You have to tap T tiles.\",\nwhere T is the minimal possible number of taps needed to make all squares white. If the situation\ncannot be solved, output the string \"Damaged billboard.\" instead.",
  "Title": "Strange Billboard",
  "Input": "The input starts with two integers R and C (1\u00a0\u2264\u00a0R,C\u00a0\u2264\u00a016)\nspecifying the billboard size. Then there are R lines, each containing C characters. The\ncharacters can be either an uppercase letter \"X\" (black) or a dot \".\" (white)."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n3\n$\n7\n\nSample Output\nThe equation 3 $ 7 is equal to -40.\n\nSample Input\n4\n#\n0\n\nSample Output\nThe equation 4 # 0 is equal to 0.\n",
  "Description": "The members of team starfax learned math in an unconventional way such that they were unable to use calculators. Instead of addition, subtraction, multiplication, and division, with the numbers a and b, the equation a $ b equals a2 \u2212 b2, the equation a @ b equals (b * a) / (2a \u2212 3), and the equation a # b equals (a * b) (b \u2212 14). Due to this being so hard without calculators, the students requested you to make a program for them. Given the integers a and b (-1000 \u2264 a \u2264 b \u2264 1000), and an operand o ($, @, or #), calculate the answer to the provided question. Output the string \"The equation [a] [o] [b] is equal to [answer].\" The answer will always be an integer after calculations.",
  "Title": "StarMath",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n\u2212123\n\nSample Output\ntrue\n\nSample Input\n4021\n\nSample Output\nfalse\n",
  "Description": "Prime numbers are not the same in the alternate reality that is Croneria, as they no longer represent numbers only divisible by 1 and itself. A prime number in Croneria is a number with a faxen amount of digits, but in Croneria, a faxen number is not a number divisible by a fax. A faxen number is a number in the fibonacci sequence (0, 1, 1, 2, 3, 5, 8 \u2026). The members of team starfax mess up often when determining if a number is prime or not, so they have turned to you for a program. Given an integer a (\u2212999999 \u2264 a \u2264 999999) output true if the number is prime, and false, if it is not.",
  "Title": "FaxPrimes",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \nChemistry\n\nSample Output\nnoun\n\nSample Input\nScreaming\n\nSample Output\nnoun\nfancy noun\n\nSample Input\nabcde\n\nSample Output\nadjective\nodd adjective\n",
  "Description": "Even types of words are rather different in Croneria. A noun to them is a word that starts with a capital letter that isn't a vowel. A verb to them is a word that starts with a capital letter that is a vowel. An adjective is a word that does not start with a capital letter.\nThe way they classify words is weird too. A word is an odd adjective if it's an adjective and its third character is a consonant. A word is a fancy noun if it's a noun and its fourth character is a vowel. A word is a boring verb if it's a verb and its fifth character is either 'x', 'y', 'z', or 'q'.\n\nAs per usual, the students have turned to you for help. Given a word that is guaranteed to be at least 5 characters, output what word types the word is.",
  "Title": "Faxen Words",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n7\n1111111111\n1111991111\n1101111011\n10007q0001\n1101111011\n11110o1111\n1111111111\n\nSample Output\n1111111111\n1111001111\n1101111011\n1000000001\n1101111011\n1111001111\n1111111111\n",
  "Input Format": "\nThe first line of input consists of a single integer: the number of lines that will follow. Subsequent lines of input depict Polska.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Recently, Polska has noticed that some depictions of him are heretical. A correct depiction of him only consists of '0's and '1's.\nHelp him remove the cancer with his plunger, by replacing any non-canonical characters with '0's.",
  "Output Format": "\nOutput Polska's depiction after cancer removal.\n",
  "Title": "Remove Cancer"
}{
  "Example": "Sample Input \n3\n1\n-2\n3\n\nSample Output\n6\n",
  "Explanation": "\nKeep 1.\nChange -2 to 2.\nKeep 3.\nThus, the answer is 1 + 2 + 3 = 6.\n",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line contains the integer n (1 \u2264 n \u2264 100,000).\nThe next n lines will contain the integers ki.\n",
  "Time Limit": "2.00s",
  "Description": "Firebending is the element of power. Firebenders use their energy to create bursts of fire in order to overwhelm their opponent. As a result, they want to maximize the value of each fire blast that they shoot. In order to do so, they must revisit the art of mathematics.\nYou will be given n integers, one per line. For each of the integers, ki, you can either keep it as ki, or change it to \u2212ki. Find the maximum possible final sum of all the integers.",
  "Output Format": "The largest possible final sum of the n integers.",
  "Title": "Firebending"
}{
  "Example": "Sample Input \n5 3\n1\n1\n2\n2\n0 2\n2 4\n\nSample Output\n3\n1\n",
  "Input Format": "\nThe first line will contain the integers N and K (1 \u2264 N, K \u2264 1,000,000) separated by a space.\nThe next K lines will each contain a single integer ki (0 \u2264 ki < N) meaning to add a stone to the cup with index ki (for 0 \u2264 i < N).\nThe next line will contain the single integer Q.\nThe next Q lines will contain two space-separated integers a and b.\n",
  "Memory Limit": "16M",
  "Time Limit": "3.00s",
  "Description": "Lil' Jami is playing with a set of N cups numbered 0, 1, \u2026, N\u22121 and an infinite number of stones. Each cup initially has 0 stones in it. Since he has an infinite amount of free time, Lil' Jami plays a game where he repeatedly adds a stone to a cup. He does this k times.\nFollowing this, there will be Q queries (1 \u2264 Q \u2264 1,000,000) of the form \"a b\" (0 \u2264 a \u2264 b < N). For each query, find the sum of the stones in cups numbered a, a+1, \u2026, b\u22121, b.",
  "Output Format": "For each query, print the sum of the number of stones in each of the cups in the range [a, b], inclusive.",
  "Title": "Lil' Jami"
}{
  "Example": "Sample Input \n3 2 5\nPNNNN\nPNNNN\nNPPNP\nPNNNP\nNNNNP\nPPNNP\nSample Output\n24",
  "Memory Limit": "64M",
  "Time Limit": "6.00s",
  "Description": "A Swedish millionaire wants to build a monument for her family. The names of all of her known\nancestors (and later, her future descendants) will be inscribed to the sides of the monument. The form\nof the monument will be a rectangular block with a \u00d7 a bottom/top squares and height b. That is,\nthe bottom and top of the block will be a \u00d7 a squares, and each of the four sides of the monument is\nan a \u00d7 b rectangle. The values of a and b should be such that the four sides have as much space as\npossible, in order to fit as many names as possible.\nThe monument will be cut from a very special p \u00d7 q \u00d7 r rectangular stone block that has been crystallised\nin a regular cubic form. That is, we may view the stone as being composed of 1 \u00d7 1 \u00d7 1 unit\nblocks (unit cubes). Also the final monument will be composed of such unit cubes. The raw stone\nmay only be cut perpendicular to the x-, y- or z-axis, along the borders between unit cubes.\nThe raw stone contains pores, in the form of empty unit cubes. The monument is required to be of\nhigh quality and is thus not allowed to contain any pores (empty unit cubes). You are given a 3D-map\nof the raw stone. The map describes which unit cubes are normal and which empty. Your task is to\nfind such values for the size parameters a and b of the monument that\nit is possible to cut the monument out of the supplied raw stone block, and\nthe monument contains maximal amount of space on its four sides, that is, the value 4ab is as\nlarge as possible.",
  "Output": "The program should write one line to standard output containing the maximal value of 4ab.",
  "Title": "BOI09 - Monument",
  "Input": "The input is read from standard input. The first line contains three positive integers separated by\nsingle space characters: the values p, q and r (1 \u2264 p, q, r \u2264 150).\nThis is followed by pq lines, each of which contains\nr characters (and a new line character, no other white space). Each of the r characters is either N\n(normal) or P (pore). The zth character on line 1 + (yp + x - p) corresponds to the unit cube with\ncoordinates (x, y, z) within the raw stone, where 1 \u2264 x \u2264 p,\n1 \u2264 y \u2264 q and 1 \u2264 z \u2264 r."
}{
  "Example": "Sample Input \n2 8\n\nSample Output\n2.56\n2\n",
  "Input Format": "\nTwo space-separated integers, n and k (2 \u2264 n \u2264 100; 1 \u2264 k \u2264 500,000).\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Despite Mohan\u2019s tests being hard enough, you realized after you started that you forgot your calculator! You work out the answer to the quantum physics question to be nk. Although you don\u2019t have a calculator, you have your laptop at your disposal. You decide to write a program to solve the answer for you.\nGiven n and k, find the value of nk expressed in scientific notation.",
  "Output Format": "Print the value of nk using scientific notation. Print the significand on the first line and the exponent on the next. The significant must be rounded and displayed to 3 significant digits.",
  "Title": "Mohan's Physics Problem"
}{
  "Example": "Sample Input \n__start:__integer;____//_begins_here\nstop:_integer;_//__ends_here__\n_s:__string;___\nc:___char;_//_temp_\n\nSample Output\nstart:_integer;_//_begins_here\nstop:__integer;_//_ends___here\ns:_____string;\nc:_____char;____//_temp\n",
  "Memory Limit": "128M",
  "Time Limit": "2.00s",
  "Description": "You are working in a team that writes Incredibly Customizable Programming Codewriter (ICPC) which is basically a text editor with bells and whistles. You are working on a module that takes a piece of code containing some definitions or other tabular information and aligns each column on a fixed vertical position, while keeping the resulting code as short as possible, making sure that only whitespaces that are absolutely required stay in the code. So, that the first words on each line are printed at position p1 = 1; the second words on each line are printed at the minimal possible position p2, such that all first words end at or before position p2 - 2; the third words on each line are printed at the minimal possible position p3, such that all second words end at or before position p3 - 2, etc.",
  "Output": "Write to the output the reformatted, aligned code that consists of the same number of lines, with the same words in the same order, without trailing and leading spaces, separated by one or more spaces such that the i-th word on each line starts at the same position pi.\nThe \u201c_\u201d character in the example below denotes a space character in the actual input (ASCII code 32).",
  "Title": "NEERC10 A - Alignment of Code",
  "Input": "The input contains one or more lines of the code up to the end of file. All lines (including the last one) are terminated by a standard end-of-line sequence. Each line contains at least one word, each word is 1 to 80 characters long (inclusive). Words are separated by one or more spaces. Lines of the code can have both leading and trailing spaces. Each line in the input is at most 180 characters long. There are at most 1000 lines in the input."
}{
  "Example": "Sample Input \n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 0\n2 3 4 5 6 7 8 9 0 1\n3 4 5 6 7 8 9 0 1 2\n4 5 6 7 8 9 0 1 2 3\n5 6 7 8 9 0 1 2 3 4\n6 7 8 9 0 1 2 3 4 5\n7 8 9 0 1 2 3 4 5 6\n8 9 0 1 2 3 4 5 6 7\n9 0 1 2 3 4 5 6 7 8\n0 10\n\nSample Output\n15\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Consider a binary operation \u2299 defined on digits 0 to 9, \u2299 : {0, 1, ..., 9} \u00d7 {0, 1, ..., 9} \u2192 {0, 1, ..., 9}, such that 0 \u2299 0 = 0.\nA binary operator \u2297 is a generalization of \u2299 to the set of non-negative integers, \u2297 : . The result of a \u2297 b is defined in the following way: if one of the numbers a and b has fewer digits than the other in decimal notation, then append leading zeroes to it, so that the numbers are of the same length; then apply the operation \u2299 digit-wise to the corresponding digits of a and b.\n\n\n\nExample. If a \u2299 b = ab mod 10, then 5566 \u2297 239 = 84.\nLet us define \u2297 to be left-associative, that is, a \u2297 b \u2297 c is to be interpreted as (a \u2297 b) \u2297 c.\nGiven a binary operation \u2299 and two non-negative integers a and b, calculate the value of a \u2297 (a + 1) \u2297 (a + 2) \u2297 ... \u2297 (b - 1) \u2297 b.",
  "Output": "Output a single number - the value of a \u2297 (a + 1) \u2297 (a + 2) \u2297 ... \u2297 (b - 1) \u2297 b without extra leading zeroes.",
  "Title": "NEERC10 B - Binary Operation",
  "Input": "The first ten lines of the input contain the description of the binary operation \u2299. The i-th line of the input contains a space-separated list of ten digits - the j-th digit in this list is equal to (i - 1)\u2299(j - 1).\nThe first digit in the first line is always 0.\nThe eleventh line of the input contains two non-negative integers a and b (0\u00a0\u2264\u00a0a\u00a0\u2264\u00a0b\u00a0\u2264\u00a01018)"
}{
  "Example": "Sample Input \n15 3 3\n9 1 2 3 4 5 6 7 8 3\n7 2 9 10 11 12 13 10\n5 2 14 9 15 10\n\nSample Output 1\n4 5 6 7 8\n10 11 12 13 15\n1 2 3 9 14\n\nSample Input 2\n4 2 2\n3 1 2 3\n2 2 4\n\nSample Output 2\n-1\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Advanced Cave Megapolis (ACM) is a city that survives in the underground caves after the global nuclear war. The caves are connected by passages and the whole city map can be represented by a graph with caves being vertices and passages between them being nodes.\nThere is a revolution in the cave city. The whole population of the city is evenly split into k parties that cannot agree on the common laws that they should adopt. They had decided to split their city into k districts and have each district's citizens impose the laws of their liking upon themselves.\n\n\nYou are given a city map in the form of the graph and your task is to write a program that partitions this graph into k equally sized districts. Each district must form a connected subgraph that is represented by the subset of the graph's vertices.\nFortunately, the number of vertices in the graph is divisible by k and the graph representing the city happens to be a cactus - a connected undirected graph in which every edge belongs to at most one simple cycle. Intuitively, cactus is a generalization of a tree where some cycles are allowed.\nThe example of a city map with 15 caves and its partitioning into 3 districts is shown on the picture\nbelow.\n",
  "Output": "If it is possible to partition the vertices into k districts, write to the output k lines with n/k integer numbers on each line. Each line represents a district as a list of vertices' numbers that constitute it. Vertex numbers must be listed in the ascending order in the description of each district.\nIf the answer does not exist, write the single number -1.",
  "Title": "NEERC10 C - Cactus Revolution",
  "Input": "The first line of the input contains three integer numbers n, m, and k (1\u00a0\u2264\u00a0n\u00a0\u2264\u00a050 000, 0\u00a0\u2264\u00a0m\u00a0\u2264\u00a010 000, 1\u00a0\u2264\u00a0k\u00a0\u2264\u00a0n). Here n is the number of vertices in the graph. Vertices are numbered from 1 to  n. Edges of the graph are represented by a set of edge-distinct paths, where m is the number of such paths, k is the number of districts that the city must be partitioned into,n is divisible by k.\nEach of the following m lines contains a path in the graph. A path starts with an integer number si (2\u00a0\u2264\u00a0si\u00a0\u2264\u00a01000) followed by si integers from 1 to n. These si integers represent vertices of a path. Adjacent vertices in a path are distinct. Path can go through the same vertex multiple times, but every edge is traversed exactly once in the whole input. There are no multiedges in the graph (there is at most one edge between any two vertices).\nThe graph in the input file is a cactus."
}{
  "Example": "Sample Input \n1\n1.00 0.00 1.00\nSample Output\n3.000 1.500\nSample Input\n2\n1.00 0.00 1.00\n0.00 1.50 0.50\nSample Output\n2.000 2.000\nSample Input\n3\n1.00 0.00 1.00\n0.00 1.50 0.50\n-0.50 -0.50 1.00\nSample Output\n2.000 2.000",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "A travelling circus faces a tough challenge in designing the dome for its performances. The circus has a number of shows that happen above the stage in the air under the dome. Various rigs, supports, and anchors must be installed over the stage, but under the dome. The dome itself must rise above the center of the stage and has a conical shape. The space under the dome must be air-conditioned, so the goal is to design the dome that contains minimal volume.\nYou are given a set of n points in the space; (xi, yi, zi) for 1\u00a0\u2264\u00a0i\u00a0\u2264\u00a0n are the coordinates of the points in the air above the stage that must be covered by the dome. The ground is denoted by the plane z = 0, with positive z coordinates going up. The center of the stage is on the ground at the point (0, 0, 0).\nThe tip of the dome must be located at some point with coordinates (0, 0, h) with h > 0. The dome must have a conical shape that touches the ground at the circle with the center in the point (0, 0, 0) and with the radius of r. The dome must contain or touch all the n given points. The dome must have the minimal volume, given the above constraints.\n",
  "Output": "Write to the output a single line with two floating point numbers h and r - the height and the base radius of the dome. The numbers must be precise up to 3 digits after decimal point.",
  "Title": "NEERC10 D - Dome of Circus",
  "Input": "The first line of the input contains a single integer number n (1\u00a0\u2264\u00a0n\u00a0\u2264\u00a010 000) - the number of points under the dome. The following n lines describe points with three floating point numbers xi, yi, and zi per line - the coordinates of i-th point. All coordinates do not exceed 1000 by their absolute value and have at most 2 digits after decimal point. All zi are positive. There is at least one point with non-zero xi or yi."
}{
  "Example": "Sample Input \n3\n1 2 3\n2\n2 10\n\nSample Output\n8\n1 1 2",
  "Memory Limit": "256M",
  "Time Limit": "10.00s",
  "Description": "Flatland government is building a new highway that will be used to transport weapons from its main weapon plant to the frontline in order to support the undergoing military operation against its neighbor country Edgeland. Highway is a straight line and there are n construction teams working at some points on it.\nDuring last days the threat of a nuclear attack from Edgeland has significantly increased. Therefore the construction o\u00b1ce has decided to develop an evacuation plan for the construction teams in case of a nuclear attack. There are m shelters located near the constructed highway. This evacuation plan must assign each team to a shelter that it should use in case of an attack.\nEach shelter entrance must be securely locked from the inside to prevent any damage to the shelter itself. So, for each shelter there must be some team that goes to this shelter in case of an attack. The office must also supply fuel to each team, so that it can drive to its assigned shelter in case of an attack. The amount of fuel that is needed is proportional to the distance from the team's location to the assigned shelter. To minimize evacuation costs, the office would like to create a plan that minimizes the total fuel needed.\nYour task is to help them develop such a plan.",
  "Output": "The first line of the output must contain z - the total amount of fuel needed. The second line must contain n integer numbers: for each team output the number of the shelter that it should be assigned to. Shelters are numbered from 1 to m in the order they are listed in the input.",
  "Title": "NEERC10 E - Evacuation Plan",
  "Input": "The first line of the input contains n - the number of construction teams (1\u00a0\u2264\u00a0n\u00a0\u2264\u00a04000). The second line contains n integer numbers - the locations of the teams. Each team's location is a positive integer not exceeding 109, all team locations are different.\nThe third line of the input contains m - the number of shelters (1\u00a0\u2264\u00a0m\u00a0\u2264\u00a0n). The fourth line contains m integer numbers - the locations of the shelters. Each shelter's location is a positive integer not exceeding 109, all shelter locations are different.\nThe amount of fuel that needs to be supplied to a team at location x that goes to a shelter at location y is equal to |x - y|."
}{
  "Example": "Sample Input \n1 2\n6\n4 4\nSample Output\n-1\nSample Input\n1 2\n6\n3 4\nSample Output\n0\nSample Input\n4 2\n9 2 2 2\n3 4\nSample Output\n2\n7 1\n2 2",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "Peter is working on a combinatorial problem. He has carried out quite lengthy derivations and got a resulting formula that is a ratio of two products of factorials like this:\n\nThis does not surprise Peter, since factorials appear quite often in various combinatorial formulae, because n! represents the number of transpositions of n elements - one of the basic combinatorial objects.\nHowever, Peter might have made a mistake in his derivations. He knows that the result should be an integer number and he needs to check this first. For an integer result Peter wants to simplify this formula to get a better feeling of its actual combinatorial significance. He wants to represent the same number as a product of factorials like this.\n\nwhere all ri are distinct integer numbers greater than one in the descending order (ri > ri+1 > 1), si and t are positive integers. Among all the possible representations in this form, Peter is interested in one where r1 is the largest possible number, among those in the one where s1 is the largest possible number; among those in the one where r2 is the largest possible number; among those in the one where s2 is the largest possible number; etc, until the remaining t cannot be further represented in this form. Peter does not care about the actual value of t. He wants to know what is the factorial-product part of his result.\n\n",
  "Output": "On the first line of the output write a single integer number k. Write k = -1 if the ratio of the given factorial products is not an integer. Write k = 0 if the ratio is an integer but it cannot be represented in the desired form. Write k > 0 followed by k lines if the ratio can be represented by a factorial product as described in the problem statement. On each of the following k lines write two integers ri and si (for i = 1 ... k) separated by a space.",
  "Title": "NEERC10 F - Factorial Simplification",
  "Input": "The first line of the input contains a single integer number n and m (1\u00a0\u2264\u00a0n,\u00a0m\u00a0\u2264\u00a01000). The second line of the input contains n integer numbers pi (1\u00a0\u2264\u00a0pi\u00a0\u2264\u00a010\u00a0000) separated by spaces. The third line of the input contains m integer numbers qi (1\u00a0\u2264\u00a0qi\u00a0\u2264\u00a010\u00a0000) separated by spaces."
}{
  "Example": "Sample Input \n3S 7S 2C 4S 5H\nSample Output\n1\nSample Input\nJH AH TH KH QH\nSample Output\n7462",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The standard 52-card deck consists of 52 cards divided into 4 suits: clubs, diamonds, hearts and spades. For each suit there are 13 ranks: 2, 3, 4, 5, 6, 7, 8, 9, 10, jack, queen, king and ace, listed from the lowest to the highest.\nA card is denoted by its rank ('2'...'9' for 2...9, 'T' for 10, 'J' for jack, 'Q' for queen, 'K' for king, and 'A' for ace) followed by its suit ('C' for clubs, 'D' for diamonds, 'H' for hearts, and 'S' for spades). Cards are partially ordered by their ranks. The suit does not play a role in the cards ordering.\nA Poker hand is a set of five distinct cards. Each hand is said to have a certain ranking. A hand with a higher ranking beats a hand with a lower one. Two hands of the same ranking are compared using a tie-breaking rule specific for their ranking - either one of them beats the other or they are tied.\nThe list of poker rankings is given below, from the worst ranking to the best ranking. If a hand satisfies several rankings, only the best one is considered.\nHigh Card - Does not fit into any ranking below. When comparing with another High Card hand, the ranks of the highest cards in the two hands are first compared. If there is a tie, the second highest cards in each hand are compared, and so on. (Example: QS, JH, 9C, 7H, 3D)\nOne Pair - Two cards of the same rank. Pair with higher rank beats the lower pair. In case of a tie, the remaining three cards are used as tie-breakers, compared in the descending order of their ranks (as in High Card). (Example: 6D, 6H, QD, 9H, 4S)\nTwo Pairs - Two pairs of cards of the same rank. When comparing with another Two Pairs hand, the higher pair is first compared, then the lower pair, and finally the rank of the fifth remaining card. (Example: JH, JS, TS, TD, 8S)\nThree of a Kind - Three cards of the same rank. Three-of-a-kind with the higher rank beats the lower one. In case of a tie, the remaining two cards are used as tie-breakers, compared in the descending order. (Example: 5S, 5H, 5D, JH, 6D)\nStraight - Five cards in consecutive rank. An ace can either be accounted above a king or below a two, but not both, so wrapping is not allowed. Two straights are compared using the rank of the highest card (in the case of A, 2, 3, 4, 5, the highest card is considered to be 5). (Example: QH, JC, TH, 9D, 8D)\nFlush - Five cards of the same suit. When comparing two Flushes, the rank of the highest card is first considered, then the second highest and so on (as in High Card). (Example: AS, JS, 8S, 6S, 5S)\nFull House - Three cards of the same rank, and two cards of same rank. When comparing with another Full House, the rank of the three cards is first compared, then the rank of the two cards. (Example: 7S, 7H, 7C, JC, JH)\nFour of a Kind - Four cards of the same rank. Two four-of-a-kinds are first compared by the ranksof the four cards. In case of a tie, the rank of the fifth card is used as a tie-breaker. (Example: 4C, 4D, 4H, 4S, TD)\nStraight Flush - A hand that is both a Straight and a Flush. Same tie-breaker as for a Straight. (Example: TH, 9H, 8H, 7H, 6H)\nConsider the set \u0397 of all Poker hands. Let us introduce an evaluation function v : \u0397 \u2192 {1, ..., 7462}, such that for any two Poker hands a and b, a beats b if and only if v(a) > v(b). There exists exactly one such evaluation function v.\nGiven a Poker hand a, find the value of v(a).",
  "Output": "Output the value of the evaluation function v(a) for the given hand a.",
  "Title": "NEERC10 H - Hands of Poker",
  "Input": "The input contains space-separated list of five distinct card descriptions. Each card is described with two characters denoting its rank and suit, respectively. The ranks are denoted by '2'...'9', 'T', 'J', 'Q', 'K', and 'A' (listed here in the ascending order). The suits are denoted by 'C', 'D', 'H', and 'S'."
}{
  "Example": "Sample Input \n4 6\n1 2 1\n1 3 2\n3 4 3\n2 3 1\n2 4 4\n3 1 1\n\nSample Output\n2\n1 3\n",
  "Note": "A sequence (a1, a2, ..., ak) is lexicographically smaller than a sequence (b1, b2, ..., bk) if there exists i such that ai < bi, and aj = bj for all j < i.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "New labyrinth attraction is open in New Lostland amusement park. The labyrinth consists of n rooms connected by m passages. Each passage is colored into some color ci. Visitors of the labyrinth are dropped from the helicopter to the room number 1 and their goal is to get to the labyrinth exit located in the room number n.\nLabyrinth owners are planning to run a contest tomorrow. Several runners will be dropped to the room number 1. They will run to the room number n writing down colors of passages as they run through them. The contestant with the shortest sequence of colors is the winner of the contest. If there are several contestants with the same sequence length, the one with the ideal path is the winner. The path is the ideal path if its color sequence is the lexicographically smallest among shortest paths.\nAndrew is preparing for the contest. He took a helicopter tour above New Lostland and made a picture of the labyrinth. Your task is to help him find the ideal path from the room number 1 to the room number n that would allow him to win the contest.",
  "Output": "The first line of the output must contain k - the length of the shortest path from the room number 1 to the room number n. The second line must contain k numbers - the colors of passages in the order they must be passed in the ideal path.",
  "Title": "NEERC10 I - Ideal Path",
  "Input": "The first line of the input contains integers n and m - the number of rooms and passages, respectively (2\u00a0\u2264\u00a0n\u00a0\u2264\u00a0100\u00a0000, 1\u00a0\u2264\u00a0m\u00a0\u2264\u00a0200\u00a0000). The following m lines describe passages, each passage is described with three integer numbers: ai, bi, and ci - the numbers of rooms it connects and its color (1\u00a0\u2264\u00a0ai,\u00a0bi\u00a0\u2264\u00a0n, 1\u00a0\u2264\u00a0ci\u00a0\u2264\u00a0109). Each passage can be passed in either direction. Two rooms can be connected with more than one passage, there can be a passage from a room to itself. It is guaranteed that it is possible to reach the room number n from the room number 1."
}{
  "Example": "Sample Input \n2\n5\n101\nSample Output\n38\n97",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given an integer N (0 \u2264 N \u2264 100,000) representing the mass of a letter in grams, print out the cost in cents to mail the letter.\nThe first line of input will be the number of test cases T (1 \u2264 T \u2264 100). The following T lines will contain N. Output the cost in cents to mail the letter.\n\n   The pricing is as follows : \n\n   0 \u2264 N \u2264 30 costs 38 cents \n   30 < N \u2264 50 costs 55 cents \n   50 < N \u2264 100 costs 73 cents\n   if N > 100 then the base cost is 73 cents, plus 24 cents for every additional 50 grams or part thereof.\n",
  "Output": "Output the cost in cents to mail the letter.",
  "Title": "BlueBook - Cost",
  "Input": "The first line of input will be the number of test cases T (1 \u2264 T \u2264 100). The following T lines will contain N. "
}{
  "Example": "Sample Input \n2\n1.0\n4\nA\nn\n1.0\n41\nB\ny\nSample Output\n4.00\n27.80",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You are to calculate weekly pay of T employees (1 \u2264 T \u2264 1000) \nbased on four factors : rate of pay in dollars, hours worked, tax category, and donations.\nAny hours worked over 40 is considered \"overtime\" and is paid double.\nThe five tax categories are, ",
  "Output": "Output each employee's pay in dollars, rounded to two decimal places.",
  "Title": "BlueBook - Pay",
  "Input": "Input starts with T, followed by the information for T employees on four separate lines.\nEach employee's information will be seperated with one newline.\nLine 1 : a real number denoting rate of hourly pay in dollars (\u2264 1000).\n\nLine 2 : an integer denoting hours worked. (< 30000).\n\nLine 3 : a character denoting the tax category of how much tax the government collects.\n\nLine 4 : a \"y\" or \"n\" denoting whether they want to donate 10 dollars. Donations are calculated last.\n\n"
}{
  "Example": "Sample Input \n1.6\n1987\n5000000000\n2087\nSample Output\n24453487116",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The world's population is increasing at a rate of approximately p% each year. The population\nin year y was n.\nWrite a program to estimate the population in the future assuming that the\npresent growth rate continues until that time.",
  "Output": "The output will simply be the population that we estimated in the final year.",
  "Title": "BlueBook - World Pop",
  "Input": "The first line will be the rate of increase (p), second line will be the starting year of the population\n(y), the third line will be the population (n) for the starting year and the last line will be the year\nat which we would like to estimate the population."
}{
  "Example": "Sample Input \n3\n2.0 4\n4.0 2\n3.0 3\nSample Output\n16.00\n16.00\n27.00",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Write a program that reads a real value X and a positive integer P and then calculates and prints the value of XP.",
  "Output": "All answers should be to 2 decimal places.",
  "Title": "BlueBook - Power Base",
  "Input": "The first line of input will be the amount of test cases N and the following N test cases. Each of the test cases will have 2 numbers on each line."
}{
  "Example": "Sample Input \n200\nSample Output\n8",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Write a program that reads a positive integer and then finds the smallest power of two greater than or equal to\n the number that was read.",
  "Output": "You are to output a single integer number.",
  "Title": "BlueBook - Powers of 2",
  "Input": "Each test case will input a single integer number."
}{
  "Example": "Sample Input \no\nWhy so serious son.\nSample Output 1\nWhy so serious son.\n3\nSample Input 2\ny\nYou want the truth? You can't handle the truth.\nSample Output 2\nYou want the truth? You can't handle the truth.\n2",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Write a program that takes as input a single character and then a sentence, terminated by a period. The program should echo-print the input (that is, print it in the form in which it was read) and give a count of the number of times that the character appears in the sentence. Your program should not be case-sensitive - that is, uppercase letters should be considered equivalent to the corresponding lowercase letters.\n",
  "Output": "Output the number of times the character appears in the sentence.",
  "Title": "BlueBook - Find the Character",
  "Input": "The first line of the input consists of one character. The second line of the input consists of a sentence terminated by a period."
}{
  "Example": "Sample Input \n5.5 24000000 1980 100000000\n\nSample Output\n2007\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Input, Output": "\nThe order of input will be P A Y B. Output should be in whole numbers\n(i.e. no decimals)\n",
  "Description": "\nThe population of a certain country has been increasing at an average rate of\nP percent each year. Assuming that the population was A in year Y, write a\nprogram that finds the year in which the population will reach B if the grown\npattern continues.\n",
  "Title": "BlueBook - Pop Explosion"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n100 200\n\nSample Output\n153\n\n\nExplanation of output: For example, the number 153 = 1*1*1 + 5*5*5 + 3*3*3,\ntherefore it should be outputted.\n",
  "Description": "\nWrite a program that will find all the three-digit natural numbers that are equal\nto the sum of the cubes of their digits. The range of number will be\n100 \u2264 M \u2264 N \u2264 999. The input will be two numbers: M and N where M is the lesser\n3 digit number and N is the greater 3 digit number.\n",
  "Title": "BlueBook - Digits and Sums",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n4 10\n1 10 0\n4 15 0\n2 17 1\n3 10 1\n\nSample Output\n32\n",
  "Explanation": "The optimal solution is to visit and pillage each city in order of position. You start on the left side of the river. First, pillage the village at position 1, giving you 10 dollars. Cross to the right side of the river (leaving you with 0 dollars) and pillage the village at position 2, giving you 17 dollars. Then pillage the village at position 3, giving you a total of 27 dollars. Cross back to the left side of the river (leaving you with 17 dollars) and pillage the village at position 4, giving you a grand total of 32 dollars.",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line will contain two space-separated integers n and t.\nThe next n lines contain the information for each village in no particular order. Each of these lines will contain three space-separated integers, pi, xi, si, where si is 0 if the village is on the left side of the river and 1 if it is on the right side of the river.\nNo two villages will be at the same position.\n",
  "Time Limit": "5.00s",
  "Description": "When Zihao isn't doing homework, he likes to go out with his gang and pillage some of the n (1 \u2264 n \u2264 100,000) villages located along a river. Village i is located at some position pi (1 \u2264 pi \u2264 1,000,000,000) along the river, and is either located on the left or the right side of the river. Furthermore, village i has a payout of xi (0 \u2264 xi \u2264 10,000) dollars if Zihao decides to pillage it. He starts at position 0, on the left side of the river, with 0 dollars. His goal is to end up with as much money as possible at the end.\nUnfortunately, Zihao is bound by the CCC (Canadian Constitution of Criminals) honour code. Firstly, he can only move from one village to another if the second village is located at a higher position along the river. Thus, he cannot move backwards. Secondly, Zihao can only pillage a city if he is on the same side of the river as the city. However, Zihao can cross the river in his boat at any point and as many times as he wants. Each time Zihao crosses the river, he must pay a tax of t (0 \u2264 t \u2264 10,000) dollars. Zihao is allowed to have a negative amount of money at any point.",
  "Output Format": "Print the largest possible amount of money Zihao can make by pillaging the villages with the restrictions stated above. You may assume that the answer will fit inside of a 32-bit integer.",
  "Title": "Pillaging"
}{
  "Example": "Sample Input \n8\n-2 3\n-2 -1\n0 3\n0 -1\n1 -1\n2 1\n-3 1\n-2 1\nSample Output\n10",
  "Note on grading": "For test cases worth 20% of the total score, n \u2264 500.",
  "Illustration": "",
  "Memory Limit": "64M",
  "Time Limit": "8.00s",
  "Description": "You are given n points in the coordinate plane.\nWrite a program which calculates the largest possible area of a rectangle such that each of its vertices\nis one of the given points. You may assume that such a rectangle exists.",
  "Output": "Output should be written to standard output. The first and only line of output should contain a single\ninteger, the largest possible area of a rectangle.",
  "Title": "BOI09 - Rectangle",
  "Input": "The input is read from standard input. The first line of input contains an integer n\n(4 \u2264 n \u2264 1500), the number of given points.\nEach of the following n lines contains the coordinates of one point, two integers separated by a space.\nThe coordinates will be between -108 and 108.\nNo two points will be located at the same coordinates."
}{
  "Example": "Sample Input \n5 5 3\n9 6\n1 5\n2 3\n3 11\n2 7\n1 1 1 4\n4 6 3 5\n4 1 1 4",
  "Explanation": "On the first day, Bosco should buy the first, second, and fourth cards, costing a total of 5 dollars.\nOn the second, cards 3 and 5 should be purchased for 4 dollars, as card 4 is now too expensive.\nOn the final day, all of the cards up for sale can be bought for 5 dollars. Notice that card 1 still costs 1 dollar, from the first price change.",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "Bosco has gotten his hands on B (1 \u2264 B \u2264 50) dollars! Being a Magic the Gathering\u2122 enthusiast, he wishes to spend some amount of his budget on cards to improve his deck.\nHe has located a local store that has N (1 \u2264 N \u2264 30,000) cards for sale. Card i costs ci (1 \u2264 ci \u2264 50) dollars. and will improve Bosco's DQI (Deck Quality Index) by vi (1 \u2264 vi \u2264 1000) points. Only one copy of each card is for sale.\nBusiness hasn't been too great lately, so the store is offering sales on various days. Though the term \"price adjustments\" would be more accurate, as card prices can increase, \"sales\" are much more appealing - and, indeed, Bosco wants to go do all of his shopping on one of the D (1 \u2264 D \u2264 3000) days of the sales. In fact he's already acquired a list of the price adjustments that will be made.\nOn day i, the cost of card ai (1 \u2264 ai \u2264 N) is changed to bi (1 \u2264 bi \u2264 50), while all other cards remain unchanged. That is, before day 1, all cards have their initial costs (c), and from then on, price adjustments accumulate from day to day.\nAdditionally, on each day, only certain cards from the store's inventory are actually up for sale. In particular, on day i, only cards from xi to yi (1 \u2264 xi \u2264 yi \u2264 N), inclusive, may be purchased.\nBosco doesn't care how much of his budget he spends, but he absolutely must have the best possible deck. As such, for each of the D days, he wants to buy some (possibly empty) set of cards, such that the sum of their costs is no larger than B, and the sum of their DQI points is maximal. Determine the DQI sum for each day, so that Bosco will know when to go to take full advantage of the \"sales\".\n\n\n",
  "Output": "For each day, output the maximal DQI sum of cards up for purchase that day which Bosco can purchase without going over his budget, considering all prices changes that have occurred so far.",
  "Title": "Sales",
  "Input": ""
}{
  "Example": "Sample Input \n5 10\n35232\n390942\n649675\n224475\n18709\nQ 1 3\nM 4 475689\nQ 2 3\nQ 1 3\nQ 1 2\nQ 3 3\nQ 2 3\nM 2 645514\nM 2 680746\nQ 0 4\nSample Output\n224475\n224475\n224475\n390942\n224475\n224475\n35232",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Segment Tree Test",
  "Input": "The first line of input will contain two space-separated integers:\nN (1 \u2264 N \u2264 100\u00a0000), the number of elements in\nthe array, and M (1 \u2264 M \u2264 100\u00a0000), the number of\noperations to perform.\nThe next N lines each contain one non-negative integer less than\n1\u00a0000\u00a0000. Specifically, line number i contains element i - 2\nof the array. Note that the array has zero-based indexing.\nThe following M lines contain one operation each. Each operation\nis either of the form M i x, indicating that element number\ni (0 \u2264 i < N) is to be changed to\nx (0 \u2264 x < 1\u00a0000\u00a0000), or the form Q i j\n(0 \u2264 i \u2264 j < N)\nindicating that your program is to find the minimum value of the elements in\nthe index range [i, j] (that is, inclusive) in the\ncurrent state of the array and print this value to standard output."
}{
  "Example": "Sample Input \n1.45..89.\n.963..5.1\n53.41....\n6......25\n2.9...3.7\n48......6\n....37.54\n9.7..563.\n.45..12.9\nSample Output 1\n124576893\n796328541\n538419762\n671893425\n259164387\n483752916\n862937154\n917245638\n345681279\nSample Input 2\n9...28.575...192.3.3.5...6..8.2..395...7.6...341..5.2..6...7.3.1.895...475.46...9\nSample Output 2\n916328457\n574619283\n832574961\n687241395\n295736148\n341895726\n469187532\n128953674\n753462819",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Sudoku Challenge"
}{
  "Example": "Sample Input \n5 5 3\n#E...\n#....\n#.R..\n#..T.\n#####\nSample Output 1\n5\nSample Input 2\n5 5 2\n#####\n#E..#\n#..R#\n#..T#\n#####\nSample Output 2\nT-800 Terminated.",
  "Memory Limit": "256M",
  "Time Limit": "3.00s",
  "Description": "",
  "Output": "",
  "Title": "T-800's Escape",
  "Input": ""
}{
  "Example": "Sample Input \n11 12 3\n1 2 1 4\n3 5 3 5\n5 5 5 6\n5 6",
  "Explanation": "Digger starts by tunnelling to the 1st cave from the North edge of the mountain - this requires 1 million gallons of fuel. He then goes to the 2nd cave, using another 2 million gallons. Finally, he digs down to the 3rd cave, using 1 million gallons of fuel, and then walks to the East to claim the treasure. This is a total of 4 million gallons (1+2+1). One possible set of digging sites is shown below ('D': dig here):\nxxDxxxxxxxxx\nxx...xxxxxxx\nxxxxDDxxxxxx\nxxxxx.xxxxxx\nxxxxxDxxxxxx\nxxxxx.Txxxxx\nxxxxxxxxxxxx\nxxxxxxxxxxxx\nxxxxxxxxxxxx\nxxxxxxxxxxxx\nxxxxxxxxxxxx",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "In a distant and mysterious land known as Quebec, there is a legend of a perfectly rectangular mountain of dimensions AxB metres (1 \u2264 A,B \u2264 20000) - legend also says that it's infinitely high. Due to a strange gas phenomenon, N (1 \u2264 N \u2264 1000) perfectly rectangular caves (with their sides parallel to those of the mountain) have formed, all at ground level. When viewed as a top-down cross-section, each metre by metre square at ground level can be said to either contain solid rock, be hollow, or contain the treasure. There is only 1 such treasure.\nThe famous adventurer known only as \u201cDigger\u201d has learnt of this mountain and its treasure, and of course he wants to get to it. Fortunately, he isn't called \u201cDigger\u201d for nothing - he possesses a special machine which can remove all the rock from a metre by metre square (he refuses to tell us where this rock ends up), with the incredible fuel consumption of 1 million gallons per such an operation. Digger can walk freely around any open space, both natural and artificial, but since he's restricted to the ground, the height of the caves doesn't matter.\nThough Digger is pretty rich, he still wishes to minimize the amount of fuel he uses to reach the treasure.\nDigger can start anywhere on the outside of the mountain. Determine the minimum amount of fuel he must use to reach the treasure.",
  "Output": "A single number - the minimum amount of fuel Digger must use to reach the treasure (in millions of gallons).",
  "Title": "Digger",
  "Input": ""
}{
  "Example": "Sample Input \n58\nSample Output\n58 cents requires 2 quarters, 1 nickel, 3 cents.\nNote: \n58 cents requires 2 quarters, 0 dimes, 1 nickels, 3 cents.\nwill not be accepted.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\n\tWrite a program that makes change for amounts less than one dollar with the least number of coins.\n",
  "Output": "Output should be the original amount of money together with a minimal set of coins (quarters, nickels, dimes, cents) that could make up that amount.",
  "Title": "BlueBook - Change",
  "Input": "Input will be a positive integer less than 100, representing an amount of money in cents."
}{
  "Example": "Sample Input \n1000 8 3\nSample Output 1\n0 1000.00\n1 1080.00\n2 1166.40\n3 1259.71\nSample Input 2\n20 8 0\nSample Output 2\n0 20.00\nNOTE: The amount of money must be rounded to 2 decimal places.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Suppose that a certain amount of money N (where 1 \u2264 N \u2264 1000000) is deposited in a bank account that pays interest at the rate of M% (where 1 \u2264 M \u2264 10). The interest is paid annually so at the end of each year, M% of the amount currently in the account is added to the amount. Assume that the number of years will be from 0 to 50.\n",
  "Output": "The output will be the year followed by the amount of money.",
  "Title": "BlueBook - Interest",
  "Input": "\nThe input will be listed on a single line starting with N followed by M followed by Y (the number of years)."
}{
  "Example": "Sample Input \n10 20\n1 5\n2 1\n2 2\n2 4\n2 5\n2 6\n2 8\n2 9\n3 3\n4 7\n4 8\n4 9\n5 3\n5 4\n5 5\n5 6\n6 3\n10 1\n10 2\n10 7\n8 6",
  "Explanation": "Digger starts on the surface, 7 metres from the West edge of the stretch of land. He drills down for 3 metres until he hits a rock and breaks his first drill bit. He then uses his pickaxe to walk to the left, and drills down another metre, hitting another rock and breaking his second drill bit. He then walks to the rick (through a rock), and drills down for 5 metres, picking up the treasure on the way, until he hits another rock and breaks his third and final drill bit. He then walks to the right and drills down past the last rock. This route is shown below ('D': drill, '<' or '>': pickaxe):\nxxDxxxxxxxxx\nxx...xxxxxxx\nxxxxDDxxxxxx\nxxxxx.xxxxxx\nxxxxxDxxxxxx\nxxxxx.Txxxxx\nxxxxxxxxxxxx\nxxxxxxxxxxxx\nxxxxxxxxxxxx\nxxxxxxxxxxxx\nxxxxxxxxxxxx",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "The adventures of \"Digger\" continue as he once again searches for treasure. This time, his money senses detect it underground. His plan is to dig down to it using an automatic pickaxe and his souped-up pneumatic drill.\nThe treasure is within a thin stretch of land, running West to East, that is made up of dirt and some rocks. The stretch is L (1 \u2264 L \u2264 200) metres long. Digger's money senses are very exact, and he knows the location of the treasure he seeks - it is no more than 10000 metres below the surface. In addition to money senses, he apparently also has rock senses, which can pinpoint N (1 \u2264 N \u2264 5000) rocks among the dirt, none of which will be at a depth of more than 10000 metres.\nDigger's specially-designed pneumatic drill can only go straight down, and it can tunnel through dirt easily - however, it isn't equipped with breaks, so it keeps on going until it hits a rock. When this happens, it stops just above the rock, but the drill bit also breaks. This time, Digger doesn't have to worry about fuel - instead, he just wants to avoid breaking his drill bits! Once stationary, Digger can also use his pickaxe to dig left and right (yes, even through rocks!), but he can't dig up or down with it.\nThe treasure is pretty fragile, so Digger definitely doesn't want to drill right into it. Instead, he can either get to the same depth as it and use his pickaxe to dig to it, or he can use his pneumatic drill to go right past it (either 1 metre to the left or right of it). However, once he gets his hands on the treasure, Digger's plan isn't complete - he intends to keep drilling down until he gets to China. As such, he must first navigate past the deepest of the N rocks - at that point, it's all dirt (or so he hopes...).\nDigger can start anywhere on the surface. Determine the minimum amount of drill bits that he must break in order to retrieve the treasure and dig down past all the rocks, if it's possible at all.",
  "Output": "If it's impossible for Digger to reach the treasure and dig down past all the rocks, output \"Use dynamite\".\nOtherwise, output a single number - the minimum number of drill bits Digger must break to accomplish this.",
  "Title": "Return of the Digger",
  "Input": ""
}{
  "Example": "Sample Input \n6 8\n10\n3\n4\n6\n2\n0\n1 2\n1 3\n2 3\n2 4\n3 4\n3 5\n4 6\n5 6",
  "Explanation": "The amount of lava that flows through each river (this is just one possible solution) is shown below:\n",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "In his last escapade, Digger successfully picked up the underground treasure and continued to dig down with his souped-up pneumatic drill, hoping to come up in China. To his surprise, however, he instead stumbled upon the planet core. He quickly cooks up a new plan - to rocket up to the surface via a volcano.\nHe observes N (1 \u2264 N \u2264 10000) rivers of lava, as well as M (1 \u2264 M \u2264 1000) lakes, which Digger has numbered 1 to M. Each river flows in one direction only, from one lake to another, and no two rivers run between the same pair of lakes in the same direction. Each lake has a certain flow rate - this is how many gallons of lava in total can potentially flow out of it per second (geologists claim they know the factors that affect flow rate, but really they have no idea). Exactly one lake has a flow rate of 0 - this means that this lake is volcanic and erupts from time to time. There will be no rivers flowing out of this lake.\nThe lake that Digger counts as Lake 1 is fed by the core itself, which is where all lava in the river system comes from. No rivers flow into this lake, and there will be at least one system of rivers that lead from it to the volcanic lake.\nAll rivers and lakes are originally empty, but when an eruption occurs, lava starts to gush out of the core and along the rivers so that the rate of lava flowing into the volcanic lake is maximized. Digger plans to hop into the volcanic lake (using the inflatable heat-proof raft he keeps in his pocket) and wait for an eruption to occur, but he wants to know in advance the rate of lava that will be flowing into the lake.\n\n",
  "Output": "Output the maximum rate at which lava can flow into the volcanic lake (in gallons per second).",
  "Title": "Revenge of the Digger",
  "Input": ""
}{
  "Example": "Sample Input \n3 4 2\nXX.X\nXX..\n.X..\nSample Output\n2",
  "Explanation": "There are 6 possible areas you could pick, yielding this many ships each:\n4 2 1\n3 2 0\nThis is a total of 12 ships, for an average of exactly 2.",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "You and a friend are playing the classic game of Battleships. You each have a grid consisting of M rows of N cells (1 \u2264 N, M, \u2264 2000). Each cell is either empty or contains a player's ship (in this version of the game, all ships are the size of one cell). The goal of the game is to destroy all of the opponent's ships by hitting individual cells.\nYou and your friend have bet tons of CompSci points on this game. Unfortunately, your friend is completely owning you. So desperate times call for desperate measures.\nYou know for a fact that you can distract your friend for a brief moment by telling him that a famous programmer is behind him, but this trick will only work exactly once (programmers are so predictable). While he isn't looking, you'll have time to snatch up some of his ships with one hand. Your hand can cover a square of exactly S\u00d7S cells (1 \u2264 S \u2264 N, M), and you can gather all the ships within such a square at once.\nOf course, your friend is no fool, so he's got his grid well concealed. As such, you don't know anything about it except its size, so when the time comes, you'll just choose a random square of size S\u00d7S that's completely within the grid.\nAs usual, these bets attract large crowds. One of the bystanders who can see your opponent's grid knows your plan, and is curious as to the expected number of ships that you will grab (in other words, the average number of ships out of all the possible snatches you could make). Nerdy though he is, he can't calculate it in his head, so he runs to a computer and codes up a program...",
  "Output": "A single number - the expected number of ships that you'll grab. It must be within 10-8 of the correct answer.",
  "Title": "Battleships",
  "Input": ""
}{
  "Example": "Sample Input \n3 5 2\n1 5\n2 5\n3 4\nSample Output\n12\nSample Input\n5 8 1\n1 3\n2 4\n2 5\n6 7\n7 8\nSample Output\n21",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Bus Stops"
}{
  "Time Limit": "2.00s",
  "Description": "You are given a checkerboard with M rows and N columns (1 \u2264 M,N\n\u2264 3000). Up to 100000 of these cells have specified values written in\nthem, and the rest are zeroes. For top-secret strategic reasons which are given\nout on a need-to-know basis only (and you do not, at the present moment, need\nto know) you must write a program that will answer up to 100000 queries of the\nform:\nGiven the coordinates of two squares on the checkerboard, find the\nalternating sum of all of the numbers within the rectangle delimited by those\ntwo squares. By alternating sum what is meant is that we add all numbers in\nsquares with the same colour as the first square given, and subtract all\nnumbers with the opposite colour.\n 0  5  0\n 0  0 11\n-2  0  0",
  "Title": "Checkerboard Summation (Easy)",
  "Memory Limit": "256M"
}{
  "Example": "Sample Input \n3 3\n1 1 2 5\n1 3 1 -2\n2 1 1 2 3\n1 2 3 11\n2 2 1 3 3\n0\nSample Output\n-5\n13",
  "Explanation": "The checkerboard is three cells by three cells. When the first query is executed, the board looks like this:\n0  5  0\n0  0  0\n-2 0  0\n\nWe are asked to find the alternating sum of the first two rows. Since the 5 is on a square of opposite colour to the first square, it is subtracted to obtain an answer of -5. For the second query, the board looks like:\n 0  5  0\n 0  0 11\n-2  0  0\n\nNow, we take the alternating sum of the second and third rows. 11 is added, whereas -2 is subtracted, to give the answer 13.",
  "Memory Limit": "256M",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "",
  "Title": "Checkerboard Summation (Hard)"
}{
  "Time Limit": "2.00s",
  "Description": "1 ABDE\n2 ABC\n3 BCEF\n4 ADG\n5 BDEFH\n6 CFI\n7 DEGH\n8 GHI\n9 EFHI\n11\n11\n11\n12\n12\n12\n10\n10\n10\n0\n1\n0\n0\n0\n0\n0\n2\n0",
  "Title": "Revenge of the Clocks",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Description": "It is often useful in mathematics to decide whether one integer is divisible\nby another. For example, if you multiply an integer by 7 (without using a\ncalculator!) you may want to check quickly that you have performed the\nmultiplication correctly by ensuring that the product is divisible by 7 (this\ndoes not guarantee that you were correct, but if it fails, you can be certain\nthat your answer was incorrect.)\nMost probably, you learned the rules for divisibility by 2, 3, 4, 5, 6, 9,\nand 10 in elementary school, and possibly 8 \u2014 but not 7! Most elementary\nschool teachers will admit to not knowing the divisibility rule for 7, which is\nas follows:\n\n\nIf the number has 1 or 2 digits, stop.\nRemove the last digit from the number and double it.\nSubtract the result from the rest of the number.\nGo back to step 1.\nFor example, let's say we want to check whether or not 13076 is divisible by\n7. We remove the 6, double it to get 12, and then subtract 12 from 1307 to\nobtain 1295. We then remove the 5, double it to get 10, and subtract 10 from\n129 to get 119. We then remove the 9, double it to give 18, and subtract 18\nfrom 11 to obtain -7. Since this is divisible by 7, we can conclude that 13076\nis divisible by 7.\nEnter the proverbial PEG member who is brilliant at programming but lousy at\nshort questions. He (she?) is doing some Computer Number Systems homework.\nHowever, using the computer to answer the question of whether or not x is\ndivisible by y, is akin to using a calculator, and is therefore not allowed.\nInstead, he decides to write a program that will find a divisibility rule,\ngiven a divisor and a base, so that he can carry out the check by hand. After\nhe finishes this unbelievably easy task, he bets you points in Ms. Plachta's\ncomputer science class that you can't solve this problem... but can you?",
  "Title": "Divisibility Rules",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \nSample Output\n2",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Diagram": "              |\n  |           |\n| | |   | |   |\n1 2 3 4 5 6 7 8\n",
  "Description": "",
  "Output": "",
  "Title": "Dominoes"
}{
  "Example": "Sample Input \n4\n500\n300\n900\n100\nSample Output\n202",
  "Explanation": "The son-in-law only has 500 points, so the Codefather must make student 3 lose at least 401. However, the other students must also stay strictly below 500. His best strategy is to transfer 199 points from student 3 to student 2, and 202 points from student 3 to student 4. This will result in the following point distribution:\n\nStudent 1: 500\nStudent 2: 499\nStudent 3: 499\nStudent 4: 302",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "The computer science mafia, headed of course by the Codefather, have control of the points spreadsheet. The Codefather has the power to transfer points from one person to another, disguising these transactions under the Bets column of the spreadsheet.\nThe Codefather's daughter is getting married, and he wants to give a gift to his future son-in-law, who happens to be taking Grade 12 Enriched CompSci. Since only the person with the most points can get 99% in this course, the Codefather wants to ensure that his future son-in-law will have strictly more points than anyone else by performing a number of point transfers. However, he's a cautious man (in his business, you have to be), so he follows the following rules:\nNone of the transfers will involve his future son-in-law.\nFor each pair of people, he will only perform up to one point transfer, though each transfer can involve any number of points.\nAfter all the transfers are completed, no students can have a negative amount of points.\nThere are N (1 \u2264 N \u2264 5,000) students in this course, each with a unique student number from 1 to N, inclusive. Student i starts off with Pi (1 \u2264 Pi \u2264 1,000,000) points. The Codefather's son-in-law is student 1.\nThough the Codefather is a powerful man, he's still wary of the authorities, and wants to remain as inconspicuous as possible. Therefore, he wants to minimize the largest transfers he makes, while still ensuring that his future son-in-law will get 99% (though with some blackmail, this'll go up to 100% anyway).",
  "Output": "If it's possible for the Codefather to observe the rules and give his future son-in-law more points than anyone else, minimize the largest point transfer he must make and output it.\nOtherwise, output \"impossible\".",
  "Title": "The Codefather",
  "Input": ""
}{
  "Example": "Sample Input \n10 4\n2 1\n100 2\n600 3\n600 4\n1 6\n2 7\n2 8\n2 9\n10 10\n1 5\n1\n3 4\n\nSample Output\n1337\nSample Input\n5 1\n1 100\n1 200\n1 300\n1 600\n1 700\n3\n1 1\n2 2\n4 4\n\nSample Output\n7\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Guitar Hero",
  "Input": ""
}{
  "Time Limit": "5.00s",
  "Description": "3 10\n0 3\n2 4\n3 7\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n0\n1\n1\n2\n3\n2\n1\n1\n1\n0",
  "Title": "Intervals",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n4\n0 0 2 2\n1 2 3 4\n2 0 4 2\n4 0 6 2\nSample Output:\n2",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Output:": "",
  "Description": "",
  "Title": "Lego"
}{
  "Example": "Sample Input \n4 13\nX.XX..X.XXXXX\nXXXXX.X.XXX..\nX..XX.X..X..X\nXXXXXXX.XXXXX\nSample Output\n8",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Having arrived at Billy-Bob's house, Jim-Bob and his friend engage in one of their favourite games \u2014 niche-counting. Jim-Bob takes a piece of graph paper with N rows and M columns of squares (1 \u2264 N, M \u2264 2000), and fills in some of the squares. He then hands the paper to Billy-Bob, who counts the total area of all the niches.\nA niche is defined as one or more adjacent unfilled squares (diagonals don't count). Exactly one of these squares must be a dead-end, while all the others lead from it to a fork (or to the edge of the paper) in a single, non-branching path.\nConsider the following example ('X' represents a filled square):\nX XX  X XXXXX\nXXXXX X XXX  \nX  XX X  X  X\nXXXXXXX XXXXX\nThe niches in this example are marked with a '@' below:\nX@XX  X XXXXX\nXXXXX@X XXX@@\nX  XX@X @X@@X\nXXXXXXX XXXXX\nThere are no other niches in this example, as the other squares don't meet the requirements. The area of a niche is simply the number of squares it contains, so in this case, the total niche area is 8. Billy-Bob isn't the cleverest person in the world, but he doesn't want Jim-Bob to know that, so he's come to you for help. Given the size of the grid and which squares are filled in, count the total area of all the niches for him.",
  "Output": "",
  "Title": "What a Niche",
  "Input": "2 integers \u2014 N and M.\n\nThe next N lines contain M characters each \u2014 an 'X' represents a filled-in square at that location, while a '.' is an unfilled one."
}{
  "Example": "Sample Input \nJG\nSample Output\njunior girls",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given a two digit code, decide if the code represents either:\nAll codes are case sensitive, and will always be two letters long.\nBe sure to reject invalid codes by outputting \"invalid code\". Also,\noutput what each code represents, as stated exactly.\n",
  "Output": "Ouput the full description of the code. If the code does not exist, output \"invalid code\".",
  "Title": "BlueBook - Cross Country",
  "Input": "Input consists of two character code representing either one of the six categories described above."
}{
  "Example": "Sample Input \n2\n45\n180\nSample Output\nN\nS",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given an integer N (0 \u2264 N < 360), print out the closest compass bearing\nto that integer if N is the bearing in degrees. If there is a tie, print the \"smaller\" of the two possible outputs.\n\n\nThe bearings arranged in increasing order of \"size\" are: N, E, S, W.\nThis means choose N over E if the input is 45, and N over W when the input is 315.",
  "Output": "Output the closest compass bearing according to the input.",
  "Title": "BlueBook - Direction",
  "Input": "The input consists of an integer T (1 \u2264 T \u2264 1000), denoting the number of test cases\nand then each line following consists of one integer N."
}{
  "Example": "Sample Input \n34567\n0000 0005\n12345\n0000 0015\n-1\nSample Output\nAccount_#:_34567\nBill:_6.59\nAccount_#:_12345\nBill:_7.78\nThe '_' are used to represent spaces. Your program should output spaces instead of the underscores.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A gas company has a monthly billing rate based on the total gas consumption by its customers.\nThe charge varies according to the meter reading (m3). The rate structure is as following: \nNote: There are situations where the final reading may be less than the initial reading.\nFor example, the initial reading might be 9980 while the final reading is 0015 indicating a consumption during the month of 35m3 because the meter has 'rolled over'.",
  "Output": "For each customer, your program should re-output the customer's account number and then on a new line output the final charge in dollars rounded off to two decimal places.",
  "Title": "BlueBook - Bills Bills Bills",
  "Input": "For each customer, the program should read an account number 0 \u2264 A \u2264 99999 and two meter readings 0 \u2264 M1, M2 < 10000.\nM1 represents the reading at the beginning of the month while M2 represents the reading at the beginning of the next month.\nThe first line of input will be the account number. The second line of input will be M1 followed by a space then M2.\nThe input will be terminated if and only if a negative account number is entered."
}{
  "Example": "Sample Input \n34567\n0000 0005\n12345\n0000 0015\n-1\nSample Output\nAccount_#:_34567\nBill:_6.59\nAccount_#:_12345\nBill:_7.78\nThe '_' are used to represent spaces. Your program should output spaces instead of the underscores.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A gas company has a monthly billing rate based on the total gas consumption by its customers.\nThe charge varies according to the meter reading (m3). The rate structure is as following: \nNote: There are situations where the final reading may be less than the initial reading.\nFor example, the initial reading might be 9980 while the final reading is 0015 indicating a consumption during the month of 35m3 because the meter has 'rolled over'.",
  "Output": "For each customer, your program should re-output the customer's account number and then on a new line output the final charge in dollars rounded off to two decimal places.",
  "Title": "BlueBook - Bills Bills Bills",
  "Input": "For each customer, the program should read an account number 0 \u2264 A \u2264 99999 and two meter readings 0 \u2264 M1, M2 < 10000.\nM1 represents the reading at the beginning of the month while M2 represents the reading at the beginning of the next month.\nThe first line of input will be the account number. The second line of input will be M1 followed by a space then M2.\nThe input will be terminated if and only if a negative account number is entered."
}{
  "Example": "Sample Input \n34567\n0000 0005\n12345\n0000 0015\n-1\nSample Output\nAccount_#:_34567\nBill:_6.59\nAccount_#:_12345\nBill:_7.78\nThe '_' are used to represent spaces. Your program should output spaces instead of the underscores.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A gas company has a monthly billing rate based on the total gas consumption by its customers.\nThe charge varies according to the meter reading (m3). The rate structure is as following: \nNote: There are situations where the final reading may be less than the initial reading.\nFor example, the initial reading might be 9980 while the final reading is 0015 indicating a consumption during the month of 35m3 because the meter has 'rolled over'.",
  "Output": "For each customer, your program should re-output the customer's account number and then on a new line output the final charge in dollars rounded off to two decimal places.",
  "Title": "BlueBook - Bills Bills Bills",
  "Input": "For each customer, the program should read an account number 0 \u2264 A \u2264 99999 and two meter readings 0 \u2264 M1, M2 < 10000.\nM1 represents the reading at the beginning of the month while M2 represents the reading at the beginning of the next month.\nThe first line of input will be the account number. The second line of input will be M1 followed by a space then M2.\nThe input will be terminated if and only if a negative account number is entered."
}{
  "Example": "Sample Input \n3\n1.5\n3\n2.2\n\nSample Output\n3.0000\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given T real numbers, find and output the largest one to four decimal places.",
  "Output": "",
  "Title": "BlueBook - Max",
  "Input": ""
}{
  "Example": "Sample Input \n1\n9999\n10001\n1000000\n29999\n-1\nSample Output\n2\n1\n1\n0\n0\n1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given N (0 \u2264 N \u2264 1 000 000), you are to count how many times N falls into any of the 6 ranges given below.",
  "Output": "Output the number of occurences of N in the ranges A .. F.\nOutput '0' if N was never found for that particular range.\nDo not include -1 into your calculations.",
  "Title": "BlueBook - Payment",
  "Input": "Input consists of bunch of integers (0 \u2264 N \u2264 1000000) which will be terminated by '-1'.\nThere will always be less than 10000 integers."
}{
  "Example": "Sample Input \n2\n3\n4\n4\n-1\n\nSample Output\n4\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "BlueBook - Mode",
  "Input": ""
}{
  "Example": "Sample Input \n3\n2\n1\n2\n2\n1\n\n1\n5\n\n2\n1\n2\n3\n4\n\nSample Output\nyes\nyes\nno\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Determine if a table of numbers containing N rows and N columns is a magic square.\nA N\u00d7N table of numbers (1 \u2264 N \u2264 50) is a magic square if and only the sum of the numbers along any\nrow or column is constant. The diagonals are not required to have the same sum.",
  "Output": "",
  "Title": "BlueBook - Magic Square",
  "Input": ""
}{
  "Example": "Sample Input \n3\n\nSample Output\n1\n1 1\n1 2 1\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "BlueBook - Triangle",
  "Input": ""
}{
  "Example": "Sample Input \n9\n\nSample Output\n0\n1\n1\n0\n1\n0\n1\n0\n0\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given an integer N, perform the Sieve of Eratosthenes on the integers from 1 to N inclusive.",
  "Output": "",
  "Title": "BlueBook - Sieve",
  "Input": ""
}{
  "Example": "Sample Input \n5\nA\nB\nC\nB\n%\n\nSample Output\n1\n2\n1\n0\n0\n0\n1\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given N characters C1,\u2026 CN, each denoting one vote for the corresponding\ncandidate, determine the number of votes received by each candidate, as well as the number of spoiled ballots.\nVotes for valid candidates in the election are denoted by the letters 'A' through 'F', inclusive. Any other character\nrepresents a spoiled ballot.",
  "Output": "",
  "Title": "BlueBook - Voting",
  "Input": ""
}{
  "Example": "Sample Input \n2\n 2\n22\n\nSample Output\n1\n0\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "BlueBook - First Blank",
  "Input": ""
}{
  "Example": "Sample Input \n4\n123\n1\n-12\n0\n\nSample Output\n3\n1\n2\n1\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "BlueBook - Digits",
  "Input": ""
}{
  "Example": "Sample Input \n2\nabCDefg\nWEEEIPWNNOOBS~~?~?~??@#!#$%?$^?$%*\n\nSample Output\nabcdefg\nweeeipwnnoobs~~?~?~??@#~#$%?$^?$%*\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nGiven an input string, whose length is less than 256, output the string\nwith all of the upper case letters ('A'..'Z') converted to the corresponding\nlower case letter ('a'..'z').\n",
  "Title": "BlueBook - Lower Case",
  "Input": ""
}{
  "Example": "Sample Input \n3\n1\n2\n3\nSample Output\n0\n1\n1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given T (1 \u2264 T \u2264 10000) integers N (1 \u2264 N < 2^16), output \"1\" if each one is prime, and \"0\" otherwise.\nRemember: an integer is prime iff (if and only if) it has exactly two divisors: 1 and N.",
  "Output": "Lines 1..T: One integer \"1\" or \"0\" denoting whether N is prime. Output \"1\" if N is prime, and \"0\" otherwise.",
  "Title": "BlueBook - Prime",
  "Input": "Line 1: one integer T\nLines 2..T+1: one integer N"
}{
  "Example": "Sample Input \n4\n0\n4\n100\n400\n\nSample Output\n1\n1\n0\n1\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given T (1 \u2264 T \u2264 10000) non-negative year values, where each year Y is 0 \u2264 Y \u2264 1000000, determine whether or not each one is a leap year.\nRemember: A year is a leap year if it is divisible by 4 but not by 100 or if it is divisible by 400. 0 is considered a leap year.",
  "Output": "Lines 1..T: one integer \"1\" or \"0\" denoting whether N is a leap year.\nOutput \"1\" if N is a leap year, and \"0\" otherwise. ",
  "Title": "BlueBook - Leap Year",
  "Input": "Line 1: A single integer representing the number of test cases (years to be entered)\nNext T lines: Each year value\n"
}{
  "Example": "Sample Input \n2\n10\n123\n10\n456\n+\n10\n\n8\n777\n5\n333\n-\n2\n\n\nSample Output\n579\n110100010",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given two integers A and B (0 \u2264 A, B < 2^32 - base 10), in bases B1 and \nB2 (2 \u2264 B1, B2 \u2264 10), output the result of either + - * / in\nthe integral base BF (2 \u2264 BF \u2264 10). The resulting answer will be less than 2^32 in base 10, and will always be positive.\nPerform integer division (5 / 2 = 2) on the operands. Substitute the operand into (A <operand here> B) - so you should perform (A - B), (A / B), etc.",
  "Title": "BlueBook - Calculator",
  "Input": "Each test case has the following format:\nLine 1: B1\nLine 2: N1\nLine 3: B2\nLine 4: N2\nLine 5: The operand (Either '+', '-', '*', or '/')\nLine 6: BF"
}{
  "Example": "Sample Input \n200\n100\nSample Output 1\nyes\nSample Input 2\n100\n200\nSample Output 2\nno",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "Write a program that reads two positive integers and then determines whether or not the first number is a multiple of the second.\nThe program should output \"yes\" if they are, and \"no\" otherwise.",
  "Output": "Output \"yes\" if the first number is a multiple of the second number.",
  "Title": "BlueBook - Multiple",
  "Input": "The input cosists of two integer numbers a and b."
}{
  "Example": "Sample Input \n10\n5\nSample Output 1\n-0.50\nSample Input 2\n13.5555\n1.244685\nSample Output 2\n-0.09\nSample Input 3\n0\n0\nSample Output 3\nindeterminate\nSample Input 4\n0\n4\nSample Output 4\nundefined",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given the real coefficients a and b (-1000 \u2264 a, b \u2264 1000), solve for x in the following equation.\nax + b = 0\nBe sure to output \"indeterminate\" and \"undefined\" whenever appropriate. Remember 0/0 is indeterminate, and something like 4/0 is undefined.\nOutput the value of x rounded to two decimal places.",
  "Output": "Output the value of x according to the given values and equation. Be sure to output \"indeterminate\" and \"undefined\" whenever appropriate.",
  "Title": "BlueBook - Equation",
  "Input": "The input cosists of two real numbers, a and b. a and b will be on separate lines, with a first, and b second."
}{
  "Example": "Sample Input \n9 12\n############\n#          #\n#       S  #\n#          #\n#          #\n#          #\n#          #\n#          #\n###D########\nSample Output\nSample Input\n5 10\n##########\n#S    # ##\n#   ######\n###      #\n####D#####\nSample Output",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "As a kid, you might have played the game Pipe Dream.\nHere's a picture (yes, from Windows 3.1!):\nThe goal is basically to get the fluid from one place to another.\nIn the original game, the pieces came to you randomly and you had to create the\nlongest path.\nHowever, interesting games for humans tend to be hard for computers. Thus,\nyour task is easier: use pipes to just guide the flow from one point to\nanother. You will only have 4 types of pipes, and you can use as many of\nthem wherever you wish.\nYou need to use the four \"angle\" pipes - use the characters\n \u2554 \u2557 \u255a \u255d to represent them. To output\nthese, use the following UTF-8 sequences:\n\n\nA grid with obstacles and the source/destination blocks will be given to\nyou. Output any structure of pipes that gets the fluid to its\ndestination.",
  "Output": "",
  "Title": "Pipe Dream",
  "Input": ""
}{
  "Input:": "",
  "Example": "Sample Input \n3\n80\n90\n100\n5\n70\n40\n50\n60\n80\nSample Output:\n60\n",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Output:": "",
  "Description": "(1-0) + (2-1) + (3-1) = 4.",
  "Title": "Presents"
}{
  "Time Limit": "2.00s",
  "Description": "After proving his \"intelligence\" to Billy-Bob, Jim-Bob decides to give him a puzzle. He describes his family tree to Billy-Bob and asks him, \"Am I a redneck?\"\nJim-Bob's family consists of N (1 \u2264 N \u2264 1000) people, including himself. Person i has a name ni with no spaces in it. They also have pi (0 \u2264 pi \u2264 2) parents (sometimes Jim-Bob can only remember one or neither of a person's parents). A person can never be his/her own parent. Though Jim-Bob calls it his family tree, it's more like just a collection of people he knows, some people might not be related in any way to other people.\nA good way to identify a redneck is by a strange family structure (for example, if their daughter is also their mother). If for any family member, one of their direct ancestors (parents, grandparents, etc.) is also one of their direct descendants (children, grandchildren, etc.), then that person is a redneck. If Jim-Bob is in any way related to a redneck, then he himself might be a redneck.\nNow, Billy-Bob also isn't too bright, so he asks you to help him figure it out. Given T (1 \u2264 T \u2264 5) cases of Jim-Bob's family tree, determine whether or not he might be a redneck.\n1\n6\nJim-Bob 0\nMary-Ann 0\nJohn 1 Matt\nBob-Jim 2 Jim-Bob Mary-Ann\nTina 1 John\nMatt 1 Tina\n\nNot a redneck",
  "Title": "You Might be a Redneck",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Description": "linear homogeneous recurrence relation of order\nwith constant coefficients\nt\n0\nt\n1\nt\nd-1\nd\nt\nn\nn\nc\n1\nt\nn-1\nn\nc\n2\nt\nn-2\nn\nc\nd\nd\nt\nn-d\nn-d\nd\nt\n0\nt\n1\nc\n1\nc\n2\nt\nn\nn\nn\nt\nn\nn\nt\nn-1\nn\nt\nn-2\nn\nt\n0\nt\n1\n\n\nd\nt\n0\nt\nd-1\nd\nc\n1\nc\nd\nd\nn\nt\nn\nn\n\n\nInput\n\nd\nd\nn\nn\n9\n\nd\nt\ni\ni\nt\ni\ni\nt\n0\nt\n1\nt\nd-1\nd\n\nd\nc\ni\ni\nc\ni\ni\nc\n1\nc\n2\nc\nd\nd\n\n\nOutput\n\nt\nn\nn\n\n\nSample Input\n\n\n\n\n\nSample Output\n\n\n\nExplanation\n\nt\n0\n0\nt\n1\n1\nt\nn\nn\nt\nn-1\nn\nt\nn-2\nn\nn\n",
  "Title": "Recurrence Solver",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n2\n0 1 1\n0 2 1\nSample Output:\n3",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Output:": "",
  "Description": "",
  "Title": "Sleigh Ride"
}{
  "Example": "Sample Input \n8 48\n10 7\n5 1\n50 30\n5 1\n10 5\n100 1000\n25 10\n60 40\nSample Output\n95",
  "Explanation": "Your friend only has 48 hours, and 8 problems to choose from. To maximize his points, he should do problems 2, 3, 4, 5, and 7, giving him 95 points in 47 hours.",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "It's almost report card time, so of course everyone has started programming like mad. There are only T (1 \u2264 T \u2264 1000) hours left before the Sunday midnight deadline!\nLuckily, you've earned your points gradually, so now you can just sit back and watch your classmates struggle. One of your friends in particular is really screwed, so he's decided to skip school all week and go on a coding spree.\nThough your friend is lazy, he has done some problems on the Judge, so now he has exactly N (1 \u2264 N \u2264 1000) problems available to him. No more problems will be posted until after the deadline, and he can't get partial marks on any of these problems. Problem i is worth Vi points and he knows in advance that he can solve it in Hi hours (1 \u2264 Vi, Hi \u2264 1000).\nYou're not a very pleasant person, so you want to torture your friend a bit. You plan to calculate the most points your friend could possibly get by the deadline, just so you can taunt him with that number.",
  "Output": "Output the maximum amount of points your friend can get in at most T hours of coding.",
  "Title": "Coding Spree",
  "Input": ""
}{
  "Example": "Sample Input \n7 6\n1 2 4\n1 3 1\n3 5 2\n2 4 2\n2 5 6\n5 4 2\n5 6 10\n0 0\n5 5\n1 20\n2 5\n10 2\n0 0\nSample Output\n19",
  "Explanation": "The city looks something like this (Jim-Bob's best route is shown in red):\n\nJim-Bob can drive to intersection 2 (4 min), drive on to intersection 4 (2 min), wait for the green light (1 min), drive down to intersection 5 (2 min), and finally drive to Billy-Bob's house (10 min). This is a total of 19 minutes.\nNote: The traffic light at intersection 3 only stays green for 1 minute, which means that Jim-Bob would just miss it if he drove directly there. On the other hand, he makes the green lights as intersections 2 and 5 just in time, as they turn red 1 minute after he passes.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Jim-Bob lives in a strange city where the streets don't necessarily run NS or EW. Instead the N (1 \u2264 N \u2264 100,000) streets run seemingly at random, sometimes crossing over each other by bridges, and intersecting with one another at exactly K (1 \u2264 K \u2264 1,000) intersections. Each intersection consists of some streets coming together, as well as a traffic light.\nStreet i starts at intersection si (1 \u2264 si \u2264 K), and ends at a different intersection ei (1 \u2264 ei \u2264 K), going through no other intersections in between. It takes ti (1 \u2264 ti \u2264 1,000) minutes to travel down street i (this number is derived from the length, the average pothole size, and the amount of roadkill). Each road can be travelled in either direction in the same amount of time.\nThe traffic lights in this city are also strange. First of all, each one only alternates between green and red. Each light also cycles through these colours at a different rate - the traffic light located at intersection i stays green for gi (1 \u2264 gi \u2264 1,000) minutes, then stays red for ri (1 \u2264 ri \u2264 1,000) minutes, then goes back to green, and so on.\nJim-Bob always obeys the law, and will never run a red light. If he arrives at an intersection while the light is green, he can pass right through it. Otherwise, he must wait there until the light turns green. If he gets to an intersection just as the traffic light is turning red, he must wait. It takes no time to drive through an intersection, so the light will never turn red on him as he drives through.\nJim-Bob starts at his house, also known as intersection 1. As soon as he leaves his house, all the traffic lights turn green, starting their green-red-green cycle. He wishes to drive to Billy-Bob's house (which is right at intersection K) as fast as possible. Neither the starting nor the finishing intersection have traffic lights, so their g and r will be given as 0. Find the minimum number of minutes Jim-Bob can take to drive from his house to Billy-Bob's.",
  "Output": "A single integer - the minimum number of minutes it takes to drive from Jim-Bob's house to Billy-Bob's. It will always be possible to do this.",
  "Title": "Traffic Lights",
  "Input": "2 integers - N and K.\nThe next N lines contain 3 integers each - si, ei, and ti.\nThe next K lines contain 2 integers each - gi, and ri."
}{
  "Example": "Sample Input \n5 5 2\nXXXX.\nX..X.\nX..X.\nX....\n.XX..\nSample Output\n0.875",
  "Explanation": "There are 18 possible areas you could pick, yielding this many ships each:\n1 1 1 1\n1 0 1 1\n1 0 1 1\n2 1 1 0\nThis is a total of 14 ships, for an average of 0.875.",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "You managed to beat your friend in Battleships and take his points! Perfectly legitimately, of course. However, for some strange reason he's upset, and now challenges you to a rematch - this time at the game of Advanced Battleships, and with even higher stakes!\nYou each have a grid of M rows of N cells (1 \u2264 N, M \u2264 500). Each cell is either empty or contains part of a player's ship. What makes this game so \"advanced\" is the fact that each ship consists of 1 or more adjacent, nonempty cells. Two cells are considered adjacent if they share a common side. Of course, this means that ships can have some very strange shapes. No two ships are adjacent to one another.\nYou know for a fact that you can distract your friend for a brief moment, this time by telling him that someone solved Good Hunting Will, but this trick will again only work exactly once. While he isn't looking, you'll have time to snatch up some of his ships with one hand. Your hand can cover a square of exactly S\u00d7S cells (1 \u2264 S \u2264 N, M), and you can gather all the ships that are at least partially within such a square at once.\nOf course, your friend is no fool, so he's got his grid well concealed. As such, you don't know anything about it except its size, so when the time comes, you'll just choose a random square of size S\u00d7S that's completely within the grid.\nAs usual, these bets attract large crowds. One of the bystanders who can see your opponent's grid knows your plan, and is curious as to the expected number of ships that you will grab (in other words, the average number of ships out of all the possible snatches you could make). Nerdy though he is, he can't calculate it in his head, so he runs over to a computer and codes up a program\u2026",
  "Output": "A single number - the expected number of ships that you'll grab. It must be within 10-8 of the correct answer.",
  "Title": "Advanced Battleships",
  "Input": ""
}{
  "Example": "Sample Input \nB -1 2 1 5\nB 3 -4 4 1\nG 2 1\nB 4 -3 6 -2\nB 6 -6 8 -4\nG 2 3\nG 1 4\nSample Output\n2.236\n0.000\n3.236",
  "Explanation": "The lake looks like this:\n\nFor the first G command, the geese must fly along the red line, which has a length of \u221a5.\nFor the second, the two boxen are touching, so no flight is necessary.\nFor the third, the geese must first fly along the red line, then walk across boxen 2 and 3, and finally fly along the blue line, which has a length of 1.",
  "Memory Limit": "64M",
  "Time Limit": "5.00s",
  "Description": "The University of Waterloo is famous for its booming population of geese, and many researchers go there to study them. One day, Doctor Y (known for his work in the field of boxology) decided to go there and investigate how good geese are at optimization problems.\nAt UW there is a large lake (so large, in fact, that the boundaries are never an issue). Doctor Y decides to drop a number of 2D boxen onto this lake and command the geese to travel from one to another, recording how much time they spend flying as opposed to walking (naturally, the geese won't swim, considering the not-so-appealing brown colour of the lake). He has a Boxdropper machine at his disposal to do the work for him - he can give it the following commands:\nSince the scientific community has not yet realized the benefits of studying boxen, Doctor Y isn't receiving much funding - as such, he only has 500 boxen at his disposal, and his machine can only handle 1,000,000 commands before it overheats. In cases worth 50% of the total points, he doesn't even have enough funding to purchase a fully functional Boxdropper - in these cases, all of the B commands will come first, followed by all of the G commands.\nThe geese can walk across boxen freely, but sometimes they may have to fly over water to reach other boxen. The geese, secretly participating in the second stage of the Canadian Computing Competition every year, are well versed in optimization problems such as these, and so will always choose a path that will minimize the total distance that they spend flying. Given the commands that Doctor Y inputs into the Boxdropper, determine the distances recorded by it (one for every G command).",
  "Output": "For every G command, output the distance that the geese spend flying. The numbers should be printed one per line, and rounded off to 3 decimal places.",
  "Title": "Boxdropper",
  "Input": "On each line, one of 3 commands will be given:\nIf the line starts with the character B, it will be followed by 4 integers (x1, y1, x2, and y2), with (-1,000,000 \u2264 x1, x2 \u2264 1,000,000) and (-1,000,000 \u2264 y1, y2 \u2264 1,000,000).\nIf the line starts with the character G, it will be followed by 2 integers a and b, (a \u2260 b and 1 \u2264 a, b \u2264 n), where n is the number of B commands so far.\n"
}{
  "Example": "Sample Input \n5 10\n-1 -1 2 5\n4 -3 5 3\n1 2 4 4\n5 -6 8 -4\n1 -2 8 0\n1 4\n5 4\n2 2\n3 1\n6 -5\n5 -1\n3 -3\n-1 -2\n-1 -1\n2 -1\nSample Output\n6",
  "Explanation": "Below is a top-down view of the surface of the wine:\n\nThe coloured-in squares are the boxen, the red dots are boxlings that are on top of at least one box, and the blue dots are the other boxlings. Counting the red dots, it can be seen that there are six of them.",
  "Memory Limit": "256M",
  "Time Limit": "3.00s",
  "Description": "Doctor Y, always eager to further his research in the field of boxology, is observing a family of boxen in their natural habitat - a barrel of wine. He has noticed that in addition to the N (1 \u2264 N \u2264 200,000) rectangular, two-dimensional boxen, there are M (1 \u2264 M \u2264 200,000) almost imperceptible points floating on the surface of the wine. He reasons that these must be baby boxen - also known as boxlings.\nCurious as to the customs of box families, Doctor Y wishes to count how many boxlings are floating on top of boxne. From his top-down view of the barrel, he has divided the surface of the wine into a two-dimensional Catersian plane, and noted the positions of all the boxen and boxlings. Each box occupies a rectangular region parallel to the axes of the plane, with its lower-left corner at (x1, y1) and its upper-right corner at (x2, y2), such that (-108 \u2264 x1 < x2 \u2264 108) and (-108 \u2264 y1 < y2 \u2264 108). Doctor Y has observed that boxen sometimes overlap one another. Each boxling is so small that it occupies only a single point on the plane, with x-coordinate a and y-coordinate b, such that (-108 \u2264 a, b \u2264 108).\nHaving recorded the locations of all the life forms on the surface of the wine, Doctor Y is interested in counting exactly how many boxlings are floating on top of at least one box. Note that if a boxling is on the very edge or corner of a box, it counts as being on top. Also note that two boxlings can occupy the exact same locations, and that they should be counted separately.\nWith so many boxen and boxlings living in this wine barrel, Doctor Y doesn't feel like sitting there and counting them all by hand, crazy though he is. As such, he wants you to write a program to, given the locations of all the boxen and boxlings, count the number of boxlings that are floating on top of at least one box. Don't worry; your hard work will surely lead to exciting discoveries in the field of boxology.",
  "Output": "A single integer - the number of boxlings that are on top of at least one box.",
  "Title": "Boxlings",
  "Input": ""
}{
  "Example": "Sample Input \n7\n0 4\n-1 -1 1 5\n0 -2 4 2\n0 2 1 -4\n5 -4 2 -1\n5 2 7 4\n3 -5 4 -4\n0 -6 3 -4\nSample Output\n12.0\n0.0 0.0",
  "Explanation": "The grid looks like this:\n\nThe filled-in squares represent squares that are part of at least one box - together, they make up the box union. Note that the union can have holes in it, and that it can be disjoint.\nThe blue lines denote the boundaries of the union - these are the lines that the laser can bounce off of.\nThe yellow lines are edges of boxen that do not contribute to the union - the laser can go through these freely.\nThe red diamond is the position of the laser, and the red line is the path that the laser beam follows.\nNote that when it bounces off the corner at (2, -2), since it didn't hit it head-on, it is the same as bouncing off of a horizontal edge.\nFollowing the path of the laser beam, it can be seen that it collides with itself at (0, 0). Before this, it has travelled 12\u221a2 units, which takes exactly 12 seconds.",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "More Examples": "If the laser were positioned at (0, 3), the output should be:\n12.0\n0.0 -1.0\nIf the laser were positioned at (0, 1), the output should be:\n5.0\n5.0 -4.0\nIf the laser were positioned at (0, 0), the output should be:\n8.0\nBroken equipment",
  "Description": "Doctor Y, a leading expert in the field of boxology, is investigating the properties of boxen with his expensive super-precision laser. In particular, he plans to position the laser inside the union of a bunch of axis-aligned boxen, and see where the beam collides with itself.\nSince Doctor Y blew all his cash on the laser, he can't actually afford to purchase boxen to conduct his experiment - instead, he will simulate it on his old computer, which uses an integer grid system. He will give his computer an integer N, the number of boxen (1 \u2264 N \u2264 10,000), as well as their descriptions. Each box is described by 4 integers - x1, y1, x2 and y2, such that (-3000 \u2264 x1, x2 \u2264 3000) and (-3000 \u2264 y1, y2 \u2264 3000), where (x1, y1) and (x2, y2) are any two opposite corners of the box. Note that some boxen may have an area of 0 - these do not contribute to the union. He will also input the location of the laser (A, B) such that (-3000 \u2264 A, B \u2264 3000) and such that it will be positioned strictly within the box union. The laser points down and right at a 45\u00b0 angle.\nAs it turns out, boxen are made of a perfectly reflective material (a fact which Doctor Y will discover upon the completion of his experiment) - as such, whenever the laser beam hits the edge of the box union, it bounces off. For example, if it hits a vertical edge from the left, it bounces to the right, with the up-down direction preserved. If it hits a corner head-on, it will reverse direction, hence colliding with itself right at the corner. Normally, light travels quite fast, but due to the mysterious properties of boxen, the speed of light when inside a box union is only \u221a2 units/second.\nDoctor Y plans to use his computer to simulate the paths of the lasers and see when and where they first collide, but there's one problem - the only program on his computer is C++! Offering non-cafeteria food, he lures a desperate Waterloo student into his lab, where he forces him (or her?) to write the laser simulation program. That's you!",
  "Output": "If the laser beam never collides with itself of the laser, simply output \"Time limit exceeded\".\nIf the laser beam collides with the actual laser before it collides with itself, the first line of output should consist of a single number - the amount of time that passes before the laser beam collides with the laser, in seconds. The second line should read \"Broken equipment\".\nOtherwise, the first line of output should consist of a single number - the amount of time that passes before laser beam first collides with itself, in seconds. The second line should contain a pair of numbers - the X and Y coordinates of where this takes place, respectively.\nEach number should be rounded off to 1 decimal place.",
  "Title": "Union Laser",
  "Input": ""
}{
  "Example": "Sample Input \n6\n1 4 7 4\n2 2 2 4\n2 2 6 2\n6 1 6 6\n5 1 6 1\n3 6 5 6\nSample Output\n4",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Diagram": "",
  "Description": "",
  "Output": "",
  "Title": "Security Cameras"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n48\n3\n10\n4\n\nSample Output\nMartha plays 66 times before going broke.\n",
  "Description": "\nMartha takes a jar of quarters to the casino\nwith the intention of becoming rich. She plays three machines in turn. Unknown\nto her, the machines are entirely predictable. Each play costs one quarter. The\nfirst machine pays 30 quarters every 35th time it is played; the second machine\npays 60 quarters every 100th time it is played; the third pays 9 quarters every\n10th time it is played.\n\n\nYour program should take as input the number\nof quarters in Martha's jar (there will be at least one and fewer than 1000), and\nthe number of times each machine has been played since it last paid.\n\n\nYour program should output the number of times Martha plays until she goes broke.\n",
  "Title": "CCC00J3S1 - Slot Machines",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n100 \n3 \n33 \n66 \n1 \nSample Output\nRoberta wins in 3 strokes. ",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Roberta the Robot plays a perfect game of\n  golf. When she hits the golf ball it always goes directly towards the hole on\n  the green, and she always hits exactly the distance that is specified for the\n  club. Each such action is known as a stroke, and the object of golf is to hit\n  the ball from the tee to the hole in the fewest number of strokes. Roberta\n  needs a program to select the best combination of clubs to reach the hole in\n  the fewest strokes. She also needs to decide if the task is impossible, in\n  which case she graciously acknowledges the loss. Roberta can carry up to 32\nclubs, and the total distance from the tee to the hole does not exceed 5280 metres. ",
  "Output": "If Roberta can get the ball from the tee to\n  the hole, without passing the hole, print\n  \"Roberta wins in n strokes.\" where n is minimized. If\n  Roberta cannot get the ball from the tee to the hole, print \"Roberta\nacknowledges defeat.\". ",
  "Title": "CCC00S4 - Golf",
  "Input": "The first line of input gives the distance\n  from the tee to the hole, an integral number of metres\n  between 1 and 5280. The next line states the number of clubs, between 1 and 32.\n  For each club, a line follows giving the distance, in metres,\n  that the club will hit the ball, an integer between 1 and 100. No two clubs\nhave the same distance. "
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n6\n100.00\n100.00\n200.00\n150.00\n140.00\n200.00\n100.00\n300.00\n300.00\n300.00\n300.00\n100.00\nSample Output\nThe sheep at (100.00, 100.00) might be eaten. \nThe sheep at (300.00, 100.00) might be eaten.",
  "Description": "A square 1000 by 1000 field contains several\n  sheep. A coyote enters the field at some point in the south boundary and\n  proceeds to eat the sheep closest to the point of entry, picking arbitrarily if\n  more than one sheep is equally close. The coyote, being sated, then leaves the\nfield. \nYour job is to determine which sheep may be\neaten by the coyote. \nAssume that the southwest corner of the\nfield is located at (0.00, 0.00), the northwest corner at (0.00, 1000.00), the\nnortheast corner at (1000.00, 1000.00) and the southeast corner at (1000.00,\n0.00). The first line of input gives the number of sheep, between 1 and 1000.\nFor each sheep a pair of lines follows, giving its coordinates within the field\n(between 0.00 and 1000.00). \nFor each sheep that might be eaten print a\nline \"The sheep at (x, y) might be eaten.\" where x and y\ngive the location of the sheep to two decimal places. The sheep can be listed\nin any order in the output.",
  "Title": "CCC00S5 - Sheep and Coyotes",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n1\n12345678901234567900\nSample Output\n12345678901234567900\n1234567890123456790\n123456789012345679\n12345678901234558\n1234567890123447\n123456789012337\n12345678901226\n1234567890116\n123456789005\n12345678895\n1234567884\n123456784\n12345674\n1234563\n123453\n12342\n1232\n121\n11\nThe number 12345678901234567900 is divisible by 11.",
  "Description": "Write a program which accepts as input a positive integer and\nchecks, using the algorithm described below, to see whether or not\nthe integer is divisible by 11.  This particular test for\ndivisibility by 11 was given in 1897 by Charles L. Dodgson\n(Lewis Carroll).\n\n\ndeleting the units digit\n\nsubtracting the deleted digit from the shortened number\n\nAs usual, the first number in the input indicates the number\nof positive integers that follow.  Each positive integer has a\nmaximum of 50 digits.  You may assume no leading zeroes exist\nin the positive integers.\n\n\nFor each positive integer in the input, the output consists\nof a series of numbers formed as a digit is deleted and\nsubtracted, followed by a message indicating whether or not the\noriginal number is divisible by 11.  Outputs for different\npositive integers are separated by blank lines.\n\n",
  "Title": "CCC96S2 - Divisibility by 11",
  "Memory Limit": "16M"
}{
  "Output specification": "For each test case output the sentence: \"Optimal train swapping takes S swap(s).\" where S is an integer representing the minimal number of swaps to order the train.",
  "Input specification": "The input contains on the first line the number of test cases (N). Each test case consists of two input lines.  The first line of a test case contains an integer L, determining the length of the train (0\u00a0\u2264\u00a0L\u00a0\u2264\u00a050). The second line of a test case contains a permutation of the numbers 1 through L, indicating the current order of the carriages. The carriages should be ordered such that carriage 1 comes first, then 2, etc., with carriage L coming last.",
  "Sample input": "3\n3\n1 3 2\n4\n4 3 2 1\n2\n2 1\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "At an old railway station, you may still encounter one of the last remaining \"train swappers\".  A train swapper is an employee of the railroad, whose sole job it is to rearrange the carriages of trains.\nOnce the carriages are arranged in the optimal order, all the train driver has to do is drop the carriages off, one by one, at the stations for which the load is meant.\nThe title \"train swapper\" stems from the first person who performed this task, at a station close to a railway bridge.  Instead of opening up vertically, the bridge rotated around a piller in the center of the river. After rotating the bridge 90 degrees, boats could pass left or right.  The first train swapper had discovered that the bridge could be operated with at most two carriages on it.  By rotating the bridge 180 degrees, the carriages switched place, allowing him to rearrange the carriages (as a side effect, the carriages then faced the opposite directions, but train carriages can move either way, so who cares).\nNow that almost all train swappers have died out, the railway company would like to automate their operation.  Part of the program to be developed is a routine which decides, for a given train, the least number of swaps of two adjacent carriages necessary to order the train. Your assignment is to create a routine that computes the minimal number of swaps.",
  "Sample output": "Optimal train swapping takes 1 swap(s).\nOptimal train swapping takes 6 swap(s).\nOptimal train swapping takes 1 swap(s).\n",
  "Title": "CCC96 Stage 2 - Train Swapping"
}{
  "Output specification": "For each test case, the output contains a single line saying either:\nimpossible if there is no code consistent with all guesses.\nn , where n is the secret code, if there is exactly one code consistent with all guesses.\nindeterminate if there is more than one code which is consistent with all guesses.",
  "Input specification": "The first line of input specifies the number of test cases (N) your program has to process.  Each test case consists of a first line containing the number of guesses G (0\u00a0\u2264\u00a0G\u00a0\u2264\u00a010), and G subsequent lines consisting of exactly 8 characters: a code of four digits, a blank, a digit indicating the number of correct digits, a \"/\", and a digit indicating the number of correct but misplaced digits.",
  "Sample input": "4\n6\n9793 0/1\n2384 0/2\n6264 0/1\n3383 1/0\n2795 0/0\n0218 1/0\n1\n1234 4/0\n1\n1234 2/2\n2\n6428 3/0\n1357 3/0\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "We are observing someone playing a game similar to Mastermind\u2122. The object of this game is to find a secret code by intelligent guesswork, assisted by some clues. In this case the secret code is a 4-digit number in the inclusive range from 0000 to 9999, say \"3321\". The player makes a first random guess, say \"1223\" and then, as for each of the future guesses, gets a clue telling how close the guess is. A clue consists of two numbers: the number of correct digits (in this case, one: the \"2\" at the third position) and the additional number of digits guessed correctly but in the wrong place (in this case, two: the \"1\" and the \"3\"). The clue would in this case be: \"1/2\". For the guess \"1110\", the clue would be \"0/1\", since there are no correct digits and only one misplaced digit. (Notice that there is only one digit 1 misplaced.)\nWrite a program that, given a set of guesses and corresponding clues, tries to find the secret code.",
  "Sample output": "3411\n1234\nindeterminate\nimpossible\n",
  "Title": "CCC96 Stage 2 - Safebreaker"
}{
  "Output specification": "For each test case, print on one line the text 'There are X black pixels.', where X is the number of black pixels in the resulting image.",
  "Input specification": "The first line of input specifies the number of test cases (N) your program has to process. The input for each test case is two strings, each string on its own line. The string is the pre-order representation of a quadtree. It is guaranteed that each string in the input represents a valid quadtree.",
  "Sample input": "3\nppeeefpffeefe\npefepeefe\npeeef\npeefe\npeeef\npeepefefe\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A modern computer artist works with black-and-white images of 32 \u00d7 32 units, for a total of 1024 pixels per image.  One of the operations the artist performs is \"adding\" two images together, to form a new image.  In the resulting image a pixel is black if it was black in at least one of the component images, otherwise it is white.\nA quadtree is a representation format used to encode images. The fundamental idea behind the quadtree is that any image can be split into four quadrants.  Each quadrant may again be split in four subquadrants, etc. In the quadtree, the image is represented by a parent node, while the four quadrants are represented by four child nodes, in a predetermined order as shown in the figure below.\n\nOf course, if the whole image is a single color, it can be represented by a quadtree consisting of a single node. In general, a quadrant needs only to be subdivided if it consists of pixels of different colors. As a result, the quadtree need not be of uniform depth.\nThe preorder representation of a quadtree consisting of a single node is given by 'e', if the node represents an 'empty' (white) quadrant, or 'f', if the node represents a 'full' (black) quadrant. The preorder representation of a quadtree of more than one node consists of the letter 'p' (of \"parent\") followed by the preorder representation of the four subtrees in the order indicated in the figure below. See the figure for an example.\nThe artist believes in what is called the preferred fullness: for an image to be attractive the most important\nproperty is the number of filled (black) pixels in the image. Your job is to write a program that, given the quadtree representation of two images, calculates the number of pixels that are black when the two images are added.\nIn the figure, the first example is shown (from top to bottom) as image, quadtree, pre-order string and number of pixels. The quadrant numbering is shown at the top of the figure.\n",
  "Sample output": "There are 640 black pixels.\nThere are 512 black pixels.\nThere are 384 black pixels.\n",
  "Title": "CCC96 Stage 2 - Quadtree"
}{
  "Output specification": "For each word in the word list of one test case, your program must output a pair of integers representing the location of the corresponding word in the grid. The integers must be separated by a single space.\nThe first integer is the line in the grid where the first letter of the given word can be found (1 represents the topmost line in the grid, and m represents the bottommost line).\nThe second integer is the column in the grid where the first letter of the given word can be found (1 represents the leftmost column in the grid, and n represents the rightmost column in the grid).\nIf a word can be found more than once in the grid, then the location which is output should correspond to the uppermost occurrence of the first letter of the word (i.e. the occurrence which places the first letter of the word closest to the top of the grid). If two or more words are uppermost, the output should correspond to the leftmost of these occurrences. All words can be found at least once in the grid. Outputs of different test cases are separated by a blank line.",
  "Input specification": "The input begins with a number on a line by itself, indicating the number of test cases that follow.\nEach test case consists of a pair of integers, m followed by n (1\u00a0\u2264\u00a0m\u00a0\u2264\u00a050 and 1\u00a0\u2264\u00a0n\u00a0\u2264\u00a050) in decimal notation on a single line.\nThe next m lines contain n letters each; this is the grid of letters in which the words of the list must be found. The letters in the grid are in upper or lower case.\nFollowing the grid of letters, another integer k appears on a line by itself (1\u00a0\u2264\u00a0k\u00a0\u2264\u00a020).\nThe next k lines of input contain the list of words to search for, one word per line. These words contain upper and lower case letters only (no spaces, hyphens or other non-alphabetic characters). All words have positive length.",
  "Sample input": "2\n2 2\nby\nre\n2\nbe\neb\n8 11\nabcDEFGhigg\nhEbkWalDork\nFtyAwaldORm\nFtsimrLqsrc\nbyoArBeDeyv\nKlcbqwikomk\nstrEBGadhrb\nyUiqlxcnBjf\n4\nWaldorf\nBambi\nBetty\nDagbert\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given an m by n grid of letters and a list of words, find the location in the grid at which the word can be found. A word matches a straight, uninterrupted line of letters in the grid, regardless of case.  The matching can be done in any of the eight directions either horizontally, vertically or diagonally through the grid.",
  "Sample output": "1 1\n2 2\n\n2 5\n2 3\n1 2\n7 8\n",
  "Title": "CCC96 Stage 2 - Where's Waldorf?"
}{
  "Output specification": "For each of the n query pairs, output a sequence of uppercase letters indicating the shortest route between the two query pair cities. The sequence must be output as consecutive letters, without intervening whitespace, on a single line. The first output line corresponds to the first query pair, the second output line corresponds to the second query pair, and so on. The letters in each sequence indicate the first letter of the cities on the desired route between the query pair cities, including the query pair cities themselves. A city will never be paired with itself in a query.",
  "Input specification": "The first line of input contains two numbers in decimal notation separated by a single space.  The first number (m) is the number of roads in the road network to be considered.  The second number (n) represents the number of queries to follow later in the file.\nThe next m lines in the input each contain the names of a pair of cities separated by a single space.  A city name consists of at most ten letters, the first of which is in uppercase. No two cities begin with the same letter.  The name Rome always appears at least once in this section of input;  this city is considered to be at level 0, the lowest-numbered level.  The pairs of names indicate that a road connects the two named cities.  The first city named on a line exists in a lower level than the second named city.  The road structure obeys the rules described above.  No two lines of input in this section are repeated.\nThe next n lines in the input each contain the names of a pair of cities separated by a single space.  City names are as described above. These pairs of cities are the query pairs. Your task for each query pair is to find the shortest route from the first named city to the second. Each of the cities in a query pair is guaranteed to have appeared somewhere in the previous input section describing the road structure.",
  "Sample input": "7 3\nRome Turin\nTurin Venice\nTurin Genoa\nRome Pisa\nPisa Florence\nVenice Athens\nTurin Milan\nTurin Pisa\nMilan Florence\nAthens Genoa\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "There is an ancient saying that \"All Roads Lead to Rome\". If this were true, then there is a simple algorithm for finding a path between any two cities. To go from city A to city B, a traveller could take a road from A to Rome, then from Rome to B.  Of course, a shorter route may exist.\nThe network of roads in the Roman Empire had a simple structure: beginning at Rome, a number of roads extended to the nearby cities. From these cities, more roads extended to the next further cities, and so on. Thus, the cities could be thought of as existing in levels around Rome, with cities in the ith level only connected to cities in the i-1st and i+1st levels (Rome was considered to be at level 0). No loops existed in the road\nnetwork. Any city in level i was connected to a single city in level i-1, but was connected to zero or more cities in level i+1. Thus, to get to Rome from a given city in level i, a traveller could simply walk along the single road leading to the connected i-1 level city, and repeat this process, with each step getting closer to Rome.\nGiven a network of roads and cities, your task is to find the shortest route between any two given cities, where distance is measured in the number of intervening cities.",
  "Sample output": "TRP\nMTRPF\nAVTG\n",
  "Title": "CCC96 Stage 2 - All Roads Lead Where?"
}{
  "Output specification": "The string 'No solution.' if there is no way the hopper can reach the finish point from the start point without hopping on an occupied square. Otherwise, the text 'Optimal solution takes N hop(s).', where N is the number of hops needed to get from start to finish point.",
  "Input specification": "The first line contains the number of test cases (N) your program has to process.\nEach test case consists of a first line containing the width X (1\u00a0\u2264\u00a0X\u00a0\u2264\u00a016) and height Y (1\u00a0\u2264\u00a0Y\u00a0\u2264\u00a016) of the grid.\nNext is a line containing four integers separated by blanks, of which the first two indicate the start point (x1, y1) and the last two indicate the end point (x2, y2), where the start and end point are valid points on the grid (that is, 0\u00a0\u2264\u00a0x1,\u00a0x2\u00a0<\u00a0X, and 0\u00a0\u2264\u00a0y1,\u00a0y2\u00a0<\u00a0Y).\nThe third line of each test case contains an integer P indicating the number of obstacles in the grid.\nFinally, the test case consists of P lines, each specifying an obstacle.\nEach obstacle consists of four integers: x1, x2, y1 and y2, (0\u00a0\u2264\u00a0x1\u00a0\u2264\u00a0x2\u00a0<\u00a0X, and 0\u00a0\u2264\u00a0y1\u00a0\u2264\u00a0y2\u00a0<\u00a0Y), meaning that all squares (x, y) with x1\u00a0\u2264\u00a0x\u00a0\u2264\u00a0x2 and y1\u00a0\u2264\u00a0y\u00a0\u2264\u00a0y2 are occupied. Neither the start point nor the finish point will ever be occupied.",
  "Sample input": "2\n5 5\n4 0 4 4\n1\n1 4 2 3\n3 3\n0 0 2 2\n2\n1 1 0 2\n0 2 1 1\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Hoppers are people on a jump stick who can jump from one square to the other, without touching the squares in between (a bit like a knight in chess). They can pick up speed and make bigger hops, but their acceleration per move is limited, and they\nalso have a maximum speed. The game of Hoppers is played on a rectangular grid, where each square on the grid is either empty or occupied. While hoppers can fly over any square, they can only land on empty squares. At any point in time, a hopper has a velocity (x,y), where x and y are the speed (in squares) parallel to the grid. Thus, a speed of (2,1) corresponds to a knight jump, (as does (-2,1) and 6 other speeds).\nTo determine the hops a hopper can make, we need to know how much speed a hopper can pick up or lose: either -1, 0, or 1 square in either or both directions. Thus, while having speed (2,1), the hopper can change to speeds (1,0), (1,1), (1,2), (2,0), (2,1), (2,2), (3,0), (3,1) and (3,2). It is impossible for the hopper to obtain a velocity of 4 in either direction, so the x and y component will stay between -3 and 3 inclusive.\nThe goal of Hoppers is to get from start to finish as quickly as possible (i.e. in the least number of hops), without\nlanding on occupied squares. You are to write a program which, given a rectangular grid, a start point S, and a finish point F, determines the least number of hops in which you can get from S to F. A hopper starts with initial speed (0,0) and does not care about the speed when arriving at F.",
  "Sample output": "Optimal solution takes 7 hop(s).\nNo solution.\n",
  "Title": "CCC96 Stage 2 - Hoppers",
  "Illustration of sample input": "The example input can be illustrated as follows. Let # denote an occupied square, S denote the start point, F denote the finish point, and * denote the boundary of the grid. Then the sample input can also be given as follows.\n2\n5 5\n*******\n*    F*\n* ####*\n* ####*\n*     *\n*    S*\n*******\n3 3\n*****\n* #F*\n*###*\n*S# *\n*****\n"
}{
  "Time Limit": "10.00s",
  "Example": "Sample Input \n3\n2 1\n2 0\n4 2\nSample Output\nThe bit patterns are\n10\n01\n\nThe bit patterns are\n00\n\nThe bit patterns are\n1100\n1010\n1001\n0110\n0101\n0011\n",
  "Description": "Write a program that repeatedly reads two numbers n and\nk and prints all bit patterns of length n with\nk ones in descending order (when the bit patterns are\nconsidered as binary numbers).  You may assume that 30 \u2265\nn > 0, 8 > k \u2265 0, and n\n\u2265 k.  The first number in the input gives the number of\npairs n and k.  The numbers n and\nk are separated by a single space.  Leading zeroes in a bit\npattern should be included.  See the example below.\n\n",
  "Title": "CCC96S3 - Pattern Generator",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n3\nVII+II=\nXXIX+X=\nM+I=\nSample Output\nVII+II=IX\nXXIX+X=XXXIX\nM+I=CONCORDIA CUM VERITATE\n",
  "Memory Limit": "16M",
  "Roman Research": "The Roman Numerals used by the Romans evolved over many years, and\nso there are some variations in the way they are written.  We will\nuse the following definitions:\n\nThe following symbols are used: \nI for 1,\nV for 5,\nX for 10,\nL for 50,\nC for 100,\nD for 500, and\nM for 1000.\n\nNumbers are formed by writing symbols from 1. from left to right,\nas a sum, each time using the symbol for the largest possible value.\nThe symbols M, C, X, or\nI may be used at most three times in succession.\nOnly if this rule would be violated, you can use the following rule:\nWhen a single I immediately precedes a V or\nX, it is subtracted.  When a single X \nimmediately precedes an L or C, it is subtracted.\nWhen a single C immediately precedes a D or \nM, it is subtracted.\n\nWhen a single I immediately precedes a V or\nX, it is subtracted.  When a single X \nimmediately precedes an L or C, it is subtracted.\nWhen a single C immediately precedes a D or \nM, it is subtracted.\n",
  "Time Limit": "2.00s",
  "Description": "If the Roman Empire had not fallen, then Rome would surely have\ndiscovered electricity and used electronic calculators; however, the\nRomans used Roman Numerals!  Your task is to implement a simple\nRoman Calculator which accepts two Roman Numerals and outputs the\nsum in Roman Numerals.  You may assume that numbers greater than\n1000 will not occur in the input.  Output numbers greater than 1000\nare illegal and should generate the message \nCONCORDIA CUM VERITATE\n(In Harmony with Truth).\n\n\nThe input consists of a number, indicating the number of test cases,\nfollowed by this many test cases.  Each test case consists of a single\nline with two numbers in Roman Numerals separated by a + \nalong with an = at the end.  There are no separating spaces.\n\n\nFor each test case the output is a copy of the input with the Roman \nNumeral that represents the sum.  Outputs for different test cases are\nseparated by a blank line.\n\n",
  "Title": "CCC96S4 - When in Rome"
}{
  "Example": "Sample Input \n1\n3\n3\n2\nHe\nThe cat\nThe dog\nbit\nkicked\nsaw\nhim\nthe mouse\n\nSample Output\nHe bit him.\nHe bit the mouse.\nHe kicked him.\nHe kicked the mouse.\nHe saw him.\nHe saw the mouse.\nThe cat bit him.\nThe cat bit the mouse.\nThe cat kicked him.\nThe cat kicked the mouse.\nThe cat saw him.\nThe cat saw the mouse.\nThe dog bit him.\nThe dog bit the mouse.\nThe dog kicked him.\nThe dog kicked the mouse.\nThe dog saw him.\nThe dog saw the mouse.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Write a program which accepts as input a list of subjects, a list of verbs,\nand a list of objects, and produces all possible sentences which consist of a\nsubject, a verb, and an object.",
  "Output": "The output is to consist of all possible sentences which can be formed using\none subject, one verb, and one object, and is to be output in alphabetical order\nwith a period at the end of each sentence. The output for\ndifferent data sets are to be separated by a single blank line.",
  "Title": "CCC97S1 - Sentences",
  "Input": "The first line of the input file contains a positive integer n\nwhich is the number of data sets which follow. For each of the n\ndata sets, the data begins with three positive integers, one per line, each\nless than or equal to 20, which represent the number of subjects, verbs, and\nobjects, respectively, which are provided. Following this line are the\nsubjects, one per line in alphabetical order, the verbs, one per line in\nalphabetical order, and the objects, one per line in alphabetical order. The\nmaximum length of any subject, predicate or object is 25 characters."
}{
  "Example": "Sample Input \n4\n6\n24\n30420\n10078\nSample Output\n6 is nasty\n24 is nasty\n30420 is nasty\n10078 is not nasty",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "We will call a positive integer \"nasty\" if it has at least two\npairs of positive integer factors such that the difference of one pair equals\nthe sum of the other pair. \nFor example, 6 is nasty since 6\u00a0x\u00a01\u00a0=\u00a06,\n2\u00a0x\u00a03\u00a0=\u00a06, 6\u00a0-\u00a01\u00a0=\u00a02\u00a0+\u00a03; and\n24 is also nasty since 12\u00a0-\u00a02\u00a0=\u00a06\u00a0+\u00a04. \nWrite a program which accepts as input a list of positive integers and\ndetermines if each one is nasty or not. ",
  "Output": "The output should contain one line for each test value. Each line is to\ncontain the test value and whether or not it is nasty. ",
  "Title": "CCC97S2 - Nasty",
  "Input": "The input is a list of positive integers, one per line. The first\nnumber in the list is the number of integers to be tested, and is at most 20.\nThe integers to be tested are all less than 32001. "
}{
  "Example": "Sample Input \n1\n2\nSample Output\nRound 0: 2 undefeated, 0 one-loss, 0 eliminated\nRound 1: 1 undefeated, 1 one-loss, 0 eliminated\nRound 2: 0 undefeated, 2 one-loss, 0 eliminated\nRound 3: 0 undefeated, 1 one-loss, 1 eliminated\nThere are 3 rounds.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "In a number of sports, a championship may be determined by a double knockout\ncompetition. A team is eliminated on its second loss, so the winner is the last\nremaining team with one or fewer losses. The competition is played is a series\nof rounds: in each round, teams that have not been eliminated are paired\nsubject to the constraint that an undefeated team never plays a team with one\nloss. As many teams as possible are paired in each round. After a number of\nrounds only two teams remain. These teams play in a round by themselves,\nalthough one is undefeated and the other is not. If neither is eliminated, they\nplay again in a final round. For our analysis we assume that this extra round\nis always necessary. \nWrite a program to report on a Double Knockout\nCompetition. See the input and output specifications below. ",
  "Output": "For each case there should be an initial line which has the form: \nRound 0: 2 undefeated, 0 one-loss, 0 eliminated\nThis is followed by a similar line for each round of the\ncompetition, followed by a single line saying how my rounds were played. The\noutput for different test cases is to be separated by a single blank line. ",
  "Title": "CCC97S3 - Knockout",
  "Input": "The first line of input contains one positive integer n which is\nthe number of test cases which follow it. The next n lines each\ncontain one positive integer t, t < 32768, which is\nthe number of teams in the competition for that test case. "
}{
  "Example": "Sample Input \n1\nthe cat chased the rat while\nthe dog chased the cat into the rat house\nSample Output\nthe cat chased 1 rat while\n1 dog 3 1 2 into 1 4 house",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A common method of data compression, \"dictionary coding\", is to\nreplace words in a text by numbers indicating their positions in a dictionary.\nStatic dictionary coding, in which the dictionary is known in advance, can be\nproblematic, as it is necessary to have the dictionary available to understand\nthe coded text. Dynamic dictionary coding avoids this problem by deriving the\ndictionary from the text to be compressed. The text is processed from beginning\nto end, starting with an empty dictionary. Whenever a word is encountered that\nis in the dictionary, it is replaced by a number indicating its position in the\ndictionary. Whenever a word is encountered that is not in the dictionary, it\nappears as-is in the compressed text and is added to the end of the dictionary.\n\nYou are to implement dynamic dictionary coding. See the\ninput and output specifications below. ",
  "Output": "The output file should contain the sets of text input compressed using\ndynamic dictionary coding as described above. Lineation and spacing should be\npreserved exactly as in the input file with the different sets of compressed\ntext separated by a single blank line. ",
  "Title": "CCC97S4 - Dictionary",
  "Input": "The first line of the input file contains a positive integer which is the\nnumber of sets of text which are to be compressed. Each set of text will\nconsist of several lines containing text made of lower case letters and spaces\nonly. You may assume that no word is longer than 20 letters, that no input line\nis longer than 80 characters, and that there are no more than 100 input lines.\nThe sets of text are separated by a single blank line, and are to be compressed\nindividually. "
}{
  "Example": "Sample Input \n3\n987654321\n3456789\n33\n11\n11\n33\n\nSample Output\n285\n2469456\n\u00a0\n3\n0\n\u00a0\n0\n11\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "In days of yore (circa 1965), mechanical calculators performed division by\nshifting and repeated subtraction. For example, to divide 987654321 by 3456789,\nthe numbers would first be aligned by their leftmost digit (see Figure 1\nbelow), and the divisor subtracted from the dividend as many times as possible\nwithout yielding a negative number. The number of successful subtractions (in\nthis example, 2) is the first digit of the quotient. The divisor, shifted to\nthe right (see Figure 2 below), is subtracted from the remainder several times\nto yield the next digit, and so on until the remainder is smaller than the\ndivisor. \n        987654321\n    -   3456789         first successful subtraction\n        ========\n        641975421\n    -   3456789         second successful subtraction\n        ========\n        296296521       remainder\n    -   3456789         unsuccessful subtraction\n        ========\n        negative\n\n        296296521\n   -    3456789\n        ========\n        261728631\n        etc.\n\nWrite a program to implement this method of division.\nSee the input and output specifications below.",
  "Output": "For each pair of input lines, your output file should contain a pair of\nlines representing the quotient followed by the remainder. Output for different\ntest cases should be separated by a single blank line. Your output should omit\nunnecessary leading zeros.",
  "Title": "CCC97S5 - Division",
  "Input": "The first line of the input file contains a positive integer n, n\u00a0<\u00a020,\nwhich represents the number of test cases which follow. Each test case is\nprovided on a pair of lines, with the number on the first line being the\ndividend, and the number on the second line being the divisor. Each line will\ncontain a positive integer of up to 80 digits in length."
}{
  "Example": "Sample Input \n2\nThe quick brown fox jumps over the lazy dog\nNow is the time for all good people to come to the aid of the party\nSample Output\nThe quick brown fox jumps **** the **** dog\n\u00a0\nNow is the **** for all **** people to **** to the aid of the party",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The Society for the Prevention of Profanity on the Internet has observed a\n  growing number of chat lines on the World-Wide Web. A chat line allows a Web\n  user to type lines of text which are transmitted to all other users. The\n  Society is concerned about the number of four-letter words being transmitted by\n  these chat lines and has proposed the mandatory use of software to remove all\n  four-letter words from every transmission. Your job is to write the software to\ndo this removal. ",
  "Output": "The output from your program should consist of the\nn lines of text, with each four-letter word replaced by four\nasterisks. The lines should be separated by one blank line. ",
  "Title": "CCC98S1 - Censor",
  "Input": "The input to your program consists of an integer, n, on a line by\nitself, followed by n lines of text. Each line of text contains\nwords separated by spaces. Each word consists of letters of the alphabet and\nexactly one space separates adjacent words. Lines do not exceed 80 characters\nin length. "
}{
  "Example": "Sample Input \n3\n2\n3\n3\n0\n3\n1\n10\n2\n1\n5\n0\n1\n5\n2\n1\n5\n3\n3\n1\n1\n0\n\nSample Output\nDistance is 0\n\u00a0\nDistance is 15\n2\n1\n10\n2\n1\n5\n\u00a0\nDistance is 9\n1\n4\n3\n1\n5\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A planetary \"rover\" is travelling on a\nperfectly level surface (no obstacles) on Mars. The rover is in radio\ncommunication with the \"lander\" it arrived\nin. The lander accumulates and relays commands, which\nit receives from Earth, to the rover. The rover makes several excursions. Each\nexcursion begins with the rover at the lander facing\nin a known direction. At the end of each excursion the lander\nmust compute and transmit a sequence of instructions to return the rover to the\nlander.\nThe rover responds to a sequence of commands sent from the lander. Each command tells the rover to move ahead some\nmultiple of an exact unit of distance, or to turn left or right exactly 90\ndegrees. \nThe \"move ahead\" command is encoded using two consecutive lines in\nthe input file. The first line contains the integer 1, and the second line\ncontains a non-negative integer n, the distance to move forward. \nThe \"turn right\" command is encoded using a single input line\ncontaining the integer 2. \nThe \"turn left\" command is encoded using a single input line\ncontaining the integer 3. \nFor example, the following sequence of commands instructs the rover to turn\nleft, then move ahead 10 units, then turn right, and then move ahead 5 units. \n3\n1\n10\n2\n1\n5\n\nYour task is, given such a sequence of commands, to determine how far the\nrover must travel to return to the lander, and to\ndetermine the shortest sequence of commands that will return the rover to the\nlander. In the example above, the rover must travel 15\nunits to return, and the shortest sequence of commands is\n2\n1\n10\n2\n1\n5\n",
  "Output": "For each excursion, the output should contain a line:\nDistance is k\nwhere k is the distance\nin units that the rover must travel to return to the lander.\nThe following lines should contain the shortest sequence of commands to return\nthe rover to the lander. A blank line should separate\nthe lines of output for different excursions.",
  "Title": "CCC98S3 - Mars Rover",
  "Input": "The input begins with a line containing a positive integer, n,\nthe number of excursions for the rover. The commands\nfor excursions occupy subsequent lines of the input file. Each excursion\nconsists of a number of commands followed by a line containing 0. There are no\nerrors or blank lines in the input. The rover travels less than 10\u00a0000\nunits of distance on each excursion."
}{
  "Example": "Sample Input \n3\n10 + 20 X 30\n1 + 2 + 3 - 4\n123 + 456 X 789 - 876\nSample Output\n10 + (20 X 30)\n\u00a0\n((1 + 2) + 3) - 4\n\u00a0\n(123 + (456 X 789)) - 876",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You have just won the lottery. All that separates you from your\nmulti-million dollar prize is your correct answer to the following\nskill-testing question: \n1234 + 4567 X 11\nIn your twenty seconds you see your fortune slipping away because you don't\nknow whether the answer is \n(1234 + 4567) X 11 = 63811\nor\n1234 + (4567 X 11) = 51471\nFinally you guess 63811, but that answer is incorrect. Your\nmath teacher set the question and expected you to remember that multiplication\nis done before addition. The correct answer is 51471. \nYour job is to write a program to insert parentheses into lottery questions\nsuch as the above so as to make clear the order of operations. ",
  "Output": "Your output should consist of the same n lines, with a blank line\nbetween them, with parentheses inserted in the n lines so as to\nindicate the order of operations. Multiplication should be done first, from\nright to left, and addition and subtraction should then be done from left to\nright. Spaces surrounding operators should be preserved. ",
  "Title": "CCC98S4 - Lottery",
  "Input": "The input to your program consists of a line containing an integer, n,\nfollowed by n lines of input. Each of the n lines\ncontains an expression consisting of integers, and the operators +, \n-, and X (upper case X)\ndenoting addition, subtraction, and multiplication respectively. Adjacent\nintegers are separated by one operator. There is a single space to the left and\nto the right of each operator and no input line contains more than 80\ncharacters. "
}{
  "Example": "Sample Input \n2\n5\n5\n4\n3\n2\n1\n7\n5\n6\n6\n6\n8\n8\n8\n9\n6\n9\n6\n9\n9\n6\n4\n5\n4\n5\n3\n2\n4\n9\n9\n4\nSample Output\n5\n\u00a0\nCANNOT MAKE THE TRIP",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Alp the mountain climber is on the northwest corner of a square area of a\nmountainous terrain and wishes to find a passage to the opposite (southeast)\ncorner. Alp is currently at an elevation at which oxygen is not needed, but at\nany higher elevation oxygen is required. Oxygen, when required, is used at the\nrate of one unit per horizontal step. \nThe northwest corner of the terrain is at position (1, 1) and the southeast\ncorner is at position (n, n), where n is a\npositive integer read from the input file. The elevation of each point (x,\ny), (1 \u2264 x, y \u2264 n), is an\ninteger read from the input; each elevation occupies a single line in the input\nfile. \nAlp moves in a series of horizontal steps, where each step moves Alp a unit north,\na unit south, a unit east, or a unit west. Alp must remain in the square region\nand cannot climb or descend more than 2 units of elevation in a single step. If\nthe elevation at either the beginning or the end of the step requires oxygen, a\nunit of oxygen is consumed by Alp during the step. ",
  "Output": "For each trip, if a passage exists, the output is a single line containing\nan integer indicating the number of units of oxygen consumed. If a passage does\nnot exist, the output is a single line containing the message \"CANNOT MAKE\nTHE TRIP\". Output lines for the trips should be separated by a single\nblank line. ",
  "Title": "CCC98S5 - Mountain Passage",
  "Input": "The first line of input is a positive integer indicating the number of trips\nthat Alp must make. For each trip there is a number of\ninput lines. The first line for each trip contains an integer n \u2264\n25, indicating the size of the square area of\nterrain. The next n2 lines each contain a single integer\nindicating the elevation of a particular point of terrain. The elevations are\ngiven for the points in the following order: (1, 1), (1, 2), (1, 3), .. (1, n), (2, 1), (2, 2), ... (n,\n1), (n, 2), .. (n, n). "
}{
  "Example": "Sample Input \n2\n3 4\n0 0\n0 4\nNE\n4 2\n3 1\n3 2\nNW\nSample Output\nB can be reached from A after 12 move(s).\nB cannot be reached from A.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Grading": "",
  "Description": "\nIn a primitive video game, a spot bounces around within a rectangular grid.\nThe southwest corner of the grid has coordinates (0,0) and the northeast\ncorner has coordinates (r,c) where 0 < r \u2264 10,000 and 0 < c \u2264 10,000.  The\nsoutheast corner has coordinates (0,c) and the northwest corner has\ncoordinates (r,0).\nThe spot\nalways travels on the diagonal; that is, in one of the directions NE, NW,\nSE, SW.  The outer edges of the grid serve as mirrors:  after visiting\na position on the edge of the grid the spot \"bounces\" off according to\nthe normal rules of reflection.  For example, if the spot\nwere travelling NE and hit the east edge of the grid, it would change \ndirection to NW.  If the spot were to hit the corner of the grid it would\nchange to the opposite direction.\n\n\nGiven a grid size, two points A and B lying on the grid, and an initial\ndirection, you are to determine if \nthe spot moves from A to B and, if so, how far the spot moves (in\nterms of number of grid positions) before reaching B the first time.\n",
  "Output": "",
  "Title": "CCC99 Stage 2 - Can't Get There",
  "Input": ""
}{
  "Example": "Sample Input \n3\n7 2\nthe\nbrown\nthe\nfox\nred\nthe\nred\n1 3\nthe\n2 1\nthe\nwash\n\nSample Output\n2nd most common word(s):\nred\n\n3rd most common word(s):\n\n1st most common word(s):\nthe\nwash",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nGiven a sequence of m words from a newspaper article and an \ninteger k,\nfind the kth most common word.",
  "Output": "",
  "Title": "CCC99 Stage 2 - Common Words",
  "Input": ""
}{
  "Example": "Sample Input \n2\n.!\n?.\n3\n2 8 1 7\n-1\n\nSample Output\n        * * *\n        * * *\n        * * *\n        * * *\n    * *      \n    * *      \n  *          \n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nYou may recall that in stage 1 of the CCC you were asked to calculate\na region of a fractal obtained by starting with a square, dividing it into\n9 sub-squares, then clearing the middle, like so:\n* * * * * * * * *\n* * * * * * * * *\n* * * * * * * * *\n* * *       * * *\n* * *       * * *\n* * *       * * *\n* * * * * * * * *\n* * * * * * * * *\n* * * * * * * * *\nThis operation was then repeated for each of the 8 remaining sub-squares,\nand so on.\n\nIf we choose a different operation we get a different fractal; for example, \nwe may clear the upper-left and lower-right corners instead of the middle.\nOr we may divide the square into a different number of sub-squares.\n\n\nFor this problem we will specify the fractal operation as an n by\nn grid of characters, where each character performs a particular\nsubstitution on the corresponding sub-square.  The character . (period)\nindicates that the corresponding sub-square becomes completely empty.\nThe character ! (exclamation mark) indicates that the corresponding\nsub-square becomes full and is not subject to further fractal operations.\nThe character ? (question mark) indicates that the corresponding sub-square\nremains full and is subject to further fractal operations.\n\n\nThe fractal above would be represented by the 3 by 3 grid:\n???\n?.?\n???\nFour iterations of the fractal denoted by the 2 by 2 grid\n.!\n?.\nwould be:\n* * * * * * * *\n* * * * * * * *\n* * * * * * * *\n* * * * * * * *\n* * * * * * * *\n* * * * * * * *\n* * * * * * * *\n* * * * * * * *\n\n\n        * * * *\n        * * * *\n        * * * *\n        * * * *\n* * * *        \n* * * *        \n* * * *        \n* * * *        \n\n\n        * * * *\n        * * * *\n        * * * *\n        * * * *\n    * *        \n    * *        \n* *            \n* *            \n\n\n        * * * *\n        * * * *\n        * * * *\n        * * * *\n    * *        \n    * *        \n  *            \n*              \nYour mission, should you choose to accept it (like you have any choice!) is\nto print out a region of an arbitrary fractal specified by an n by\nn grid.  Note that these fractals will get way too big\nto fit completely into memory, so some cleverness will be required to \ncompute only the part to be printed.  (Part marks can still be earned for\nprograms that work only on small examples.)",
  "Output": "\nNote: the checker for this problem is fairly strict. Make sure you have spaces in the right places and such...",
  "Title": "CCC99 Stage 2 - Mandelzuma",
  "Input": ""
}{
  "Example": "Sample Input \n2\n3\n-1 1 \n1 1\n1 -1\n5\n1 0\n2 2 \n2 3\n3 1\n-1 2\nSample Output\n6.83\n10.46",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\n\n\n\nAn Elmira area maple syrup producer was selected as the winner of\nthis year's CCC (Canadian Confectionary Competition) and the judge wants to\nplace a blue ribbon around the sugar bush. \nTo do this, she finds the most northerly tree (if there is more than one\nmost northerly tree, any one will do) and stands at the position\nof that tree, facing due East.  She then turns to the right until she\nis facing another tree, and walks to that tree in a straight line,\nmeasuring the distance.\nOnce again she turns right until she faces a tree, and\nwalks to it.  At each step she chooses the tree that involves turning\nthe least angle to the right, continuing until the starting tree\nis reached.  The total distance travelled is the length of ribbon\nrequired.  Your task is to calculate this length.\n",
  "Output": "",
  "Title": "CCC99 Stage 2 - Maple Roundup",
  "Input": ""
}{
  "Example": "Sample Input \n5\na+b+c\n(a+b)(c+d)e\nc+cb+a+c\n((a+b)+(c+d))e\n(a+a)(a+a)\nSample Output\na+b+c\nace+ade+bce+bde\na+bc+c+c\nae+be+ce+de\naa+aa+aa+aa\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nMathematicians, as opposed to computer scientists, write expressions\nusing single lower case letters as variables.  Addition is represented\nby a plus sign and multiplication is represented by placing the\nvariables or expressions adjacent with no symbol in between.  \nMultiplication is done before addition unless the addition is\nparenthesized.\n\n\nFor this problem, we consider mathematical expressions consisting of only\nvariables, addition, multiplication, and parentheses.  (There are no other\nsymbols, like spaces, division, subtraction, or numerals in the input or output.)\nFor example,\n\na+b+c\nxyz\nxyz+ab+cd\n(a+b)(c+d)e\n\nYour task is to read in a number of expressions in this notation and to\nrearrange each, using the laws of algebra, to equivalent expressions with\nno parentheses.  For example,\n\n(a+b)(c+d)e\n\ncan be re-expressed as\n\nace+ade+bce+bde\nOnce you have finished removing the parentheses, sort each of the terms in alphabetical order (e.g cae should be come ace). Then, sort all the terms in dictionary order (e.g. a comes before ab, but abe comes before ac)",
  "Output": "Your output should consist of n lines, each giving a parenthesis-free expression equivalent to\n  the corresponding line of input.",
  "Title": "CCC99 Stage 2 - Sum of Products",
  "Input": "The first line of input contains an integer n. n lines of\n  input follow, each containing a valid expression as described above.\nNo input line exceeds 100 characters."
}{
  "Example": "Sample Input \n6\n3\n5\n6\n12\n19\n20\n27\n0\nSample Output\n6 20 27\n6",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nThe fast food chain, McBurger, has recently consolidated all activities to\nrestaurants along the Trans Canada Highway.  (Following the completion of\nfixed links joining Newfoundland and Vancouver Island to the mainland.)\nThey have also decided to build several warehouses along the highway,\neach located at a restaurant and supplying those restaurants nearby.\nNaturally, these warehouses should be placed so as to minimize the\ndistance between the warehouses and the restaurants they service.  Your \ntask is to write a program that determines the optimal positions for\nthe warehouses.\n\n\nTo make the problem more precise, chairman McBoss has issued the following\nspecification:  You are given the positions of n restaurants\nacross the country as n integers d1 < d2 < ... < dn.\nThese integers are the distances, in kilometres, from the company's new\nheadquarters in St. John's, at the extreme Eastern end of the highway.\nYou are also given the number k \u2264 n, the number of warehouses\nto be constructed.  You are to place the warehouses at the locations\nof k of the n restaurants so as to minimize the maximum\ndistance from any restaurant to its nearest warehouse.",
  "Output": "",
  "Title": "CCC99 Stage 2 - Fast Food",
  "Input": ""
}{
  "Example": "Sample Input \n1\n3\n2\n10\n5\n27\nSample Output\n* * * * *                   * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * *\n  * *   * *   * *   * *   * *   * *   * *   *\n* * * * * * * * * * * * * * * * * * * * * * *\n    * * * * * *       * * * * * *       * * *\n    *   * *   *       *   * *   *       *   * \n    * * * * * *       * * * * * *       * * *\n* * * * * * * * * * * * * * * * * * * * * * *\n  * *   * *   * *   * *   * *   * *   * *   *",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A fractal is a geometrical object with the property that subsections of the object appear identical to (but smaller than) the whole object. Here we consider a specific fractal, which we will approximate by iterating a construction process.\nStart with a filled square whose side length is 1. For example:\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\nRemove a square of side 1/3 from the middle:\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\nNote that this figure is equivalent to 8 squares of size 1/3, as illustrated below. The spaces between squares are for illustration only and do not appear in the fractal.\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n\n* * * * * * * * *                       * * * * * * * * *\n* * * * * * * * *                       * * * * * * * * *\n* * * * * * * * *                       * * * * * * * * *\n* * * * * * * * *                       * * * * * * * * *\n* * * * * * * * *                       * * * * * * * * *\n* * * * * * * * *                       * * * * * * * * *\n* * * * * * * * *                       * * * * * * * * *\n* * * * * * * * *                       * * * * * * * * *\n* * * * * * * * *                       * * * * * * * * *\n\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\n* * * * * * * * *   * * * * * * * * *   * * * * * * * * *\nWe can apply this process again to each of the squares. Thus after 2 iterations of the construction process, we have:\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * *       * * * * * *       * * * * * *       * * *\n* * *       * * * * * *       * * * * * *       * * *\n* * *       * * * * * *       * * * * * *       * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * *       * * *                   * * *       * * *\n* * *       * * *                   * * *       * * *\n* * *       * * *                   * * *       * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * *       * * * * * *       * * * * * *       * * *\n* * *       * * * * * *       * * * * * *       * * *\n* * *       * * * * * *       * * * * * *       * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\nEach of the eight squares is now a copy of the first iteration. Each of these contains eight filled squares, for a total of 64. The process is applied to each of these squares. After 3 iterations we have:\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n*   * *   * *   * *   * *   * *   * *   * *   * *   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * *       * * * * * *       * * * * * *       * * *\n*   *       *   * *   *       *   * *   *       *   *\n* * *       * * * * * *       * * * * * *       * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n*   * *   * *   * *   * *   * *   * *   * *   * *   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                   * * * * * * * * *\n*   * *   * *   *                   *   * *   * *   *\n* * * * * * * * *                   * * * * * * * * *\n* * *       * * *                   * * *       * * *\n*   *       *   *                   *   *       *   *\n* * *       * * *                   * * *       * * *\n* * * * * * * * *                   * * * * * * * * *\n*   * *   * *   *                   *   * *   * *   *\n* * * * * * * * *                   * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n*   * *   * *   * *   * *   * *   * *   * *   * *   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * *       * * * * * *       * * * * * *       * * *\n*   *       *   * *   *       *   * *   *       *   *\n* * *       * * * * * *       * * * * * *       * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n*   * *   * *   * *   * *   * *   * *   * *   * *   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\nThe actual fractal is what we get when this process is iterated infinitely many times. As one might expect, each of the 8 subsections of this fractal is an exact copy of the fractal, scaled by a factor of a third.\nWrite a program to compute the specified function after n iterations (n \u2264 5). To do this, represent the figure as a 3n by 3n grid, with '*' to indicate filled areas and ' ' to indicate unfilled areas. The figure will be too large to print on a single screen or sheet of paper so the input will specify a small rectangular portion of the figure to be printed.",
  "Output": "Compute the figure and print the specified rectangular portion, with one line of output per row. Print the top row first, and the bottom row last. To make the output appear square, leave a single horizontal space between row elements (as is done in the examples above). Leave a blank line in the output after every test case.",
  "Title": "CCC99S3 - Divided Fractals",
  "Input": "The first line of input contains a positive integer d, indicating the number of test data sets to follow.\n  Each data set consists of five lines containing:\nn, the number of iterations (0 \u2264 n \u2264 5)\nb, the bottom row of the rectangle to be printed (1 \u2264 b \u2264 3n)\nt, the top row of the rectangle to be printed (b \u2264 t \u2264 3n )\nl, the left column of the rectangle to be printed (1 \u2264 l \u2264 3n )\nr, the right column of the rectangle to be printed (l \u2264 r \u2264 3n )\nNote that rows are numbered from bottom to top and columns from left to right."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n3\n99\n99\n33\n33\n33\n35\n3\n3\n1\n1\n2\n3\n99\n99\n96\n23\n99\n1\nSample Output\nWin in 1 knight move(s).\nStalemate in 1 knight move(s).\nLoss in 2 knight move(s).",
  "Description": "In chess, game pieces move about an 8 x 8 chessboard in a fashion defined by their type. The object of the game is to capture opposing pieces by landing on their squares, and eventually trapping the king piece.\nIn our version of the game, we shall use a variable sized board with only 2 pieces on it: A white pawn which moves relentlessly towards the top row of the chessboard one square at a time per move; and a black knight which can move from its current location in any of up to eight ways: two squares up or down and one square left or right, or one square up or down and two squares left or right. The knight must remain on the board at all times; any move that would take it off the board is therefore disallowed. In the diagram below, the knight's position is labelled K and its possible moves are labelled 1 to 8.\n. . . . . . .\n. . 8 . 1 . .\n. 7 . . . 2 .\n. . . K . . .\n. 6 . . . 3 .\n. . 5 . 4 . .\n. . . . . . .\nThe pawn moves first; then the knight and pawn alternate moves. The knight tries to land either on the square occupied by the pawn (a win) or on the square immediately above the pawn (a stalemate). If the pawn reaches the top row of the board the game ends immediately and the knight loses (a loss).\nWrite a program to determine whether the knight can win and, if it can, the minimum number of moves it must make to do so. If the knight cannot win, your program should determine if it can cause a stalemate and, if it can, the minimum number of moves it must make to do so. Finally if the knight cannot win or cause a stalemate, your program should compute the number of moves the knight makes before the pawn wins.\nThe first line of input contains a positive integer, n, the number of games to analyze. For each game there are six lines of input:\nr, the number of rows in the chessboard (3 \u2264 r < 100)\nc, the number of columns in the chessboard (2 \u2264 c < 100)\npr, the row of the starting position of the pawn (1 \u2264 pr \u2264 r)\npc, the column of the starting position of the pawn (1 \u2264 pc \u2264 c)\nkr, the row of the starting position of the knight (1 \u2264 kr \u2264 r)\nkc, the column of the starting position of the knight (1 \u2264 kc \u2264 c)\nThe pawn and the knight will have different starting positions. Row 1 is at the bottom of the board and Row r is at the top of the board. Column 1 is at the left and column c is at the right.",
  "Title": "CCC99S4 - Knightly Pursuit",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n2\nSEND\nMORE\nMONEY\nMEND\nCOPE\nCONEY\nSample Output\n9567\n1085\n10652\n9567\n1085\n10652",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A popular form of pencil game is to use letters to represent digits in a mathematical statement. An example is\n    SEND\n   +MORE\n   -----\n   MONEY\nwhich represents\n    9567\n   +1085\n   -----\n   10652\nYour task is to read in sets of three \u201cwords\u201d and assign unique digits to the letters in such a way as to make the sum of the first two words equal to the third word.",
  "Output": "The output is to consist of n sets of lines each containing the numeric representation of each word in the corresponding test data set. There will be exactly one correct solution for each data set. Leave an empty line after the output for each data set.",
  "Title": "CCC99S5 - Letter Arithmetic",
  "Input": "The input begins with a line containing a positive integer n which is the number of test data sets. Each data set consists of three lines, each of which contains one word with the third word being the sum of the first two. The words will contain no more than 20 upper case letters."
}{
  "Example": "Sample Input \n4\n0 0 100\n0 1 98\n150 0 100\n200 200 10\nSample Output\n1030.375215",
  "Description": "You've just escaped from your cold, dark, damp jail cell, and you still have no idea who you are or how you came to be here\u2014but one thing you do know is that you're not out of harm's way yet. It still remains to escape from the complex. This is not easy, because even though you are gifted with the power of invisibility (being a quantum being and all) the guards have \"quantum detectors\" that will find you regardless. By now you have gathered that a secret, illicit organization is in operation here, which must obtain its technology from the black market. For this reason, standardization is a laughable concept, and not all of these detectors are equally sensitive\u2014each can detect quantum beings who are less than a certain distance away, and the distance varies from detector to detector.\nAs you make your way across the grounds of what you now know to be the Stronghold of the Order of the Brotherhood of the Flying Hat, you notice that the boundaries of detection of the various guards' detectors often overlap, and wonder what is the total length of the \"boundary\"\u2014the set of all points on the ground (making this a two-dimensional problem, thank goodness) which are not within range of any detector, but from which it is possible to end up within range of at least one detector by making an infinitesimal step towards it.\nOnce you have successfully escaped from the Stronghold, you realize that you somehow still remember how to code in A++, and that your Quantum Reality Protocol has a built-in A++ compiler. Before long, you have determined the answer to your question...",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Input Format": "The first line of input will contain the integer n (0 < n \u2264 1000).\nSubsequent lines will contain three real numbers: xi, yi, and ri for one of the guards (-1000  \u2264 xi, yi \u2264 +1000; 0 < ri \u2264 100)\nYou may assume that no two guards are standing at the same location, for that is clearly a physical impossibility.",
  "Output Format": "The total length of the boundary. Your answer must match ours with a relative or absolute error of at most 10-6.",
  "Problem Statement": "There are n guards. Guard number i is located at coordinates (xi,yi) and his/her detector has a radius of ri. Determine the total length of the boundary, as specified above.",
  "Title": "Detectors"
}{
  "Example": "Sample Input \n9 3\n3\n2\n8\nSample Output\n6",
  "Explanation": "The forest initially looks like this, with burning trees represented by '*', burnt-down trees by 'x', and protected trees by 'P':\n1 * * 4 5 6 7 * 9\nThe foxen put out the fire at tree 8 during the first minute, while the other fires spread:\n* x x * 5 6 7 P 9\nThe foxen now put out tree 4, and the other fire has nowhere to go:\nx x x P 5 6 7 P 9\nIn the end, 3 trees have burned down, leaving 6 standing.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "One day, a terrible fire is started in the forest where the fox and wolf families live (probably by jealous, inferior humans). The animals can easily escape harm themselves - however, they wish to save as many trees as they can. Naturally, the foxen can put out fires with their tails, however this can only be done at a rate of one tree per minute.\nThe forest consists of a single row of N (1 \u2264 N \u2264 1,000,000,000) trees, which the foxen have numbered from 1 to N from left to right. Each tree is in contact with the trees immediately to its left and right.\nAt the beginning, M (1 \u2264 M \u2264 5000 and 1 \u2264 M \u2264 N) different trees are set on fire. At the end of every minute after that, each untouched tree that is next to any burning trees catches on fire itself. It takes one minute for a tree to burn down entirely.\nDuring each minute (including right after the trees are initially set on fire), the foxen can choose a single tree to brush their tails. This tree stops burning immediately (if it's currently on fire), and due to the amazing properties of fox tails, becomes impervious to fire forever.\nThe process continues until not a single tree is on fire, at which point the foxen don't even need to count how many trees are still standing, seeing as they calculated it when they first detected the forest fire. The foxen have of course acted so as to maximize the number of trees preserved, so the question is\u2026 how many is that?\n\n\n",
  "Output": "A single integer - the maximum number of trees that the foxen can save from being burnt down.",
  "Title": "Anti-Fire Fox",
  "Input": ""
}{
  "Example": "Sample Input \n9 5\n3 1\n6 1\n7 6\n2 7\n8 9\nSample Output\n4",
  "Explanation": "The parents can give one cracker to foxling 6, who will then split it into three and give pieces to his friends (foxlings 1 and 7). Foxling 7 can then give half of his piece to his other friend, foxling 2.\nThey can give another cracker to foxling 8, who will split it with foxling 9.\nThis leaves foxlings 4 and 5, who have no friends (don't worry, foxen have long since outgrown the need for friends), and who must be given one cracker each. This brings the total up to 4 crackers.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nIt's Christmas time in the forest, and both the fox and the wolf families are\ncelebrating. The rather large fox family consists of two parents as well as N\n(1 \u2264 N \u2264 1,000,000,000) little foxlings. The parents have decided to\ngive their children a special treat this year - crackers! After all, it's a well-known\nfact that foxen love crackers.\n\n\nWith such a big family, the parents can't afford that many crackers. As such, they\nwish to minimize how many they give out, but still ensuring that each foxling\ngets at least a bit. The parents can only give out entire crackers, which can then\nbe divided and passed around.\n\n\nWith this many children, not all of them know one another all that well. The\nfoxlings have names, of course, but their parents are computer scientists, so\nthey have also conveniently numbered them from 1 to N. There are M\n(1 \u2264 M \u2264 100,000) unique two-way friendships among the foxlings, where\nrelationship i is described by the distinct integers Ai\nand Bi (1 \u2264 Ai, Bi \u2264 N), indicating\nthat foxling Ai is friends with foxling Bi,\nand vice versa. When a foxling is given a cracker, he can use his tail to precisely\nsplit it into as many pieces as he wants (the tails of foxen have many\nfascinating uses). He can then pass these pieces around to his friends, who can\nrepeat this process themselves.\n\n\nLine 1: Two integers - N and M\nNext M lines: Two integers - Ai and Bi\n",
  "Output": "",
  "Title": "Foxlings"
}{
  "Example": "Sample Input \n5 6 5 1\n......\nBWTTTB\nB.TB..\nBBT..T\n.FTfw.\nSample Output\n17",
  "Explanation": "The wolf should wait for the first three minutes, letting the fox go first. From then on, the fox can continue along its only possible route home. The wolf will be 2 squares behind the fox most of the time, except for when it enters the burr-filled square, when it will temporarily be 1 behind. With this strategy, the wolf will take 14 minutes to get home, while the fox will take 17, and since we only care about the larger, the total time is 17 minutes.",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "In a certain peaceful forest, there live a fox and a wolf. Due to common misconception, one might suppose that the wolf would want to hunt the fox - however, both are in fact nice animals, and get along just fine. Indeed, they have such nice manners that if they ever meet up, they will have a nice little chat for C minutes (1 \u2264 C \u2264 9).\nThe forest that the fox and the wolf live in is a rectangle, N km long along its east side and M km wide along its north side (1 \u2264 N, M \u2264 20). It is divided into a grid of squares, each with a side length of 1 km. Each such square either contains a meadow (marked by a '.'), is full of burrs ('B'), is blocked by trees ('T'), contains the fox's den ('F'), contains the wolf's lair ('W'), currently contains the fox ('f'), or currently contains the wolf ('w').\nAt the end of a long day at work (consisting of solving complex computer science problems in their heads), both animals wish to get to their respective homes as soon as possible. Every minute, each of them can walk one km directly north, east, south, or west, or just stay put - however, they cannot enter squares blocked by trees, nor can they enter each other's homes (that wouldn't be very polite). They also don't want to leave the forest, seeing as humans jealous of their supreme intellect are constantly lurking just outside.\nEvery time the fox or the wolf goes from a square full of burrs to a meadow, he must spend B minutes (1 \u2264 B \u2264 9) picking burrs off of himself. As mentioned above, they must also stop and chat every time they meet up. Though each square is quite big, the animals always walk to its exact centre before moving on. This means that they will meet up if they either occupy the same square at the same time, or if they pass each other while walking between squares (which would happen if they switched positions in the space of a minute). Once the animals have chatted once, they never have to chat again, having already satisfied the demands of etiquette. Both animals are great multitaskers, and can pick burrs while chatting to each other.\nEach animal wants to get home as soon as possible, but is also considerate of the other - as such, they will collaborate so as to minimize the time for both of them to get home. Due to their extreme intelligence, both animals will calculate this minimium time in their heads instantly - however you, the observer, will probably need to write a program to figure it out\u2026",
  "Output": "A single number - the minimum time for both the fox and the wolf to get to their respective homes, in minutes. If it's impossible, output -1.",
  "Title": "The Fox and the Wolf",
  "Input": ""
}{
  "Time Limit": "2.00s",
  "Description": "00   pyrrhic\n01   iamb\n10   trochee\n11   spondee\n000  tribrach\n001  anapest\n010  amphibrach\n011  bacchius\n100  dactyl\n101  amphimacer\n110  antibacchius\n111  molossos\n0001 fourth paeon\n0010 third paeon\n0011 ionic a minore\n0100 second paeon\n0110 antispast\n1000 first paeon\n1001 choriamb\n\n001001\n\n4",
  "Title": "Scansion",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n7 7\n5\n0 0 7 7\n0 7 7 0\n0 6 7 2\n2 0 2 7\n5 0 5 7\nSample Output\n1.4497",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Diagram": "",
  "Description": "",
  "Output": "",
  "Title": "Secret Room"
}{
  "Time Limit": "2.00s",
  "Description": "9\n2156 1789 \n862 700 \n1106 1041 \n1568 1557 \n2575 1984 \n1033 950 \n1738 1649 \n1097 1089 \n1774 1630 \n\n7\n0\n2\n4\n8\n1\n5\n2\n5",
  "Title": "TC",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n3 \n10 \n20 \n30 \n99 \n1 \n50 \n88 \n3 \n88 \n2 \n77\n\nSample Output\n5 55\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nA series of streams run down the side of a\nmountain. The mountainside is very rocky so the streams split and rejoin many\ntimes. At the foot of the mountain, several streams emerge as rivers. Your job\nis to compute how much water flows in each river.\n\n\nAt any given elevation there are m streams, labelled 1 to m from left-to-right.\nAs we proceed down the mountainside, one of the streams may split into a left\nfork and a right fork, increasing the total number of streams by 1, or two\nstreams may rejoin, reducing the total number of streams by 1. After a split or\na rejoining occurs, the streams are renumbered consecutively from\nleft-to-right. There is always at least one stream and there are never more\nthan 100 streams.\n",
  "Output": "\nYour job is to determine how many streams emerge at the foot of the mountain and what the\nflow is in each. Your output is a sequence of real numbers, rounded to the nearest integer,\ngiving the flow in rivers 1 through m.\n",
  "Title": "CCC00J4S2 - Babbling Brooks",
  "Input": "\nThe first line of input contains n, the initial number of streams at some\nhigh altitude. The next n lines give the flow in each of the streams from\nleft-to-right. Proceeding down the mountainside, several split or rejoin locations\nare encountered. For each split location, there will be three lines of input.\n\na line containing 99 (to indicate a split)\na line containing the number of the stream that is split\na line containing a number between 0 and 100, the percentage of flow from the split stream that flows to the left fork. (The rest flows to the right fork)\n\nFor each join location, there will be two lines of input:\n\na line containing 88 (to indicate a join)\na line containing the number of the stream that is rejoined with the stream to its right"
}{
  "Example": "Sample Input \n9\nA contains B\nA contains c\nB contains d\nF contains A\nF contains z\nX contains Y\nY contains X\nX contains x\nQ contains R\nSample Output\nA = {c,d}\nB = {d}\nF = {c,d,z}\nQ = {}\nR = {}\nX = {x}\nY = {x}",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "X contains S",
  "Output": "",
  "Title": "CCC00 Stage 2 - Subsets",
  "Input": ""
}{
  "Example": "Sample Input \ndrop the price on new thermopanes now or else\nRain Users Guide (by J.Z.)\nWhile \"rain\" was intended to be a general purpose tool, at the time of\nwriting the primary goal was to study one particular software system.\nAs a result, some steps that are only done once (such as extracting\ninformation from the program under study) are done using cumbersome\nad-hoc techniques that require significant manual intervention.  While\n\"rain\" can be used on arbitrary programs, more development work needs\nto be done before this is a convenient process.\nSample Output\n19\nd\nro\np\nthe pri\nce\non\nne\nw\nthe\nrm\nop\nan\nes\nn\no\nW\nor\nel\nse",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "CCC00 Stage 2 - Ransom Note",
  "Input": ""
}{
  "Example": "Sample Input \n5\n356656\n35665\n3566\n111126666\n552525\nSample Output\nB\nB\nA\nA\nA",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The game of 31 was a favourite of con artists who rode the railroads in\ndays of yore.  The game is played with a deck of 24 cards:  four labelled\neach of 1, 2, 3, 4, 5, 6. (That is, there are four cards labelled '1', four\ncards labelled '2', and so on.) Initially all of the cards are spread, face up, on \na table and the \"discard pile\" is empty.\nThe players then take turns. During each turn, a player picks up one unused card from the table and lays\nit on the discard pile.\nThe object of the game is to be the last player to lay a card such\nthat the sum of the cards in the pile does not exceed 31.  Your task is \nto determine the eventual winner of a partially played game, assuming\neach player plays the remainder of the game using a perfect strategy.\n\nFor example, in the following game player B wins:\n\nPlayer A plays 3\nPlayer B plays 5\nPlayer A plays 6\nPlayer B plays 6\nPlayer A plays 5\nPlayer B plays 6",
  "Output": "",
  "Title": "CCC00 Stage 2 - Game of 31",
  "Input": ""
}{
  "Example": "Sample Input \n3 2 3\n1 2 100\n2 3 150\n2 1\n2 3\n1 3\nSample Output\n100\n150\n250",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nA computer network is a collection of N (2 \u2264 N \u2264 100) computers and W wires. The\ncomputers are identified by the numbers 1, 2, ..., N. Each wire connects\nexactly\ntwo computers, allowing packets of data to flow in both directions between the computers. \n The wires are placed so that it is possible\nto send packets (directly or indirectly by passing through other computers) between every pair of computers.\nIn fact, the placement of the wires has been optimized so that there is exactly one path between every pair of computers.\nIf the packet travels along\nseveral wires to get from the source computer to the destination computer, the \ntime needed for the packet to travel along this path is the sum of the times required for the packet\nto travel along each individual wire.\nYou are to write a program that computes the amount of time needed\nfor a packet\nto travel between a given pair of distinct computers.\n",
  "Output": "",
  "Title": "CCC00 Stage 2 - Routing",
  "Input": ""
}{
  "Example": "Sample Input \n3\n3.01 5.93 12.07\nSample Output\n2.9947",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nMillikan's experiment involved measuring the charge on several oil droplets,\nand showing that each charge was a multiple of some smaller charge.  Your\nfriend, the physics enthusiast, has to reproduce Millikan's experiment.  She\nhas looked after constructing the apparatus and taking the measurements.\nHer measurements are pretty good for what can be achieved in a\nhigh school laboratory: the maximum error on any given\nmeasurement is +/- 1%.\n\n\nGiven the measurements as input, your program must find the maximum possible value for\nthe elementary charge consistent with the measurements.  That is, each\nmeasurement, plus or minus an error of 1% or less, must be a multiple\nof the elementary charge.\n",
  "Output": "",
  "Title": "CCC00 Stage 2 - Oil Droplet",
  "Input": ""
}{
  "Example": "Sample Input \n100.0 100.0 3 3\n7\n8\n6\n100.0 106.0 1\n110.0 90.0 2\n89.0 111.0 3\nSample Output\nHarry can connect to outlets at (100.0, 106.0) and (110.0, 90.0).",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "\nWe define the \"first pair\" of outlets as the pair which has the earliest outlest (in the order of the input file).\nThat is, a pair comes before another pair if the first outlet of the first pair is earlier in the input than the first outlet of the second pair.\nIf there is a tie with the first outlet, then consider the orders of the second outlets.\n",
  "Title": "CCC00 Stage 2 - Cords",
  "Input": "\nThere are no obstructions on the floor so Harry can run a string of\ncords directly from any outlet to his work location.\n"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n5\nSample Output 1 \n*        ****    ****************    ****        *\nSample Input 2\n7\nSample Output 2\n*            ****        ********    ************************    ********        ****            *",
  "Description": "It is important to keep our computers safe and clean. Some people feel that computers should be well-dressed, also. For this question, you will write a program to print out a bow tie on the computer screen.\nYour program should take as input the height H of the bow tie, where H is an odd positive integer greater than or equal to 5. A bow tie with H rows (and 2H columns) should then be printed using the pattern shown below. You may assume that all input data will be valid.",
  "Title": "CCC01J1 - Dressing Up",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n417\nSample Output 1\n13\nSample Input 2\n610\nSample Output 2\nNo such integer exists.",
  "Description": "In many cryptographic applications the Modular Inverse is a key operation. This question involves finding the modular inverse of a number.\nGiven 0 < x < m, where x and m are integers, the modular inverse of x is the unique integer n, 0 < n < m, such that the remainder upon dividing x \u00d7  n by m is 1.\nFor example, 4 x 13 = 52 = 17 x 3 + 1, so the remainder when 52 is divided by 17 is 1, and thus 13 is the inverse of 4 modulo 17.\nYou are to write a program which accepts as input the two integers x and m, and outputs either the modular inverse n, or the statement \"No such integer exists.\" if there is no such integer n.\nYou may assume that m \u2264 100.",
  "Title": "CCC01J2 - Mod Inverse",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \nC258TJKD69QAHSTJA\nSample Output 1\nCards Dealt              PointsClubs 2 5 8 T J K             4Diamonds 6 9 Q A              6Hearts                        3Spades T J A                  5                       Total 18\nSample Input 2\nCAD578KAHAS47TQKA\nSample Output 2\nCards Dealt              PointsClubs A                       6Diamonds 5 7 8 K A            7Hearts A                      6Spades 4 7 T Q K A            9                       Total 28\nNote: your output does not need to match exactly. The spacing is up to you.",
  "Description": "In a card game, each player's hand is made up of 13 cards. Each hand has a total point value determined by the number of cards that have a point value. The cards which are worth points are the Ace (4 points), King (3 points), Queen (2 points) and Jack (1 point). The other cards (2, 3, 4, 5, 6, 7, 8, 9, 10) have no point value.\nThere are four of each type of card, one in each of the four suits. The suits are called clubs (C), diamonds (D), hearts (H), and spades (S). As well, points are assigned for each suit which has a void (3 points), a singleton (2 points), or a doubleton (1 point). A void in a suit means that there are no cards of that suit (e.g. a hand with no spades). A singleton in a suit means that there is only one card in that suit (e.g. a hand with only one diamond). A doubleton in a suit means that there are only two cards in that suit.\nWrite a program to read a set of thirteen cards in the form of a string, then evaluate the number of points in the hand. The suits will appear in increasing alphabetical order. Within each suit there will be no duplicate cards.\nThe output is to be the hand and the point value shown in a table form as below. Your output should list the cards in the same order as the input. Note that 10 is represented by the character T in both the input and the output.",
  "Title": "CCC01J3S1 - Keeping Score",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n1027\nSample Output 1\n      27 26\n16 15 14 25\n17 10 13 24\n18 11 12 23\n19 20 21 22\nSample Input 2\n\n712\nSample Output 2\n12 11\n 7 10\n 8  9",
  "Description": "A spiral of numbers can start and end with any positive integers less than 100. Write a program which will accept two positive integers x and y as input, and output a list of numbers from x to y inclusive, shown in a spiral. You may assume that the end value is greater than or equal to the start value.\nA spiral starts with the first number in the centre. The next number appears immediately below the first number. The spiral continues with the numbers increasing in a counter-clockwise direction until the last number is printed.",
  "Title": "CCC01J4S2 - Spirals",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n5\n1 2\n2 3\n3 1\n4 5\n5 4\n4\n1 4\n2 3\n4 1\n3 2\n0\n\nSample Output\n6\n2\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " \nThe director\nof Hind Circus has decided to add a new performance, the monkey dance,\nto his show.  The monkey dance is performed simultaneously by N monkeys.\nThere are N circles drawn on the ground, labelled from 1 to N. In the beginning, each monkey\nsits on a different circle.  There are N arrows drawn from circle to\ncircle in such a way that there is exactly one arrow pointing toward each ring and exactly one arrow pointing away from each ring.\n\n \nWhen the show begins, at each whistle of the ringmaster, all the monkeys\nsimultaneously jump from their respective circles to other circles\nfollowing the arrows from their respective current circles.  This is\none step of the dance.  The dance ends when all the monkeys have\nreturned to the circles where they initially started.  \nHow long does the dance last?\n",
  "Output": "For each case, simply output the number of steps in the dance.  Each output should be on a separate line.",
  "Title": "CCC01 Stage 2 - The Monkey Dance",
  "Input": "The input may have multiple cases.\nEach case consists of the value of N (1 \u2264 N \u2264 100) on a line, followed by N lines, each with a pair of integers \nbetween 1 and N.  The pair I1, I2 \nmeans that there is an arrow from circle I1 to circle I2.  The input ends with 0 for the value of N."
}{
  "Example": "Sample Input \n4\njamie wants Coke\njohn hates Coke\nmary wants same as john\nbarry wants different from mary\n0\nSample Output\nbarry gets Coke\njamie gets Coke\njohn gets chocolate milk\nmary gets chocolate milk",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " \nAnybody who has been to a child's birthday has seen the following scenario:\n\nParent:  OK Kids, what do you want to drink, Coke or Chocolate Milk? \nJamie: Coke \nJohn: I hate Coke \nMary: I want what John is having \nBarry: Ick!  Then I don't want it if she's going to have it \n ... etc.  ",
  "Output": "<person> gets <drink>\n \nIf there is more than one way to make everybody happy (fat chance!),\nfill their glasses in alphabetical order and pour Coke (it's cheaper)\nwhenever there is a choice.\nIf it is not possible to make everybody happy, print\nEverybody gets water",
  "Title": "CCC01 Stage 2 - Coke or Chocolate Milk",
  "Input": "<person> wants <drink>\n<person> hates <drink>\n<person> wants same as <person>\n<person> wants different from <person>\n<person> wants <drink> if <person> gets <drink>"
}{
  "Example": "Sample Input \n3\n1 1\n5 4\n5 8\nSample Output\n(1)\n(3,1,1)\nToo big",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " \nGiven a positive integer k, a partition is a sequence of positive integers in decreasing order whose sum is k. \nFor example, (12), (2,2,2,2,2,2) and (5,3,2,1,1) are all partitions of 12. \nGiven two distinct partitions, (a1,a2,...,an) and\n(b1,b2,...,bm),\nwe will say that \n(a1,a2,...,an) >\n(b1,b2,...,bm)\nif, for the smallest positive integer t such that t \u2264 n, t \u2264 m and at \u2260 bt, we have at > bt.\n\n \nThis ordering lets us put all the partitions of a given integer k in lexicographical order, where each partition in the ordering is greater than all the partitions before it.\n\n \nFor example, if k = 5, the partitions in lexicographical order are\n\n\n(1,1,1,1,1) \n(2,1,1,1) \n(2,2,1) \n(3,1,1) \n(3,2) \n(4,1) \n(5)\n\n \nGiven k and a positive integer a, you are to find the ath partition in the list of partitions of k sorted in lexicographical order.\n",
  "Output": "",
  "Title": "CCC01 Stage 2 - Partitions",
  "Input": ""
}{
  "Sample Interaction": "> 5 3\n< 3\n> 1\n< 1\n> 0\n< 2\n> 1\n< 1.\n",
  "Explanation": "",
  "Interaction": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You are playing a game with your friends up in a tall tower with N\nlevels labelled 1 to N (1 \u2264 N \u2264 100). You are given an\nobject which is somewhat fragile, and you are warned that the object will break\nif you drop it from the \"breaking level\" or higher. That is, for the given\nobject, there is a unique level H (1 \u2264 H \u2264 N) such\nthat if the object is dropped from level H-1 or lower, it will not\nbreak, and if it is dropped from level H or higher, it will break. Your\njob is to determine the breaking level by dropping samples of the object from\nvarious levels of the building and observing the results.\nYour friends have made the challenge a bit harder. You are given only two\nsamples of the object. Once these have broken, there are no more objects to\ndrop. There is one more restriction: you are given only a certain number,\nD, of opportunities to drop the object (D is much less than\nN). If you successfully determine the breaking level (the unique H\ndefined above) before you run out of drop opportunities and using no more than\nthe 2 samples of the object, you win the game and the unending respect and cash\nof your friends. ",
  "Title": "CCC01 Stage 2 - Breaking Level",
  "Input": ""
}{
  "Example": "Sample Input \n3\n3 5\n5 7\n7 5\n0\nSample Output\nRestaurant at (3,5) serves 38% of the population.\nRestaurant at (5,7) serves 25% of the population.\nRestaurant at (7,5) serves 38% of the population.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " \nYou are planning to open a new Veggie Vittles fast-food restaurant\nfranchise.   N franchises are available, and you must\ndetermine the most desirable locations. \n\n \nThe city is a perfect square, 10 km in linear\ndimension.  The population density and demographics are uniform throughout\nthe area of the city.  You wish to choose your restaurant's location \nso that it is the Veggie Vittles that is the closest to the greatest possible fraction\nof the city's population.\n",
  "Output": "",
  "Title": "CCC01 Stage 2 - Fast Food",
  "Input": ""
}{
  "Example": "Sample Input \n4 5\n3 1 2 3\n3 1 3 4\n1 2\n1 2\n0 0\nSample Output\nCandidate 1 will not become president.\nCandidate 2 may become president.\nCandidate 3 will not become president.\nCandidate 4 will not become president.\nCandidate 5 will not become president.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " \nThe nation of Cicoci elects its president using a winner-take-all\nelectoral vote system.  Each of the N states has one\nelectoral vote, and that vote is awarded\nto the candidate receiving the highest popular vote in that state.  The \ncandidate with the most electoral votes is elected president.  If there is a tie,\nno president will be elected, a constitutional crisis will ensue and the \ncountry will be plunged into civil war.\n\n \nAs election returns are tabulated it becomes possible to determine\nthe outcome of the vote in a number of states.  But many remain too\nclose to call.   You have been retained by Cicoci Press (CP) to\ncompute the possible winners and losers.\n",
  "Output": "Candidate X will become president.\nCandidate X may become president.\nCandidate X will not become president.\n",
  "Title": "CCC01 Stage 2 - Election Night",
  "Input": ""
}{
  "Example": "Sample Input \nACADAECECFEDGFBGHBGH**\n\nSample Output\nCFGFThere are 2 disconnecting roads.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The Enemy relies heavily on the transportation of supplies and personnel between the specific points A and B. Points A and B, as well as other points C, D, E, etc. are linked by a network of roads. Your mission, should you accept it, is to identify a single road that may be bombed in order to cut off all traffic between A and B.",
  "Output": "Your output should identify all roads such that bombing any one of them would halt all traffic between A and B. Your output should list the roads, one per line, followed by a line stating that \"There are n disconnecting roads.\", where n is the number of such roads.\nIf there is no such road, output \"There are 0 disconnecting roads.\"",
  "Title": "CCC01J5S3 - Strategic Bombing",
  "Input": "In the input, each point is identified by a single upper-case letter (there are a maximum of 26 points). Each line of input identifies a pair of points connected by a road.\nThe end of input is indicated by a line containing \"**\". All roads are two-way, that is, road AC is the same as road CA. There is at most one road between any pair of points."
}{
  "Example": "Sample Input \n7\n3\na\nabaaa\nab\naaa\nab\nb\nSample Output 1\n4\n2\n1\n1\n3\nSample Input 2\n10\n3\nabc\ndef\nghi\njkl\nmno\npqr\nSample Output 2\nNo solution.\n",
  "Memory Limit": "16M",
  "Time Limit": "10.00s",
  "Description": "Let A and B be two sequences of non-empty strings:\n  A = (a1, a2, ..., an), B = (b1, b2, ..., bn).\n  Let m be a positive integer. Does there exist a sequence of integers\n  i1, i2, ..., ik such that m > k > 0 and ai1ai2...aik = \n  bi1bi2...bik?\n \n  For example, if A = (a, abaaa, ab) and B = (aaa, ab, b), then the required sequence of integers is (2,1,1,3) giving  abaaaaaab = abaaaaaab.",
  "Output": "If a solution exists, print k on a line by itself, followed by the integer sequence in order, one element per line. Otherwise, print a single line containing \"No solution.\"",
  "Title": "CCC01S5 - Post's Correspondence",
  "Input": "The first two lines of input will contain m and n respectively, and m x  n \u2264 40. The next 2n lines contain in order the elements of A followed by the elements of B. Each string is at most 20 characters."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n9\nSample Output\n * * *\n*     *\n*     *\n*     *\n * * *\n      *\n      *\n      *\n * * *",
  "Description": " Most digital devices show numbers using a seven segment display. The seven segments are arranged as shown:\n * * *\n*     *\n*     *\n*     *\n * * *\n*     *\n*     *\n*     *\n * * *\n\nFor this problem each segment is represented by three asterisks in a line as shown above. Any digit from 0-9 can be shown by illuminating the appropriate segments. For example the digit 1 may be displayed using the two segments on the right side:\n      *\n      *\n      *\n     \n      *\n      *\n      *\nThe digit 4 needs four segments to display it properly: \n*     *\n*     *\n*     *\n * * *\n      *\n      *\n      *\nWrite a program that will accept a single digit input from the user, and then display that digit using a seven segment display. You may assume that each segment is composed of three asterisks. ",
  "Title": "CCC02J1 - 0123456789",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \ncolor\nfor\ntaylor\nquit!\nSample Output\ncolour\nfor\ntaylour",
  "Description": "Americans spell differently from Canadians. Americans write \"neighbor\" and \"color\" while Canadians write \"neighbour\" and \"colour\".\nWrite a program to help Americans translate to Canadian.\nYou should input a word (not to exceed 64 letters) and if the word appears to use American spelling, the program should echo the Canadian spelling for the same word. If the word does not appear to use American spelling, it should be output without change. When the user types \"quit!\" the program should terminate.\nThe rules for detecting American spelling are quite naive: If the word has more than four letters and has a suffix consisting of a consonant followed by \"or\", you may assume it is an American spelling, and that the equivalent Canadian spelling replaces the \"or\" by \"our\". Note: you should treat the letter \"y\" as a vowel.",
  "Title": "CCC02J2 - AmeriCanadian",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n1\n2\n3\n4\n3\nSample Output\n# of PINK is 0 # of GREEN is 0 # of RED is 1 # of ORANGE is 0\n# of PINK is 1 # of GREEN is 1 # of RED is 0 # of ORANGE is 0\n# of PINK is 3 # of GREEN is 0 # of RED is 0 # of ORANGE is 0\nTotal combinations is 3.\nMinimum number of tickets to print is 1.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The\u00a0students\u00a0council in your school wants to organize a charity breakfast, and since older students are both wiser and richer, the members of the council decide that the price of each ticket will be based on how many years you have been in the school. A first year student will buy a PINK ticket, a second year student will buy a GREEN ticket, a third year student will buy a RED ticket, and a fourth year student will buy an ORANGE ticket.\nAssume that all tickets are sold. Each colour of ticket is uniquely priced.",
  "Output": "Output all combinations of tickets that produce exactly the desired amount to be raised. The combinations may appear in any order. Output the total number of combinations found. Output the smallest number of tickets to print to raise the desired amount so that printing cost is minimized.",
  "Title": "CCC02J3S1 - Student Council's Breakfast",
  "Input": "Input the cost of a PINK, GREEN, RED, and\u00a0ORANGE\u00a0ticket (in that exact order). Input the exact amount of money to be raised by selling tickets. "
}{
  "Time Limit": "2.00s",
  "Examples": "",
  "\n  Output\n": "5 1/2",
  "Memory Limit": "16M",
  "Input\n": "55\n10",
  "\n  Output": "2 3/5",
  "Description": "Many advanced calculators have a fraction feature that will simplify fractions for you.\nYou are to write a program that will accept for input a non-negative integer as a numerator and a positive integer as a denominator, and output the fraction in simplest form. That is, the fraction cannot be reduced any further, and the numerator will be less than the denominator. You can assume that all input numerators and denominators will produce valid fractions.",
  "Title": "CCC02J4S2 - Fraction Action",
  "Input": "13\n5"
}{
  "Example": "Sample Input \n2 1 1\nAAAA\nBBBB  CCCC\nENDMESSAGE\nBBBB\nENDMESSAGE\nAAAABBBB\nENDMESSAGE\nAAABB\nENDMESSAGE\n\nSample Output 1\nSample Input 2\nFound in this file\nSample Output 2",
  "Memory Limit": "16M",
  "Time Limit": "3.00s",
  "Description": "Unsolicited email (spam) is annoying and clutters your mailbox. You are to write a spam filter - a program that reads email messages of regular ASCII characters and tries to determine whether or not each message is spam.\nHow can we determine whether or not a message is spam? Spam contains words and phrases that are not common in genuine email messages. For example, the phrase \nMAKE MONEY FAST, HONEY!!\nis in all-uppercase, contains the word \"money\" and ends with a double exclamation mark.\nOne way to create a spam filter is to read through many spam and non-spam messages and to come up with a set of rules that will classify any particular message as spam or not. This process can be tedious and error prone to do manually. Instead you will write a program to automate the process. \nA useful step in automatic classification is to split the text up into set of trigrams. A trigram is a sequence of three adjacent characters that appear in the message. A trigram is case sensitive. The example above is composed of the trigrams: \nIf we examine a sample of spam and non-spam messages we find that some trigrams are more common in spam; whereas others are more common in non-spam. This observation leads to a classification method: \nExamine a sample consisting of a large number of spam messages. Count the number of times that each trigram occurs.\nIn the example above, there are 20 distinct trigrams; the trigrams ONE and NEY occur twice each and the remaining 18\ntrigrams occur once each. (Trigrams that do not occur are considered to occur 0 times.) More formally, for each trigram\nt we compute the frequency fspam(t) with which it occurs in the sample of spam. \nExamine a sample consisting of a large number of non-spam messages. Compute fnon-spam(t), the\nfrequency with which each trigram t appears in the sample of non-spam. \nFor a each message to be filtered, compute fmessage(t) for each trigram t. \nIf fmessage resembles fspam more closely than it resembles fnon-spam\nit is determined to be spam; otherwise it is determined to be non-spam. \nA similarity measure determines how closely f1 and f2 resemble one another.\nOne of the simplest measures is the cosine measure: \n\nThen we say that a message is spam if \n\tsimilarity(fmessage, fspam) > similarity(fmessage, fnon-spam)",
  "Output": "For each of the c messages, your program will output two lines. On the\nfirst line, output similarity(fmessage, fspam) and similarity(fmessage,\nfnon-spam). On the second line print the classification of the message\n(\"spam\" or \"non-spam\"). Round the numbers to five decimal digits.\nWhen forming trigrams, we never include a newline character. We don't include trigrams that span multiple lines, either.\nSo in the first spam message of Sample Input 1, the only trigrams are: ",
  "Title": "CCC02 Stage 2 - Spam",
  "Input": "The first line of input contains three integers: s the number of sample spam messages to follow; n the number of sample non-spam messages to follow; c the number of messages to be classified as spam or non-spam, based on trigram the trigram frequencies of the sample messages. Each message consists of several lines of text and is terminated by a line containing \"ENDMESSAGE\". This line will not appear elsewhere in the input, and is not considered part of the message."
}{
  "Example": "Sample Input \nSample Output",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A game show in Britain has a segment where it gives its contestants a sequence of positive numbers and a target number. The contestant must make a mathematical expression using all of the numbers in the sequence and only the operators: +, -, *, and, /. Each number in the sequence must be used exactly once, but each operator may be used zero to many times.  The expression should be read from left to right, without regard for order of operations, to calculate the target number. It is possible that no expression can generate the target number. It is possible that many expressions can generate the target number.\nThere are three restrictions on the composition of the mathematical expression:\nthe numbers in the expression must appear in the same order as they appear in the input file\nsince the target will always be an integer value (a positive number), you are only allowed to use / in the expression when the result will give a remainder of zero. \nyou are only allowed to use an operator in the expression, if its result is an integer from -32000 .. 32000.",
  "Output": "The output file should contain an expression, including all k numbers and (k-1) operators plus the equals sign and the target. Do not include spaces in your expression. Remember that order of operations does not apply here. If there is no expression possible output NO EXPRESSION",
  "Title": "CCC02 Stage 2 - Game Show Math",
  "Input": "The input file describes multiple test cases. The first line contains the number of test cases n.\nEach subsequent line contains the number of postive numbers in the sequence p, followed by p positive numbers, followed by the target number. Note that 0 < p \u2264 100. There may be duplicate numbers in the sequence."
}{
  "Sample Interaction": "> 2\n> 2\n> 1\n> 1\n> 1\n> N\n< F\n> 0\n< R\n< F\n> 1\n< F\n> 0\n< R\n< F\n> 1\n< R\n< F\n> 0\n< ..\n< X.\n",
  "Interaction": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Note from admin: This problem makes more sense if you have already\nseen (and hopefully solved) Blindfold.\nYou have all played Blind Man's Bluff before, in an earlier Stage of life.\nIn this sequel, you have even less information to work with, and you need to\nprovide even more detailed responses. Recall that the \"game\" of Blind Man's\nBluff is as follows: the player is placed in a known n\u00d7m\nplaying area (with obstacles of size 1 square unit placed at various points in\nthe playing area) pointing in one of the 4 compass directions (North, East,\nSouth, West). After repeatedly moving forward (F), turning right (R), or\nturning left (L), you were to determine your original starting position and the\ncompass direction you were pointing in (either N=North, S=South, E=East,\nW=West).\nWe augment this game slightly now. Instead of simply determining your\nstarting position and your direction, you are to determine the game board\nlayout. That is, you are really playing this game blind. To help you in\nthis endeavor, you are given the dimensions of the board, your starting position\n(in co-ordinates) and your starting orientation (either N=North, S=South,\nE=East, W=West).\nYou will accomplish this by a sequence of moves or move attempts. You have\nthree such operations available to you: turn left 90 degrees, turn right 90\ndegrees, or attempt to move forward one square. The first two will always\nsucceed, but the last may not; your program will be informed of whether it\nsucceeds or fails.\nYou may assume that it is always possible to map out the whole game area from\nany given starting position. For example, consider the board:\n....X\n.XX..\n.X.X.\n..XX.\n.....\n\nSuch a board would not appear in any of the test cases, because if you were\nplaced at the centre square, it would be impossible to determine any squares of\nthe board other than your starting position and its four neighbours.",
  "Output": "",
  "Title": "CCC02 Stage 2 - Return to Blind Man's Bluff",
  "Input": "Your program should read five lines from standard input, containing\nrespectively:\nA single integer n (1 \u2264 n \u2264 100), the number of rows in\nthe field.\nA single integer m (1 \u2264 m \u2264 100), the number of columns\nin the field.\nA single integer r (1 \u2264 r \u2264 n), your starting\nrow on the board.\nA single integer c (1 \u2264 c \u2264 n), your starting\ncolumn on the board.\nA single character, indicating your starting orientation: N,\nS, E, or W.\nYou may assume the common-sense convention of directions: north is decrease in\nrow, south is increase in row, east is increase in column, and west is decrease\nin column."
}{
  "Example": "Sample Input \nSample Output 1\nThe cheater can win by 612 seconds with r = 14.29km and k = 85.71km.\nSample Input 2\nSample Output 2",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A duathlon is a race that involves running r km and cycling k km. n contestants have entered the race; each contestant has different running and cycling speeds. One of the contestants has bribed the organizers to set r and k so that he can win by the maximum margin. You are to determine if this is possible and, if so, give r and k. \nNote also that if the cheater ties with another contestant, it counts as a \"win\".",
  "Output": "If it is possible to fix the race as describe above, print a message giving r and k, and the amount by which the cheater will win the race, accurate to two decimal places as in the sample below. If it is not possible, print \"The cheater cannot win.\" ",
  "Title": "CCC02 Stage 2 - Duathlon",
  "Input": "The first line of input contains an integer t, the total distance of the race, in km. That is, r + k = t. The next line contains an integer n, the number of competitors. For each contestant, a line follows with two real numbers giving the running and cycling speed for that contestant. The last line of input gives the running and cycling speed of the contestant who has bribed the organizers. You may assume t does not exceed 100 km/h and n does not exceed 20. "
}{
  "Example": "Sample Input \n4\n103 104\n104 100\n104 103\n100 100\n1\n4 2\nSample Output\n4.41\n3 2\n1 3",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "Many new buildings are under construction on the campus of the University of Polkaroo. The university has hired bricklayers, electricians, plumbers, and a computer programmer. A computer programmer? Yes, you have been hired to ensure that each building is connected to every other building (directly or indirectly) through the campus network of communication cables.\nWe will treat each building as a point specified by an x-coordinate and a y-coordinate. Each communication cable connects exactly two buildings, following a straight line between the buildings. Information travels along a cable in both directions. Cables can freely cross each other, but they are only connected together at their endpoints (at buildings).\nYou have been given a campus map which shows the locations of all buildings and existing communication cables. You may not alter the existing cables. Determine where to install new communication cables so that all buildings are connected. Of course, the university wants you to minimize the amount of new cable that you use.",
  "Output": "For each new cable you plan to construct, output a line containing the numbers of the two buildings that will be joined by the cable. Also output the total length of the new cables that you plan to use, rounded to two decimal places. If there is more than one possible minimal solution you may output any such solution.",
  "Title": "CCC02 Stage 2 - Connect the Campus",
  "Input": "The input file describes one test case. The first line contains the number of buildings N (1 \u2264 N \u2264 750). The buildings are labelled from 1 to N. The next N lines give the x and y coordinates of the buildings. These coordinates are integers with absolute values at most 10000. No two buildings occupy the same point.\nFinally there is a line containing the number of existing cables M (0 \u2264 M \u2264 1000) followed by M lines describing the existing cables. Each cable is represented by two integers: the building numbers which are directly connected by the cable. There is at most one cable directly connecting each pair of buildings."
}{
  "Example": "Sample Input \nSample Output",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The speed of a racing car, all other factors being equal, depends on the amount of fuel it carries. In general, the weight of the fuel slows the car. In addition, the weight of the fuel increases fuel consumption. It is therefore an advantage to carry as little fuel as possible. Any amount of fuel may be loaded at the beginning of the race, and refueling pit stops may be made during the race. The time consumed for the pit stop increases with the amount of fuel loaded. Your task is to determine the optimal fueling and pit stop strategy for each of a number of cars, based on measurements taken immediately before the race. ",
  "Output": "For each input line, print the following information:\none line containing the seven input numbers in order \none line containing three integers:\ntotal race time \nthe amount of fuel to be loaded initially \nthe number of pit stops \n \ntotal race time \nthe amount of fuel to be loaded initially \nthe number of pit stops \nfor each pit stop, a line containing:\nthe number of laps completed since the start of the race at the time of the pit stop \nthe amount of fuel to be taken on \nthe number of laps completed since the start of the race at the time of the pit stop \nthe amount of fuel to be taken on \nAll floating point results should be printed to 3 decimal places. All numbers on a single line should be separated by a single space. ",
  "Title": "CCC02 Stage 2 - Pit Stop",
  "Input": "Standard input consists of several lines of input, each containing: \nthe number of laps in the race (integer less than or equal to 100) \nthe theoretical lap time [seconds] of the car on an empty tank (float) \nthe increase in lap time [seconds] per litre of fuel carried at the beginning of the lap (float) \nthe theoretical fuel consumption [litres per lap] on an empty tank (float) \nthe increase in fuel consumption per litre of fuel carried at the beginning of the lap (float; strictly less than 1) \nthe time [seconds] for a pit stop taking on no fuel (float) \nthe extra pit stop time per litre of fuel loaded (float) "
}{
  "Example": "Sample Input \n2\n4\n....\n.XX.\n3\nF\nR\nF\nSample Output\n.*..\n.XX*",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Rose and Colin are playing a game in their backyard. Since the backyard is rectangular we can think of it as a grid with r rows and c columns. Rose and Colin place obstacles on some of the squares.\nThe game is played as follows:\nColin covers his eyes with a blindfold then Rose carries him to some grid square in the backyard. \nShe sets him down so that he is facing north, south, east or west. Colin does not know this initial position or direction.\nRose then instructs Colin to make a series of\u00a0m\u00a0moves through the backyard. Each move is one of:\nF - moves forward one grid square in the direction that he is facing, or\nL - turns 90 degrees counter-clockwise, remaining on the same square, or\nR - turns 90 degrees clockwise, remaining on the same square.\nAfter making these moves, Colin is standing at some final position. He must now figure out where he is standing. You will help him by writing a program to determine all possible final positions. Assume that Colin's initial position, final position, and all intermediate positions lie within the backyard but never in a square\u00a0that contains\u00a0an obstacle. You may also assume that Colin is always facing a direction that is parallel to the sides of the backyard (north, south, east, or west).",
  "Output": "Your program should output the backyard grid, indicating all possible final positions with the * character.",
  "Title": "CCC02J5S3 - Blindfold",
  "Input": "The input begins with\u00a0r\u00a0and\u00a0c\u00a0(1 \u2264\u00a0r\u00a0\u2264 375; 1 \u2264\u00a0c\u00a0\u2264\u00a080 ), each on a separate line. Next are\u00a0r\u00a0lines of\u00a0c\u00a0characters describing the backyard: a period character denotes a grid square that Colin may walk through; a capital X character denotes a grid square with an\u00a0obstacle.\u00a0Below the grid is the number m\u00a0(0 \u2264\u00a0m\u00a0\u2264 30000) followed by\u00a0m\u00a0lines describing Colin's moves. Each line has a single character: F, L, or R."
}{
  "Example": "Sample Input \n2\n5\nalice\n1\nbob\n5\ncharlie\n5\ndobson\n3\neric\n3\nSample Output\nTotal Time: 9\nalice\nbob charlie\ndobson eric",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " A rope bridge traverses a deep gorge. People may cross the bridge in groups, but there is a limit (M) to the size of the group. The time taken for a group to cross is determined by the slowest member. You are responsible for safety on the bridge and part of your job is to control the groups crossing.\nPeople are waiting in a queue (line);\u00a0when the previous group has crossed, you tell the next few people they can now cross. Groups can be of different sizes; no group can contain more than\u00a0M\u00a0people, and the goal is to get everyone over in the shortest time, all the time maintaining the order of the people in the queue. ",
  "Output": " The first line of the output is to give the total crossing time for the entire queue of people. Then, output the names of the people in each group, one group per line, which will obtain the minimum overall crossing time. If several groupings yield the same overall crossing time, any such grouping may be listed. ",
  "Title": "CCC02S4 - Bridge Crossing",
  "Input": "The first line of the input contains an integer\u00a0M\u00a0(1 \u2264\u00a0M\u00a0\u2264 20). The second line contains Q\u00a0(1 \u2264\u00a0Q\u00a0\u2264 100), the length of the queue waiting to cross.\nFor each person in the queue, a pair of input lines follows. The first of these is the name of the person, and the second is that person's individual time to cross the bridge. Recall that a group's crossing time will be the maximum crossing time for any individual in the group."
}{
  "Example": "Sample Input \n300\n200\n200\n100\nSample Output\n2",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Suppose you want to create a screen saver which has a ball bouncing around the edges.\nThe action will continue until the ball hits a corner (like a pool table).\nAt that point, the ball disappears off the screen and the screen goes black.\nBalls bounce off the walls according to the laws of physics.\nThe angle of the ball as it approaches the wall (the angle of incidence) will equal the angle of the ball as it bounces away (the angle of reflection).\n\nWrite a program which will determine how many bounces it will take before the bouncing ball will be swallowed by a corner, if at all.\nThe screen dimensions are in the range [100, 1000] units.\nConsider the ball as a point on the screen.\nThe corner pockets are 5 units along each wall, and if a ball hits the wall at the edge of a pocket it will continue bouncing.\n\nNOTE: The ball will always hit the right wall first.\nA sample screen: ",
  "Output": "\nThe output consists of an integer which indicates the number of bounces the ball makes before it disappears in a corner.\nCount the hit off the right wall as the first bounce.\nIt is possible that the ball will never bounce into a corner (assuming a frictionless surface), in this case, output should be 0.\nNote that when the ball hits a pocket is not counted as a bounce.\nYou do not have to program the actual animation. ",
  "Title": "CCC02S5 - Bouncing Ball",
  "Input": "Input consists of four integers on separate lines.\n\nn - The width of the screen. (100 \u2264 n \u2264 1000)\n\nm - The height of the screen. (100 \u2264 m \u2264 1000)\n\np - The initial position of the ball at the bottom of the screen. (5 \u2264 p \u2264 (n - 5))\n\nq - The position of the ball when it bounces off the right wall. (5 \u2264 q \u2264 (m - 5))\n\n"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n4\n3\n2\nSample Output\n*   *   *\n*   *   *\n*   *   *\n*   *   *\n*********\n    *\n    *",
  "Description": "A trident is a fork with three tines (prongs). A simple picture of a trident can be made from asterisks\u00a0and spaces:\n*  *  *\n*  *  *\n*  *  *\n*******\n   *\n   *\n   *\n   *\nIn this example, each tine is a vertical column of 3 asterisks. Each tine is separated by 2 spaces. The handle is a vertical column of 4 asterisks below the middle tine.\nTridents of various shapes can be drawn by varying three parameters: t, the height of the tines, s, the spacing between tines.\u00a0and\u00a0h, the length of the handle. For the example above we have t = 3, s = 2 and h = 4.\nYou are to write a program to print a trident. Your program should accept as input the parameters t, s, and h, and print the appropriate trident. You can assume that t, s, h are each at least 0 and not larger than 10.",
  "Title": "CCC03J1 - Trident",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n1\nOne plus one is small\none hundred plus one is not\nyou might be very tall\nbut summer is not\nSample Output 1\ncross\nSample Input 2\n2\nI say to you boo\nYou say boohoo\nI cry too\nIt is too much foo\nYour teacher has to mark\nand mark and mark and teach\nTo do well on this contest you have to reach\nfor everything with a lark\nSample Output 2\nperfect\nshell\nSample Input 3\n2\nIt seems though\nthat without some dough\ncreating such a bash\nis a weighty in terms of cash\nBut how I see\nthe problem so fair\nis to write subtle verse\nwith hardly a rhyme\nSample Output 3\neven\nfree",
  "Description": "A simple poem consists of one or more four-line verses. Each line consists of one or more words consisting of upper or lower case letters, or a combination of both upper and lower case letters. \nAdjacent words on a line are separated by a single space.\nWe define the last syllable of a word to be the sequence of letters from the last vowel (\"a\", \"e\", \"i\", \"o\" or \"u\", but not \"y\") to the end of the word. If a word has no vowel, then the last syllable is the word itself. We say that two lines rhyme if their last syllables are the same, ignoring case.\nYou are to classify the form of rhyme in each verse. The form of rhyme can be perfect, even, cross, shell or free:\nperfect rhyme: the four lines in the verse all rhyme\neven rhyme: the first two lines rhyme and the last two lines rhyme\ncross rhyme: the first and third lines rhyme, as do the second and fourth\nshell\u00a0rhyme: the first and fourth lines rhyme. as do the second and third\nfree rhyme: any form that is not perfect, even, cross, or shell\nThe first line of the input file contains an integer N. the number of verses in the poem. 1 \u2264 N \u2264 5.\nThe following 4N lines of the input file contain the lines of the poem. Each line contains at most 80 letters of the alphabet and spaces as described above.\nThe output should have N lines. For each verse of the poem there should be a single line containing one of the words 'perfect', 'even', 'cross', 'shell' or 'free' describing the form or rhyme in that verse.",
  "Title": "CCC03J4S2 - Poetry",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n++[>+++++++++++++<-]          // put 26 in cell 1\n>>>++++++++[<++++++++>-]<+    // put 65 in cell 2\n<[->.+<]                      // output alphabet\n++++++++++.                   // output newline\n#\n\nSample Output 1\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nSample Input 2\n[+[>uh-oh<]+]------outer[+>------inter[+>-----<]<]>>.<++++++++++.#\n\nSample Output 2\nL\n\nSample Input 3\n>+[>[--------->]---[<]>+++]>>>>>[-]>>>.>>>++.>..>------.[<]<\n----.>>>>>>---.>>>.+++.<.<-.[<]<+.<<<+.#\n\nSample Output 3\nHello World!\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " For this problem, you will write an interpreter for an extremely simple programming language. The language does have a name, but for various, ahem, reasons, we shall call it BF. \n A BF program operates on a simple 1-dimensional array of memory cells; there is a pointer to a \"current\" memory cell. in \"vanilla\" BF, this array has a size of 30,000, and each cell is an 8-bit integer - that is, cells store values in the range of 0-255. Incrementing a cell with a value of 255 wraps around to 0; decrementing a cell with a value of 0 wraps around to 255. All cells are initially set to 0, and the pointer initially points to the leftmost cell. \n The BF program consists of a string. Each character can be one of 8 \"commands\": \nYou do no need to implement the \",\" command. \n You should ignore any characters in the BF program in except the first 7 commands listed above. The program ends when there are no more characters to be processed. \n Interestingly enough, these commands are powerful enough that a BF program can (given sufficient memory, time and programming patience) perform and computation that any other programming language can do! ",
  "Output": " Your interpreter should pring the output from the execution of the BF program. Do not print any characters other than the ones from the program. ",
  "Title": "CCC03 Stage 2 - BFed",
  "Input": " Your interpreter will be given a BF program in standard input. It may span multiple lines. The program will be terminated by a hash mark (#).\n You may assume that no programs will be given to your interpreter that are invalid, run unreasonably long (or forever), or crash off the left or right end of the array. No input will be longer than 10,000 characters. "
}{
  "Example": "Sample Input \n3\n3 300 400\n4 400 300\n7 300 400\n\nSample Output\n2600\n2800\n3800\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Stan has a deck of N Concentration Cards. He wants to lay the cards edge-to-edge to form a filled rectangle with minimal perimeter. Each card is a rectangle with dimensions W mm. by H mm.\nFigure 1: Concentration Cards",
  "Output": "Your program should produce one line of output per case, giving the minimal perimeter.",
  "Title": "CCC03 Stage 2 - Concentration Cards",
  "Input": "The first line of input contains C, the number of test cases. For each case there is an additional line containing N, W, H, each a positive integer not exceeding 1000."
}{
  "Example": "Sample Input \n2\n\nAB\nAB\n\nBB\nBA\n\n3\n\nAAA\nBBB\nAAA\n\nAAA\nABA\nAAA\n\nABA\nABA\nABA\n\n0\n\nSample Output\nNo\nYes\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Imagine a cube formed from solid interlocking pieces of various shapes. If the pieces are sufficiently entwined, the only way to separate them would be to cut some of them. We can ask the question: \"is the cube stable?\" That is, is it physically impossible to separate the cube into 2 or more fragments without deforming or cutting any individual piece?\nYour program must answer this question for a variety of such cubes.\nThe pieces that make up a cube will be specified as follows: divide the cube into a grid of n * n * n miniature cubes, each labeled by a capital letter. Two adjacent (face-sharing) minicubes are joined together if and only if they are labeled by the same letter. For instance, the first example cube given consists of 3 solid pieces.",
  "Output": "For each cube given, in the order specified, print \"Yes\" if that cube is stable, and \"No\" if it is not.",
  "Title": "CCC03 Stage 2 - Cube",
  "Input": "Your program will be given the specification of up to 10 different cubes. The first two lines of each specification will consist of the size of that cube, n (1 \u2264 n \u2264 10), and a blank line. The remaining n * (n + 1) lines will specify the n horizontal layers of the cube from bottom to top. Each layer specification consists of an n * n square showing the labels for each minicube on that layer, followed by a blank line. There will be no spaces in the input. The input will be terminated by the number 0 on a line by itself."
}{
  "Example": "Sample Input \n3\n2\n1 2\n2 3\n\nSample Output 1\n1\n\nSample Input 2\n4\n2\n1 2\n2 1\n\nSample Output 2\n0\n\nSample Input 3\n4\n2\n1 2\n2 3\n\nSample Output 3\n4\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "\nA permutation on the numbers 1,2,...,n is a linear ordering of the numbers. For example, there are 6 permutations of the numbers 1,2,3. They are 123, 132, 213, 231, 312 and 321. Another way to think of it is removing n disks numbered 1 to n from a bag (without replacement) and recording the order in which they were drawn out.\n\nMathematicians (and other smart people) write down that there are n! = n\u00b7(n-1) \u00b7 \u00b7 \u00b7 3\u00b72\u00b71 permutations of the numbers 1,...,n. We call this \"n factorial.\"\n\n\nFor this problem, you will be given an integer n (1 \u2264 n \u2264 9) and a series of k (k \u2265 0) constraints on the ordering of the numbers. That is, you will be given k pairs (x,y) indicating that x must come before y in the permutation.\n\n\nYou are to output the number of permutations which satisfy all constraints.\n",
  "Output": "Your output will be one integer, indicating the number of permutations of 1,...,n which satisfy the k constraints.",
  "Title": "CCC03 Stage 2 - Constrained Permutations",
  "Input": "Your input will be k + 2 lines. The first line will contain the number n. The second line will contain the integer k, indicating the number of constraints. The remaining k lines will be pairs of distinct integers which are in the range 1,...,n."
}{
  "Example": "Sample Input \n1\n9\n5\n3\n1\n2\n8\n3\n9\n0\nSample Output\n9\n5\n3\n1\n2\n8",
  "Memory Limit": "3M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "CCC03 Stage 2 - Longest Substring",
  "Input": ""
}{
  "Example": "Sample Input \n2\n5 5 6 2\n3 3 0.8\n4 2 0.5\n8 12 4 2\n1 2 2\n7 11 4.8\nSample Output\n1.00\nStranded on the shoulder",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Every day you drive to work through the city. Gas prices have\nbecome exorbitant as of late. You've noticed that the gas prices\ndiffer throughout the city. Sometimes the cheapest gas is on the\nother side of the city, but you wonder if it's worth it to drive\nall the way there just to fill up on cheap gas. You obviously\nwant to spend as little money on gas as possible, but you don't\nwant to run out along the way (your gas tank has a finite size).\nYou wonder if it's possible to calculate the minimum amount of\nmoney you need to spend to get to your office each day.\nLucky for you! You live and work in grid city. In grid city\nthere are streets running east-west and avenues running\nnorth-south. The streets are sequentially numbered, with the \navenue is numbered with 1. Residents of the city often refer to\ntheir location with a pair of numbers, including indicating the\nstreet and avenue they're at: (3,2) implies that they are at the\nintersection of the 3rd street and 2nd avenue.\nAfter years of \"applied experiments\" you have discovered \nsomething very uncanny about the city: it takes exactly one \nlitre of gas to move from any intersection to any neighbouring\nintersection (one block north, east, south, or west). It is \nacceptable to arrive at your office or a gas station with 0 \nlitres of gas in your tank.\nWhen you get to an intersection with a gas station you can\nchoose to fill up with as much or as little gas as you'd like.\nYou don't want to overfill the tank, though, as it would be \nwasted gas.",
  "Output": "",
  "Title": "CCC03 Stage 2 - Cheap Gas",
  "Input": "Each test case begins with a line with four integers m, n, f, and k.\nm is the number of streets and n is the number of avenues, \n(1 \u2264 m,n \u2264 100). f is the maximum capacity of your gas tank, in \nlitres. Your starting location is (1,1) and your office is at (m,n). \nYou start at (1,1) with a full tank of gas in your car.\nEach of the next k lines contains three numbers: a,b,c: \na and b are integers, (a,b) being the location of a gas station, \nand c is the price of gas at that gas station."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n105\n14\n16\nIIIIIIIIIIIIIIII\nI......I.......I\nI......III.....I\nI........I.....I\nI........IIIIIII\nIIIIIIIIII.....I\nI.I......I.....I\nIII..III.I.....I\nI....I.IIIII...I\nI....I.....III.I\nI....I.......I.I\nI....I.....III.I\nI....I.....I...I\nIIIIIIIIIIIIIIII\nSample Output 1\n4 rooms, 1 square metre(s) left over\nSample Input 2\n13\n2\n3\n.I.\n.I.\nSample Output 2\n2 rooms, 9 square metre(s) left over",
  "Description": "The floor plan of a house shows rooms separated by walls. This floor plan can be\ntransferred to a grid using the character \"I\" for walls and \".\" for room space.\nDoorways are not shown. Each \"I\" or \".\" character occupies one square\nmetre.\n\nIn this diagram there are six rooms.\nYou have been given the floor plan of a house and a supply of hardwood flooring.\nYou are to determine how many rooms will have the flooring installed if you\nstart installing the floor in the largest room first and move to the next\nlargest room, and so on. You may not skip over any room, and you must stop when\nyou do not have enough wood for the next room. Output the number of rooms that\ncan have hardwood installed, and how many square metres of flooring are left\nover.\nNo room will be larger than 64 square metres.\nThe first line of the input contains the number of square metres of flooring\nyou have. The second line in the input contains an integer r from 1 to 25 that\nrepresents the number of rows in the grid. The third line contains an integer c\nfrom 1 to 25 that represents the number of columns in the grid. The remaining r\nlines contain c characters of grid data.",
  "Title": "CCC03J5S3 - Floor Plan",
  "Memory Limit": "16M"
}{
  "Title": "CCC03S4 - Substrings",
  "Example": "Sample Input \n2\nabc\naaa\nSample Output\n7\n4",
  "Memory Limit": "256M",
  "Time Limit": "15.00s",
  "Description": "How many distinct substrings does a given string S have?\nFor example, if S = \"abc\", S has 7 distinct substrings: \"\", \"a\", \"b\", \"c\", \"ab\", \"bc\", \"abc\". Note that the empty string and S itself are considered substrings of s.\nOn the other hand, if S = \"aaa\". S has only 4 distinct substrings: \"\", \"a\", \"aa\", \"aaa\".",
  "Output": "Your output consists of one line per case, giving the number of distinct substrings of S.",
  "Input": "The first line of the input file contains N, the number of test cases. For each test case, a line\nfollows giving S, a string of from 1 to 5000 alphanumeric characters.",
  "Grading": ""
}{
  "Example": "Sample Input \n5 7 3\n1 2 20\n1 3 50\n1 4 70\n1 5 90\n2 3 30\n3 4 40\n4 5 60\n2\n4\n5\nSample Output\n30",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You are a salesperson selling trucks which can carry trucks which can carry trucks. Needless to say, your trucks are heavy. Also needless to say, you have to drive one of these trucks across a wide wet domain, and since it is wet, you need to drive over some bridges. In fact, on every road between two cities, there is a bridge but there is not a direct road between every pair of cities.\nEach bridge can support a certain maximum weight. This maximum weight is an integer from 0 to 100,000.\nYou have been given a list of cities where there are customers who are eager to view one of your trucks. These cities are called destination cities. Since you must decide which truck you will drive through these cities, you will have to answer the following problem: what is the maximum weight that can be driven through these destination cities? You are to write a program to solve this problem.",
  "Output": "",
  "Title": "CCC03S5 - Trucking Troubles",
  "Input": "The first line of input will contain three positive integers: c, r and d specifying the number of cities (in total), \nnumber of roads between cities and number of destination cities, respectively. \nThe cities are numbered from 1 to c. There are at most 10,000 cities and at most 100,000 roads.\nThe next r lines contain triples x y w indicating that this road runs between city x and city y and it has a maximum weight capacity of w. The next d lines give the destination cities you must visit with your truck. There will be at least one destination city.\nYou can assume that you are starting in city 1 and that city 1 is not a destination city. You can visit the d destination cities in any order, but you must visit all d destination cities."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n32EasySmartSoftpierock\nSample Output\nEasy as pieEasy as rockSmart as pieSmart as rockSoft as pieSoft as rock",
  "Description": "A simile is a combination of an adjective and noun that produces a phrase such as \"Easy as pie\" or \"Cold as ice\".\nYour program may output the similes in any order.",
  "Title": "CCC04J3 - Smile with Similes",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \nACT\nBANANA & PEEL\nSample Output 1\nBCGAPTPGXL\nSample Input 2\nTRICKY\nI LOVE PROGRAMMING!\nSample Output 2\nBCWXONKFOTKKFZVI",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "One of the simplest ways of coding a message is to do a letter shift.\nFor example, if you shift the letters in the original message by 5 then A in your original message becomes F in the coded message.\n(B \u2192 G, C \u2192 H, ..., T \u2192 Y, U \u2192 Z, V \u2192 A, ..., Z \u2192 E). To decode the message, you simply need to shift back by the same number.\nA slightly trickier encryption uses a keyword to determine the amount of the shift. Suppose you were using a keyword \"ACT\". To encode the message, you take the original message, remove everthing but the alphabetic characters, and form the message into a block that has the same width as the keyword. Here is a sample message to encrypt:\nThe blocked version of the message is shown below with the keyword ACT as a header.\nNow, the message is encoded using a letter shift. However, this time it is not a uniform shift, it will depend upon the keyword letter at the top of the column. \nIf the letter at the top of the column is an \"A\", the the letters in that column are not shifted. If the letter is a \"B\", then the letter in that column shift by 1, and so on.\nIn the example, the letters in the third column will shift by 19 since the \"T\" is the 20th letter of the alphabet.\n\nThe encoded message is: \nYou will write a program that will accept a keyword and a string to be encoded. The keyword will never have more than 6 characters. The message will always be given in all upper case characters. The total message length will never exceed 60 characters.",
  "Output": "Output the encoded message on a single line.",
  "Title": "CCC04J4 - Simple Encryption",
  "Input": "The first line of input consists of the keyword. The second line of the input is the message to be encoded. The keyword length will never exceed 6 characters. The total message length also will never exceed 60 characters."
}{
  "Example": "Sample Input \n2\nabba\naab\nbab\na\nab\naa\nSample Output\nYes\nNo",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A collection of words is prefix-free if no word is a prefix of any other word.\nA collection of words is suffix-free if no word is a suffix of any other word.\nA collection of words is fix-free if it is both prefix-free and suffix-free.\nFor this problem, a word is a sequence of lower-case letters of length between 1 and 25.\nA word X is a prefix of word Y if X consists of the first n characters of Y, in order,\nfor some n.  That is, the word \"cat\" has prefixes \"c\", \"ca\", and \"cat\".\nSimilarly, a word X is a suffix of Y if X consists of the last n characters of Y, in order,\nfor some n.",
  "Output": "",
  "Title": "CCC04S1 - Fix",
  "Input": ""
}{
  "Example": "Sample Input \n5 2\n99 97 100 85 -4\n95 97 100 62 1000\nSample Output\nYodeller 5 is the TopYodeller: score 996, worst rank 5",
  "Explanation": "Should not be included with output.\nAfter Round 1 Yodeller 3 has score 100, and is ranked 1. Yodeller 1 has score 99, and is ranked 2. Yodeller 2 has score 97, and is ranked 3. Yodeller 4 has score 85, and is ranked 4. Yodeller 5 has score -4, and is ranked 5. \nAfter Round 2 Yodeller 5 has score 996, and is ranked 1. Yodeller 3 has score 200, and is ranked 2. Yodeller 1 has score 194, and is ranked 3. Yodeller 2 has score 194, and is ranked 3. Yodeller 4 has score 147, and is ranked 5. ",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A yodel is a wordless song that shifts suddenly from a normal voice to a high, falsetto voice and back. Yodeling, present in many Swiss folk songs, is commonly heard throughout the Alps.\nThe TopYodeller contest invites the world's best yodellers to compete for a share of 100,000 Swiss Francs, with the best yodeller receiving 50,000 Francs. Each yodeller competes in a series of yodel rounds, and is assigned a score, by the judge, for their performance in the round. To keep the judge impartial, each yodeller is assigned a contestant number. Every yodeller competes in every yodel round. After all the yodel rounds are complete, the yodeller with the highest total score is declared the TopYodeller. \nYou have been hired by the TopYodeller Contest Co-ordinating Committee (CCC) to write a program which generates a scoreboard so that yodel fans around the world can track the progress of the best yodellers on the Internet. \nAfter each round, each yodeller's cumulative score is calculated and a rank is assigned. A yodeller's rank is j+1 if j yodellers have a cumulative score higher than their score. Therefore, there may be multiple yodellers at the same rank.",
  "Output": "For the highest-ranked yodeller at the end of the competition, output \"Yodeller x is the TopYodeller: score y, worst rank z\" where x is the contestant number, y is their total score after the competition, and z is their worst rank at any time during  the competition.\nIf there is a tie for TopYodeller, the output should be one line per winning contestant, listed by increasing competitor number.",
  "Title": "CCC04S2 - Top Yodeller",
  "Input": "Each test case consists of one TopYodeller competition. The first line of the input contains two integers, n and k; n (2 \u2264 n \u2264 100) represents the number of yodellers in the competition, and k (1 \u2264 k \u2264 100) represents the number of yodel rounds in the competition. \nYodellers are assigned contestant numbers from 1 to n. \nNext in the input are k lines, each line representing a yodel round. \nEach line of input representing a yodel round contains n integers. These n integers give the scores assigned to the n yodellers by the judge. The first integer corresponds to the score given to yodeller number 1, and so forth. The score assigned to a yodeller in any given round is an integer between -1000 and 1000, inclusive. "
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n9\nSample Output 1\nThe largest square has side length 3.\nSample Input 2\n8\nSample Output 2\nThe largest square has side length 2.\nSample Input 3\n7535\nSample Output 3\nThe largest square has side length 86.",
  "Description": "Gigi likes to play with squares. She has a collection of equal-sized square tiles. Gigi\nwants to arrange some or all of her tiles on a table to form a solid square. What is the side\nlength of the largest possible square that Gigi can build?\nFor example, when Gigi has 9 tiles she can use them all to build a square whose side\nlength is 3. But when she has only 8 tiles, the largest square that she can build has side length 2.\nWrite a program that inputs the number of tiles and then prints out the maximum side length.\nYou may assume that the number of tiles is less than ten thousand.",
  "Title": "CCC04J1 - Squares",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n3 27 5\nSample Output 1\n4 5 6\nSample Input 2\n3 27 18\nSample Output 2\n1 2 3 4 7 8 9 10\nSample Input 3\n2 27 19\nSample Output 3\n1 4 7\nSample Input 4\n4 81 38\nSample Output 4\n37 38 39",
  "Description": "A fractal is a geometric shape where the pattern of the whole shape is self-replicating at each subsection of the shape. A simple 'block fractal' is shown below. At each stage of the fractal growth, every straight line in the fractal is divided into three equal parts. The first and last sections stay straight; the middle section contains a square 'bump which has the same height as the width of the middle section. (You will want to consider the four orientation of a line segment within the fractals. Depending upon which line segment is currently being generated, the bump may protrude up, down, left or right.)\n\nSuppose this fractal is drawn on a Cartesian plane, where (0, 0) is at the bottom left corner. Assume that in the example above, the bottom left point of the fractal is at (0, 1) and the bottom right point of the fractal is at (27, 1). For example, the top of the Level 3 fractal is a line from (13, 14) to (14, 14).\nWrite a program that will keep track of the integer coordinate points of the lines in a similar 'block fractal' with its bottom left corner at (0,1). The program will accept three integers as input: the level of the fractal, the width of the fractal, and a x-coordinate. You may assume that the width of the fractal will be some power of three, and that it will be large enough so that every corner of fractal will fall on an integer intersection in the Cartesian plane. The width will never be more than 81. The x-coordinate, x, will be in the range 0 - width(inclusive). Your program should output the y-coordinate value(s), y, where lines of fractal intersect the point(x, y).\nYou may draw a graphic representation of the fractal for debugging (and interest). However, test cases may ask you to define fractals that are too large to fit on a single screen.",
  "Title": "CCC04J5 - Fractals",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n2\n4\n1-0\n2-0\n0-3\n2-1\n4\n0-0\n5-0\n1-3\n2-2\nSample Output\n2\n1-0 2-0 3-0\n2-1\n3\n0-0 5-0\n3-1\n2-2",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Hugh Hockey is a very big hockey fan. Every Saturday night he sits and watches all the hockey games, never wanting to miss a moment. Every Canadian loves hockey.\nNot this Saturday night though. Hugh Hockey has a date, so he trained his three year-old brother Billy to record the scores for him. He sits Billy in front of his TV, teaches him how to change the channels, and tells him to write down the hockey scores.\nHugh returns home, after his date, to a surprise: he discovers that even though Billy wrote down the scores, Billy didn't write down the names of the teams. He also discovered that Billy not only wrote down the final scores, but also the scores of games in progress. To make matters worse, Billy didn't follow any specific order when writing down the score of a game; A score of two-to-one could have been written down as 2 - 1 or 1 - 2. There's no guarantee that Billy wrote down every score, some could be missed.\nHelp Hugh figure out, from Billy's list, the minimum number of hockey games that occured, so Hugh knows, sadly, how much hockey he's missed.",
  "Output": "For each test case, output on a single line the integer m, the minimum number of games that must have occured such that each score Billy recorded occurs in a game sometime during the night. The next m lines give a possible scenario for the hockey games, such that each score Billy recorded is used at least once (and scores that Billy did not record do not appear).\nIf there is more than one possible scenario for the hockey scores, any one will do.",
  "Title": "CCC04 Stage 2 - Hockey Scores",
  "Input": "Input consists of a series of test cases. The first line consists of an integer n, the number\nof test cases.\nFor each test case, the first line consists of the integer s, (1 \u2264 s \u2264 1000), the number of\nhockey scores recorded by Billy. The next s lines each contain a hockey score in the form x - y, where x and y are non-negative integers."
}{
  "Example": "Sample Input \n((KS)K)\n((KK)S)\n(((SK)S)K)\n(((SS)K)S)\n(((SK)K)K)\n((((S((SK)K))(K(S((S(KS))K))))((S((S(KS))K))(K((SK)K))))((S((S(KS))K))(K((SK)K))))\n(((S((S((SK)K))(K(S((S(KS))K)))))(K(K((SK)K))))(((S((S(KS))K))((SK)K))((S((S(KS))K))((SK)K))))\nSample Output\nS\nK\nK\n((SS)(KS))\nK\n((S((S(KS))K))((S((S(KS))K))(K((SK)K))))\n((S((S(KS))K))((S((S(KS))K))((S((S(KS))K))((S((S(KS))K))(K((SK)K))))))",
  "Memory Limit": "128M",
  "Time Limit": "5.00s",
  "Description": "You may be wondering what is the simplest computer we can create that can still perform\nuseful computation. Over the years, theoretical computer scientists have devised various\nsimple models of computation such as Turing machines and lambda calculus. In this problem,\nwe will see how we can perform arbitrary computation in an even simpler system devised in\n1924 by Moses Sch\u00f6nfinkel, using just the letters S and K. We will arrange these letters in a\nbinary tree to provide some structure. Specifcally, we will manipulate binary trees in which\nevery leaf node is either an S or K. An example of such a tree is shown in Figure 1(a).\n\nWe can encode such a binary tree as a string in the following way. To represent a leaf\nnode, we write either S or K. To represent a non-leaf node, we write (ab), replacing a with\nthe string representation of the left child and b with the string representation of the right\nchild. For example, the tree in Figure 1(a) would be represented by the string ((SK)K).\nThe binary trees are transformed according to the following rules, which will attempt to\napply in the order given. That is, we will try to apply rule (1) first, and if we can't, we will\ntry to apply rule (2) next, and so on. Once we have applied a rule, we would begin checking\nat rule (1) on the root of the tree.\nIf the tree has the form of Figure 1(b), where a and b are arbitrary subtrees, we replace\nit with only the subtree a. In string form, if the string representation has the form\n((Ka)b), where a and b are the string representations of some arbitrary subtrees, we\nreplace it with just a.\nIf the tree has the form of Figure 1(c), where a, b, and c are arbitrary subtrees, we replace it with the tree shown in Figure 1(d), which contains one copy each of a and b, and two copies of c. In string form, we are replacing a string of the form (((Sa)b)c) with ((ac)(bc)).\nIf we cannot find any transformation to perform using any of the preceding rules, we recursively apply the these transformation rules to the subtree rooted at the left child\nof the root.\nIf we cannot find any transformation to perform using any of the preceding rules, we recursively apply the these transformation rules to the subtree rooted at the right child\nof the root.\nIf we cannot find any transformation to perform using any of the preceding rules, we print out the string representation of the resulting tree and stop.\nHow do we use these simple rules to perform computations? We can start by defining a representation of natural numbers. Many representations are possible, but the following is the most popular, devised by Alonzo Church. We will define zero to be 0 = (K((SK)K)), and a successor operator \u03c3 = (S((S(KS))K)). We can then define the natural numbers as 1 = (\u03c30), 2 = (\u03c31), 3 = (\u03c32), and so on, always replacing each symbol such as \u03c3 and 0 by the subtree we defined for it. So the number 4 will be represented by the tree\n4 = ((S((S(KS))K))((S((S(KS))K))((S((S(KS))K))((S((S(KS))K))(K((SK)K))))))\nNotice that this has four occurrences of the subtree \u03c3, followed by the subtree 0.\nNumbers encoded in this way can be added using the subtree\n+ = ((S((SK)K))(K(S((S(KS))K))))\nFor example, if we construct the tree ((+3)4), again replacing +, 3, and 4 by the appropriate\nsubtrees, and apply the transformation rules, we will eventually end up with the tree 7. Multiplication can be performed using the simpler subtree * = ((S(KS))K). However, the results produced using some operators such a * may not look like the numbers we just\ndefined, although they are equivalent in that they behave the same way. We can use a normalization operator\nN = ((S((S((SK)K))(K(S((S(KS))K)))))(K(K((SK)K))))\nto make them look the same if they are equivalent. So, applying the transformation rules to the tree (N((*2)4)) produces the tree 8.\nWith a bit more playing around, we can come up with trees for other operations one\nmight expect in a programming language, such as comparisons, conditionals, and recursion. These operators can be used to write more complicated programs. For example, the following tree computes factorials:\n! = ((((SS)K)((S(K((SS)(S((SS)K)))))K))((S(K(S((S((S((S((SK)K))(K(K(K((SK)K))))))\n(KK)))(K((S((S(KS))K))(K((SK)K))))))))((S(K(S((S(KS))K))))((S((S(KS))K))\n (K((S(K(S(K(S(K((S((SK)K))(K(K((SK)K))))))))))((S((S(KS))((S(K(S(KS))))\n((S(K(S(KK))))((S((S(KS))K))(K((S((S(KS))((S(K(S(K((S((S(KS))((S(KK))((S(KS))\n((S(K(S((SK)K))))K)))))(KK))))))((S((S(KS))K))(K((S((SK)K))(KK)))))))\n(K((S((SK)K))(KK))))))))))(K(K((S((S((S(KS))((S(KK))((S(KS))\n((S(K(S((SK)K))))K)))))(KK)))((SK)K)))))))))))\nIf we combine it with the normalization operator and the number 4, for example, and apply the transformation rules to the tree (N(!4)), we end up with the tree representing 24 (which is 4!).",
  "Output": "For each line of input except the last blank line, your program must repeatedly apply the transformation rules to the given tree, until no further transformations are possible (rule 5). It must then print out, on a single line, the string representation of the resulting tree. Although for some trees, such as \n(((S((SK)K))((SK)K))((S((SK)K))((SK)K)))\nit is possible to continue applying the rules forever, we will not include any such trees in the test data.",
  "Title": "CCC04 Stage 2 - S and K",
  "Input": "The input will consist of several strings representing trees, one tree on each line. No input line will contain more than 1000 characters. The last line of input will be blank."
}{
  "Example": "Sample Input \n0 0 4\n-1 Y\n-1 X\n1 Y\n1 X\n1 0 4\n-1 X\n1 Y\n1 X\n-1 Y\nSample Output\n1.00",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Remember Space Turtle, our fearless space adventurer? Last we encountered him, he was searching for the fabled Golden Shell in the Tortoise, his trusty spaceship.\nSpace Turtle has run out of fuel, but he thinks that he is very close to the Golden Shell. Unfortunately, due to a spatial anomaly (the sort you see on TV), both the Tortoise and the Golden Shell are trapped on a two-dimensional grid, travelling around and around in very strange orbits.\nThese orbits always travel from lattice (integer co-ordinate) points on the grid to adjacent lattice points, and it takes exactly one minute to travel one unit of distance\n  on the lattice. Both the Tortoise and the Golden Shell entered the anomaly at the same time, so you can really think of this as two things travelling around on a grid. You can imagine that as the Tortoise and the Golden Shell are travelling in their respective orbits, the distance between them varies quite a bit. As the lonely keeper of the fabled Golden Shell, you have the task of observing the Tortoise once each minute (exactly when both you and the Tortoise are on lattice points) and recording how far away the Tortoise is.\nIn particular, you want to determine the closest distance Space Turtle will ever be observed from the Golden Shell. (He might be closer when you're not looking, but that doesn't count.)",
  "Output": "Output the closest distance that you will ever observe between Space Turtle and the Golden Shell, to 2 decimal places. If you and Space Turtle collide on a lattice point at some point, report 0.00.",
  "Title": "CCC04 Stage 2 - Return of Space Turtle",
  "Input": "The first line consists of two integers sx, and sy, which give the coordinates of Space Turtle's starting point in the anomaly, and a third integer, sm.\nThen, the orbit is described as a sequence of sm moves, each on a separate line. Each move consists of an integer, d, -100 \u2264 d \u2264 100 and a letter c, separated by a space. The integer indicates the distance in light-years that the Tortoise moves, and the letter indicates the direction, either 'X' or 'Y', corresponding to the X and Y directions on the grid. There will be no more than 100 such lines.\nAfter this description, is an analogous description for the orbit of the Golden Shell: tx, and ty for the starting point, and tm on the first line, and then tm lines describing the orbit in the same manner as the first orbit. Both orbits are guaranteed to end at the starting location (so that they are cycles)."
}{
  "Example": "Sample Input \n4\n6B 19B\n7B 19A\n17B 19C\n17A 20B\nSample Output 1\nThe tower collapses after removing 17A\nSample Input 2\n2\n17C 19C\n17A 19A\nSample Output 2\nThe tower never collapses",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Jenga is a popular game involving a tower constructed of 1x1x3 blocks. Initially, this tower has 18 levels, each consisting of three blocks laid side to side. The blocks on alternating levels are oriented at right angles. Thus, each block touches all three of the blocks in the levels above and below it. Here is a picture of the actual game:\n\nPlay involves each player removing a block from somewhere in the tower, and putting it in a new position on top. The goal is to do this without knocking over the tower. Blocks are always removed from below the highest complete level, and the top level is always completed before a new level is started (at right angles, of course).\nWrite a program which reads sequential moves of a Jenga game and determines at what point the tower (or any part of it) falls or topples.\nNote that a structure will topple if its center of gravity, projected onto its base, lies outside the convex hull of its support points. If the center of gravity lies exactly on the edge of this hull, we will assume that the structure is stable.",
  "Output": "If the tower collapses after removing a block at location L, output \"The tower collapses after removing L\".\n  If the tower collapses after placing a block at location L, output \"The tower collapses after placing L\".\n  If all moves execute successfully (i.e., without causing the tower to fall), output \"The tower never collapses\".",
  "Title": "CCC04 Stage 2 - Jengaism",
  "Input": "The first line contains N, the number of moves. The next N lines describe one move per line, with two locations separated by a single space. The first is the location of the block to be removed, and the second is where it will be put back. A location is specified as a number, specifying the level, and then a letter A-C, specifying its position in the level (left to right or front to back). \nFor instance, the top level of the initial tower configuration consists of blocks at 18A, 18B, and 18C. Below is a diagram of the pieces, labelled with a front and right side perspective."
}{
  "Example": "Sample Input \nG1 G3 B2 R2 Y1 R3 R5 Y2 Y3 G5\n* * * * * * * * * *\nSample Output\n3",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Orko is a two-player card game. Each card has a colour (Red, Yellow, Green, or Black) and a value (1, 2, 3, 4, or 5). The deck contains twenty cards; one card having each distinct combination of colour and value.\nEach player is dealt ten of the twenty cards. The game is played in ten rounds, and the objective is to win as many rounds as possible. In each round, one player, the player with 'the lead', plays one of his cards. The other player must play a card of the same colour, if he has one. If not, he may play any of his cards. The player with the lead wins the round if the other player has no card of the same colour, of if his card has a higher value. Otherwise the other player wins the round.\nThe objective of the game is to win as many rounds as possible. The lead for the first round is chosen arbitrarily; the lead for each subsequent round is given to the winner of the previous round.\nYour job is to determine how many rounds each player will win, assuming that each player employs the strategy that maximizes his advantage.",
  "Output": "For each test case, output a single line giving an integer between 0 and 10, the number\nof rounds won by Player A. Assume that Player A has the lead for the first round.",
  "Title": "CCC04 Stage 2 - Orko",
  "Input": "The input contains several test cases. Each test case consists of one line of input, identifying the cards dealt to one of the players, \"Player A.\" Each card is identified by a letter (R,Y,G,B) denoting its colour followed by a digit denoting its value (1,2,3,4,5). The other player, \"Player B\" receives the remaining cards in the deck. A line containing\n(10 stars, separated by spaces) follows the last test case."
}{
  "Example": "Sample Input \n1 2 3 A1+A2+A3 A3+A4 A1+A4+A5 A8+A9 A9 A8\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n\nSample Output\n1 2 3 6 9 16 * * *\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A spreadsheet consists of a number of \"cells\" set in a rectangular grid.  Each is addressed\nwith one letter from A to J (giving the row) and one number from 1 to 9 (giving the column).\nThus the upper-left cell of the spreadsheet is A1, and the lower-right cell is J9.\nEvery cell has a value, and this can be specified in one of two ways:\nas an integer from 0 to 1000\nas a sum of the values of up to 10 other cells\nCell values may be interdependent (that is, A1's sum may depend on B6 which depends on C9), \nbut a cell whose value depends on itself, directly or indirectly, is undefined (e.g., A1 depending on G8 depending on A1). Also, a cell whose value depends on an undefined cell is itself undefined.\nYou are given the specification for all the cells in the spreadsheet. Compute and output the values of all of the cells.",
  "Output": "Output 10 lines, with 9 numbers per line, giving the value of every cell in the spreadsheet; if the cell is undefined, print an asterisk (*) in place of its value. No cell's final value will exceed 1 000 000 000.",
  "Title": "CCC04S3 - Spreadsheet",
  "Input": "Input will consist of 10 lines, one per spreadsheet row.\nEach line contains 9 descriptions of a cell, which will be either an integer between 0 and 1000, or a sum of 1 to 10 distinct cell names separated by a \"+\" symbol (e.g. \"A1+B5+D3\")."
}{
  "Example": "Sample Input \n0 0 0\n1 1 12 L2 L2 U2 U2 L2 L2 U2 E\nSample Output\n1.41",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Space Turtle is a fearless space adventurer. His spaceship, the Tortoise, is a little\noutdated, but still gets him where he needs to go.\nThe Tortoise can do only two things - move forward an integer number of light-years,\nand turn in one of four directions (relative to the current orientation): right, left, up and\ndown. In fact, strangely enough, we can even think of the Tortoise as a ship which\ntravels along a 3-dimensional co-ordinate grid, measured in light-years.\nIn today's adventure, Space Turtle is searching for the fabled Golden Shell, which lies on\na deserted planet somewhere in uncharted space. Space Turtle plans to fly around\nrandomly looking for the planet, hoping that his turtle instincts will lead him to the\ntreasure.\nYou have the lonely job of being the keeper of the fabled Golden Shell. Being lonely,\nyour only hobby is to observe and record how close various treasure seekers come to\nfinding the deserted planet and its hidden treasure.\nGiven your observations of Space Turtle's movements, determine\nthe closest distance Space Turtle comes to reaching the Golden Shell.",
  "Output": "Output the closest distance that Space Turtle gets to the hidden planet, rounded to 2 decimal places.\nIf Space Turtle's coordinates coincide with the planet's\ncoordinates during his flight indicate that with a distance of 0.00. He safely lands on the\nplanet and finds the Golden Shell.",
  "Title": "CCC04S4 - Space Turtle",
  "Input": "The first line consists of three integers sx, sy, and sz, which give the coordinates of Space\nTurtle's starting point. Space Turtle is originally oriented in the positive x direction, with\nthe top of his spaceship pointing in the positive z direction, and with the positive y\ndirection to his left. Each of these integers are between -100 and 100.\nThe second line consists of three integers tx, ty, and tz, which give the coordinates of the deserted planet.\nEach of these integers are between -10000 and 10000.\nThe rest of the lines describe Space Turtle's flight plan in his search for the Golden Shell. Each line consists of an\ninteger, d, 0 \u2264 d \u2264 100, and a letter c, separated by a space. The integer indicates the\ndistance in light-years that the Tortoise moves forward, and the letter indicates the\ndirection the ship turns after having moved forward. `L', `R', `U', and `D' stand for left,\nright, up and down, respectively. There will be no more than 100 such lines.\nOn the last line of input, instead of one of the four direction letters, the letter `E' is given\ninstead, indicating the end of today's adventure."
}{
  "Example": "Sample Input \n5 10..3...................7.**.....9**...1....8..9....2 299880 0\nSample Output\n2734",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You are to write a program to play a video game in which Super Plumber (SP) navigates \nan obstacle course collecting prizes on the way to rescuing The Princess (TP).\nThe obstacle course is an m by n grid. SP starts at the bottom-left corner and makes his\nway to TP in the bottom-right corner. Some of the grid locations are occupied by\nobstacles through which SP cannot pass. Others are occupied by gold coins valued between $1.00 and $9.00.\nThe game is a traditional scroll game, which means that SP can move only to the right,\nup, or down. SP moves one grid location at a time, always to an adjacent location with no\nobstacle. He cannot occupy any location which he previously occupied - if he moves up,\nhe cannot move down until he moves right; if he moves down he cannot move up until he\nmoves right. SP collects the gold coins at locations he visits.\nYou are to find the maximum possible total value of coins that SP can collect while rescuing TP.",
  "Output": "Output one line for each test case giving the amount of money that SP can collect.\nThe sample input below contains two test cases.\nFor the first case, SP can collect $27.00 with the following sequence of moves: Up, Right, Down, Right, Right, Right, Right, Up,\nRight, Right, Down, Right, Right.\nFor the second case, SP can collect $34.00 with the following sequence:  Up, Right, Down.",
  "Title": "CCC04S5 - Super Plumber",
  "Input": "Input has several test cases. The first line of each test case contains m and n, both integers\nnot less than 2 or greater than 100. The grid is then given as m lines with n characters each.\nAn obstacle is denoted by an asterisk ('*'); a coin is denoted by a digit ('1' through\n'9'); an empty location is denoted by a period ('.').\nIt is always possible for SP to rescue TP.  A line containing 0 0 follows the last test case."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n251\n10\n60\nSample Output 1\nPlan A costs 51.25\nPlan B costs 18.95\nPlan B is cheapest.\nSample Input 2\n162\n61\n66\nSample Output 2\nPlan A costs 37.85\nPlan B costs 37.85\nPlan A and B are the same price.\nNote: If you wish, you may output the prices in cents instead of dollars. For example, for Sample 1, you may output that \"Plan A costs 5125 cents\" and \"Plan B costs 1895 cents\".",
  "Description": "Moe Bull has a cell phone and after a month of use is trying to decide which price plan is the best for his usage pattern. He has two options, each plan has different costs for daytime minutes, evening minutes and weekend minutes.\nWrite a program that will input the number of each type of minutes and output the cheapest plan for this usage pattern, using the format shown below. The input will be in the order of daytime minutes, evening minutes and weekend minutes. In the case that the two plans are the same price, output both plans.",
  "Title": "CCC05J1 - Cell Sell",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n10\n12\nSample Output 1\nThe number of RSA numbers between 10 and 12 is 1\nSample Input 2\n11\n15\nSample Output 2\nThe number of RSA numbers between 11 and 15 is 2",
  "Description": "When a credit card number is sent through the Internet it must be protected so that other people cannot see it. Many web browsers use a protection based on \"RSA Numbers.\"\nA number is an RSA number if it has exactly four divisors. In other words, there are exactly four numbers that divide into it evenly. For example, 10 is an RSA number because it has exactly four divisors (1, 2, 5, 10). 12 is not an RSA number because it has too many divisors (1, 2, 3, 4, 6, 12). 11 is not an RSA number either. There is only one RSA number in the range 10...12.\nWrite a program that inputs a range of numbers and then counts how many numbers from that range are RSA numbers. You may assume that the numbers in the range are less than 1000.",
  "Title": "CCC05J2 - RSA Numbers",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \nR\nQUEEN\nR\nFOURTH\nR\nSCHOOL\nSample Output 1\nTurn LEFT onto FOURTH street.\nTurn LEFT onto QUEEN street.\nTurn LEFT into your HOME.\nSample Input 2\nL\nMAIN\nR\nSCHOOL\nSample Output 2\nTurn LEFT onto MAIN street.\nTurn RIGHT into your HOME.",
  "Description": "Jane's family has just moved to a new city and today is her first day of school. She has a list of instructions for walking from her home to the school. Each instruction describes a turn she must make. For example, the list\nR\nQUEEN\nR\nFOURTH\nR\nSCHOOL\nmeans that she must turn right onto Queen Street, then turn right onto Fourth Street, then finally turn right into the school. Your task is to write a computer program which will create instructions for walking in the opposite direction: from her school to her home.\nThe input and output for your program will be formatted like the samples below. You may assume that Jane's list contains at least two but at most five instructions, and you may assume that each line contains at most 10 characters, all of them capital letters. The last instruction will always be a turn into the \"SCHOOL\".",
  "Title": "CCC05J3 - Returning Home",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Description": "In an old house there is a room that is shaped like a cross. You can think of a cross as being an outlining rectangle with four smaller rectangles cut out of the corners. The floor of the room is completely covered with square tiles. Bridget is walking around the room, stepping from one tile to the next, spiraling towards the centre. Bridget always walks clockwise and stays as close to the edge of the room as possible without stepping on any tile twice. It is possible that she may be trapped and unable to move to an adjacent tile before reaching all the tiles in the room.\nAssume that the upper left corner of the outlining rectangle is position (1, 1), that is column 1 and row 1. The walk always starts at column X and row 1, where X is the leftmost column of row 1 in the cross. The tile at position (X, 1) cannot be revisited during the walk, however the first step is counted when Bridget moves to an adjacent tile.\nWrite a program that calculates Bridget\u2019s final column and row position in the room after the walk. The program must accept input for the dimensions of the cross: i.e. the width and height of the outlining rectangle, the width and height of the \u201ccut out\u201d rectangles, and the number of steps the person will take. In the diagram, the inputs for the dimensions of the cross are:\n10 8 3 2\nIn other words, the outlining rectangle is 10 units wide and 8 units high. The \u201ccut out\u201d rectangles are 3 units wide and 2 units high.\nThe maximum width and height of the outlining rectangle will be 20 x 20. The minimum width of the cross will be 1. The vertical and horizontal parts of the cross are not necessarily the same width.\n10\n8\n3\n2\n15\n7\n7\n8\n7\n2\n2\n27\n5\n2\n8\n7\n2\n2\n40\n7\n4\n6\n6\n1\n2\n1\n3\n1",
  "Title": "CCC05J4 - Cross Spiral",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \nA\nANA\nANANA\nBANANAS\nBANANA\nX\nSample Output\nYES\nYES\nYES\nYES\nNO",
  "Description": "\tThe term \u201ccode monkey\u201d is sometimes used to refer to a programmer who doesn't know much about programming. This is unfair to monkeys, because contrary to popular belief, monkeys are quite smart. They have just been misunderstood. This may be because monkeys do not speak English, but only monkey language. Your job is to help humans and monkeys understand each other by writing a monkey language dictionary. For each word that is typed in, your program must determine whether it is a valid monkey language word.\nUnlike in English, spelling in monkey language is very simple. Every word in monkey language satisfies the following rules, and every word satisfying the following rules is a monkey language word.\n A monkey language word is a special type of word called an A-word, which may be optionally followed by the letter N and a monkey language word.\nAn A-word is either only the single letter A, or the letter B followed by a monkey language word followed by the letter S.\nHere are some examples:\nThe word \u201cA\u201d' is a monkey language word because it is an A-word.\nThe word \u201cANA\u201d is a monkey language word because it is the A-word \u201cA\u201d followed by the letter N and the monkey language word \u201cA\u201d.\nThe word \u201cANANA\u201d is a monkey language word because it is the A-word \u201cA\u201d followed by the letter N and the monkey language word \u201cANA\u201d.\nThe word \u201cBANANAS\u201d is a monkey language word because it is an A-word, since it is the letter B followed by the monkey language word \u201cANANA\u201d followed by the letter S.\nWrite a program which accepts words, one word on each line, and for each word prints YES if the word is a monkey language word, and NO if the word is not a monkey language word. The input word \u201cX\u201d indicates the program should terminate, and there is no output for word \u201cX\u201d (even though it is not a monkey word).",
  "Title": "CCC05J5 - Bananas",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \nA\nANA\nANANA\nBANANAS\nBANANA\nX\nSample Output\nYES\nYES\nYES\nYES\nNO",
  "Description": "\tThe term \u201ccode monkey\u201d is sometimes used to refer to a programmer who doesn't know much about programming. This is unfair to monkeys, because contrary to popular belief, monkeys are quite smart. They have just been misunderstood. This may be because monkeys do not speak English, but only monkey language. Your job is to help humans and monkeys understand each other by writing a monkey language dictionary. For each word that is typed in, your program must determine whether it is a valid monkey language word.\nUnlike in English, spelling in monkey language is very simple. Every word in monkey language satisfies the following rules, and every word satisfying the following rules is a monkey language word.\n A monkey language word is a special type of word called an A-word, which may be optionally followed by the letter N and a monkey language word.\nAn A-word is either only the single letter A, or the letter B followed by a monkey language word followed by the letter S.\nHere are some examples:\nThe word \u201cA\u201d' is a monkey language word because it is an A-word.\nThe word \u201cANA\u201d is a monkey language word because it is the A-word \u201cA\u201d followed by the letter N and the monkey language word \u201cA\u201d.\nThe word \u201cANANA\u201d is a monkey language word because it is the A-word \u201cA\u201d followed by the letter N and the monkey language word \u201cANA\u201d.\nThe word \u201cBANANAS\u201d is a monkey language word because it is an A-word, since it is the letter B followed by the monkey language word \u201cANANA\u201d followed by the letter S.\nWrite a program which accepts words, one word on each line, and for each word prints YES if the word is a monkey language word, and NO if the word is not a monkey language word. The input word \u201cX\u201d indicates the program should terminate, and there is no output for word \u201cX\u201d (even though it is not a monkey word).",
  "Title": "CCC05J5 - Bananas",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \nA\nANA\nANANA\nBANANAS\nBANANA\nX\nSample Output\nYES\nYES\nYES\nYES\nNO",
  "Description": "\tThe term \u201ccode monkey\u201d is sometimes used to refer to a programmer who doesn't know much about programming. This is unfair to monkeys, because contrary to popular belief, monkeys are quite smart. They have just been misunderstood. This may be because monkeys do not speak English, but only monkey language. Your job is to help humans and monkeys understand each other by writing a monkey language dictionary. For each word that is typed in, your program must determine whether it is a valid monkey language word.\nUnlike in English, spelling in monkey language is very simple. Every word in monkey language satisfies the following rules, and every word satisfying the following rules is a monkey language word.\n A monkey language word is a special type of word called an A-word, which may be optionally followed by the letter N and a monkey language word.\nAn A-word is either only the single letter A, or the letter B followed by a monkey language word followed by the letter S.\nHere are some examples:\nThe word \u201cA\u201d' is a monkey language word because it is an A-word.\nThe word \u201cANA\u201d is a monkey language word because it is the A-word \u201cA\u201d followed by the letter N and the monkey language word \u201cA\u201d.\nThe word \u201cANANA\u201d is a monkey language word because it is the A-word \u201cA\u201d followed by the letter N and the monkey language word \u201cANA\u201d.\nThe word \u201cBANANAS\u201d is a monkey language word because it is an A-word, since it is the letter B followed by the monkey language word \u201cANANA\u201d followed by the letter S.\nWrite a program which accepts words, one word on each line, and for each word prints YES if the word is a monkey language word, and NO if the word is not a monkey language word. The input word \u201cX\u201d indicates the program should terminate, and there is no output for word \u201cX\u201d (even though it is not a monkey word).",
  "Title": "CCC05J5 - Bananas",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n5\n88-SNOW-5555\n519-888-4567\nBUY-MORE-POP\n416-PIZZA-BOX\n5059381123\nSample Output\n887-669-5555\n519-888-4567\n289-667-3767\n416-749-9226\n505-938-1123",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You've been snowed in at your summer residence. And without the Internet! Unfortunately, this means you're going to have rely on using the phone to get what you need to survive: pizza, pop, and the latest video games.\nOften times, companies replace the digits in their phone numbers with characters to make their phone numbers more memorable. Because apparently, it's easier to remember 416-BUY-MORE than it is to remember 416-289-6673. Some companies even add extra digits or characters (like 604-PIZZABOX) but any digits after the 10th are irrelevant.\nSince it's getting tedious to do the conversion by hand, write a program to help change all the phone numbers in your phone book to the form xxx-xxx-xxxx, using the below image to assist you.\n\n",
  "Output": "For each test case, output the phone number in the form xxx-xxx-xxxx to the screen.",
  "Title": "CCC05S1 - Snow Calls",
  "Input": "Input consists of a series of test cases. The first line consists of an integer t, the number of test cases. Following this are t lines consisting of alpha-numeric characters separated by hyphens, representing valid phone numbers. All letters will be in uppercase. No line is longer than 40 characters."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n100 200\n10 40\n-5 15\n30 -30\n0 0\nSample Output 1\n10 40\n5 55\n35 25\nSample Input 2\n30 40\n30 40\n-100 -10\n0 0\nSample Output 2\n30 40\n0 30",
  "Description": "Most likely, you will notice that you have a mouse attached to your computer, which lets you move the cursor around the screen. Your job is to get between the mouse and the cursor.\nSuppose that the bottom left-hand corner of your screen is (0,0), and all points on the screen are given by integer co-ordinates (x, y) where 0 \u2264 x \u2264 c and 0 \u2264 y \u2264 r. Thus, the top-right corner of the screen is at position (c, r), bottom-right corner is (c, 0), and top-left corner is (0, r).\nWhen a mouse is moved, it sends a pair of integers (a, b), indicating that the cursor should be moved a units in the x-direction and b units in the y-direction. It is worth noting that this is relative motion (i.e., how far to move) rather than absolute motion (i.e., where to move). It is also worth noting that a and b may be positive, negative or zero.\nYou can assume the mouse starts at position (0,0). You job is to read input messages (i.e., relative motion positions sent by the mouse) and update the cursor to the new position on the screen. Your output (to the screen) will be the position of the mouse after each move.\nIf the mouse hits the screen boundary, it stops moving in that direction. For example, if the mouse is supposed to move (-100, -10) from its current position (30, 40), the final positions will be (0, 30): the mouse will hit the left-hand side boundary, but still manages to move down.\nInput is listed as pairs, the first pair being (c, r), followed by the relative motion pairs (x, y). The input is terminated when the mouse moves (0,0).",
  "Title": "CCC05S2 - Mouse Move",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n6 5\n  0 1 2 3 4 5\n  0 0 0 1 1 1\n  0 1 2 3 3 4\n  5 1 4 1 9 4\n  9 5 6 2 4 6\nSample Output\n0 1 5",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Johnny Cannook has been trapped in the matrix: no, not that matrix. This matrix is a grid of width N (1 \u2264 N \u2264 100) numbers (in the range 0 to 9) in each row, and M rows (1 \u2264 M \u2264 100). Johnny can pick any position on the first row to begin at. He must make it to row M of the matrix in order to escape.\nHowever, there is a restriction. Johnny can only choose a trinity of numbers (from the range 0 to 9), and he can only step on those positions which are one of these three chosen numbers. That is just the way it is.\nThe path may begin at any position in row 1, and can move left, right, up, or down (no diagonal movement allowed) to any number, so long as that number is in the set of the chosen three.",
  "Output": "The output is one line long, containing three integers: the trinity of numbers that Johnny should chose in order to escape the matrix. If there is no path from row 1 to row M (that is, Johnny is stuck in the matrix FOREVER), the output should be three -1. If there is a path, then the lexicographically first three numbers should be outputted. (Notice that 0, 0, 0 comes before 0, 0, 1, which comes before 0, 0, 2, ..., which comes before 9, 9, 8 which comes before 9, 9, 9). You should notice that the three chosen numbers need not be distinct.",
  "Title": "CCC05 Stage 2 - Number Matrix",
  "Input": "The first line of input contains the two integers N and M. On the next M lines, there are N numbers (each separated by a space)."
}{
  "Example": "Sample Input \n6\n  0 4 1 2 3 4\n  7 2 0 4\n  12 3 0 5 6\n  3 2 0 6\n  4 2 0 1\n  100 1 2\n  10 2 2 3\nSample Output 2\n164",
  "Explanation": "There is only one organisation available: Z0's subordinates are Z1 and Z3; Z1 and Z2 have no subordinates, and Z3's only subordinate is Z2. \nWhen Z0 decides to initiate a round of ordering (let us call this time \"0\"), it sends off an order request to Z1 and Z3.\nAt time 10, Z1 and Z3 receive the message. Z3 takes three seconds to read the message, and, at time 13, Z3 has read the message and it fires off a request to its subordinate, Z2. \nAt time 23, Z2 receives Z3's message, and has ot think for seven seconds. \nAt time 30, Z2 is done thinking. Z2 has no subordinates, so it sends its order list to its superior Z3. \nAt time 40, Z3 receives the order list, and has to think for three seconds. \nAt time 43, then, Z3 combines Z2's order list with its own and sends the combined order list to Z0, and it is received at time 53. \nAt time 60, after fifty seconds of thought, Z1 has finished reading Z0's initial message. Z1 promptly sends its order list to Z0, which receives the list at time 70. After receiving this message, Z0 is in possession of all of the purchase orders sent to Spamway, thus terminating the round of ordering.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You may remember the Spamway messaging service. Spamway uses a pyramid scheme of zombie computers to solicit and receive orders for their fine products. However, Spamway has a problem - all its zombies have gone on strike for better RAM. Hence, Spamway has recruited replacement scab zombies so that they can continue doing business during the strike. These scab zombies are very disorganized and hence are not very good at networking.\nYour job is to organize the scab zombies so that Spamway can solicit and receive product orders in the minimum amount of time. Specifically, you are to assign to each zombie a list of subordinates so that:\n Each zombie except the head zombie has exactly one superior.\n Every zombie eventually reports to the head zombie.\nTo initiate a round of ordering, the head zombie will simultaneously send a message to all of its subordinates requesting a list of purchase orders. A scab zombie, upon receiving such a message, will make a similar request of all of its subordinates. After receiving a reply from all of its subordinates, the scab zombie will combine the purchase lists contained therein with the list of purchase orders it received and send the combined purchase list to its superior. So that you can organize the zombies, you need to know a few things:\n A zombie can send any number of messages simultaneously.\n Every message takes 10 seconds to reach its destination (all data is highly compressed to achieve this spectacular efficiency).\n Spamway has one manager who is not on strike and who can act as the head zombie (the manager is the infamous computer \"localhost\").\n All zombies use cellular modems to communicate. However, because of poor coverage, not all zombies can talk to each other.\nSpamway is very frugal and will not use more than 100 zombies (including the manager acting as head zombie).\n So that the scab zombies cannot be identified and harmed (with a terrible virus) by the striking computers, all scab zombies are given a secret code name: Z0, Z1, Z2, Z3, ... and so on. Z0 is the head zombie.\n  Scab zombies, due to their lack of training, take a certain amount of time to read a message once it has been received. Scab zombies can read many messages simultaneously, but they cannot act on the message before this reading is done. This lag time (called zombie zzz time) varies for each zombie, but is a non-negative integer number of seconds less than 1000. You can assume that zombie Z0 (the head zombie) has no lag time.",
  "Output": "Output should consist of a single integer value indicating the total amount of time that is needed to send and receive the data for a single round of ordering. While there may be several possible zombie organizations, you are to find and report the time for the optimal one.",
  "Title": "CCC05 Stage 2 - The Great Spamway Strike",
  "Input": "Input begins with an integer value n indicating the number of scab zombies that have been hired (not counting the manager acting as head zombie), 1 \u2264 n \u2264 99. This integer is followed by n + 1 lines, each of which identifies the zombie zzz time for one particular zombie, followed by the number of zombies that can be reliably contacted and then a list of those zombies. The first line describes the head zombie, and the remaining n lines describe zombies Z1 through Zn, in that order."
}{
  "Example": "Sample Input \n3\n  5 3 5 6 3 8\n  5 6 4 5 4 12\n  21 15 17 16 32 28 22 26 30 34 29 31 20 24 18 33 35 25 27 23 19 21\nSample Output\nShortest primed subsequence is length 2: 5 6\n  Shortest primed subsequence is length 3: 4 5 4\n  This sequence is anti-primed.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Given a sequence of positive integers of length n, we define a primed subsequence as a consecutive subsequence of length at least two that sums to a prime number greater than or equal to two.\nFor example, given the sequence:\n3 5 6 3 8\nThere are two primed subsequences of length 2 (5 + 6 = 11 and 3 + 8 = 11), one primed subsequence of length 3 (6 + 3 + 8 = 17), and one primed subsequence of length 4 (3 + 5 + 6 + 3 = 17).",
  "Output": "For each sequence, print the \"Shortest primed subsequence is length x:\", where x is the length of the shortest primed subsequence, followed by the shortest primed subsequence, separated by spaces. If there are multiple such sequences, print the one that occurs first. If there are no such sequences, print \"This sequence is anti-primed.\".",
  "Title": "CCC05 Stage 2 - Primed Sequences",
  "Input": "Input consists of a series of test cases. The first line consists of an integer t (1 \u2264 t \u2264 20), the number of test cases.\nEach test case consists of one line. The line begins with the integer n, 0 < n \u2264 10000, followed by n non-negative numbers less than 10000 comprising the sequence. You should note that 80% of the test cases will have at most 1000 numbers in the sequence."
}{
  "Example": "Sample Input \n6\n  2 6\n  3 4\n  1 3\n  1 2\n  3 6\n  4 5\nSample Output\n 24",
  "Explanation": "Below is a pictoral representation of the input.\n1     2     3     4     5     6\n.     -------------------------\n            -------\t\t\n-------------\n-------\n            -------------------\n                  -------     .\nNotice that on the first row, we must traverse 5 units to the right and then drop down one level.\n  On the second row, we must traverse 3 units to the left and drop down one level.\n  On the third row, we must traverse 2 units to the left and drop down one level.\n  On the fourth row, we move 1 unit to the right and then drop down one level.\n  On the fifth row, we move 4 units to the right and drop down one level.\n  On the sixth (and final) row, we move 2 units left, then 2 units right.\nIn total, we have moved 6 + 4 + 3 + 2 + 5 + 4 = 24 units.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You are to find the length of the shortest path from the top to the bottom of a grid covering specified points along the way.\nMore precisely, you are given an n by n grid, rows 1..n and columns 1..n (1 \u2264 n \u2264 20000).\nOn each row i, two points L(i) and R(i) are given where 1 \u2264 L(i) \u2264 R(i) \u2264 n. You are to find the shortest distance from position (1, 1), to (n, n) that visits all of the given segments in order. In particular, for each row i, all the points\n(i, L(i)), (i, L(i) + 1), (i, L(i) + 2), ..., (i, R(i))\nmust be visited. Notice that one step is taken when dropping down between consecutive rows. Note that you can only move left, right and down (you cannot move up a level). On finishing the segment on row n, you are to go to position (n, n), if not already there. The total distance covered is then reported.",
  "Output": "The output is one integer, which is the length of the (shortest) path from (1, 1) to (n, n) which covers all intervals L(i), R(i).",
  "Title": "CCC05 Stage 2 - Segments",
  "Input": "The first line of input consists of an integer n, the number of rows/columns on the grid. On each of the next n lines, there are two integers L(i) followed by R(i) (where 1 \u2264 L(i) \u2264 R(i) \u2264 n)."
}{
  "Example": "Sample Input \n200\n  100\n  3\n  50 50 80 20\n  70 60 180 10\n  10 90 100 40\n  3\n  60 20\n  150 90\n  150 30\nSample Output\n1\n  0\n  2",
  "Explanation": "The screen has width 200 and height 100. There are three windows on the screen, and initially, we have the following configuration:\n\nAfter the mouse clicks at (60, 20), we have:\n\nSince there is no window at position (150, 90), 0 is outputted.\n  Once we click at position (150, 30), that moves window 2 into focus, to get the following picture.\n",
  "Memory Limit": "256M",
  "Time Limit": "5.00s",
  "Description": "You probably remember from Stage 1 that computers have a mouse and sometimes, if you really have to, you have a bunch of windows that you can click on.\nIn particular, you will have a screen which has R (1 \u2264 R \u2264 10000) rows and C (1 \u2264 C \u2264 10000) columns. You have n (1 \u2264 n \u2264 50000) rectangular windows, defined by the \"top-left\" coordinates (xl, yt) and \"bottom-right\" coordinates (xr, yb). Note that you can assume that 1 \u2264 xl < xr \u2264 C and 1 \u2264 yb < yt \u2264 R (thus, you don't have empty windows).\nIt is worth noting that a window includes all points on its borders: that is, the window defined by (xl, yt) and (xr, yb) includes exactly the points (x, y) such that xl \u2264 x \u2264 xr and yb \u2264 y \u2264 yt. \nIf two windows overlap, the one which is on top of the other window will be listed later in the sequence (not necessarily immediately after, however). Here comes the mouse part.\nYou also have a mouse that can click on windows. Initially, the mouse is at position (1, 1) (the bottom-left corner of the screen). The mouse will then to be told to move to a particular position (say (x, y), where 1 \u2264 x \u2264 C and 1 \u2264 y \u2264 R) and click. When the mouse clicks, the window which is visible at that position moves to the top (that is, the entire window becomes visible, possibly hiding some other windows). There will be m (1 \u2264 m \u2264 10000) such mouse clicks.\nYour job is to indicate which of the n windows is \"in focus\" (i.e., most recently clicked on) after each mouse move.",
  "Output": "The output is m lines long, each line containing an integer vi such that 0 \u2264 vi \u2264 n. If line i contains the integer vi (vi > 0), that indicates that after the ith mouse move, the window vi was just clicked on (and has moved to the top). If, instead, vi = 0, then there was no window at that position.",
  "Title": "CCC05 Stage 2 - Windows",
  "Input": "The first line of input consists of an integer C, the number of columns. The second line of input consists of an integer R, the number of rows. The third line of input consists of the number n, the number of windows. On each of the next n lines, there are four integers xl followed by yt followed by xr followed by yb, indicating the \"top-left\" and \"bottom-right\" coordinates of this window. (These windows are numbered from 1 to n). On the next line is the integer m. On each of the next m lines will be two integers, x followed by y, indicating the new position of the mouse."
}{
  "Example": "Sample Input \n3\n2 2\n1 0\n0 3\n2 2\n1 1\n1 -1\n2 2\n1 0\n0 1\nSample Output 2\n3\n-3\n6\n0\n6\n0",
  "Memory Limit": "16M",
  "Actual Tensor Product": "1 0 1 0 0 0 0 0\n0 1 0 1 0 0 0 0\n1 0 -1 0 0 0 0 0\n0 1 0 -1 0 0 0 0\n0 0 0 0 3 0 3 0\n0 0 0 0 0 3 0 3\n0 0 0 0 3 0 -3 0\n0 0 0 0 0 3 0 -3",
  "Time Limit": "2.00s",
  "Description": "Quantum computing is currently a hot topic in research. If they can be built, quantum computers will have the ability to perform certain computing tasks much faster than any computer in existence today. Fortunately, you won't need a quantum computer to do this question.\nA fundamental concept in quantum computing is the idea of as a quantum operation. A quantum operation can be essentially thought of as a matrix. Also, if you perform two quantum operations in parallel on separate quantum data, this can be thought of a larger quantum operation. Thinking of these operations in terms of matrices again, the resulting matrix from performing two matrices in parallel is called the tensor product of the two matrices (using the symbol \u2297). This is different from the normal product of matrices that you may have learned about.\nIn a tensor product, you are given two matrices (which are essentially two-dimensional arrays). We will call them A and B, and we will represent the individual elements of these two matrices this way:\n\nNotice that the size of matrix A is m\u00d7n (m rows and n columns), and the size of B is p\u00d7q.\nThe tensor product of these two matrices will be an mp\u00d7nq matrix (with mp rows and nq columns) that looks like:\n\nwhere aij[B] simply indicates that each element in B is being multiplied by aij.\nFinally notice that the tensor product is not commutative, which means that changing the order of matrices may change the answer (A \u2297 B \u2260 B \u2297 A).\nFor more than two matrices, we will define A \u2297 B \u2297 C = (A \u2297 B) \u2297 C , although it does not technically matter, since the tensor product is associative.\nYour task is to compute and output the tensor product of two or more given matrices.",
  "Output": "The output will be 6 integers in the following order:\n the maximum element in the tensor product\nthe minimum element in the tensor product\nthe maximum row sum (i.e., sum of entries in each row)\nthe minimum row sum\nthe maximum column sum\nthe minimum column sum\nYou may assume that tensor product matrix will have no more than 1024 rows and no more than 1024 columns.",
  "Title": "CCC05S3 - Quantum Operations",
  "Input": "The first line of input contains the number of matrices, N, a positive integer. Then, there are N blocks of lines describing the matrices in order.\nIn each block, the first line will contain two positive integers, r and c, separated by a space, indicating the number of rows and columns, respectively. Then, the next r lines will denote the rows, in order. Each line will contain c integers, separated by spaces."
}{
  "Example": "Sample Input \n1\n8\nAlfred\nCindy\nAlfred\nDennis\nAlfred\nHome\nBetty\nHome\nSample Output\n40",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Spamway Inc. maintains a network of zombie computers to solicit and collect orders for its various fine products. Each zombie computer is responsible for zero or more subordinate zombies that it coordinates in these activities.\nSpamway uses a simple communication strategy among its zombies for transmitting solicitations and receiving orders. Each solicitation originates at Spamway's head zombie, which then communicates it to each of its subordinates in turn, waiting to collect orders from one subordinate before proceeding to the next. Each subordinate employs the same strategy - it sends to and receives from each of its subordinates in turn.\nFor example, suppose that Home has two subordinate zombies named Alfred and Betty; Alfred's subordinates are named Cindy and Dennis; Betty has no subordinates. This organization is pictured below.\n            Cindy\n           /\n     Alfred\n    /      \\\nHome        Dennis\n    \\\n     Betty\n\nHome first sends to Alfred; Alfred then sends to Cindy; Cindy responds to Alfred; Alfred sends to Dennis; Dennis responds to Alfred; Alfred responds to Home; Home sends to Betty; Betty responds to Home.\nEach message takes 10 seconds to be delivered. So the example given above would be completed in 80 seconds. You have been retained by Spamway, who will pay you handsomely (in Spam Bucks which may be redeemed for any of their valuable products) to help them reduce the time necessary to solicit and collect orders. In particular, Spamway is considering a new strategy in which each zombie sends out messages to each of its subordinates and waits for their responses only after all messages have been sent.\nSpamway's network administrator has captured a chronological list of the name of the recipient of each message involved in a particular solicitation. For the example above, using the slow strategy, this list would be: Alfred, Cindy, Alfred, Dennis, Alfred, Home, Betty, Home. (Note that 8 messages at 10 seconds per message is 80 seconds.)\nUsing the new and improved strategy, Home sends to Alfred and Betty simultaneously, Alfred sends to Cindy and Dennis at the same time as Betty is responding, Cindy and Dennis respond simultaneously to Alfred and finally Alfred responds to Home. Using the new strategy, Spamway needs only 40 seconds to accomplish the communication that takes 80 seconds using the old strategy. Thus, Spamway can send twice as many solicitations and make twice as much money.",
  "Output": "For each list you are to print out a single integer indicating the amount of time in seconds that Spamway saves.",
  "Title": "CCC05S4 - Pyramid Messaging Scheme",
  "Input": "As input, you are given lists of names describing the order that messages are received using the old Spamway strategy. The input contains the integer L, followed by L message lists. Each list begins with an integer, n, identifying the number of message recipients in the list, followed by n lines, each containing the name of a message recipient."
}{
  "Example": "Sample Input \n5\n100\n200\n150\n170\n50\nSample Output\n2.20",
  "Explanation": "The pinball screen would display (in turn):\n1 of 1\n1 of 2\n2 of 3\n2 of 4\n5 of 5\nThe average rank is (1+1+2+2+5)/5 = 2.20.",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "Pinball is an arcade game in which an individual player controls a silver ball by means of flippers, with the objective of accumulating as many points as possible. At the end of each game, the player's score and rank are displayed. The score, an integer between 0 and 1 000 000 000, is that achieved by the player in the game just ended. The rank is displayed as \"r of n\". n is the total number of games ever played on the machine, and r is the position of the score for the just-ended game within this set. \n More precisely, r is one greater than the number of games whose score exceeds that of the game just ended.",
  "Output": "You are to output the average of the ranks (rounded to two digits after the decimal) that would be displayed on the board.\n  At least one test case will have t \u2264 100. All test cases will have t \u2264 100 000.",
  "Title": "CCC05S5 - Pinball Ranking",
  "Input": "You are to implement the pinball machine's ranking algorithm. The first line of input contains a positive integer, t, the total number of games played in the lifetime of the machine. t lines follow, given the scores of these games, in chronological order."
}{
  "Example": "Sample Input \n2\n  1\n  3\n  4\nSample Output\nYour total Calorie count is 649. ",
  "Explanation": "The customer chose Burger #2, Side #1, Drink #3 and Dessert #4.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "At Chip\u2019s Fast Food emporium there is a very simple menu. Each food item is selected by entering a digit choice. \nWrite a program that will compute the total Calories of a meal.",
  "Output": "The program prints out the total Calories of the selected meal, and stops executing after this output.",
  "Title": "CCC06J1 - Canadian Calorie Counting",
  "Input": "The program should input a number for each type of item then calculate and display the Calorie total. The first line will be the customer's choice of burger, the second will be the choice of side, then drink, then dessert. You may assume that each input will be a number from 1 to 4. That is, each customer has to pick exactly one number from each of the four options out of each of the four categories."
}{
  "Example": "Sample Input \n6\n  8\nSample Output 1\nThere are 5 ways to get the sum 10.\nSample Input 2\n12\n4\nSample Output 2\nThere are 4 ways to get the sum 10.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Diana is playing a game with two dice. One die has m sides labelled 1, 2, 3, ..., m.\nThe other die has n sides labelled 1, 2, 3, ..., n.\nWrite a program to determine how many ways can she roll the dice to get the sum 10.\nFor example, when the first die has 6 sides and the second die has 8 sides, there are 5 ways to get the sum 10:",
  "Output": "The program prints out the number of ways 10 may be rolled on these two dice. Note that in the output, the word \u201cway\u201d should be used if there is only one way to achieve the sum of 10; otherwise, the word \u201cways\u201d should be used in the output. That is, if there is only one way to get the sum 10, the output should be:\nThere is 1 way to get the sum 10.",
  "Title": "CCC06J2 - Roll the Dice",
  "Input": "The input is given as two integers. First, the user will enter in the number m (1 \u2264 m \u2264 1000).\nSecond, the user will enter the number n (1 \u2264 n \u2264 1000)."
}{
  "Example": "Sample Input \na\n  dada\n  bob\n  abba\n  cell\n  www\n  halt\nSample Output\n1\n  4\n  7\n  12\n  13\n  7",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Joe Coder has just received a cell phone for his birthday. At first he was not so excited about it, since he does not like to talk that much, nor listen for that matter, and he hates being interrupted by phone calls while coding or playing his favourite computer game. But, Joe learned that he can talk to his friends and also send e-mails. That made the phone cool.\nIn order to fit the 26 letters of the alphabet onto the keys of a cell phone, several letters are assigned to each key, as shown on the diagram. To write a text message, we have to choose a letter from a set assigned to a key. The first letter on a key is chosen by pressing the key once, the second letter by pressing the key twice, third letter by pressing the key three times, and so on. For example, to write \u201ca\u201d we press the key \u20182\u2019 once and we are done; to write \u201cdada\u201d we press 3232\u2014four key presses; and to write \u201cbob\u201d we press 2266622.\nAn obvious issue is how to write two consecutive letters on the same key, for example in \u2018abba\u2019 or \u2018cell\u2019. The problem is solved by introducing a time-out feature: a letter currently displayed is chosen when another key is pressed, but also after a pause, i.e., a time out. Hence for example, to write \u2018abba\u2019 we press 2-pause-22-pause-22-pause-2; to write \u2018cell\u2019 we press 22233555-pause-555; or to write \u2018www\u2019 we press \u20189-pause-9-pause-9\u2019.\nThis kind of typing takes some time, and Joe is working on a program to calculate how much time is needed to type certain words. His assumption is that he spends one second per press, and whenever he makes a pause he loses an additional two seconds. You are to help him to calculate the minimal time needed to type a message, under the above assumptions.",
  "Output": "For each input word (excluding the word halt), print (on the screen) the minimal number of seconds needed to type in the word, with one number of output per line.",
  "Title": "CCC06J3 - Cell-Phone Messaging",
  "Input": "Each line of input contains a word consisting only of lowercase letters. Words have at most 20 characters. Input will be given from the keyboard, and the program should stop reading input when the word halt has been entered."
}{
  "Example": "Sample Input \n6\n  2\n  5\n  4\n  0\n  0\nSample Output 1\n3 5 6 2 1 4 7\nExplanation for Sample Output 1\nThe input data tells us that task 6 must be performed before task 2, and task 5 before task 4. The only tasks with no prerequisites are 3 and 6, so we choose 3 because it has the lower number. Then 5 and 6 are possible; 5 is chosen, then 6. Next must come 2, followed by 1. Then both 4 and 7 are possible; the lower one is chosen first.\nSample Input 2\n7\n  2\n  4\n  5\n  0\n  0\nSample Output 2\nCannot complete these tasks. Going to bed.\nExplanation for Sample Output 2\nNotice that task 2 must be done before task 1, which must be done before task 7, which must be done before task 2. This forms a contradiction, and we cannot perform the tasks in the order prescribed.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " There is always a list of things to be done!\nHere is a list for you left just this morning by your parental figure.\n Do your Math homework.\nCall your grandma.\nCall me at work.\nCall your friend.\nFeed the dog.\nLet the dog out.\nWatch television.\n(It is nice that your parental figure makes sure you watch television, and not just use the internet all day long.)\nAs well, your parental figure has given you constraints on these tasks:\n Do your Math homework BEFORE you watch Television.\nDo your Math homework BEFORE you call your friend.\nCall your grandma BEFORE you do your Math homework.\nCall me at work BEFORE you call your friend.\nFeed the dog AFTER you call me at work.\nYour \u201cto do\u201d list (above) can now be abbreviated to:\n1,7\n  1,4\n  2,1\n  3,4\n  3,5\nwhere x, y indicates that the task numbered x should be done before the task numbered y.\nUnfortunately, during the day additional instructions are emailed to you by your parental figure. Write a program to use your original \u201cto do\u201d list and the additional instructions to output a list of your jobs in the order you must do them, or alternately, if you cannot complete them, you should output that there is no way to complete these tasks, and you are just going to go to bed.",
  "Output": "You should output a list of tasks in the order that they should be performed, or an error message saying that the tasks cannot be completed. If there are multiple orders in which the tasks may be completed, the following tie-breaking rule must be used:\nIf there is a set of tasks which may be performed at the same time during the process, the smallest numbered task should be performed first.",
  "Title": "CCC06J4 - Tough Being a Teen",
  "Input": "You will be given pairs of numbers, one number per line, to represent the additional instructions to be included with your original \u201cto do\u201d list given above. The data terminates with the input pair 0 and 0. You can assume that there will be at most 10 additional constraints."
}{
  "Example": "Sample Input \na 1 5 6\nSample Output 1\n4 1\nSample Input 2\nb 0\nSample Output 2\n8 8\nSample Input 3\nc 3 1 7 2 2 2 1\nSample Output 3\n22 13",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Othello (also known as Reversi or Black & White Chess) is a game played on an 8x8 board, similar to a checker board. For the purposes of describing this question, the spaces on the board are referred to by their row and column position, with the top row referred to as row 1 and the left hand column referred to as column 1. The game involves placing circular discs, one at a time, on the board. The discs are coloured black on one side and white on the other. One player places his/her discs with the white side up and the other player places his/her discs with the black side up.\nThe game starts with some discs already placed on the board.\nA move is valid if the following two conditions are satisfied:\n The piece placed on the board is adjacent to a piece on the board (i.e, beside a piece either horizontally, vertically or diagonally).\n At least one of your opponents\u2019 discs must be \u201cflipped.\u201d If you are playing black pieces, you flip your opponents\u2019 (white) pieces (to black) so long as your opponents\u2019 pieces are on a line (either horizontally, vertically or diagonally) between the latest piece placed on the board and another black piece, with no other black pieces or empty squares in between the most recently placed black piece and the given white piece. The same rule applies if the player is placing white pieces.\nHere are a couple of sample valid moves, starting from various configurations of the board:\nIn the CCC version of Othello, the board may start with one of 3 configurations. Play will always start with the black player taking the first turn, and then alternating white to black for the rest of the turns. You must write a program to simulate taking turns in an Othello game, and at the end, report how many pieces of each colour are on the board.",
  "Output": "The program will output the number of black discs showing followed by the number of white discs showing on the board after the moves have been made. You are not responsible for displaying a picture of the board during the game. However, during your own testing, this may be useful.",
  "Title": "CCC06J5 - CCC Othello",
  "Input": "The user will enter three components of input (via the keyboard).\nFirst the user will enter a letter representing the configuration of the initial board (either a, b or c).\nHere are the initial configurations for the board.\nThe second component of input will be an integer  n, where \t 0\t\u2264 n \u2264 30 which indicates the number of moves to be made in the simulation. The third component of input is n pairs of integers R, C where 1 \u2264 R \u2264 8 and 1 \u2264 C \u2264 8, and R represents the row and C represents the column of the next move.\nRemember that the first move will be made by the black player, the next move will be made by the white player, then the black player, then the white player, and so on. You may also assume that all moves (R, C) will be valid moves on empty spaces on the board."
}{
  "Example": "Sample Input \nAABbCcddEe\n  AaBBccddee\n  5\n  ABCdE\n  aBcdE\n  ABcdE\n  ABCde\n  ABcDe\nSample Output\nPossible baby.\n  Not their baby!\n  Possible baby.\n  Possible baby.\n  Not their baby!",
  "Explanation": "Baby 2 could not be their child. The baby has attribute a, which is recessive; therefore the baby must have alleles aa. The first parent has AA, and could not have given her baby an a. Baby 5 could not be their child. The baby has attribute D, but both parents have alleles dd and could not have given their baby a D. All other babies could possibly be their children.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Alice and Bob are fruit flies. They are now the proud parents of a new baby girl fly. Unfortunately, due to a slight mix-up, the nurses in the maternity ward at the hospital aren\u2019t sure which baby fly is their daughter. Luckily they\u2019ve hired you to help them out. Using full genetic profiles of the parents, can you figure out which baby fly is theirs?\nRecall from biology that attributes (like eye colour, hair colour, etc) are inherited, or passed, from generation to generation. A single gene controls each such attribute. Alternative versions of each gene, called alleles, account for the variation in the attributes. For example, the gene for eye colour exists in two versions, one for brown eyes and one for blue eyes. For each attribute, a fruit fly has two alleles, one inherited from each parent.\nIf two alleles differ, then one, the dominant allele, will appear in the fruit fly\u2019s appearance. The other, or recessive allele, does not affect the fruit fly\u2019s appearance. Conventionally, the dominant allele is represented by an uppercase letter, and the recessive allele by a lowercase letter. For example, consider the gene for eye colour, B. Each fruit fly has two alleles, each is either that of brown eyes (B, dominant) or blue eyes (b, recessive). If the fruit fly has BB or Bb, she will have brown eyes; if the fruit fly has bb, she will have blue eyes.\nWhen reproducing, each parent fruit fly passes exactly one allele for each gene to its child. We can draw a Punnett square to see all possible allele combinations for the child. For example, here is the Punnett square for possible offspring of Alice (Bb) and Bob (Bb):\nUnfortunately, the full genetic profiles of the babies were not available (as they take weeks to process). All we have are the attributes of the baby \u2013 whether or not they have brown eyes, hair colour, etc. Can you use this information, with the full genetic profile of the parents, to determine which babies could not possibly be theirs?",
  "Output": "For each baby test, output the line \u201cPossible baby.\u201d, if the baby could possibly be their offspring, or \u201cNot their baby!\u201d if impossible.",
  "Title": "CCC06S1 - Maternity",
  "Input": "Luckily for you, our fruit flies are simple and have exactly five genes, labelled A through E.\nThe input begins with two lines, describing the mother and father, respectively. Each line consists of five pairs of letters, one pair for each gene. Each pair describes the two alleles the parent has for a particular gene. These alleles are listed in order (from A through E).\nNext is a line with the number X, X \u2264 10, the number of babies to check. Following are X lines describing the attributes of the baby. Each line consists of five letters in order (from A through E). An uppercase letter denotes the baby shows the attribute of the dominant allele, and a lowercase letter denotes the baby shows the attribute of the recessive allele. For example, if the baby has brown eyes, the letter B will be written; if the baby has blue eyes the letter b will be written."
}{
  "Example": "Sample Input \n5\n  CasaLoma 231.0\n  OntarioParliament 123.0\n  SkyDome 75.0\n  RoyalYorkHotel 340.0\n  PearsonAirport 165.0\nSample Output",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Christy C. Coder is traveling to Waterloo for a programming competition. On the way, she stops in Toronto to do some sightseeing. The unfortunate thing about travelling is that everyone back home expects her to bring back pictures of everything. Christy hates taking pictures: it makes her look like such a tourist! Fortunately, Christy has a plan to make her picture-taking quite painless.\nAt 553 m tall, CN Tower is the world's tallest free-standing building. 351 m up the tower is the \"360\" rotating restaurant, which rotates a full 360 degrees every 72 minutes. From there, Christy can see the whole city, and take close-up pictures of all the landmarks using her fancy new 100x optical zoom camera. Since the restaurant itself rotates, she only needs to stand in one place to take pictures in all directions.\nThe waiters insist that she order something or leave, and Christy is not interested in any of the items on the menu. Therefore, she must act quickly before she gets kicked out. Given the locations of the landmarks of which Christy wants to take a picture, your task is to determine the minimum amount of time that she must spend in the restaurant in order for it to rotate enough to bring all the landmarks in view. Assume that Christy always points her camera exactly perpendicular to the window to minimize distortion due to the glass. Note that multiple landmarks may occupy the same (angular) position, and these landmarks would only require one photograph to capture them.\nSince the restaurant staff only realize she is a tourist once she starts taking pictures, we begin measuring the time required once she takes her first picture. Therefore, Christy can move to any position in the restaurant without hassle from the restaurant staff and begin taking pictures from there.",
  "Output": "Output a single integer, the minimum number of seconds that Christy must remain in the restaurant. If the time is not an integer number of seconds, round it up to the nearest second (i.e., take the ceiling of the number). ",
  "Title": "CCC06 Stage 2 - CN Tower",
  "Input": "The first line of input is an integer\u00a0n\u00a0(2 \u2264\u00a0n\u00a0\u2264 1000), the number of landmarks Christy wants to photograph. \nEach of the following\u00a0n\u00a0lines specify a landmark. Each landmark specification consists of the landmark name (a string of uppercase and lowercase letters of length at most 40 characters), a space, and the compass angle\u00a0d, in degrees, to the landmark from the CN Tower (0 = north, 90 = east, 180 = south, 270 = west). Note that\u00a0d\u00a0is a real number which satisfies 0 \u2264\u00a0d\u00a0< 360, with\u00a0d\u00a0specified to the hundredth of a degree (i.e., at most two decimal places)."
}{
  "Example": "Sample Input \n100 100 100\n  -100 -100 -100\n2\n0 0 0 2\n50 60 -50 5\nSample Output\n1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Years ago, Romy and Jules were separated by their parents and forbidden to see each other ever again. However, using a tin-can telephone, their love survived and they were able to maintain their relationship. But, as time passed, some things changed and some things remained the same, Romy's great (times 6) grand-child, Julia (from the planet Mars) is in love with Romian (from the planet Epsilon 186-Beta), but because of their parents' hatred is not able to speak with him.\nTo prevent Julia and Romian from seeing each other, their parents put them both on spaceships with no long-range communication facilities. Thus, Romian and Julia must use a laser to send each other messages using morse-code. In Romian and Julia's time, messages can be sent infinite distances through space using a laser, as long as the route between the sender and receiver is not blocked. Since this is the future, lasers can travel instantly across the universe. Therefore, you may assume that planets and spaceships remain stationary.\nFor this question, you are to determine whether Romian and Julia can communicate with each other (by laser) when given the 3-dimensional grid coordinates of their spaceships. The problem is that their communication laser is often blocked by intervening planets. Thus, they are truly star-crossed lovers.",
  "Output": "As output, you are to print  a single integer, the number of planets that block the laser.",
  "Title": "CCC06 Stage 2 - R & J",
  "Input": "For input you will be given, on two lines, the grid coordinates of Romian's and Julia's spaceships. Each coordinate will consist of three, whitespace separated, integer values. Then, following the locations of their spaceships, the input will consist of a line containing a single integer n (1 \u2264 n \u2264 2,000) indicating the number of planets in their current sector of space.\nThe coordinates of the n planets follow on the next n lines. Each planet is represented by 4 integer values, separated by whitespace. The first three are the coordinates of the planet's centre and the fourth is the planet's radius. It may be helpful to know that a planet with centre (a, b, c) and radius r can be specified by the equation (x - a)2 + (y - b)2 + (z - c)2 \u2264 r2.\nYou may assume 0 \u2264 r \u2264 5,000 and that for any coordinate (a, b, c), 0 \u2264 |a|, |b|, |c| \u2264 5,000.\nYou may also make the following assumptions:\nNeither Romian or Juliet are within 10-8 units of a planet (since they would crash into it), nor are they within a planet (since that is impossible).\nRomian and Juliet do not occupy the same position in space (otherwise, their spaceships have crashed into each other and they will be consumed by an intergalactic explosion of epic proportions).\nIf the laser hits a planet, it would also have hit a planet with a radius which was 10-8 units smaller. If the laser misses a planet, it would also have avoided a planet which was 10-8 larger."
}{
  "Example": "Sample Input \n5\n  CasaLoma 231.0\n  OntarioParliament 123.0\n  SkyDome 75.0\n  RoyalYorkHotel 340.0\n  PearsonAirport 165.0\n10\nSample Output\n3022",
  "Memory Limit": "16M",
  "Time Limit": "10.00s",
  "Description": "Christy C. Coder is traveling to Waterloo for a programming competition. On the way, she stops in Toronto to do some sightseeing. The unfortunate thing about travelling is that everyone back home expects her to bring back pictures of everything. Christy hates taking pictures: it makes her look like such a tourist! Fortunately, Christy has a plan to make her picture-taking quite painless.\nAt 553 m tall, CN Tower is the world's tallest free-standing building. 351 m up the tower is the \"360\" rotating restaurant, which rotates a full 360 degrees every 72 minutes. From there, Christy can see the whole city, and take close-up pictures of all the landmarks using her fancy new 100x optical zoom camera. Since the restaurant itself rotates, she only needs to stand in one place to take pictures in all directions.\nThe elevator normally takes 61 seconds to get from the ground up to the rotating restaurant. Unfortunately, when Christy arrives at the CN Tower, she learns that the elevator is out of service, so she has to take the stairs, which takes somewhat longer. Christy arrives at the top at 9:36 pm, by which time it is dark. She can only take pictures with a very powerful flash, which takes a long time to recharge between pictures. While the flash is charging, she cannot take any pictures. Thus, Christy needs a new program to calculate the minimum time that she must spend in the restaurant in order for it to rotate enough to bring all the landmarks in view, and taking into consideration the charging time of the flash. In addition to these difficulties, the restaurant closes at midnight. Thus, Christy may not have enough time to take pictures of all the landmarks.\nAs before, assume that Christy does not move around in the restaurant after choosing her initial position, but waits for it to rotate to the angle required to take each picture. As with the daytime problem, Christy can (very quickly) pick her initial position, since the restaurant is not that big. Christy always points her camera exactly perpendicular to the window to minimize distortion due to the glass. After taking the last picture, Christy must stay in the restaurant until her flash recharges. Since it is dark outside, if more than one landmark occupies an angular position, Christy can capture\u00a0only one one landmark per photo\u00a0(in order to keep the desired landmark in focus, blurring all others).",
  "Output": " Output a single integer, the minimum number of seconds that Christy must remain in the restaurant. If the time is not an integer number of seconds, round it up to the nearest second. If it is not possible for Christy to take all the pictures before closing, instead output not possible.",
  "Title": "CCC06 Stage 2 - CN Tower 2",
  "Input": " The first line of input consists of an integer\u00a0n\u00a0(1 \u2264\u00a0n\u00a0\u2264 1000), the number of landmarks Christy wants to photograph.\nEach of the following\u00a0n\u00a0lines specify a landmark. Each landmark specification consists of the landmark name (a string of uppercase and lowercase letters), a space, and the compass angle, in degrees (specified with a maximum of 2 decimal places), to the landmark from the CN Tower (0 = north, 90 = east, 180 = south, 270 = west). Finally, the last line contains the amount of time, in seconds, required for the flash to charge."
}{
  "Hint": "Use the properties of Euler paths.",
  "Example": "Sample Input \n2\n  4\n  1 10\n  2 8\n  8 10\n  4 606\n  6\n  3 8\n  3 5\n  1 3\n1 5\n1 8\n5 8\nSample Output\n1\n  1 4\n  1\n  1 3\n",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "Crazy Cuckoo Charlie is a Computer Science student trying to get into the Book of Waterloo Records. Unfortunately, he has no special skills. He only has a lot of time, and a  lot of dominoes. He's going to try to break the record for \"Waterloo's Longest Domino Chain\", which involves putting as many dominoes end-to-end as possible.\n\nDominoes have two halves. Each half has a number of dots on it. To break the Waterloo Record, Charlie must place all the dominoes end-to-end in a line. To make it more difficult, however, the Book of Waterloo Records editors have added an extra rule: the adjacent halves of each pair of neighbouring dominoes must share the same number of dots, as in the picture above.\nCharlie wants to use all his dominoes when making the chain. But due to this rule, Charlie won't be able to make a chain using all his dominoes (one trivial example is \"1 2\" and \"4 5\"). He's willing to go out and buy extra dominoes to complete his chain. Obviously he wants to buy as few dominoes as possible, to save money for more important things like pizza and pop.\nCan you help Charlie figure out the minimum number of dominoes required to complete his chain?",
  "Output": "For each test case, output on a line an integer X, the minimum number of dominoes Charlie needs to buy in order to be able to make a chain with all his dominoes.\nOn the next X lines should be a list of the dominoes Charlie needs, in the form \"A B\". Print the list of dominoes in ascending lexicographical order (from smallest to largest). If there are multiple sets of dominoes (all of the minimum size) that Charlie could buy, pick the lexicographically smallest one.\nTo determine which domino is lexicographically least we use the following check: For two given dominoes \"A B\" where A\u00a0\u2264\u00a0B, we pick the domino with the lower A. If both dominoes have the same A we pick the domino with the lower B.",
  "Title": "CCC06 Stage 2 - Domino",
  "Input": "Input consists of a series of test cases. Each test case describes one possible domino collection. The first line contains an integer N indicating the total number of test cases. Each test case begins a line with the integer K, 1\u00a0\u2264\u00a0K\u00a0\u2264\u00a010,000, the number of dominoes Charlie has. Each of the next K lines describes a domino in his collection, in the form \"A B\", 0\u00a0\u2264\u00a0A\u00a0\u2264\u00a0B\u00a0\u2264\u00a050,000, where A and B are positive integers indicating the number of dots on each half of the domino. Don't forget you can flip dominoes around!"
}{
  "Example": "Sample Input \n4\n  7\n  2 2 0\n  5 0\n  5 0\n  2 2 0\n  1 1 0\n  1 1 0\n  2 0\n  2 0\n  4 0\n  4 0\n2 0\nSample Output 1\n**..**.\n  ..*****\n  ..*****\n**..**.\nSample Input 2\n4\n  4\n  2 1 0\n  3 0\n  3 0\n  1 1 0\n  4 0\n  3 0\n  3 0\n1 0\nSample Output 2\n**.*\n  ***.\n  ***.\n*.*.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " Years ago, there was a really bad craft/hobby called\u00a0paint-by-numbers: you were given a line drawing, with numbers in each enclosed region, and the number corresponded to a particular colour. An example is shown below:\n\nThe problem you have to solve is much more linear, in a way.\nYou will be given an\u00a0n-by-m\u00a0grid (1 \u2264\u00a0n, m\u00a0\u2264 32) which you will \"colour\" in with either a dot ('.') or a star ('*').\nOf course, the grid will not be specified in the usual paint-by-numbers way, since this would be too easy.\nInstead, you will you have to infer which cells are blank and which contain a star. The only information you will be given are a collection of\u00a0n + m\u00a0sequences of numbers, one sequence for each row and column. The sequence will indicate the size of each continuous block of stars. There must be at least one dot between two consecutive blocks of stars.\nAn example is shown below (which is supposed to look fish-like):\n\nYou may notice that some paint-by-number patterns are not uniquely solvable. For this problem, you may assume that\u00a0any\u00a0solution which satisfies the specification is correct.",
  "Output": " Output consists of\u00a0n\u00a0lines, each line composed of\u00a0m characters, where each character is either a dot ('.') or a star ('*').",
  "Title": "CCC06 Stage 2 - Paint by Numbers",
  "Input": " Input consists of a total of n + m\u00a0+ 2 lines.\nThe first line of the test case consists of an integer\u00a0n\u00a0(1 \u2264\u00a0n\u00a0\u2264 32), the number of rows.\nThe second line consists of an integer\u00a0m\u00a0(1 \u2264\u00a0m\u00a0\u2264 32), the number of columns.\nOn the next\u00a0n\u00a0lines, there will be sequences which describe each of the\u00a0n\u00a0rows (from top to bottom). Each line will contain some positive integers, with a space between adjacent integers, and the sequence will end with the integer 0. \nOn the next\u00a0m\u00a0lines describe the\u00a0m\u00a0columns (from left to right), the same format as the rows are specified."
}{
  "Example": "Sample Input \n0 0 3 3\n  1\n  4 1 2 2 2 2 1 1 1\nSample Output\n1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  Romy and Jules have been talking with each other on their cell phones. Unfortunately, their parents dislike each other and have decided that they can no longer call each other. In fact, their parents have taken their cell phones away. So, Romy and Jules must find some other way to communicate.\nAfter searching the web for ideas, they have decided to build a \u201ctin can\u201d telephone.\nSimply, a tin can telephone is two empty soup cans attached to each other with a string. To use it, the string must be stretched tight and then one person speaks while the other person listens. It is important that nothing touches the string so that it can vibrate and transfer sound from one can to the other.\nTo successfully set up a tin can telephone, Romy and Jules are going to need a clear line of sight between their two bedroom windows. To determine if they can run the string between their rooms, they get out a map that uses simple integer coordinates. Now consider the following three situations:\n\nIn these figures, \u201cRomy\u201d is Romy\u2019s window (the grid coordinates 0,0) and \u201cJules\u201d is Jules\u2019 window (grid coordinates 3,3). In the first figure, there is a building between their windows, and it blocks the line of sight between them. In the second figure, the building doesn\u2019t block their view and they can successfully set up a tin can phone. In the third figure, a line drawn from Romy\u2019s coordinates to Jules\u2019 coordinates would touch the corner of the building. Since the string cannot touch anything, they cannot set up a tin can telephone and the view is considered as blocked.",
  "Output": "For the input data, output a single number identifying the number of buildings that touch or block the line of sight.",
  "Title": "CCC06S3 - Tin Can Telephone",
  "Input": "The input begins with a line containing four integer coordinates representing the locations of Romy\u2019s and Jules\u2019 windows. That is, the input xR, yR, xJ, yJ represents the coordinates (xR, yR) for Romy\u2019s window, and the coordinates (xJ, yJ) for Jules\u2019 window. You may assume that -1000 \u2264 xR, xJ, yR, yJ \u2264 1000.\nThe next line contains a single integer, n (0 \u2264 n \u2264 100), identifying the number of buildings that will follow on the next n  lines. Each building is on a separate line and begins with an integer specifying the number of corners that the building has. This integer is followed by the integer coordinates of the building\u2019s corners, in either clockwise or counter-clockwise order. No building has more than 32 corners.\nThe sample input and output, shown below, corresponds to the first \u201cblocked\u201d situation described previously."
}{
  "Example": "Sample Input \n2\n  1 2\n  2 1\n  6\n  1 2 3 4 5 6\n  2 1 5 6 3 4\n  3 6 1 5 4 2\n  4 5 6 1 2 3\n  5 4 2 3 6 1\n  6 3 4 2 1 5\n  7\n  1 2 3 4 5 6 7\n  2 1 1 1 1 1 1\n  3 1 1 1 1 1 1\n  4 1 1 1 1 1 1\n  5 1 1 1 1 1 1\n  6 1 1 1 1 1 1\n  7 1 1 1 1 1 1\n  3\n  1 2 3\n  3 1 2\n  3 1 2\n  0\nSample Output\nyes\n  yes\n  no\n  no",
  "Explanation": "The first two collections of elements are in fact groups (that is, all properties are satisfied). For the third candidate, it is not a group, since 3 \u00d7 (2 \u00d7 2) = 3 \u00d7  1 = 3 but (3 \u00d7 2) \u00d7 2 = 1 \u00d7 2 = 2. In the last candidate, there is no identity, since 1 is not the identity, since 2 \u00d7 1 = 3 (not 2), and 2 is not the identity, since 1 \u00d7 3 = 3 (not 1). ",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": " In mathematics, a group, G, is an object that consists of a set of elements and an operator (which we will call  \u00d7) so that if x and y are in G so is x \u00d7 y. Operations also have the following properties:\nAssociativity: For all x, y, and z in G, x \u00d7 (y \u00d7 z) = (x \u00d7 y) \u00d7 z.\nIdentity: the group contains an \u201cidentity element\u201d (we can use i) so that for each x in G, x \u00d7 i = x and i \u00d7 x = x.\n Inverse: for every element x there is an inverse element (we denote by x-1) so that x \u00d7 x-1 = i and x-1 \u00d7 x = i.\nGroups have a wide variety of applications including the modeling of quantum states of an atom and the moves in solving a Rubik\u2019s cube puzzle. Clearly the integers under addition from a group (0 is the identity, and the inverse of x is  -x, and you can prove associativity as an exercise), though that group is infinite and this problem will deal only with finite groups.\nOne simple example of a finite group is the integers modulo 10 under the operation addition.\nThat is, the group consists of the integers 0, 1, ..., 9 and the operation is to add two keeping only the least significant digit. Here the identity is 0. This particular group has the property that x \u00d7 y = y \u00d7 x, but this is not always the case. Consider the group that consists of the elements a, b, c, d, e and i. The \u201cmultiplication table\u201d below defines the operations. Note that each of the required properties is satisfied (associativity, identity and inverse) but, for example, c\u00a0\u00d7\u00a0d\u00a0=\u00a0a while d\u00a0\u00d7\u00a0c\u00a0=\u00a0b.\nYour task is to write a program which will read a sequence of multiplication tables and determine whether each structure defined is a group.",
  "Output": "If the object is a group, output yes (on its own line), otherwise output no (on its own line). You should not output anything for the test case where n = 0.",
  "Title": "CCC06S4 - Groups",
  "Input": "The input will consist of a number of test cases. Each test case begins with an integer n (0 \u2264 n \u2264 100). If the test case begins with n = 0, the program terminates. To simplify the input, we will use the integers 1..n to represent elements of the candidate group structure; the identity could be any of these (i.e., it is not necessarily the element 1). Following the number n in each test case are n lines of input, each containing integers in the range [1..n]. The  qth integer on the pth line of this sequence is the value p \u00d7 q."
}{
  "Example": "Sample Input \n4 5 2 3 2\n.****\n.****\n.****\n.****\n\nSample Output\n2",
  "Explanation": "Assume the sample input is the \u201ccurrent\u201d generation. A possible previous generation is\n**.**\n..*.*\n....*\n*****\n\nThe above generation can be derived from the following previous generation\n.****\n**.*.\n*****\n*..*.\n\nThis generation cannot be derived from any other generation. Furthermore, there is no shorter series of generations that has these properties.",
  "Memory Limit": "128M",
  "Time Limit": "10.00s",
  "Description": "  Conway\u2019s Game of Life is not really a game, but a cellular automaton - a set of rules describing interactions among adjacent cells on a grid. In our game, we have an n by m rectangular grid of cells identified by integer coordinates (x, y).\nThe game progresses through a series of steps; at each step a new generation is computed from the current generation. The game begins with the first generation. In any given generation, which we shall call the current generation, each cell is either live or dead. In the next generation, each cell\u2019s status may change, depending on the status of its immediate neighbours in the current generation. Two distinct cells (x1, y1) and (x2, y2) are immediate neighbours if they are horizontally, vertically,\n  or diagonally adjacent; that is, if |x1 - x2| \u2264 1 and |y1 - y2| \u2264 1. Each cell that is not on the border of the grid has eight immediate neighbours.\nThere are three integer parameters (a, b, c) which affect the game. The rules of the game are:\n If a live cell has fewer than a live neighbours in the current generation it dies of loneliness.\n  That is, it is dead in the next generation.\n If a live cell has more than b live neighbours in the current generation it dies of overcrowding.\n  That is, it is dead in the next generation.\n If a dead cell has more than c live neighbours in the current generation it is born.\n  That is, it is live in the next generation.\n Otherwise, a cell\u2019s status is unchanged from the current generation to the next.\nThis process continues indefinitely. Eventually, a generation may be repeated in which case life goes on forever. Or all the cells may die. Similarly, if we explore previous generations that may have led to the current one, we may find one that is necessarily a first generation; that is, it could not have been created from a previous generation by following the rules. Such a generation is known as a Garden of Eden.\nGiven the game parameters and the current generation, you are to determine whether or not the game might have started with a Garden of Eden. If so, output the number of steps necessary to reach the current generation from the Garden of Eden. If there are several possible answers, find the smallest. If there is none, output -1.",
  "Title": "CCC06S5 - Origin of Life",
  "Input": "There are m + 1 lines of input in total.\n\tThe first line of input contains the game parameters, which are five integers m, n, a, b, c each separated by one space. The constraints are 1 \u2264 m \u2264 4, 1 \u2264 n \u2264 5, 1 \u2264 a < b \u2264 8, 1 \u2264 c \u2264 8.\nThe next m lines each contain a string of n characters representing a row of the current generation. In the string, an asterisk (\u201c*\u201d) indicates live while a period (\u201c.\u201d) indicates dead."
}{
  "Example": "Sample Input \nCCC\n  :-) \n  SQL\n\n  TTYL\nSample Output\nCanadian Computing Competition\n  I'm happy\n  SQL\n  talk to you later\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  Text messaging using a cell phone is popular among teenagers. The messages can appear peculiar because short forms and symbols are used to abbreviate messages and hence reduce typing.\nFor example, \u201cLOL\u201d means \u201claughing out loud\u201d and \u201c:-)\u201d is called an emoticon which looks like a happy face (on its side) and it indicates chuckling. This is all quite a mystery to some adults.\nWrite a program that will continually input a short form and output the translation for an adult using the following translation table:",
  "Output": "The program will output text immediately after each line of input. If the input is one of the phrases in the translation table, the output will be the translation; if the input does not appear in the table, the output will be the original word. The translation of the last short form entered \u201cTTYL\u201d should be output.",
  "Title": "CCC07J2 - I Speak TXTMSG",
  "Input": "The user will enter text to be translated one line at a time. When the short form \u201cTTYL\u201d is entered, the program ends. Users may enter text that is found in the translation table, or they may enter other words. All entered text will be symbols or upper case letters. There will be no spaces and no quotation marks."
}{
  "Example": "Sample Input \n2\n  3\n  8\n  198000\nSample Output 1\nno deal\nSample Input 2\n8\n  10\n  9\n  8\n  7\n  6\n  5\n  4\n  3\n  400\nSample Output 2\ndeal",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Deal or No Deal\u2122 is a game show on NBC. You can click here to play it.\n\nIn the CCC version of the game, there are 10 possible dollar amounts: $100, $500, $1,000, $5,000, $10,000, $25,000, $50,000, $100,000, $500,000, $1,000,000 sealed in imaginary briefcases. These dollar amounts are numbered 1 \u2013 10 (i.e. 1 \u2192 $100, 2 \u2192 $500, 3 \u2192 $1,000, ..., 10 \u2192 $1,000,000). Before the game starts the contestant will have chosen one of the briefcases as his/hers to possibly keep. During the game, some of the ten possible dollar amounts have been eliminated from the game because the contestant has selected some of the other briefcases and revealed the amounts inside.\nAt some point, the contestant will stop opening briefcases, and a \u201cBanker\u201d will offer the contestant cash in exchange for what might be contained in his/her chosen briefcase. Then the contestant is asked: \u201cDeal or No Deal?\u201d.\nWrite a program that helps a player decide if he/she should choose \u201cdeal\u201d or \u201cno deal\u201d, by calculating the average of the remaining amounts (i.e., all unopened briefcases, including his/her \u201cown\u201d briefcase), and comparing that value to the \u201cBanker\u2019s\u201d offer. If the offer is higher than the average, then the player should \u201ddeal\u201d otherwise, the player should say \u201cno deal\u201d.",
  "Output": "The program will print out one of two statements: \u201cdeal\u201d or \u201cno deal\u201d.",
  "Title": "CCC07J3 - Deal or No Deal Calculator",
  "Input": "The user must input a number n (1 \u2264 n < 10) which indicates how many cases have been opened so far, followed by a list of integers between 1 and 10 representing the values in the game that have been eliminated, followed by the \u201cBanker\u2019s\u201d offer. For example: 3 2 5 10 300 indicates that briefcases containing $500, $10,000, and $1,000,000 have been eliminated and the Banker\u2019s offer is $300. You may assume that no duplicate case numbers are entered for the eliminated values, and you may assume that the \u201cBanker\u2019s\u201d offer is an integer greater than 10."
}{
  "Example": "Sample Input \nCS AT WATERLOO\n  COOL AS WET ART\nSample Output\nIs an anagram.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  An anagram is a word or a phrase formed by rearranging the letters of another phrase such as \u201cITEM\u201d and \u201cTIME\u201d. Anagrams may be several words long such as \u201cCS AT WATERLOO\u201d and \u201cCOOL AS WET ART\u201d. Note that two phrases may be anagrams of each other even if each phrase has a different number of words (as in the previous example). Write a program to determine if two phrases are anagrams of each other.",
  "Output": "The program will print out one of two statements: \u201dIs an anagram.\u201d or \u201dIs not an anagram.\u201d",
  "Title": "CCC07J4 - Anagram Checker",
  "Input": "The program should input two phrases, each entered on a separate line. You may assume that the input only contains upper case letters and spaces."
}{
  "Example": "Sample Input \n1\n      500\n      0\n      \nSample Output\n0\nSample Input\n970\n        1030\n        0\nSample Output\n1\nSample Input\n970\n        1040\n      0\nSample Output\n4\nSample Input\n970\n        1030\n      1\n      4960\n      \nSample Output\n2\n\u00a0",
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A truck driver is planning to drive along the Trans-Canada highway from Vancouver to St. John\u2019s, a distance of 7000 km, stopping each night at a motel. The driver has been provided with a list of locations of eligible motels, with the respective distance of each motel, measured in km, from the starting point in Vancouver. Some of the motel locations are:\n0, 990, 1010, 1970, 2030, 2940, 3060, 3930, 4060, 4970, 5030, 5990, 6010, 7000\nbut more motel locations may be added just before the trip begins.\nDetermine if it is possible to complete the journey if:\n the trucking company insists that the driver travels a minimum distance of A km per day,\n the law sets a maximum distance of B km per day, and\n each night, the driver must stay at an eligible motel (from the above list or the additional locations described below).\nThe driver is interested in different options when making the trip, and you are to write the program to calculate how many different options there are.\nFor example, if no new motel locations are added, A = 1 and B = 500, then it is impossible to make the trip, i.e., the number of options is 0. If A = 970 and B = 1030 then there is one way to make the trip, but if A = 970 and B = 1040 then there are four ways to make the trip. There are two ways to make the trip if A = 970, B = 1030, and we add one stop at 4960.",
  "Output": "Output the number of different ways the driver can choose the motels to make the trip, under the given constraints.",
  "Title": "CCC07J5 - Keep on Truckin'",
  "Input": "The first two lines of the input are the minimum distance A and the maximum distance B (1 \u2264 A \u2264 B \u2264 7000), both of which are integers. The third line of the input is an integer N (0 \u2264 N \u2264 20), followed by N lines, each giving the location m of an additional eligible motel (0 < m < 7000).\nYou should note that no two motels are located at the same distance from Vancouver."
}{
  "Example": "Sample Input \n5\n  1933 10 29\n  1989 2 28\n  1961 11 23\n  1999 12 31\n  1989 2 27\nSample Output\nYes\n  No\n  Yes\n  No\n  Yes",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  For the big election on February 27, 2007, the government has commissioned an electronic voting system, and you have been hired as a sub-subcontractor for this very grand programming project. Your task is to write the system that determines whether a given person is old enough to vote. The voting age is 18, so given someone\u2019s birthday, you must determine whether that person will be 18 years of age on the day of the election.",
  "Output": "For each date in the input, output a line with either \u201cYes\u201d if the voter is eligible to vote, or \u201cNo\u201d otherwise.",
  "Title": "CCC07S1 - Federal Voting Age",
  "Input": "The input will consist of a number n (1 \u2264 n \u2264 100) on a single line, indicating the number of birthdays to evaluate. Then, each of the following n lines, will be of the form y m d, where y is the year of a potential voter\u2019s birth (0 \u2264\u00a0y\u00a0\u2264 2007), m (1\u00a0\u2264\u00a0m\u00a0\u2264\u00a012) is the month of birth, and d (1 \u2264 d \u2264 31) is the day. It is assured that each birthday is a correct and valid date."
}{
  "Example": "Sample Input \n4\n  1 2\n  1 4\n  2 3\n  2 4\n  3 4\n  0 0\nSample Output\n3",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  The local waterpark has a great slide complex, with many paths crisscrossing down the hill. There is one start point and one end point, but at various points one can turn and take different paths. Walter and Wanda are wondering exactly how many different ways there are to go down the slide. Can you solve their problem?\nMore precisely, there are n marked points (including the start at 1 and the end at n) where the paths down the hill may split or merge. All paths move down the hill to higher numbered positions; some paths will actually cross over others without meeting but we don\u2019t have to worry about that. We won\u2019t worry about the collisions between sliders that can happen either. Our problem is simply to determine the number of different sequences of marked points we can follow down the hill.\nFor example, at one small waterpark, there are 4 points with direct slides from 1 to points 2 and 4; from 2 to 3 and 4; and from 3 to 4. There are 3 ways down the hill. You can check this by seeing that we can go (1,2,3,4), (1,2,4) or (1,4).\n(Here is a hint: think about starting at the bottom of the slide.)",
  "Output": "The output is an integer, which is the number of different paths from point 1 to point n. You can assume that the number of paths will be less than 230. It is possible that there is no path from point 1 to point n, in which case the number of paths is 0.",
  "Title": "CCC07S4 - Water Park",
  "Input": "Input begins with a single integer n (1 \u2264 n \u2264 9999), on a line by itself, indicating the number of marked points. The next lines contain point pairs of the of the form x y, where 1 \u2264 x < y \u2264 n. For example, 1234 8765 indicates a direct slide from point 1234 to point 8765. The last line of input will be indicated by point pair 0 0."
}{
  "Example": "Sample Input \n4\n  1 2\n  1 4\n  2 3\n  2 4\n  3 4\n  0 0\nSample Output\n3",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  The local waterpark has a great slide complex, with many paths crisscrossing down the hill. There is one start point and one end point, but at various points one can turn and take different paths. Walter and Wanda are wondering exactly how many different ways there are to go down the slide. Can you solve their problem?\nMore precisely, there are n marked points (including the start at 1 and the end at n) where the paths down the hill may split or merge. All paths move down the hill to higher numbered positions; some paths will actually cross over others without meeting but we don\u2019t have to worry about that. We won\u2019t worry about the collisions between sliders that can happen either. Our problem is simply to determine the number of different sequences of marked points we can follow down the hill.\nFor example, at one small waterpark, there are 4 points with direct slides from 1 to points 2 and 4; from 2 to 3 and 4; and from 3 to 4. There are 3 ways down the hill. You can check this by seeing that we can go (1,2,3,4), (1,2,4) or (1,4).\n(Here is a hint: think about starting at the bottom of the slide.)",
  "Output": "The output is an integer, which is the number of different paths from point 1 to point n. You can assume that the number of paths will be less than 230. It is possible that there is no path from point 1 to point n, in which case the number of paths is 0.",
  "Title": "CCC07S4 - Water Park",
  "Input": "Input begins with a single integer n (1 \u2264 n \u2264 9999), on a line by itself, indicating the number of marked points. The next lines contain point pairs of the of the form x y, where 1 \u2264 x < y \u2264 n. For example, 1234 8765 indicates a direct slide from point 1234 to point 8765. The last line of input will be indicated by point pair 0 0."
}{
  "Example": "Sample Input \n4\n  1 2\n  1 4\n  2 3\n  2 4\n  3 4\n  0 0\nSample Output\n3",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  The local waterpark has a great slide complex, with many paths crisscrossing down the hill. There is one start point and one end point, but at various points one can turn and take different paths. Walter and Wanda are wondering exactly how many different ways there are to go down the slide. Can you solve their problem?\nMore precisely, there are n marked points (including the start at 1 and the end at n) where the paths down the hill may split or merge. All paths move down the hill to higher numbered positions; some paths will actually cross over others without meeting but we don\u2019t have to worry about that. We won\u2019t worry about the collisions between sliders that can happen either. Our problem is simply to determine the number of different sequences of marked points we can follow down the hill.\nFor example, at one small waterpark, there are 4 points with direct slides from 1 to points 2 and 4; from 2 to 3 and 4; and from 3 to 4. There are 3 ways down the hill. You can check this by seeing that we can go (1,2,3,4), (1,2,4) or (1,4).\n(Here is a hint: think about starting at the bottom of the slide.)",
  "Output": "The output is an integer, which is the number of different paths from point 1 to point n. You can assume that the number of paths will be less than 230. It is possible that there is no path from point 1 to point n, in which case the number of paths is 0.",
  "Title": "CCC07S4 - Water Park",
  "Input": "Input begins with a single integer n (1 \u2264 n \u2264 9999), on a line by itself, indicating the number of marked points. The next lines contain point pairs of the of the form x y, where 1 \u2264 x < y \u2264 n. For example, 1234 8765 indicates a direct slide from point 1234 to point 8765. The last line of input will be indicated by point pair 0 0."
}{
  "Example": "Sample Input \n1\n  9 2 3\n  2\n  8\n  5\n  1\n  9\n  6\n  9\n  3\n  2\nSample Output\n39",
  "Memory Limit": "256M",
  "Time Limit": "5.00s",
  "Description": " At the Canadian Carnival Competition (CCC), a popular game is Bowling for Numbers. A large number of bowling pins are lined up in a row. Each bowling pin has a number printed on it, which is the score obtained from knocking over that pin. The player is given a number of bowling balls; each bowling ball is wide enough to knock over a few consecutive and adjacent pins.\nFor example, one possible sequence of pins is: 2 8 5 1 9 6 9 3 2\nIf Alice was given two balls, each able to knock over three adjacent pins, the maximum score Alice could achieve would be 39, the sum of two throws: 2 + 8 + 5 = 15, and 9 + 6 + 9 = 24.\nBob has a strategy where he picks the shot that gives him the most score, then repeatedly picks the shot that gives him the most score from the remaining pins. This strategy doesn\u2019t always yield the maximum score, but it is close. On the test data, such a strategy would get a score of 20%.",
  "Output": "For each test case, output the maximum achievable score by the player. This score is guaranteed to be less than one billion.",
  "Title": "CCC07S5 - Bowling for Numbers",
  "Input": "Input consists of a series of test cases. The first line of input is t, 1 \u2264 t \u2264 10, indicating the number of test cases in the file. The first line of each test case contains three integers n k w. First is the integer n, 1 \u2264 n \u2264 30000, indicating the number of bowling pins. The second integer, k, 1 \u2264 k \u2264 500, giving the number of bowling balls available to each player. The third and final integer is w, 1 \u2264 w \u2264 n, the width of the bowling ball (the number of adjacent pins it can knock over). The next n lines of each test case each contain a single non-negative integer less than 10000, giving the score of the pins, in order. 20% of the test data will have size n \u2264 50."
}{
  "Example": "Sample Input \n3\n  1 2 3\n  2 3 4\n  3 4 5\n  5\n  1 1 1\n  2 2 2\n  4 3 2\n  4 3 3\n  4 4 4\nSample Output\n6\n  24\n  24\n  60\n  Item does not fit.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  Nowadays, almost any item can be bought and sold on the internet. The problem is shipping. Before an item can be sent, it must be carefully packaged in a cardboard box to protect it.\nWhile items come in many shapes and sizes, finding a box just the right size can be a problem. If the box is too small, the item will not fit. If the box is unnecessarily big, shipping cost will be higher, and the item is more likely to move around inside the box, and it may break.\nCardboard box manufacturers offer a fixed set of standard box sizes. Your task is to find the standard box size with the smallest volume into which an item will fit.\nEach box is a rectangular prism with a given length, width, and height. Each item is also a rectangular prism with a given length, width, and height. An item may be rotated by multiples of 90 degrees in any direction before being packed into a box, but when it is packed, its faces must be parallel to the faces of the box. An item will fit into a box as long as its dimensions are equal to or less than the dimensions of the box.",
  "Output": "Output is to consist of m lines, one for each item in the input. For each item, output a line containing a single integer, the volume (in mm\u00b3) of the smallest box into which the item will fit. The same size of box may be reused for any number of items. If an item does not fit in any box, print the line: Item does not fit. (with a period!)",
  "Title": "CCC07S2 - Boxes",
  "Input": "The first line of input will contain a single integer n; 0 < n < 1000, the number of different sizes of boxes available. The next n lines will contain three integers each, giving the length, width, and height of a box.\nThe following line will contain a single integer m; 0 < m < 1000, the number of items to be packaged.\nThe next m lines will contain three integers each, giving the length, width, and height of an item. All dimensions will be in millimetres and in the range from 1 mm to 2000 mm."
}{
  "Example": "Sample Input \n2\n  1 2 3 4 5 6\n  4 3 2 1 6 5\nSample Output\nTwin snowflakes found.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You may have heard that no two snowflakes are alike. Your task is to write a program to determine whether this is really true. Your program will read information about a collection of snowflakes, and search for a pair that may be identical.\nEach snowflake has six arms. For each snowflake, your program will be provided with a measurement of the length of each of the six arms. Any pair of snowflakes which have the same lengths of corresponding arms should be flagged by your program as possibly identical.",
  "Output": "If all of the snowflakes are distinct, your program should print the message:\nNo two snowflakes are alike.\nIf there is a pair of possibly identical snowflakes, your program should print the message:\nTwin snowflakes found.",
  "Title": "CCC07 Stage 2 - Snowflakes",
  "Input": "The first line of input will contain a single integer n; 0 < n \u2264 100,000, the number of snowflakes to follow. This will be followed by n lines, each describing a snowflake. Each snowflake will be described by a line containing six integers (each integer is at least 0 and less than 10,000,000), the lengths of the arms of the snowflake. The lengths of the arms will be given in order around the snowflake (either clockwise or counterclockwise), but they may begin with any of the six arms. For example, the same snowflake could be described as 1 2 3 4 5 6 or 4 3 2 1 6 5."
}{
  "Example": "Sample Input \n2\n  9 2 3\n  2\n  8\n  5\n  1\n  9\n  6\n  9\n  3\n  2\n  9 3 3\n  2\n  8\n  -5\n  3\n  5\n  8\n  4\n  8\n  -6\nSample Output\n39\n  38",
  "Memory Limit": "256M",
  "Time Limit": "5.00s",
  "Description": "Recall that at the Canadian Carnival Competition (CCC), a popular game was Bowling for Numbers. A large number of bowling pins were lined up in a row. Each bowling pin had a number printed on it, which was the score obtained from knocking over that pin. The player was given a number of bowling balls; each bowling ball was wide enough to knock over a few consecutive and adjacent pins.\nFor example, one possible sequence of pins was:\n2 8 5 1 9 6 9 3 2\nIf Alice was given two balls, each able to knock over three adjacent pins, the maximum score Alice could achieve would be 39, the sum of two throws: 2+8+5 = 15, and 9+6+9 = 24.\nSince many, including you, have mastered the art of throwing balls at pins, the old and wise members of the Canadian Carnival Competition Committee have decided to make the game slightly more difficult by introducing the concept of penalty pins.\nPenalty pins are pins with a negative score, such that a player's score decreases when they are knocked over. This can change the player's strategy, as the player can use the empty spaces to the left and right of the pins, as well as spaces created by previous throws, to avoid hitting penalty pins. Consider the following example:\n2 8 -5 3 5 8 4 8 -6\nIf Alice was given three balls, each able to knock over three adjacent pins, the maximum score Alice could achieve would be 38, the sum of three throws: 2 + 8, 3 + 5 + 8, and 4 + 8. Alice's first throw is deliberately to the left and catches only the leftmost two pins, avoiding the -5. Alice's second throw hits 3 5 8, and her third throw catches the remaining 4 8, going through the space created by her second throw to avoid the -6.\nBob has a strategy where he picks the shot that gives him the most score, then repeatedly picks the shot that gives him the most score from the remaining pins. This strategy doesn't always yield the maximum score, but is close. On the test data, such a strategy would get a score of 20%.",
  "Output": "For each test case, output the maximum achievable score by the player. This score is guaranteed to be less than one billion.",
  "Title": "CCC07 Stage 2 - Bowling for Numbers++",
  "Input": "Input consists of a series of test cases. The first line of input is t, 1 \u2264 t \u2264 10, indicating the number of test cases in the file.\n The first line of each test case contains three integers. First is the integer n, 1 \u2264 n \u2264 10000, indicating the number of bowling pins. The second integer, k, 1 \u2264 k \u2264 500, giving the number of bowling balls available to each player. The third and final integer is w, 1 \u2264 w \u2264 100, the width of the bowling ball (the number of adjacent pins it can knock over).\nThe next n lines of each test case each contain a single integer giving the score of the pins, in order. The scores are in the range -10000...10000 inclusive.\n20% of the test data will have size n \u2264 50."
}{
  "Example": "Sample Input \n4\n  2\n  1 5\n  4 3\n  1 2\n  6 1\nSample Output 1\n1\nSample Input 2\n3\n  3\n  2 0 1\n  1 3 0\n  0 0 1\nSample Output 2\n-1",
  "Memory Limit": "256M",
  "Time Limit": "10.00s",
  "Description": "Politicians like to get elected. They will do just about anything to get elected. Including changing the rules of the voting: who can vote, where you can vote, when you can vote, etc. One very common practice is called gerrymandering, where the boundaries of \"ridings\" are redrawn to favour a particular candidate (the one doing the redrawing, of course).\nYour task is to help determine how to do some simple, linear gerrymandering.\nYou will be given the information about N ridings (2 \u2264 N \u2264 1,000) where there are candidates from p (2 \u2264 p \u2264 10) different parties. These N ridings are linear, in the sense that they are side-by-side; there are two ridings (on the ends) that have only one adjacent riding, with the rest of the ridings having two adjacent ridings. A picture is shown below for N = 4 and p\u00a0=\u00a02 (which is also the sample data):\nNote that Riding 1 and Riding 2 are adjacent, Riding 2 and 3 are adjacent, Riding 3 and 4 are adjacent. No other ridings are adjacent.\nYou have some financial backing that will let you bribe the people in charge of setting the boundaries of ridings: in particular, there is a fixed rate to merge two adjacent boundaries. When you merge two ridings, the votes of the ridings merge together, in the sense that the number of votes of party 1 is the sum of the votes of party 1 in each riding, and likewise for all other parties.\nYour task is to merge the minimum number of regions such that the first party (your party!) has a majority of the ridings. Note that to win a riding, the party must have more votes than any other party in that riding. Also note that to have a majority of ridings, if there are Q ridings (where Q \u2264 N), then your party has won at least floor(Q/2)+1 of the ridings.",
  "Output": "One line, consisting of an integer, which gives the minimum number of ridings that need to be merged in order for the first party to win a majority of ridings. If the first party cannot win, even with any number of mergers, output -1.",
  "Title": "CCC07 Stage 2 - Gerrymandering",
  "Input": "The first line of input will consist of the integer N. The second line of input will consist of the integer p. The next N lines will each contain p non-negative integers (where each integer is at most 10,000), separated by one space character. Specifically, the p integers on each line are v1 v2 ... vp where v1 is the number of votes that party 1 will receive in this riding, v2 is the number of votes that party 2 will receive in this riding, etc. You may also assume that the total number of voters is less than 2 billion."
}{
  "Description": "You may have heard that you cannot observe both the speed and location of a subatomic particle, simultaneously. At least, not until today, since computer scientists can ignore physicists whenever we want.\nYour task is to determine both the speed and location of a particle that is moving around a nucleus. Of course, we will assume that the particle is moving in a circular orbit and moving at a constant velocity.\nYou can use your high-tech measuring device (which is, in fact, the synthesis of a spoon and a Commodore-64) to perform the following 3 different queries:\n GetSize() - this method returns the integer representing the number of different positions in one orbit of the particle. You may assume that if this function returns N, the positions are labelled 0, ..., N-1. You may assume 2 \u2264 N \u2264 100,000.\nLook(a, b) - returns true if the point is in the range from a..b (where 0 \u2264 a \u2264 b \u2264 N-1) at this moment and false otherwise. This method will be called repeatedly, but subsequent calls cause the particle to move v positions from its current position. In other words, the particle is moving at v units per query. The first call to this method will query the initial position of the point (i.e., the GetSize() method does not advance the point).\n Guess(v, p) - will record the final velocity v and final position p (where 0 \u2264 v, p \u2264 N-1). There is exactly one call to this method, which will terminate the high-tech measuring device (i.e., no other calls may be made) and the high-tech device will output a statement indicating the success or failure of the guess (whether the point is at position p and velocity v when the call to Guess is made.) Note that the particle is v units away from where it was at the last query statement.\nYou have a limit of 100 Looks, so be wise about your queries.",
  "Memory Limit": "128M",
  "Interacting with the Judge": "The methods mentioned above can be accessed through regular input/output.\n The first line of input to your program will be N. (GetSize())\n After that, you'll have to Look. To Look(a, b), just output a and b separated by a space on one line.\n To get the result of your look, read an integer. You will receive 1 (true) or 0 (false) accordingly.\nRepeat steps 2-3 as desired.\n To make your final Guess, output \"G v p\" on one line where v and p are your guesses for the velocity/position.\n You'll also need to fflush(NULL) [C++] or flush(output) [Pascal] whenever you output something. ",
  "Time Limit": "2.00s",
  "Sample Code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint N;\n\tscanf(\"%d\", &N);\n\t\n\t//look around\n\tprintf(\"%d %d\\n\", 0, N-1);\n\tfflush(NULL);\n\tint result;\n\tscanf(\"%d\", &result); //result of the look\n\n\tint v = 1, p = 2;\t\n\tprintf(\"G %d %d\\n\", v, p); //final guess\n\tfflush(NULL);\n\t\n\treturn 0;\n}",
  "Title": "CCC07 Stage 2 - Particle Catcher"
}{
  "Example": "Sample Input \n10 12\n  1 2\n  1 3\n  1 4\n  2 5\n  2 6\n  5 6\n  3 7\n  3 8\n  7 8\n  4 9\n  4 10\n  9 10\nSample Output 1\n2\nSample Input 2\n3 3\n  1 2\n  2 3\n  1 3\nSample Output 2\n0",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "It's almost summer time, and that means that it's almost summer construction time!\nThis year, the good people who are in charge of the roads on the tropical island paradise of Remote Island would like to repair and upgrade the various roads that lead between the various tourist attractions on the island.\nThe roads themselves are also rather interesting. Due to the strange customs of the island, the roads are arranged so that they never meet at intersections, but rather pass over or under each other using bridges and tunnels. In this way, each road runs between two specific tourist attractions, so that the tourists do not become irreparably lost.\nUnfortunately, given the nature of the repairs and upgrades needed on each road, when the construction company works on a particular road, it is unusable in either direction. This could cause a problem if it becomes impossible to travel between two tourist attractions, even if the construction company works on only one road at any particular time.\nSo, the Road Department of Remote Island has decided to call upon your consulting services to help remedy this problem. It has been decided that new roads will have to be built between the various attractions in such a way that in the final configuration, if any one road is undergoing construction, it would still be possible to travel between any two tourist attractions using the remaining roads. Your task is to find the minimum number of new roads necessary.",
  "Output": "One line, consisting of an integer, which gives the minimum number of roads that we need to add.",
  "Title": "CCC07 Stage 2 - Road Construction",
  "Input": "The first line of input will consist of positive integers n and r, separated by a space, where 3 \u2264 n \u2264 1,000 is the number of tourist attractions on the island, and 2 \u2264 r \u2264 1,000 is the number of roads. The tourist attractions are conveniently labelled from 1 to n.\nEach of the following r lines will consist of two integers, v and w, separated by a space, indicating that a road exists between the attractions labelled v and w. Note that you may travel in either direction down each road, and any pair of tourist attractions will have at most one road directly between them. Also, you are assured that in the current configuration, it is possible to travel between any two tourist attractions."
}{
  "Example": "Sample Input \n 84.5\n  1.8\nSample Output 2\nOverweight",
  "Explanation": "The BMI is 84.5 / (1.8 \u00d7 1.8), which is approximately 26.0802. According to the table, this is \"Overweight\".",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  The Body Mass Index (BMI) is one of the calculations used by doctors to assess an adult's health. The doctor measures the patient's height (in metres) and weight (in kilograms), then calculates the BMI using the formula\n           weightBMI = ------------------\n       height \u00d7 height\nWrite a program which takes in the patient's height and weight, calculates the BMI, and displays the corresponding message from the table below.",
  "Title": "CCC08J1 - Body Mass Index"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n(b = 2, n = 1 so \u201cA, B, C, D, E\u201d changed to \u201cE, A, B, C, D\u201d)\n(b = 3, n = 1, so \u201cE, A, B, C, D\u201d changed to \u201cA, E, B, C, D\u201d)\n(b = 2, n = 3, so \u201cA, E, B, C, D\u201d changed to \u201cB, C, D, A, E\u201d)\n(b = 4, n = 1) When this happens, you should output the playlist.\nSample Output\nB C D A E",
  "Description": "Those tiny music machines that play your digital music are really computers that keep track of and play music files. The CCC music player (C\u00b3MP) is currently in development and will be hitting the stores soon! In this problem, you have to simulate a C\u00b3MP.\nThe C\u00b3MP music player will hold 5 songs in memory, whose titles will always be \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, \u201cD\u201d and \u201cE\u201d. The C\u00b3MP also keeps track of a playlist, which is an ordering of all the songs. The C\u00b3MP has 4 buttons that the user will press to rearrange the playlist and play the songs.\nInitially, the C\u00b3MP playist is \u201cA, B, C, D, E\u201d. The 4 control buttons do the following:\n Button 1: move the first song of the playlist to the end of the playlist.\n  For example: \u201cA, B, C, D, E\u201d will change to \u201cB, C, D, E, A\u201d.\n Button 2: move the last song of the playlist to the start of the playlist.\n  For example, \u201cA, B, C, D, E\u201d will change to \u201cE, A, B, C, D\u201d.\n Button 3: swap the first two songs of the playlist.\n  For example, \u201cA, B, C, D, E\u201d will change to \u201cB, A, C, D, E\u201d.\n Button 4: stop rearranging songs and output the playlist.\nYou need to write a program to simulate a CCC music player. Your program should repeatedly ask for two positive integers b and n. Here b represents the button number that the user wants to press, 1 \u2264 b \u2264 4, and n represents the number of times that the user wants to press button b. You can assume that n always satisfies 1 \u2264 n \u2264 10.\nThe input will always finish with the pair of inputs (b = 4, n = 1) when this happens, you should print the order of songs in the current playlist and your program should end. You can assume that the user will only ever press button 4 once.",
  "Title": "CCC08J2 - Do the Shuffle",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \nGPS\nSample Output 1\n15\nSample Input 2\nECHO ROCK\nSample Output 2\n29",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "For her birthday, Sandy got a Global Positioning System (GPS) unit, which is an electronic device she can use to track the local hiking trails. Along the way Sandy can mark waypoints that can be recorded on a map when she gets home. A description of each waypoint can be entered in the unit, however the device does not have a keypad. Instead it has four cursor buttons, up, down, left, and right, and a button to accept the letter. The keypad looks like the following:\nThe screen displays a grid of the letters and symbols that can be used to \u201ctype out\u201d the description.\n  Here is the layout of the grid:\nWhen you enter the name of the waypoint, the cursor starts at the A. You must move the cursor to the location of the next letter or symbol and then accept that letter. The cursor can only move to squares which are adjacent horizontally or vertically (not diagonally). Once you have entered all the letters in the description, you need to move the cursor to \u201denter\u201d and accept the entire phrase.\nYou are to write a program that will calculate the number of cursor movements it takes to \u201ctype in\u201d a phrase. For example, to enter the word \u201cGPS\u201d, starting from the \u201cA\u201d position, you would move down 1 to select \u201cG\u201d, then move right 3 and down 1 to select \u201cP\u201d, then move down 1 and left 3 to select \u201cS\u201d and finally move down 1 and right 5 to select \u201center\u201d. This is a total of 15 cursor movements. Note that the total number of cursor movements does not change if you choose to move down and then across or across and then down. Also note that you cannot move beyond the boundaries of the grid (e.g., you cannot move off the grid nor \u201cwrap-around\u201d the grid).",
  "Output": "The output for your program will be an integer that is the total number of cursor movements needed to enter the string using the grid layout given.",
  "Title": "CCC08J3 - GPS Text Entry",
  "Input": "The input for your program will be a string of at most 40 characters. You may assume that all characters in the string are contained in the grid."
}{
  "Example": "Sample Input \n1\n+ 1 2\n- 2 2\n+ 2 - 2 1\n- - 3 + 2 1 9\n0\nSample Output\n1\n  1 2 +\n  2 2 -\n  2 2 1 - +\n  3 2 1 +  - 9 -\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "  Prefix notation is a non-conventional notation for writing arithmetic expressions. The standard way of writing arithmetic expressions, also known as infix notation, positions a binary operator between the operands, e.g., 3 + 4, while in prefix notation the operator is positioned before the operands, e.g., + 3 4. Similarly, the prefix notation for 5 - 2 is - 5 2. A nice property of prefix expressions with binary operators is that parentheses are not required since there is no ambiguity\nabout the order of operations. For example, the prefix representation of 5 - (4 - 2) is - 5 - 4 2, while the prefix representation of (5 - 4) - 2 is - - 5 4 2. The prefix notation is also known as Polish notation, due to Jan \u0141ukasiewicz, a Polish logician, who invented it around 1920.\nSimilarly, in postfix notation, or reverse Polish notation, the operator is positioned after the operands. For example, postfix representation of the infix expression (5 - 4) - 2 is 5 4 - 2 -.\nYour task is to write a program that translates a prefix arithmetic expression into a postfix arithmetic expression.",
  "Output": "Translate each expression into postfix notation and produce it on a separate line. The numbers and operators are separated by at least one space. The final 0 is not translated.",
  "Title": "CCC08J4 - From Prefix to Postfix",
  "Input": "Each line contains an arithmetic prefix expression. The operators are + and -, and numbers are all single-digit decimal numbers. The operators and numbers are separated by exactly one space with no leading spaces on the line. The end of input is marked by 0 on a single line. You can assume that each input line contains a valid prefix expression with less than 20 operators."
}{
  "Example": "Sample Input \n6\n0 2 0 2\n1 3 1 3\n1 5 0 3\n3 3 3 3\n8 8 6 7\n8 8 8 8\nSample Output\nRoland\nPatrick\nRoland\nRoland\nRoland\nPatrick",
  "Partial Explanation": "The first output occurs since Patrick loses immediately, since he cannot form any reaction. (Roland's\nperfect winning strategy is \"do nothing.\")\nThe second output occurs since Patrick has the perfect winning strategy \"form reaction ABCD,\"\nwhich makes Roland lose on his first turn.\nThe third output is explained in the problem statement.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Canada's top two nuclear scientists, Patrick and Roland, have just completed the construction of\nthe world's first nuclear fission reactor. Now it is their job to sit and operate the reactor all day,\nevery day. Naturally they got a little bored after doing this for a while and as a result, two things\nhave happened. First, they can now control the individual reactions that happen inside the reactor.\nSecond, to pass the time, they have invented a new game called Nukit.\nAt the beginning of Nukit, a number of particles are put in the reactor. The players take alternating\nturns, with Patrick always going first. When it is a player's turn to move, they must select some of\nthe remaining particles to form one of the possible reactions. Then those particles are destroyed.\nEventually there will be so few particles that none of the reactions can be formed; at this point, the\nfirst person who is unable to form a reaction on their turn loses.\nIn our universe you can assume that there are only 4 types of particles: A, B, C, D. Each reaction\nis a list of particles that can be destroyed on a single turn. The five reactions are:\nAABDD\nABCD\nCCD\nBBB\nAD\nFor example, the first reaction 'AABDD' says that it is allowable to destroy two A, one B, and two\nD particles all at the same time on a turn.\nIt turns out that, no matter how many particles start off in the reactor, exactly one of Patrick or\nRoland has a perfect winning strategy. By player X has a perfect winning strategy, we mean that\nno matter what the other player does, player X can always win by carefully choosing reactions.\nFor example, if the reactor starts off with one A, five B, and three D particles then Roland has the\nfollowing perfect winning strategy: if Patrick forms reaction BBB initially, then form reaction\nAD afterward; if Patrick forms reaction AD initially, then form reaction BBB afterward. (The\nstrategy works because either way, on Patrick's second turn, there are not enough particles left to\nform any reactions.)\nGiven the number of each type of particle initially in the reactor, can you figure out who has a\nperfect winning strategy?",
  "Output": "",
  "Title": "CCC08J5 - Nukit",
  "Input": "The first line of input contains n, the number of test cases (1 \u2264 n < 100). Each test case consists\nof 4 integers separated by spaces on a single line; they represent the initial number of A, B, C and\nD particles. You can assume that there are initially between 0 and 8 (inclusive) of each type of\nparticle."
}{
  "Example": "Sample Input \nSaskatoon -20\nToronto -2\nWinnipeg -40\nVancouver 8\nHalifax 0\nMontreal -4\nWaterloo -3\nSample Output\nWinnipeg",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Canada is cold in winter, but some parts are colder than others. Your task is very simple - you need\nto find the coldest city in Canada. So, when given a list of cities and their temperatures, you are to\ndetermine which city in the list has the lowest temperature and is thus the coldest.",
  "Output": "",
  "Title": "CCC08S1 - It's Cold Here",
  "Input": "The input is a sequence of city names and temperature values. Temperatures are integer, possibly\npreceded with a minus sign. There is a single space between the city name and the temperature.\nNo city name contains any whitespace and is always less than 256 characters in length. There is at\nleast one city in the list, no more than 10000 cities, and the last city is always Waterloo. You may\nassume that the temperature is not less than -273 and not more than 200."
}{
  "Example": "Sample Input \n2\n3\n4\n0\nSample Output\n13\n29\n49",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "",
  "Output": "",
  "Title": "CCC08S2 - Pennies in the Ring",
  "Input": ""
}{
  "Title": "CCC08 Stage 2 - Moving Day",
  "Example": "Sample Input \n3\nPierre 51 43\nGuy 28 83\nMarie 43 28\nSample Output\nGuy\nMarie\nPierre",
  "Memory Limit": "512M",
  "Time Limit": "3.00s",
  "Description": "Every year on July 1st, the residents of Quebec experience Moving Day. It is customary\nfor most apartment leases to begin and end on this day, making it a popular time for people to\nmove. The streets are filled with moving trucks and anxious tenants packing and unpacking\ntheir belongings, waiting for their truck to become available, or waiting for a previous tenant\nto vacate their apartment. It is a busy but profitable time for moving companies.\nYou will write a program to help the residents of a small town plan the order in which\nthey should move.\nOnly one truck is available, so all of the people who are moving must\nshare it. Therefore, the people must move one at a time. A person cannot move into a new\nhouse before the former tenant has moved out. Each person moves directly from their old\nhouse to their new house; a person may not move temporarily into another vacant house\nwhile waiting for their new house to be vacated.\nYou may assume that no two people are moving into the same house. You may assume\nthat no two people are moving out of the same house. You may also assume that each house\nto which someone is moving is either vacant or being vacated on Moving Day.",
  "Output": "The program should print the names of the people who are moving in the order that\nthey should move. If it is not possible to find an order that ensures that each person's new\nhouse is vacant by the time the person moves to it, the program should print only the word\n\"Impossible\". If there are several different orders in which the people could move, any valid\norder is acceptable.",
  "Input": "The first line of input contains the number n (1 \u2264 n \u2264 100) of people who are moving. Each\nof the following n lines of input contains a person's name followed by the address that the\nperson is moving from and the address that the person is moving to. Because there is only\none street in the town (called Main St.), each address is just a number between 1 and 100,\ninclusive. You can assume that no name will be longer than 100 characters, and that names\ncontain only alphanumeric characters.",
  "Grading": "All test cases will have 1 \u2264 n \u2264 100. Your solution must use at most 512 MB of memory\nand run in at most 3 seconds."
}{
  "Title": "CCC08 Stage 2 - King & Weber",
  "Example": "Sample Input \n3 3\nfourthstreet fifthstreet parallel\nfifthstreet sixthstreet parallel\nfourthavenue fifthstreet intersect\nsixthstreet fourthstreet\nsixthstreet fourthavenue\nsixthstreet King\nSample Output\nparallel\nintersect\nunknown\nSample Input 2\n2 1\nKing Weber parallel\nKing Weber intersect\nKing Weber\nSample Output 2\nWaterloo",
  "Memory Limit": "512M",
  "Time Limit": "3.00s",
  "Description": "It is easy to get lost in Kitchener-Waterloo. Many streets that are mostly parallel actually\nintersect, sometimes multiple times. The best-known example is King and Weber Streets.\nOther examples include Westmount and Fischer-Hallman, University and Erb, and Queen\nand Highland.\nNavigation is easier in cities that respect the \"Manhattan Assumption\": all streets are\nstraight lines in a Euclidean plane, and any two streets are either parallel or perpendicular\nto each other. Visitors to Manhattan are cautioned that even Manhattan itself does not\nfully satisfy this assumption.\nThe input to your program will be a sequence of observations followed by a sequence of\nqueries for a particular city. An observation asserts either that two streets are parallel, or\nthat they intersect. A query asks whether two streets are parallel, or whether they intersect,\nprovided the city satisfies the Manhattan Assumption.",
  "Output": "If it is impossible for the city to conform to both the Manhattan Assumption and the\nspecified observations, output a single line containing the word Waterloo. Otherwise, output\nn lines containing the answers to the n queries. Each answer should be one of the following\nthree words: parallel, intersect, unknown. If the two streets queried are parallel in every\ncity satisfying the given observations and the Manhattan Assumption, the output should be\nparallel. If they are perpendicular in every such city, the output should be intersect. If they\nare parallel in some such city and perpendicular in another such city, the output should be\nunknown.",
  "Input": "The first line of input contains two integers m and n (1 \u2264 m, n \u2264 100000). Each\nof the following m lines contains an observation. Each observation consists of three words\nseparated by spaces: the two street names, and either the word parallel or the word intersect.\nEach street name is a sequence of no more than 100 uppercase or lowercase letters. The\nobservations are followed by n queries, each on a separate line. A query consists of two\nstreet names separated by a space.",
  "Grading": "You can assume that 20% of the test cases will have 1 \u2264 m, n \u2264 100. All test cases will\nhave 1 \u2264 m, n \u2264 100000. Your solution must use at most 512 MB of memory and run in at\nmost 3 seconds."
}{
  "Title": "CCC08 Stage 2 - Mobile",
  "Example": "Sample Input \n5\n2 3\n4 5\n-1 -2\n-3 -4\n-5 -6\n5\n2 5\n-1 -2\n-3 -4\n-5 -6\n3 4\nSample Output\nFred and Mary might have the same mobile.\nSample Input 2\n5\n2 3\n4 5\n-3 -4\n-1 -2\n-5 -6\n5\n2 5\n-1 -2\n-3 -4\n-5 -6\n3 4\nSample Output 2\nFred and Mary have different mobiles.",
  "Memory Limit": "512M",
  "Time Limit": "1.00s",
  "Description": "Fred is a baby. Above Fred's crib hangs a mobile. Fred is amused by this mobile. Fred\nhas a twin sister, Mary. Above Mary's crib hangs another mobile. Fred wonders whether\nthe mobile above his crib and the mobile above Mary's crib are the same. Help Fred.\nA mobile is a collection of bars, strings, and decorative weights suspended from the\nceiling. Each bar is suspended by a string tied to the exact centre of the bar. From each\nend of a bar hangs a string that is tied either to another bar or to a weight. The bars can\nrotate freely about their centres. Fred cannot tell two bars apart, even if they have different\nlengths. Fred also cannot tell two strings apart. Fred therefore considers two mobiles to be\nthe same if the bars of one mobile can be rotated somehow to make the two mobiles appear\nidentical.\nFred has even developed a notation for describing mobiles. He assigns each bar a distinct\npositive integer from 1 to the number of bars in the mobile, and he assigns the various objects\nnegative integers. 1 always represents the bar suspended from the ceiling. (So, for example,\na biplane might be represented by Fred as object -2, a crescent-moon might be object -57,\nand a star might be object -21.) Fred can only count down to -9999, so you can assume\nthat he gave no objects lower numbers than -9999.",
  "Output": "Output is composed of one line. Write \"Fred and Mary have different mobiles.\"\nif Fred's information is enough to distinguish the two mobiles; otherwise, \"Fred and Mary\nmight have the same mobile.\".",
  "Input": "The input contains two mobile descriptions. The first line of a mobile description contains\na single nonnegative integer n (1 \u2264 n \u2264 100000), indicating the number of bars in the mobile.\nOn the next n lines, there are two numbers per line, with these two numbers representing\nthe objects hanging from bar i.",
  "Grading": "Half of all marks will have n \u2264 200. 75% of the marks will be from test cases with n \u2264 5000.\nAll test cases will have n \u2264 100000.\nYour solution must use at most 1 second of CPU time and at most 512MB of memory."
}{
  "Title": "CCC08 Stage 2 - Herding",
  "Example": "Sample Input \n3 4\nSWWW\nSEWN\nEEEN\nSample Output\n2",
  "Memory Limit": "512M",
  "Time Limit": "3.00s",
  "Description": "Oh no! A number of stray cats have been let loose in the city, and as the City Cat\nCatcher, you have been assigned the vital task of retrieving all of the cats. This is an ideal\nopportunity to test your latest invention, a cat trap which is guaranteed to retrieve every\ncat which walks into a square-shaped subsection of the city.\nFortunately, you have the assistance of one of the world's foremost cat psychologists, who\nhas the amazing ability of predicting, given a square subsection of the city, exactly which\nof the four cardinal directions (north, east, south or west) the cat will head. While this\ninformation is handy, you still don't know where all the cats currently are.\nIn order to prove the cost-effectiveness of your method to the City it would, of course,\nbe important to minimize the number of traps used.",
  "Output": "Output the minimum number of traps needed.",
  "Input": "The input will begin with a line consisting of two numbers n and m, separated by a\nspace (1 \u2264 n, m \u2264 1000). The city will be an n x m grid of square subsections. The next n\nlines will each consist of a string of length m, consisting of the letters `N', `E', `S', or `W',\nrepresenting north, east, south and west, respectively. (The first character of the first line\nwill be the northwesternmost point.) The direction in the square is the direction which cats\nwill head if they are in that square. The cat psychologist assures you that cats have no\ninterest in leaving the city.",
  "Grading": "You may assume that 40% of test cases will have 1 \u2264 n, m \u2264 4. All test cases will have\n1 \u2264 n, m \u2264 1000. You solution must use at most 512MB of memory and run in at most 3\nseconds."
}{
  "Example": "Sample Input \n4\n3 5\n3 3\n1 2\n3 100\nSample Output\n74",
  "Explanation": "Your friend takes two of the 100-calorie candies, for a total of 200 calories. You keep the\nremaining candies, which have 126 calories.",
  "Memory Limit": "512M",
  "Time Limit": "6.00s",
  "Grading": "You may assume that 50% of the test cases will have at 1 \u2264 N, ki, ci \u2264 100. All test\ncases will have 1 \u2264 N \u2264 100, 1 \u2264 ki \u2264 500 and 1 \u2264 ci \u2264 200. You solution must use at most\n512MB of memory and run in at most 6 seconds.",
  "Description": "You and a friend have a big bag of candy. You want to keep slim and trim, and so you\nwould like to equalize the candy which you are sharing with your friend in terms of calorie\ncount. That is, your task is to divide the candies into two groups such that the number of\ncalories in each group is as close together as possible.",
  "Output": "Your output is one integer which is the minimum difference of calories between friends",
  "Title": "CCC08 Stage 2 - Candy",
  "Input": "The first line of input contains the number of different kinds of candy you have in your\nbag of candy N (1 \u2264 N \u2264 100). On the following N lines, there are pairs of numbers\ndescribing each type of candy. The candy description is of the form ki ci where ki is the\nnumber of that particular type of candy contained in the bag and ci is the calorie count for\neach piece of that type of candy. You may assume that 1 \u2264 ki \u2264 500 and 1 \u2264 ci \u2264 200."
}{
  "Title": "CCC08 Stage 2 - Landing",
  "Example": "Sample Input \n4\n1 1\n1 -1\n-1 -1\n-1 1\nSample Output\n1.41421356",
  "Memory Limit": "512M",
  "Time Limit": "1.00s",
  "Description": "Keep watching the skies! Alien spacecraft are due to land any day now to share all of their advanced programming secrets with us.\nIn preparation for this day, you've been asked with preparing a landing pad for our visitors in a given field. Unfortunately, due to environmental considerations, you will not be permitted to remove any of the trees which currently exist on the field. These trees are of immense scientific research, since they have zero radius and only grow at points with integer co-ordinates. However, this could be a blessing in disguise. For security reasons, the landing pad must be in contact with at least three trees. Security cameras will be placed at the tops of these trees.\nAlien spacecraft are perfectly circular craft of various sizes, so the landing pad will also be circular. Since it would be polite to warn potential visitors ahead of time if their spacecraft is too large for our landing pad, you must now determine the size of largest circular region that we can place on the field which contacts at least three trees, but does not contain any trees within.",
  "Output": "Output the radius of the largest possible landing pad. If the correct answer is R, you should output number a such that\n\nThe above calculation is used to define an acceptable range or tolerance for the answer you find. You may also assume that r < 109. You may assume there exists at least one landing pad.",
  "Input": "The first line of input consists of the number n of trees (3 \u2264 n \u2264 100 000). the next n lines will each consist of a pair of integers x and y (-10000 \u2264 x, y \u2264 10000), separated by a space, giving the co-ordinates of a tree. You may assume that no two trees are at the same co-ordinates.",
  "Grading": "You may assume that 25% of the test cases will have at most 50 trees. You may assume that 95% of the test cases will have at most 1000 trees. All test cases will have at most 100 000 trees. Your solution must use at most 512MB of memory and run in at most 5 seconds."
}{
  "Example": "Sample Input \n3\n2\n2\n-|\n*+\n3\n5\n+||*+\n+++|+\n**--+\n2\n3\n+*+\n+*+\nSample Output\n3\n7\n-1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "In order to make a few dollars, you have decided to become part of a scientific experiment. You\nare fed lots of pizza, then more pizza and then you are asked to find your way across the city on a\nscooter powered only by pizza. Of course, the city has lots of intersections, and these intersections\nare very controlled. Some intersections are forbidden for you to enter; some only let you move\nnorth/south as you leave the intersection; others let you move only east/west as you leave the\nintersection; and the rest let you go in any compass direction (north, south, east or west).\nThankfully your scientific friends have given you a map of the city (on the back of a pizza box),\nwith an arrangement of symbols indicating how you can move around the city. Specifically, there\nare 4 different symbols on the box:\nThe symbol + indicates we can move in any direction (north/south/east/west) from this location.\nThe symbol - indicates we can move only east or west from this location.\nThe symbol | indicates we can move only north or south from this location.\nThe symbol * indicates we cannot occupy this location.\nYour task is to determine how many intersections you must pass through to move from the northwest\ncorner of the city to the south-east corner of the city.",
  "Output": "",
  "Title": "CCC08S3 - Maze",
  "Input": ""
}{
  "Example": "Sample Input \n3\n3\n3\n3\n3\n1\n1\n1\n1\n12\n5\n13\n1\nSample Output\n24\n4\n21",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Twenty-four is a popular card game designed to be played by four players. Each\nplayer is dealt a deck of cards, which are kept face down. On every turn, each\nof the four players turns over the top card of his or her deck, so that it is visible\nto all. The goal is to find an arithmetic expression using the values of the cards\n(with A meaning 1, J meaning 11, Q meaning 12, and K meaning 13) that\nevaluates to the number 24. For example, one possible expression would be:\n\n((A * K)- J) * Q\n((1*13)-11) * 12\n\nThe first player to find such an expression wins the turn, and adds all four cards to the bottom of\nhis or her deck.\nEach valid arithmetic expression must use all four cards, and must combine their values using\naddition, subtraction, multiplication, or division. Parentheses are allowed to specify precedence\nof operations. Juxtaposing cards to make multiple-digit decimal numbers is not allowed (e.g. you\ncannot place the cards 2 and 4 beside each other to make 24). Non-integer quotients of division\nare also not allowed, even as a partial result (of a subexpression of the overall expression).\nIn some cases, the players may take a very long time to find an expression evaluating to 24. In fact,\nin some cases, no such expression exists. Your task is to determine, given four cards, an expression\nthat evaluates to the largest number less than or equal to 24.",
  "Output": "",
  "Title": "CCC08S4 - Twenty-four",
  "Input": "The first line contains an integer 1 \u2264 N \u2264 5 indicating the number of card hands that follow. Each\nhand consists of four lines. Each of these lines is an integer 1 \u2264 C \u2264 13 indicating the value of a card."
}{
  "Example": "Sample Input \n6\n0 2 0 2\n1 3 1 3\n1 5 0 3\n3 3 3 3\n8 8 6 7\n8 8 8 8\nSample Output\nRoland\nPatrick\nRoland\nRoland\nRoland\nPatrick",
  "Partial Explanation": "The first output occurs since Patrick loses immediately, since he cannot form any reaction. (Roland's\nperfect winning strategy is \"do nothing.\")\nThe second output occurs since Patrick has the perfect winning strategy \"form reaction ABCD,\"\nwhich makes Roland lose on his first turn.\nThe third output is explained in the problem statement.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Canada's top two nuclear scientists, Patrick and Roland, have just completed the construction of\nthe world's first nuclear fission reactor. Now it is their job to sit and operate the reactor all day,\nevery day. Naturally they got a little bored after doing this for a while and as a result, two things\nhave happened. First, they can now control the individual reactions that happen inside the reactor.\nSecond, to pass the time, they have invented a new game called Nukit.\nAt the beginning of Nukit, a number of particles are put in the reactor. The players take alternating\nturns, with Patrick always going first. When it is a player's turn to move, they must select some of\nthe remaining particles to form one of the possible reactions. Then those particles are destroyed.\nEventually there will be so few particles that none of the reactions can be formed; at this point, the\nfirst person who is unable to form a reaction on their turn loses.\nIn our universe you can assume that there are only 4 types of particles: A, B, C, D. Each reaction\nis a list of particles that can be destroyed on a single turn. The five reactions are:\nAABDD\nABCD\nCCD\nBBB\nAD\nFor example, the first reaction \"AABDD\" says that it is allowable to destroy two A, one B, and two\nD particles all at the same time on a turn.\nIt turns out that, no matter how many particles start off in the reactor, exactly one of Patrick or\nRoland has a perfect winning strategy. By player X has a perfect winning strategy, we mean that\nno matter what the other player does, player X can always win by carefully choosing reactions.\nFor example, if the reactor starts off with one A, five B, and three D particles then Roland has the\nfollowing perfect winning strategy: \"if Patrick forms reaction BBB initially, then form reaction\nAD afterward; if Patrick forms reaction AD initially, then form reaction BBB afterward.\" (The\nstrategy works because either way, on Patrick's second turn, there are not enough particles left to\nform any reactions.)\nGiven the number of each type of particle initially in the reactor, can you figure out who has a\nperfect winning strategy?",
  "Output": "",
  "Title": "CCC08S5 - Nukit",
  "Input": "The first line of input contains n, the number of test cases (1 \u2264 n < 100). Each test case consists\nof 4 integers separated by spaces on a single line; they represent the initial number of A, B, C and\nD particles. You can assume that there are initially between 0 and 30 (inclusive) of each type of\nparticle."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n9\n4\n8\nSample Output\nThe 1-3-sum is 120\nSample Input 2\n0\n5\n2\nSample Output 2\nThe 1-3-sum is 108",
  "Description": "The International Standard Book Number (ISBN) is a 13-digit code for identifying books. These numbers have a special property for detecting whether the number was written correctly.\nThe 1-3-sum of a 13-digit number is calculated by multiplying the digits alternately by 1's and 3's (see example) and then adding the results. For example, to compute the 1-3-sum of the number 9780921418948 we add\n9\u00d71 + 7\u00d73 + 8\u00d71 + 0\u00d73 + 9\u00d71 + 2\u00d73 + 1\u00d71 + 4\u00d73 + 1\u00d71 + 8\u00d73 + 9\u00d71 + 4\u00d73 + 8\u00d71\nto get 120.\nThe special property of an ISBN number is that its 1-3-sum is always a multiple of 10.\nWrite a program to compute the 1-3-sum of a 13-digit number. To reduce the amount of typing, you may assume that the first ten digits will always be 9780921418, like the example above. Your program should input the last three digits and then print its 1-3-sum.",
  "Title": "CCC09J1 - ISBN",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n1\n2\n3\n2\nSample Output\n1 Brown Trout, 0 Northern Pike, 0 Yellow Pickerel\n2 Brown Trout, 0 Northern Pike, 0 Yellow Pickerel\n0 Brown Trout, 1 Northern Pike, 0 Yellow Pickerel\nNumber of ways to catch fish: 3",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Fishing habitat and fish species are a resource that must be carefully managed to ensure that they will be there for the future. Accordingly, fishing limits have been established for a particular river based on the population of each species. Specifically, points are associated with the fish caught and the total points you catch must be less than or equal to the points allowed for that river.\nAs an example, suppose each brown trout counts as 2 points, each northern pike counts as 5 points and each yellow pickerel counts as 2 points, and the total points allowed must be less than or equal to 12. One acceptable catch could consist of 3 brown trout and 1 northern pike, but, other combinations would also be allowed.\nYour job is to write a program to input the points allocated for a river, and find how many different ways an angler who catches at least one fish can stay within his/her limit.",
  "Output": "For each different combination of fish caught, output the combination of brown trout, northern pike, and yellow pickerel in that order. The combinations may be listed in any order. The last line of output should display the total number of unique ways to catch fish within the established limit.",
  "Title": "CCC09J2 - Old Fishin' Hole",
  "Input": "You will be given 4 integers, one per line, representing trout points, pike points, pickerel points, and total points allowed in that order.\nYou can assume that each integer will be greater than 0 and less than or equal to 100."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n1300\n1300 in Ottawa\n1000 in Victoria\n1100 in Edmonton\n1200 in Winnipeg\n1300 in Toronto\n1400 in Halifax\n1430 in St. John's",
  "Description": "A mobile cell service provider in Ottawa broadcasts an automated time standard to its mobile users that reflects the local time at the user's actual location in Canada. This ensures that text messages have a valid local time attached to them.\nFor example, when it is 1420 in Ottawa on Tuesday February 24, 2009 (specified using military, 24 hour format), the times across the country are shown in the table below:\nWrite a program that accepts the time in Ottawa in 24 hour format and outputs the local time in each of the cities listed above including Ottawa. You should assume that the input time will be valid (i.e., an integer between 0 and 2359 with the last two digits being between 00 and 59).\nYou should note that 2359 is one minute to midnight, midnight is 0, and 13 minutes after midnight is 13. You do not need to print leading zeros, and input will not contain any extra leading zeros.",
  "Title": "CCC09J3 - Good Times",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n15\nSample Output\nWELCOME..TO.CCC\nGOOD.LUCK.TODAY\nSample Input 2\n26\nSample Output 2\nWELCOME..TO..CCC.GOOD.LUCK\nTODAY.....................",
  "Description": "The student council at Central Canada Collegiate is preparing signs with the message WELCOME TO CCC GOOD LUCK TODAY on various walls around the school. A sign is wide enough to hold w characters on each row, including spaces, as befits the wall to be decorated. \nHere is how the words are put onto a sign. First, as many words as possible are placed on the first line, without exceeding the w character limit. The first word in the line begins in the leftmost position. If there is more than one word in the line, the last word ends in the rightmost position. Extra spaces are inserted into the gaps between the words so that the gaps are as similar as possible. If the gaps cannot be made equal, all of the larger gaps should appear to the left of the smaller ones. Subsequent lines are constructed in the same way. \nYour program will read the available width w and output the sign on the screen. Use the \".\" character to indicate a space.\n\tYou may assume that w \u2265 7.",
  "Title": "CCC09J4 - Signage",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n1\n100\nSample Output 1\n2\nSample Input 2\n100\n1000\nSample Output 2\n1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Eric likes interesting numbers like 64. It turns out that 64 is both a square and a cube, since 64 = 82 and 64 = 43. Eric calls these numbers cool. Write a program that helps Eric figure out how many integers in a given range are cool.",
  "Output": "The output should be the number of cool numbers in the range a to b (inclusively: that is, a and b would count as cool numbers in the range if they were actually cool).",
  "Title": "CCC09S1 - Cool Numbers",
  "Input": "On the first line of input, you are given an integer a such that a \u2265 1 and a \u2264 108. On the second line of input, you are given an integer b such that b \u2265 a and b \u2264 108."
}{
  "Example": "Sample Input \n4\n3\n0 0 1\n0 1 1\n1 0 1\n0 0 1\nSample Output\n4",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "For your birthday, you have been given a grid of R (1 < R < 30) rows of lights, with each row containing L (1 \u2264  L < 8) lights. Lights can be in one of two states: on or off. For this question, the topmost row is row R, and the bottom-most row is row 1. Also, beside all rows except the topmost row (row R), there is a button which can be pushed.\nPushing the button beside row k (1 \u2264 k < R) will peform an \"exclusive-or\" operation on each light of row k, which is described below. Consider column i in row k, where 1 \u2264 i \u2264 L. If the lights in column i of row k and column i of row k + 1 are both the same (i.e., both on, or both off), then pushing the button beside row k will cause the light in column i of row k to be off. If the lights in column i of row k and column i of row k + 1 are different (i.e., one is on, and the other is off), then pushing the button beside row k will cause the light in column i of row k to be on. An example is shown below, for L = 4:\nYou are told which lights are initially on and which are initially off. You must calculate how many different light patterns are possible for the bottom row by any sequence of button pushes. Each button may only be pressed once, but in any order.",
  "Output": "Output the number of possible light patterns of the bottom row.",
  "Title": "CCC09S2 - Lights Going On and Off",
  "Input": "The first line of input will contain the integer R, the number of rows. The second line of input will contain the integer L, the number of lights per row. The next R lines of input will contain L integers, where the integer will either be 0 (to indicate \"off\") or 1 (to indicate \"on\"). Pairs of consecutive integers will be separated by one space character. These R lines will be given in topdown order: that is, the third line of input will be the description of row R, the fourth line will be R = 1, and so on, until the last line describes the bottom row."
}{
  "Example": "Sample Input \n3\n1 -1\n1 0 90 20\n1 -22 90 20\n1 -44 90 20\nSample Output\n2\n1\n3",
  "Explanation": "Three boxen: box 1 covering (1, 0) to (91, 20), box 2 covering (1,-22) to (91,-2) and box 3 covering (1,-44) to (91,-24). The laser points south-east.\nThe beam bounces off the middle one (box 2), then into the top one (box 1) and finally destroying the bottom one (box 3).",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "Oh no! You are under attack by a swarm of boxen. The N (0 \u2264 N \u2264 1000) boxen are all rectangular with sides perpendicular to the axes. To help you defend against these menacing boxen, you have a giant laser at your disposal.\nThe laser is located at the origin and shoots a single beam in some fixed specified direction. The beam, upon encountering a box, will destroy and reflect off of that box.\nBeams are reflected so that if its first intersection point with a box is a horizontal segment of a box, the vertical component of the beam's direction is reversed. Similarly, the horizontal component is reversed when the beam hits a vertical segment. If the beam reflects off a corner of a box, both the horizontal and vertical components of its direction are reversed.\nOutput the indices of the destroyed boxes in the order that they are destroyed. It is guaranteed that no two boxes will have a common point and that no box contains the origin in its interior or boundary.",
  "Output": "Suppose there are k (k > 0) boxen that are destroyed. The output contains one number per line, with the ith line (i \u2264 k) containing the index of the box destroyed on the ith bounce. Notice that there is no output if k = 0.",
  "Title": "CCC09 Stage 2 - Invasion of the Boxen",
  "Input": "The first line contains N, the number of boxen.\nThe second line contains two integers dx and dy (-1000 \u2264 dx, dy \u2264 1000, not both zero), giving the direction in which the laser is pointed so that an unhindered beam fired from the origin will pass through (dx, dy).\nThe next N lines each contain 4 integers: xi yi wi and hi (where -1000 \u2264 xi, yi \u2264 1000 and 1 \u2264 wi, hi \u2264 1000) giving the description of the ith box which has lower left corner (xi, yi) and upper right corner (xi + wi, yi + hi)."
}{
  "Example": "Sample Input \n7 2\nGHHGHHG\nSample Output\n3\n",
  "Explanation": "There are seven competitors: a Gnold programmer followed by two Helpfile programmers, followed by another Gnold programmer, followed by another two Helpfile programmers followed by a final Gnold programmer. Programmers want to go to dinner in pairs.\nFirst send the first pair of Hs to dinner, leaving GGHHG. Then send the second pair of Hs to dinner, leaving GGG; finally, send in the group of Gs. It might be coincidental that the two pairs of Helpfile programmers entered the cafeteria successively.\n",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "On the way to dinner, the CCC competitors are lining up for their delicious curly fries. The N (1 \u2264 N \u2264 100) competitors have lined up single-file to enter the cafeteria.\nDoctor V, who runs the CCC, realized at the last minute that programmers simply hate standing in line next to programmers who use a different language. Thankfully, only two languages are allowed at the CCC: Gnold and Helpfile. Furthermore, the competitors have decided that they will only enter the cafeteria if they are in a group of at least K (1\u00a0\u2264\u00a0K\u00a0\u2264\u00a06) competitors.\nDoctor V decided to iterate the following scheme:\n He will find a group of K or more competitors who use the same language standing next to each other in line and send them to dinner.\n The remaining competitors will close the gap, potentially putting similar-language competitors together.\nSo Doctor V recorded the sequence of competitors for you. Can all the competitors dine? If so, what is the minimum number of groups of competitors to be sent to dinner?\nNote: Test cases worth 60% of the points have K \u2264 2. Out of these, on test cases worth one third of the points (20% of the total points), N \u2264 10.",
  "Output": "Output, on one line, the single number that is the minimum number of groups that are formed for dinner. If not all programmers can dine, output -1.",
  "Title": "CCC09 Stage 2 - Dinner",
  "Input": "The first line contains two integers N and K.\n  The second line contains N characters that are the sequence of competitors in line (H represents Helpfile, G represents Gnold)"
}{
  "Example": "Sample Input \n3 1 2 2 1 3\n  1 2 6\n  1\n  2\n  2\n  1\n3\nSample Output\nYES",
  "Explanation": "Stan travels from node 1 to 2 while Mario moves in the other direction. There is a geoduck on node 3.\nStan catches the Mario just as time expires, and fortunately none of them ever find a geoduck.",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "After perfecting the art of converting water to working C++ code, Stan Velikiy is once again facing his arch-nemesis, Mario the Wabbit. At the moment, Stan is chasing Mario on a circuit and you, as the amused observer, are being asked to predict the outcome.\nThe circuit can be thought as of series of nodes connected by wires of specified length. Stan and Mario each start at one of the nodes and travel along the nodes in a predetermined plan. They visit the nodes according to the plan, travelling along the wires at a speed of one meter per second. Once their travel plans run out, they stay stationary at that node.\nIf Stan and Mario are ever in the same location, Stan will apprehend Mario. If Stan exceeds a time limit of t he gives up and goes back to converting more water into C++ code.\nUnknown to either Stan or Mario, there is a series of geoducks sitting at various nodes of the circuit. Even though they look harmless, they are remnants of top-secret experiments on the Infinite Ambiguity Drive which causes whoever reaches them to disappear instantly. Once either Mario or Stan disappear, Stan can never find Mario. Note that if Stan finds Mario on a node with a geoduck, they both disappear and Stan never finds Mario.",
  "Output": "On one line, output YES if Stan catches Mario before the time limit expires, NO otherwise.",
  "Title": "CCC09 Stage 2 - Beware the Geoducks",
  "Input": "The first line contains six integers: V, the number of nodes (0 \u2264 V \u2264 100); E (0 \u2264 E \u2264 1000), the number of wires; S and M (1 \u2264 S, M \u2264 1000), the number of nodes in the routes taken by Stan and Mario, respectively; G (0 \u2264 G \u2264 100), the number of geoducks; and t (0 \u2264 t \u2264 1000), the time limit.\nThe next E lines contain 3 integers per line, specifying two nodes that a wire connects and the length l (1 \u2264 l \u2264 2000) of the wire. No wire connects a node to itself and there is at most one wire between two nodes.\nThe next S lines contain one integer per line, which indicate the nodes of Stan's route in the order of being visited.\nThe next M lines contain one integer per line, the nodes of the Mario's route in the order of being visited.\nThe last G lines contain one integer per line, where each line indicates the location (node) where there is a geoduck."
}{
  "Example": "Sample Input \n2 4\n  1 1 1\n  1 1 1\n  1 1 1 2\n  2 2 2 3\n  1 1 1 1\n2 1 1 4\nSample Output\n5 1 3 4\n  6 2 7 8\n  9 10 11 12\n  13 14 15 16\n  5 1 3 4\n  6 10 2 7\n  9 14 11 8\n  13 15 16 12\n  1 2 3 4\n  5 10 6 7\n  9 14 11 8\n  13 15 16 12\n  5 1 2 3\n  9 6 7 4\n  13 10 11 8\n14 15 16 12",
  "Explanation": "The two commands (1, 1, 1) leave the configuration unchanged. The first change (1, 1, 2) on the initial configuration causes the configuration to become the first configuration in this problem statement. That is,\nThe second change takes this configuration and applies (2, 2, 3).\nThe next change alters the first change to be the original command, and then, since the second command has been changed to (2, 2, 3), we have\nThe last change causes the second command to be (1, 1, 4) which rotates the outermost perimeter of the previous output.\n\u00a0",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "May 9 is VE day, when the annual victory parade is held through Red Square. Inspired by the award ceremony of the 2009 ACM World Finals, you have decided to recreate the original VE day parade digitally. Since you have skillfully obtained all the necessary hardware, the most difficult part remaining is to track the configuration of a single formation.\nA formation can be viewed as a 4-by-4 array, with the people initially labelled 1 through 16:\nThen a sequence of commands (r, c, k) are issued. Each command is a rotation based on the three integer parameters r, c and k:\nFor example, the command (1, 1, 2) would alter the initial board to:\nAs another example, (2, 2, 3) would bring the initial board to\nA third example, (1, 1, 4) would bring the initial board to\nYou have obtained the original sequence of commands issued. However, you are not quite pleased with the final result and would like to edit some of the commands. Support Q (1 \u2264 Q \u2264 100, 000) changes of the command sequence, each change as follows:\nFurthermore, you would like to see the effects of your change immediately. After each change, output what the formation would looks like at the end of all N commands. To re-emphasize, each change is cumulative and permanent.\nFor 30% of the test cases, 1 \u2264 N, Q \u2264 1000.",
  "Output": "For each change, print 4 lines, the final configuration of the formation after the modifications so far.",
  "Title": "CCC09 Stage 2 - Parade",
  "Input": "The first line contains two integers N and Q (1 \u2264 N, Q \u2264 100,000), which is the number of commands and number of edits, respectively.\nThe next N lines contain three integers per line: r c and k which describe each rotation command. Note that 1 \u2264 k \u2264 4, r + k - 1 \u2264 4 and c + k - 1 \u2264 4.\nThe next Q lines contain four integers per line: the first integer on the line is the 1-based index of the command whose detail is to be changed, followed by 3 integers, r', c', k', the new description of the command."
}{
  "Example": "Sample Input \n3 4 7\n  1 1.00\n  5 2.00\n  20 9.00\n  10 1.00\n  2\n  2\n  2\n  2\n  2\n  2\n2\nSample Output\n11.00",
  "Explanation": "You have seven 5-cent coins, and are making a purchase of 3 cents. The denominations are 1-cent, 5-cents, 10-cents, and 20-cents, with respective weights of 1 gram, 2 grams, 1 gram and 9 grams.\nThere are two optimal solutions. One is to spend three 5-cent coins, so that the store returns 12 cents to you, in the form of one 10-cent coin and two 1-cent coins. The other is to spend four 5-cent coins, so that the store returns 17 cents to you, in the form of one 10-cent coin, one 5-cent coin, and two 1-cent coins.",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "You like to make purchases using coins, but you have a problem: you have so much change that it is too heavy in your pocket. You have devised a plan to reduce the weight of your change, and you need to write a program to help you execute it.\nHere is your plan. The next purchase you make costs C (1 \u2264 C \u2264 100,000) cents, and you know how the store will pay back change if you pay extra. You want to select some of your coins that have total value at least C and make the purchase, such that you minimize the weight of the coins you did not spend added to the weight of the coins the store returns to you.\nIf the store owes you X cents, then it uses the following algorithm to pay you back. The store gives you the largest denomination coin that has value at most X, and repeats this until all X cents have been paid to you. You may assume the store has an unlimited amount of every denomination of coin.\nThere are D (1 \u2264 D \u2264 100) denominations of coins. The i'th denomination (1 \u2264 i \u2264 D) has integer value Vi (1 \u2264 Vi \u2264 2000) in cents and real-valued weight Wi (0 < Wi < 10) in grams. You may assume that one of the denominations has value 1 and that no two denominations have the same value.\nYou have K (1 \u2264 K \u2264 100) coins. The j'th coin (1 \u2264 j \u2264 K) is of the denomination with index Dj (1 \u2264 Dj \u2264 D).\nIn 20% of test cases, K \u2264 10.",
  "Output": "Output the minimum weight achievable rounded to two decimal places, if you can afford the purchase. If you cannot afford the purchase, print too poor. (no period)",
  "Title": "CCC09 Stage 2 - A Weighty Problem",
  "Input": "The first line contains three integers: C, the cost of the purchase in cents; D, the number of denominations of coins; and K, the number of coins you have.\nThe next D lines contain an integer Vi, the value of the i'th denomination in cents, and a real number given to two decimal places, Wi, the weight of the i'th denomination in grams.\nThe next K lines contain an integer Dj , the 1-based denomination of the j'th coin you have."
}{
  "Example": "Sample Input \ni\n20\n10\ni\n20\n9\nn\n20\nf\n20\ns\n20\n6\nq\nSample Output\n2\n3\n4",
  "Explanation": "n 20: Person 20 has two friends (10 and 9)\nf 20: The friends of friends of 20 are 8, 11, 12.\ns 20 6: The shortest path is 20 \u2192 9 \u2192 8 \u2192 7 \u2192 6.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The main socializing tool for students today is Facebook. There are many interesting computational questions connected to Facebook, such as the \"degree of separation\" between two people.\nFor example, in the diagram below, there are many different paths between Abby and Alberto. Some of these paths are:\nAbby \u2192 Zoey \u2192 Alberto\nAbby \u2192 Natalie\u2192 Zoey \u2192 Alberto\nAbby \u2192 George \u2192 Ali \u2192 Kara \u2192 Richardo \u2192 Jeff \u2192 Alberto\nThe shortest path between Abby and Alberto has two steps (Abby \u2192 Zoey, and Zoey \u2192 Alberto), so we say the degree of separation is 2. Additionally, Alberto would be a friend of a friend of Abby.\n\nYou can assume an initial configuration of who is friends with who as outlined in the diagram above. You will need to store these relationships in your program. These relationships can change though, and your program needs to handle these changes. In particular, friendships can begin, possibly with new people. Friendships can end. You should be able to find friends of friends and determine the degree of separation between two people.\nYour program will read in six possible commands, with the action to be performed by your program outlined below. You may assume that x and y are integers, with x \u2260 y, x \u2265 1, y \u2265 1, x < 50 and y < 50. You may also assume that instructions (i, d, n, f, s, q) occur one per line and parameters (zero, one or two integers) occur one per line.\ni x y - make person x and person y friends. If they are already friends, no change needs to be made. If either x or y is a new person, add them.\nd x y - delete the friendship between person x and person y.\nn x - output the number of friends that person x has.\nf x - output the number of \"friends of friends\" that person x has. Notice that x and direct friends of x are not counted as \"friends of friends.\"\ns x y - output the degree of separation between x and y. If there is no path from x to y, output \"Not connected\".\nq - quit the program.",
  "Title": "CCC09J5S3 - Degrees of Separation"
}{
  "Example": "Sample Input \n3\n3\n1 2 4\n2 3 2\n1 3 3\n3\n1 14\n2 8\n3 3\n1\nSample Output\n6",
  "Memory Limit": "256M",
  "Time Limit": "5.00s",
  "Description": "In Doubleclickland, there are N cities (N \u2264 5,000), with each city having various trade routes to other cities. In total, there are T trade routes (0 \u2264 T \u2264 25,000,000). in Doubleclickland. For each trade route between two cities x and y, there is a transportation cost C(x; y) to ship between the cities, where C(x, y) > 0, C(x, y) \u2264 10,000 and C(x, y) = C(y, x). Out of the N cities, K (1 \u2264 K \u2264 N) of these cities have stores with really nice pencils that can be purchased on-line. The price for each pencil in city x is Px (0 \u2264 Px \u2264 10,000).\nFind the minimal price to purchase one pencil on-line and have it shipped to a particular city D (1 \u2264 D \u2264 N) using the cheapest possible trade-route sequence. Notice that it is possible to purchase the pencil in city D and thus require no shipping charges.",
  "Output": "Output the minimal total cost of purchasing a pencil on-line and shipping it to city D.",
  "Title": "CCC09S4 - Shop and Ship",
  "Input": "The first line of input contains N, the number of cities. You can assume the cities are numbered from 1 to N. The second line of input contains T, the number of trade routes. The next T lines each contain 3 integers, x y C(x, y), to denote the cost of using the trade route between cities x and y is C(x, y). The next line contains the integer K, the number of cities with a store that sells really nice pencils on-line. The next K lines contains two integers, z and Pz, to denote that the cost of a pencil in city z is Pz. The last line contains the integer D, the destination city."
}{
  "Example": "Sample Input \n3\n5\n3\n1 3 2 5\n3 1 2 7\n5 1 1 5\nSample Output\n12\n5",
  "Explanation": "In the figure below, notice that the five coffee shops/intersections marked with a dark circle have total bitrates of 12.\n",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "Bob is sitting at home with his computer. He would like to experience more social interaction, so he is planning a trip to a coffee shop with his computer.\nBob has lots of data about wireless networks and coffee shops in the city. In Bob's city, there is one coffee shop at every intersection of streets. Specifically, Bob happens to live in a city with M streets (1 \u2264 M \u2264 30,000) that run east and west, and N streets (1 \u2264 N \u2264 1,000) that run north and south. As an added benefit, the distance between consecutive parallel streets is 1 metre (it is a very compact city).\nIt also turns out that inside K (1 \u2264 K \u2264 1,000) of the coffee shops, there is a wireless network station. Each wireless network station will have a particular bitrate B (1 \u2264 B \u2264 1,000) and can reach R metres (1 \u2264 R \u2264 30,000) from the coffee shop. In other words, a wireless network station from one coffee shop forms a circle with radius R centered at that particular coffee shop. Moreover, if someone is at distance R, the wireless network would be available, but if someone is at a distance larger than R, they cannot access that wireless point.\nYou can assume that each coffee shop has at most one wireless network stationed in it, but that multiple wireless networks may be available while sitting in that one coffee shop, due to the proximity of other wireless network stations.\nBob has a special device in his computer that can use all of the available bitrates of as many wireless networks as he can connect to.\nBob would like to find out the maximum bitrate he can obtain, and how many coffee shops would have that maximum capacity.",
  "Output": "The output will be two lines long. The first line of output will be the integer representing the maximum bitrate that can be obtained over all coffee shops. The second line of output will be the number of coffee shops where this maximum bitrate can be obtained.",
  "Title": "CCC09S5 - Wireless",
  "Input": "On the first line of input, you will be given the integer M, the number of east-west streets.\n  On the second line of input, you will be given the integer N, the number of north-south streets.\n  On the third line of input, you will be given the integer K, the number of coffee shops with a wireless network. On the next K lines, you will have 4 integers per line.\nThe first integer x on each line represents the north-south street on which the coffee shop is located, where 1 \u2264 x \u2264 N. The second integer, y, on each line represents the east-west street on which the coffee shop is located, where 1 \u2264 y \u2264 M. The third integer, R, on each line represents the radius of the wireless network from this particular coffee shop. The fourth integer, B, on each line represents the bitrate of the wireless network from this particular coffee shop."
}{
  "Example": "Sample Input \n4\nSample Output\n3",
  "Input Format": "A single integer n (1\u00a0\u2264\u00a0n\u00a0\u2264\u00a010).",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Natalie is learning to count on her fingers. When her Daddy tells her a number n,\nshe asks \u201cWhat is n, Daddy?\u201d, by which she means \u201cHow many fingers should I hold up on each\nhand so that the total is n?\u201d\nTo make matters simple, her Daddy gives her the correct finger representation according to the\nfollowing rules:\nthe number may be represented on one or two hands;\nif the number is represented on two hands, the larger number is given first.\nFor example, if Natalie asks \u201cWhat is 4, Daddy?\u201d, her Dad may reply:\n4 is 4.\n4 is 3 and 1.\n4 is 2 and 2.\nYour job is to make sure that Natalie\u2019s Daddy gives the correct number of answers.",
  "Output Format": "The output is the number of ways of producing that number on two hands, subject to the rules\noutlined above.",
  "Title": "CCC10J1 - What is n, Daddy?"
}{
  "Example": "Sample Input \n4\n2\n5\n3\n12\nSample Output\nByron",
  "Explanation": "Notice that after 12 steps, Nikky has moved 4\u00a0\u2212\u00a02\u00a0+\u00a04\u00a0\u2212\u00a02 steps, for a total of 4 steps from the\nstarting position, whereas Byron has moved 5\u00a0\u2212\u00a03\u00a0+\u00a04 steps, for a total of 6 steps from the starting\nposition. Thus, Byron is ahead.",
  "Memory Limit": "16M",
  "Input Format": "The input will be the 5 integers a, b, c, d (1\u00a0\u2264\u00a0a,\u00a0b,\u00a0c,\u00a0d\u00a0\u2264\u00a0100), and s (1\u00a0\u2264\u00a0s\u00a0\u2264\u00a010000), each on a separate line.",
  "Time Limit": "2.00s",
  "Description": "Nikky and Byron are playing a silly game in gym class.\n\t\tNikky is told by his teacher to walk forward a steps and then walk backward b\n\t\tsteps, after which he repeats a forward, b backward, etc. Likewise, Byron is told to\n\t\t\t\twalk forward c steps and then walk backward d steps, after which he repeats c forward, d backward, etc. You may assume that a\u00a0\u2265\u00a0b and c\u00a0\u2265\u00a0d.\nByron and Nikky have the same length of step, and they are required to take their steps simultaneously\n(that is, Nikky and Byron will both step forward on their first steps at the same time, and this\nwill continue for each step).\nNikky and Byron start walking from one end of a soccer field. After s steps,\nthe gym teacher will blow the whistle. Your task is to figure out who has moved the farthest away\nfrom the starting position when the whistle is blown.",
  "Output Format": "The output of your program will be one of three possibilities: Nikky if Nikky is farther ahead\nafter s steps are taken; Byron if Byron is farther ahead after s steps are taken; Tied if Byron and\nNikky are at the same distance from their starting position after s steps are taken.",
  "Title": "CCC10J2 - Up and Down"
}{
  "Example": "Sample Input \n1 A 3\n1 B 4\n2 B\n2 A\n3 A B\n2 A\n5 A A\n2 A\n2 B\n7\nSample Output\n4\n3\n7\n0\n4",
  "Input Format": "The programming language that Bill is using has only two variables (A and B) and seven different\ntypes of instructions.\nInitially, the variables A and B contain the value 0.\nThere is one instruction per line. An instruction is an integer in the range 1\u20267, possibly followed\nby a variable name, which in turn is possibly followed by either a number or a variable.\nIn all instructions below, the variable X or Y may refer to either A or B. The specific instructions\nare:\n1 X n means set the variable X to the integer value n;\n2 X means output the value of variable X to the screen;\n3 X Y means calculate X\u00a0+\u00a0Y and store the value in variable X;\n4 X Y means calculate X\u00a0\u00d7\u00a0Y and store the value in variable X;\n5 X Y means calculate X\u00a0\u2212\u00a0Y and store the value in variable X;\n6 X Y means calculate the quotient of X/Y and store the value in variable X as an integer, discarding the remainder.\n7 means stop execution of this program.\nYou may assume that all division instructions do not cause a division by zero, and that all other\noperations (including instruction 1) do not cause the computed/stored value to be larger than 10000\nor smaller than \u221210000.\n(To clarify division of negative numbers, \u22123/2 and 3/\u22122 both have quotient \u22121 and \u22123/\u22122 has\nquotient 1.)",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "In the early days of computing, instructions had to be \u201cpunched\u201d onto rectangular cards, one instruction\nper card. This card deck was then fed into a card reader so the program could be read and\nexecuted. Students put elastic bands around their card deck, and, often, carried their cards in a box\nfor fear that they would become rearranged, and thus, their program would be incorrect.\nPoor Bill though...he left his cards right near a window and the wind blew his neat deck of cards\nall over the place, and thus his program is out of order! Bill decides to pick up the cards in some\nrandom order and then execute the program.\nWrite a program to read and execute the commands in Bill\u2019s \u201cnew\u201d program.",
  "Output Format": "Your program should output the value of the indicated variables, one integer per line, until the\n\u201cstop\u201d instruction has been read in, at which time your program should stop execution.",
  "Title": "CCC10J3 - Punchy"
}{
  "Example": "Sample Input \n7 3 4 6 4 5 7 5\n3 1 3 5\n3 1 4 5\n4 3 4 6 7\n0\nSample Output\n3\n1\n2\n2",
  "Input Format": "The input consists of a number of test cases. Each test case starts with the number n (1\u00a0\u2264\u00a0n\u00a0\u2264\u00a020),\nrepresenting the number of temperatures in a sequence, followed by the sequence of n temperatures.\nYou may assume that each temperature input is an integer in the range \u22121000\u20261000,\ninclusive. The numbers are separated by a single space. The last test case is indicated by a zero\nand should produce no output.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Your task is to help scientists predict the trend of the global warming. One of the hypotheses they\nare considering is that over long periods of time, the average temperature follows certain cycles,\nbut each time the cycle starts from a higher temperature level. The temperatures are measured over\nfive-year averages, and expressed in tenths of a degree.\nFor example, if the following five-year averages are observed:\n3, 4, 6, 4, 5, 7, 5\nthen we can calculate that the temperature changes first 1 tenth up, then 2 up, then 2 down, 1 up,\n2 up, and 2 down. There is a cycle of changes of length three which covers all of the temperature\ndifferences: (+1,\u00a0+2,\u00a0\u22122). In other words, if we look at the differences starting at the first position,\nthere is a cycle of length three of the form (+1,\u00a0+2,\u00a0\u22122) followed by another cycle of length three\nof exactly the same form.\nBy way of another example, suppose the following average temperatures are observed:\n3, 4, 6, 7\nIn this case, there is a difference of one up, two up, then one up. We would consider the shortest\ncycle to be length two in this case: the cycle (+1,\u00a0+2). Notice that this cycle occurs once, followed\nby one truncated occurrence of exactly the same cycle.\nYour task is to find the shortest such cycle from a given sequence of temperatures.",
  "Output Format": "For each test case, produce the length of the shortest temperature cycle. The cycle always exists,\nsince the whole sequence could be treated as one long cycle.",
  "Title": "CCC10J4 - Global Warming"
}{
  "Title": "CCC10J5 - Knight Hop",
  "Sample Cases": "",
  "Input Format": "Your program will read four integers, where each integer is in the range 1\u20268. The first two integers\nrepresent the starting position of the knight. The second two integers represent the final position\nof the knight.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Below is an 8\u00a0\u00d7\u00a08 chessboard on which we will designate square locations using the ordered pairs\nas indicated. For example, notice that piece A is at position (2,\u00a02) and piece B is at position (4,\u00a03).\n\nA knight is a special game piece that can leap over other pieces, moving in the \u201cL\u201d pattern. Specifically,\nin the diagram below, K represents the knight\u2019s starting position and the numbers 1 through\n8 represent possible places the knight may move to.\n\nYour program will read the starting location of the knight and output the smallest number of jumps\nor moves needed to arrive at a location specified in the second input.",
  "Output": "2",
  "Output Format": "Your program should output the minimum (non-negative integer) number of moves required to\nmove the knight from the starting position to the final position. Note that the knight is not allowed\nto move off the board during the sequence of moves.",
  "Input": "4 2\n7 5"
}{
  "Example": "Sample Input \n4\nABC 13 22 1\nDEF 10 20 30\nGHI 11 2 2\nJKL 20 20 20\nSample Output\nJKL\nDEF",
  "Explanation": "Computer ABC has a computed value of 93. Computer DEF has a computer value of\n110. Computer GHI has a computed value of 30. Computer JKL has a computed value\nof 120. Therefore, computer JKL is the most preferred, followed by computer\nDEF.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "In order to increase your performance on the ABC (Another Buying Contest),\nyou decide that you need a new computer. When determining which computer to buy,\nyou narrow your search categories to:\nRAM (in gigabytes), denoted as R;\nCPU speed (in megahertz), denoted as S;\ndisk drive space (in gigabytes), denoted as D.\nYou perform some analysis and determine that the most preferred machine is the\nmachine that has the largest value of the expression\n2R+3S+D. Your task is to read a given list of\ncomputers and output the top two computers in order of preference, from highest\npreference to lowest preference.",
  "Output": "The output is the name of the top two preferred computers, one name per line,\nsorted in decreasing order of preference. If there is a tie in the rankings,\npick the computer(s) whose name(s) are lexicographically smallest\n(i.e., \"Apple\" is smaller than \"Dell\"). If there is only one computer,\noutput that computer on one line (i.e., do not print it twice). If there\nare no computers, print nothing.",
  "Title": "CCC10S1 - Computer Purchase",
  "Input": "The first line of input will be an integer n (0 \u2264 n\n\u2264 10000). Each of the remaining n lines of input will contain a\ncomputer specification. A computer specification is of the form:\ncomputer name (a string of less than 20 characters)\nthe RAM available (an integer R with 1 \u2264 R \u2264\n128)\nthe CPU speed (an integer S with 1 \u2264 S \u2264 4000)\n\nthe disk drive space (an integer D with 1 \u2264 D\n\u2264 3000)\nThere is one space between the name, RAM, CPU speed, and disk drive space on\neach line."
}{
  "Example": "Sample Input \n5\nA 00\nB 01\nC 10\nD 110\nE 111\n00000101111\nSample Output\nAABBE",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "There is an ingenious text-compression algorithm called Huffman\ncoding, designed by David Huffman in 1952.\nThe basic idea is that each character is associated with a binary sequence\n(i.e., a sequence of 0s and 1s). These binary sequences satisfy the\nprefix-free property: a binary sequence for one character is never a\nprefix of another character's binary sequence.\nIt is worth noting that to construct a prefix-free binary sequence, simply\nput the characters as the leaves of a binary tree, and label the \"left\" edge as\n0 and the \"right\" edge as 1. The path from the root to a leaf node forms the\ncode for the character at that leaf node. For example, the following binary tree\nconstructs a prefix-free binary sequence for the characters {A, B, C, D, E}:\n\nThat is, A is encoded as 00, B is encoded as 01, C is encoded as 10, D is\nencoded 110 and E is encoded as 111.\nThe benefit of a set of codes having the prefix-free property is that any\nsequence of these codes can be uniquely decoded into the original characters.\n\nYour task is to read a Huffman code (i.e., a set of characters and\nassociated binary sequences) along with a binary sequence, and decode the\nbinary sequence to its character representation.",
  "Output": "On one line, output the characters that correspond to the given binary\nsequence.",
  "Title": "CCC10S2 - Huffman Encoding",
  "Input": "The first line of input will be an integer k (1 \u2264 k\n\u2264 20), representing the number of characters and associated codes. The next\nk lines each contain a single character, followed by a space,\nfollowed by the binary sequence (of length at most 10) representing the\nassociated code of that character. You may assume that the character is an\nalphabet character (i.e., 'a'...'z' and 'A'..'Z'). You may assume that\nthe sequence of binary codes has the prefix-free property. On the\n(k + 2)th line is the binary sequence which is to be decoded. You\nmay assume the binary sequence contains codes associated with the given\ncharacters, and that the (k + 2)th line contains no more than 250\nbinary digits."
}{
  "Example": "Sample Input \n3\n1\n1\n3\n3\n1 2\n2 3\n3 1\n10\nSample Output 1\n3\n2\n2\nSample Input 2\n3\n3\n1\n3\n3\n1 2\n2 3\n3 1\n10\nSample Output 2\n2\n2\n1",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "You live in a neighbourhood of dogs. Dogs like dogs. Dogs like barking even\nbetter. But best of all, dogs like barking when other dogs bark.\nEach dog has a collection of dogs that can hear him/her. Each dog has a delay\ntime in barking if they hear another dog bark.\nDog 1 always starts barking first, and this first bark occurs during second\nnumber 0.\nYour job is to figure out how many times each dog has barked in the first\nT seconds (inclusive). You can assume that sound travels instantly\nfrom the mouth of one dog into the ear of another.\nEach dog spends any given second doing one of three things: sleeping,\nwaiting, or barking. If dog i hears a bark during second n\nwhen it is sleeping, the dog wakes up and waits during seconds n + 1\nthrough n + wi \u2212 1 inclusive, barks during second\nn + wi, then goes back to sleep from second\nn + wi + 1 onward. If a dog hears a bark during a\nsecond in which it is waiting or barking, it ignores the bark.\nDuring second number 0, all the dogs except Dog 1 are sleeping.",
  "Output": "Produce one line of output for each dog in order from dog 1 to dog\nD. On line i, output the number of seconds between 0 and\nT inclusive that dog i spent barking.",
  "Title": "CCC10 Stage 2 - Barking Dogs!",
  "Input": "The first line of input is D (1 \u2264 D \u2264 1000), the\nnumber of dogs in the neighbourhood.\nThe next D lines each contain an integer wi\n(1 \u2264 wi \u2264 1000) representing the time (in seconds)\nthat dog i waits before barking upon hearing a bark.\nThe next line contains the number F (1 \u2264 F <\n10000). On each of the next F lines, there are two integers:\ni and j, representing that when dog i barks,\ndog j hears this bark. It is never the case that\ni = j.\nThe next line (which is the last line of input) contains the integer\nT (1 \u2264 T \u2264 1000), the number of seconds during which\nyour program is to monitor the dogs."
}{
  "Example": "Sample Input \n6 3\n0 1 2\n1\n3\n1 1 2\n2\n5\n2 1 1\n4\n3 1 0\n4 0 0\n5 1 0\nSample Output\n1",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "We are given a rooted tree with N nodes in which each node has at\nmost two children. (Yes, Jacob, at most two.) Each node may be black or\nwhite. We define a \"prune\" as the deletion of a node and the subtree rooted at\nthat node from the tree. Given an integer D, find the minimum number\nof \"prunes\" required to obtain a tree in which the number of white nodes minus\nthe number of black nodes is exactly D, or determine that it is\nimpossible to do so.",
  "Output": "On one line, output the minimum number of \"prunes\", as mentioned in the\nproblem description. If it is impossible to obtain the required difference\nD, output -1.",
  "Title": "CCC10 Stage 2 - Tree Pruning",
  "Input": "The first line of input will contain two integers N\n(1 \u2264 N \u2264 300) and D\n(-N \u2264 D \u2264 N), representing the number of\nnodes in the tree and the required difference, respectively. The next\nN blocks of input each contain the description of a node. The first\nline of each block contains three integers: the id of the node (a unique integer\nbetween 0 and N-1), the colour of the node (1 for a white node, 0 for\na black node) and an integer C that represents the number of children\nof the node. C lines follow, each one containing an integer that\nrepresents the id of one child. The root of the tree is the node with id 0."
}{
  "Example": "Sample Input \n4\n0\n67000\n68000\n77000\n2\n\nSample Output\n5000\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "There is a very unusual street in your neighbourhood. This street forms a perfect\ncircle, and the circumference of the circle is 1,000,000. There are H\n(1 \u2264 H \u2264 1000) houses on the street. The address of each house is the clockwise\narc-length from the northern-most point of the circle. The address of the house at the\nnorthern-most point of the circle is 0.\n\nYou also have special firehoses which follow the curve of the street. However, you wish\nto keep the length of the longest hose you require to a minimum.\n\nYour task is to place k (1 \u2264 k \u2264 1000) fire hydrants on this street so\nthat the maximum length of hose required to connect a house to a fire hydrant is as\nsmall as possible.\n",
  "Output": "",
  "Title": "CCC10S3 - Firehose",
  "Input": ""
}{
  "Example": "Sample Input \n4\n3 1 2 3 7 4 6\n4 1 2 4 5 7 7 2 6\n4 4 7 6 5 4 8 9 2\n5 3 2 4 7 8 4 7 4 7 7\nSample Output\n10",
  "Explanation": "The diagram below explains the input data:\n\n\nwhere the circled numbers are the corners, and the numbers in italics\nare the edge costs. Notice that if the edges (2,3), (4,5), and (4,7) are\nremoved, all the animals can meet in the pen which has five sides.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You are running a farm which has N (1 \u2264 N \u2264 100)\nanimals. You went to the store and bought M = N pre-made\npens that will house your animals. Pens satisfy the following conditions:\npens have between 3 and 8 edges;\nan edge that is specified by two pens connects the two pens;\nan edge that is specified only once connects that pen to the outside;\nthere is exactly one animal in each pen and no animals outside the pens,\ninitially.\nThe animals, however, have a game they like to play called \"Escape from the\npen.\" They assign a cost to each edge of the pen, and they determine the\nminimum cost for all of the animals to meet in the same area by trampling over\nthe edge of various pens. The animals may meet inside a particular pen or\noutside of all the pens. Also note that once an edge has been trampled, any\nanimal may pass over it without incurring any cost.\nYou will be given a description of the pens, along with the placement of\nanimals, and you are to figure out what the smallest cost is to move all the\nanimals into the same area.",
  "Output": "On one line, output the minimal cost that will allow all the animals to\ngather in one pen or outside all of the pens.",
  "Title": "CCC10S4 - Animal Farm",
  "Input": "The first line of input will be the integer M, the number of pens.\nOn the next M lines, there will be a description of each pen, with\none description per line. The description is composed of three components, with\neach component separated by one space, as follows:\nthe first component is an integer ep (3 \u2264\nep), which describes the number of edges for this\nparticular pen p;\nthe second component is a sequence of ep integers\ndescribing the corners of each pen, where each integer is less than or equal\nto 1000;\nthe third component is a sequence of ep integers\ndescribing the cost of each edge, where each integer is less than or equal to\n5000.\nFor the corner and edge cost description, the descriptions are given in\ncyclical order. For example, the pen description \"3 1 2 3 7 4 6\" means that\nthere are three corners, and thus, three edges, where the edge (1,2) has cost\n7, the edge (2,3) has cost 4 and the edge (3,1) has cost 6. Note: at least 20%\nof the marks for this question have N \u2264 10 and no pen will have\nmore than four edges in these cases."
}{
  "Example": "Sample Input \n(5 ((7 1) (3 4)))\n3\nSample Output\n7",
  "Explanation": "The tree description can be illustrated as:\n\n\nNotice that if we put two growth factors on the left edge of the root, and one\ngrowth factor on the right edge of the root. Then, there will be 5 nutrients\nflowing from the leaf labelled 5 to the root (since the capacity is\n(1+2)2 = 9 units of nutrients) and 2 nutrients flowing from the right\nsubtree (since the capacity is (1+1)2 = 4, but there are only 2 units\nof nutrients due to limits of 1 on the edges attached to all other leaves).\nAlternatively, notice that increasing the nutrient production of the left\nleaf of the root to 6, and increasing the capacity of the root to the left\nleaf by 2 (to give a capacity of (1+2)2 = 9 units) would cause 6\nunits of nutrients to flow into the root from the left tree, and the right\nsubtree of the root would produce 1 unit of nutrient.\nIn both cases, the maximum amount of nutrients that can reach the root node\nis 7.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "There is a binary tree with l leaves (1 \u2264 l \u2264 50)\nwhere each leaf k has an amount of nutrients nk\n(1 \u2264 nk \u2264 10000) that it produces.\nThe branches (which you can think of as edges) of this binary tree limit the\nmaximum amount of nutrients that can flow to the root of the tree. You have\nX growth agents (1 \u2264 X \u2264 2500) that can be used to\nincrease the thickness of an edge or increase the nutrient production of a leaf\nnode. Initially, each edge has a weight of 1 and if you give it w\ngrowth agents then it can transport (1 + w)2 nutrients.\nIncreasing the nutrient production of a leaf with initial value\nnk by s raises the nutrient production of that\nleaf to nk + s.\nNotice that when edges meet, the amount of nutrient that flows is the sum of\nnutrients flowing along the incoming edges.\nFind the maximum amount of nutrients you can transport to the root.",
  "Output": "On one line, output the maximum amount of nutrients that can flow into the\nroot of the tree.",
  "Title": "CCC10S5 - Nutrient Tree",
  "Input": "The first line of input will be a description of the tree. This description\ncan be defined recursively as either an integer nk\n(1 \u2264 nk \u2264 10000) or as\n(TLTR) where TL and\nTR are descriptions of the left and right subtrees,\nrespectively. The second line of input will be the integer X, the\namount of growth agents you have. Note: at least 30% of the marks for this\nquestion have l \u2264 5 and X \u2264 50."
}{
  "Example": "Sample Input \n7\nN 10 1000\nN 3 1014\nQ 1\nM 10 2000\nQ 1\nN 65 1950\nQ 2\nSample Output\n3\n10\n65",
  "Memory Limit": "256M",
  "Time Limit": "3.00s",
  "Description": "In the World of World of\nWarcraft, there is a very competitive ladder system. Sometimes players will\nchange their rating. Also, new players (including more and more of your\nfriends!) are constantly joining the game.\nYou and your group of friends would like to maintain a simple database with\nyour scores, and you, as the computer scientist of the group, have been charged\nwith the responsibility of maintaining it. Don't let your friends down!",
  "Output": "For each line of input of the format Q K, you will\noutput a line containing the identifier of the Kth highest rated\nperson in the database at that point. Note that when K = 1, that\nis the top rated person, and K = 2 is the second best rated person,\nand so on.",
  "Title": "CCC10 Stage 2 - Wowow",
  "Input": "The input will consist of an integer N (1 \u2264 N \u2264\n106), followed by N lines. Each of these N\nlines will correspond to one of the following three formats:\nN X R, where N is the character\n'N' to indicate a new friend has been added, X is a\nnumber (1 \u2264 X \u2264 106) identifying this new friend,\nand R (1 \u2264 R \u2264 108) is the rating of this\nnew friend.\nM X R, where M is the character\n'M' to indicate a modification of an existing friend, X\nis a number (1 \u2264 X \u2264 106) identifying one of your\nfriends, and R is the new rating assigned to this existing friend.\n\nQ K, where Q is the character\n'Q' to represent a query, K is a number\n(1 \u2264 K \u2264 106), and K is at most the\nnumber of your friends that have a rating at this point.\nYou may assume there will be no identical ratings in the input."
}{
  "Example": "Sample Input \n2\n5\n10 6 1\n5 7 1\n6 10 2\n1 5 1\n11 11 2\n16\nSample Output\n18",
  "Explanation": "Notice that picking the components with cost 11 and 5 yields a computer with\nvalue 18. No other combination of components has a higher value.",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "After considering to buy a brand new Atari or Commodore computer (based on\nyour extensive research in late February), you decide to get the best value for\nyour dollar by building your own.\nThe computer that you are going to build is composed of T\n(1 \u2264 T \u2264 5) different types of components. Your computer must\nhave exactly one of each type of component.\nEach component has an integer cost ci\n(1 \u2264 ci \u2264 3000), an integer value\nvi (1 \u2264 vi \u2264 3000), and type\nti (1 \u2264 ti \u2264 T).\n\nYour on-line computer parts store has N different\ncomponents (1 \u2264 N \u2264 1000) that you can select from.\nFor a given budget B (1 \u2264 B \u2264 3000), maximize the\ntotal value of the components in your computer.\nIf you cannot construct such a computer, you should print -1.",
  "Output": "Output the value of the maximum valued computer you can create which costs at\nmost B, or -1 if you cannot construct a computer.",
  "Title": "CCC10 Stage 2 - Computer Purchase Return",
  "Input": "The first line contains T, the number of types of components your\ncomputer requires. The next line contains the number N, followed by\nN lines of three integers, representing ci,\nvi, and ti, each separated by one\nspace. The last line of input is the budget B."
}{
  "Example": "Sample Input \n3\n10 0 0 1 1\n0 10 0 2 1\n0 0 10 4 1\n3\n8 0 0\n0 7 0\n0 0 9\n1\nSample Output\n5",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "There are M (1 \u2264 M \u2264 1000) planets each with\nvi (1 \u2264 vi \u2264 10000) units of\nresources and radius ri (1 \u2264 ri\n\u2264 100).\nStarting from (0,0,0), you travel in straight lines through N\n(1 \u2264 N \u2264 1000) waypoints in a specific order.\nWhenever you travel within D+ri\n(1 \u2264 D \u2264 50) units from a planet's center, you can mine the\nplanet using your tractor beam retrieving vi units of\nresources. Note that if you are exactly D units from the surface of\nthe planet, you can mine the planet. If your path takes you through a planet, do\nnot worry, since your spaceship can drill through planets, which makes mining\neven easier. Also note that you cannot mine the same planet on a subsequent\nvisit.\nGive the number of minerals that can be mined on your journey.",
  "Output": "On one line, output the amount of minerals that you can mine on your\njourney.",
  "Title": "CCC10 Stage 2 - Space Miner",
  "Input": "On the first line of input is the number M, the number of planets.\nOn the next M lines are five integers describing each of the\nM planets. These integers are\nxiyiziviri,\nwhere the planet i is at position\n(xi,yi,zi),\n(where -1000 \u2264 xi, yi,\nzi \u2264 1000).\nAfter the M planets, there is line containing the integer\nN, followed by N lines (each with three integers\nx, y, and z) describing the points on your route\nin order.\nThe last line of input is the number\nD, the maximum distance from a planet's surface that your ship can be\nand still mine a planet."
}{
  "Example": "Sample Input \nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ\n_\nA\n3\nI_LOVE_THE_CCC\nSample Output\nLCORYHCWKHCFFF",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "You want to keep some secrets, so you invent a simple encryption\nalgorithm.\nYou will map each uppercase character and underscore to some other\nuppercase character or underscore. In other words, this is a permutation of the\ncharacters, or, to put it another way, you create a 1:1 and onto map from\n{'A', 'B', ...., 'Z', '-'}\nto {'A', 'B', ...., 'Z',\n'-'}.\nHowever, you will repeatedly apply this encryption in an attempt to make your\nmessage more secure.",
  "Output": "On one line, output the string created after shuffling T a total\nof N times, using the given shuffle permutation.",
  "Title": "CCC10 Stage 2 - Shuffle",
  "Input": "The input will be 29 lines long. The first 27 lines will each contain a\nsingle integer from the set {'A', 'B', ....,\n'Z', '-'}. The first of these lines represents what\nthe character 'A' maps to, the second of these lines represents\nwhat the character 'B' maps to, and so on, until the 27th line\nrepresents what the underscore character maps to.\nOn the 28th line will be an integer N (1 \u2264 N\n\u2264 2\u00d7109), which represents the number of times this\nencryption should be applied.\nOn the 29th line is T, a string of less than 80 characters from\nthe set {'A', 'B', ...., 'Z',\n'-'}."
}{
  "Title": "CCC11J1 - Which Alien?",
  "Sample Cases": "",
  "Input Format": "The user will be prompted to enter two numbers. First, the user will be prompted to enter the\nnumber of antenna that the witness claimed to have seen on the alien. Second, the user will be\nprompted to enter the number of eyes seen on the alien.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Canada Cosmos Control has received a report of another incident. They believe that an alien has\nillegally entered our space. A person who witnessed the appearance of the alien has come forward\nto describe the alien\u2019s appearance. It is your role within the CCC to determine which alien has\narrived. There are only 3 alien species that we are aware of, described below:\nTroyMartian, who has at least 3 antenna and at most 4 eyes;\nVladSaturnian, who has at most 6 antenna and at least 2 eyes;\nGraemeMercurian, who has at most 2 antenna and at most 3 eyes.",
  "Output": "",
  "Output Format": "The output will be the list of aliens who match the possible description given by the witness. If no\naliens match the description, there is no output.",
  "Input": "8\n6"
}{
  "Title": "CCC11J2 - Who Has Seen the Wind",
  "Sample Cases": "",
  "Input Format": "The input is two non-negative integers: h (0\u00a0\u2264\u00a0h\u00a0\u2264\u00a0100), the humidity factor, followed by M (0\u00a0<\u00a0M\u00a0<\u00a0240), the maximum\nnumber of hours Margaret will wait for the weather balloon to return to ground.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Margaret has looked at the wind floating over the prairies for a long time. After these observations,\nshe has created a formula that will describe the altitude of a weather balloon launched from her\nhouse. In particular, her equation predicts the altitude A (in metres above the ground) at hour t\nafter launching her balloon is:\n\nwhere h is an integer value representing the humidity as a value between 0 and 100 inclusive.\nMargaret is curious at what the earliest hour is (if any) that her weather balloon will hit the ground\nafter launch, so long as it is no more than the maximum time, M, that Margaret is willing to wait.\n\tYou can assume that the weather balloon touches ground when A\u00a0\u2264\u00a00.",
  "Output": "The balloon does not touch ground in the given time.",
  "Output Format": "The output will be one of the following possibilities:\nThe balloon does not touch ground in the given time.\nThe balloon first touches ground at hour:\nT\nwhere T is a positive integer value representing the earliest hour when the balloon has altitude less than or equal to zero.",
  "Input": "70\n10"
}{
  "Example": "Sample Input \n120\n71\nSample Output\n5",
  "Input Format": "The input will be two positive integers t1 and t2 (0\u00a0<\u00a0t2\u00a0<\u00a0t1\u00a0<\u00a010000).",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "In a sumac sequence, t1, t2, \u2026, tm, each term is an integer greater than or equal to 0. Also, each term, starting with the third, is the difference of the preceding two terms (that is, tn+2\u00a0=\u00a0tn\u00a0\u2212\u00a0tn+1 for n\u00a0\u2265\u00a01). The sequence terminates at tm if tm\u22121\u00a0<\u00a0tm.\nFor example, if we have 120 and 71, then the sumac sequence generated is as follows:\n120, 71, 49, 22, 27\nThis is a sumac sequence of length 5.",
  "Output Format": "The output will be the length of the sumac sequence given by the starting numbers t1 and t2.",
  "Title": "CCC11J3 - Sumac Sequences"
}{
  "Title": "CCC11J4 - Boring Business",
  "Sample Cases": "",
  "Input Format": "The input consists of a sequence of drilling command pairs. A drilling command pair begins with\none of four direction indicators (d for down, u for up, l for left, and r for right) followed by a\npositive length. There is an additional drilling command indicated by q (quit) followed by any\ninteger, which indicates the program should stop execution. You can assume that the input is such\nthat the drill point will not:\nrise above the ground, nor\nbe more than 200 units below ground, nor\nbe more than 200 units to the left of the original starting point, nor\nbe more than 200 units to the right of the original starting point.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Boring is a type of drilling, specifically, the drilling of a tunnel, well, or hole in the earth. With\nsome recent events, such as the Deepwater Horizon oil spill and the rescue of Chilean miners, the\npublic became aware of the sophistication of the current boring technology. Using the technique\nknown as geosteering, drill operators can drill wells vertically, horizontally, or even on a slant\nangle.\nA well plan is prepared before drilling, which specifies a sequence of lines, representing a geometrical\nshape of the future well. However, as new information becomes available during drilling, the\nmodel can be updated and the well plan modified.\nYour task is to write a program that verifies validity of a well plan by verifying that the borehole\nwill not intersect itself. A two-dimensional well plan is used to represent a vertical cross-section\nof the borehole, and this well plan includes some drilling that has occurred starting at (0,\u00a0\u22121) and\nmoving to (\u22121,\u00a0\u22125). You will encode in your program the current well plan shown in the figure\nbelow:\n",
  "Output": "1 -5 safe\n1 -15 DANGER",
  "Output Format": "The program should continue to monitor drilling assuming that the well shown in the figure has\nalready been made. As we can see (\u22121,\u00a0\u22125) is the starting position for your program. After each\ncommand, the program must output one line with the coordinates of the new position of the drill,\nand one of the two comments safe, if there has been no intersection with a previous position or\nDANGER if there has been an intersection with a previous borehole location. After detecting and\nreporting a self-intersection, your program must stop.",
  "Input": "r 2\nd 10\nr 4"
}{
  "Example": "Sample Input \n4\n3\n4\n4\nSample Output 2\n6",
  "Explanation": "There are 4 people in the network. Here is a table of who invited whom:\nThe possible sets are {}, {1}, {2}, {1,2}, {1,3}, and {1,2,3}. Notice that the sets {3} and {2,3} are not psosible, since when you remove 3, you must also remove 1.",
  "Memory Limit": "16M",
  "Input Format": "The first line contains a single integer N (N\u00a0\u2264\u00a06), the number of people in the network. Next are N\u00a0\u2212\u00a01 lines telling us who invited each person. To be precise, line i in this set (1\u00a0\u2264\u00a0i\u00a0\u2264\u00a0N\u00a0\u2212\u00a01) contains a single integer j (j\u00a0>\u00a0i), which indicates that person j is the person who invited person i. Person N is Mark.",
  "Time Limit": "2.00s",
  "Description": "Mark invited some people to join his social network. Some of them invited new people, who\ninvited new people, and so on. Now there are N people in the network, numbered from 1 to N.\nMark has decided to remove some people and keep others. There is one restriction: when removing\na person, he will also remove the people s/he invited, and the people they invited, and so on. Mark\nwill never remove himself, and we do not allow people to be invited by more than one person.\nMark can also decide to not remove anyone.\nHow many different sets of people can be removed?",
  "Output Format": "Output a single integer, the number of possible sets of people that can be removed.",
  "Title": "CCC11J5 - Unfriend"
}{
  "Title": "CCC11S1 - English or French?",
  "Sample Cases": "",
  "Input Format": "The input will contain the number N (0\u00a0<\u00a0N\u00a0<\u00a010000) followed by N lines of text, where each line has at least one character and no more than 100 characters.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You would like to do some experiments in natural language processing. Natural language processing (NLP) involves using machines to recognize human languages.\nYour first idea is to write a program that can distinguish English text from French text.\nAfter some analysis, you have concluded that a very reasonable way of distinguishing these two languages is to compare the occurrences of the letters \"t\" and \"T\" to the occurrences of the letters \"s\" and \"S\". Specifically:\nif the given text has more \"t\" and \"T\" characters than \"s\" and \"S\" characters, we will say\nthat it is (probably) English text;\nif the given text has more \"s\" and \"S\" characters than \"t\" and \"T\" characters, we will say\nthat it is (probably) French text;\nif the number of \"t\" and \"T\" characters is the same as the number of \"s\" and \"S\" characters,\nwe will say that it is (probably) French text.",
  "Output": "French",
  "Output Format": "Your output will be one line. This line will either consist of the word English (indicating the\ntext is probably English) or French (indicating the text is probably French).",
  "Input": "3\nLorsque j'avais six ans j'ai vu, une fois,\nune magnifique image,\ndans un livre"
}{
  "Title": "CCC11S2 - Multiple Choice",
  "Sample Cases": "",
  "Input Format": "The input will contain the number N (0\u00a0<\u00a0N\u00a0<\u00a010000) followed by 2N lines. The 2N lines are\ncomposed of N lines of student responses (with one of A, B, C, D or E on each line), followed by N\nlines of correct answers (with one of A, B, C, D or E on each line), in the same order as the student\nanswered the questions (that is, if line i is the student response, then line N\u00a0+\u00a0i contains the correct\nanswer to that question).",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Your teacher likes to give multiple choice tests. One benefit of giving these tests is that they are\neasy to mark, given an answer key. The other benefit is that students believe they have a one-in-five\nchance of getting the correct answer, assuming the multiple choice possibilities are A, B, C, D or E.\nWrite a program that your teacher can use to grade one multiple choice test.",
  "Output": "2",
  "Output Format": "Output the number of questions the student\nanswered correctly.",
  "Input": "3\nA\nA\nA\nA\nB\nA"
}{
  "Example": "Sample Input \n6\n5 2\n4 10\n3 20.5\n1 34\n0 35\n2 29\n4\nSample Output\n4\n16",
  "Input Format": "The first line of the input file will contain an integer N (1\u00a0\u2264\u00a0N\u00a0\u2264\u00a0100000).\nN lines will follow, containing the scores that were attained in\nthe contest, as well as the average rank for each of them. Each of them will\ncontain two numbers, separated by a space. The first number will be between 0\nand 3\u00d7109, inclusive. It will correspond to a score that was\nattained in the contest by some people. The second number will be a decimal\nnumber between 0 and 3\u00d7109 specified using the format in the\nsample input, and it will contain the average rank corresponding to that\nscore.\nThe last line of the input contains your score in the competition. You may\nassume that this number appears as the first number in one of the previous\nN lines.",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "After your great performance in computing competitions, you have been\nadmitted to the University of Waterloo. In your first term there, full of\nenthusiasm, and wanting to increase your streak of success in academic\ncompetitions, you decide to take part in the Putnam competition.\nThree months later, you get to know your score. It is very good, so you\ndecide to add it to your CV. However, the released results only include the\naverage rank for each of the attained scores. You think that might not be enough\ninformation, and want to include the exact range in which your score falls\n(i.e., if there are 25 people with scores better than yours, and 3 people\ntied with you, the range would be 26-29).\nFurthermore, you want to build a program that would handle possible future\nsituations in which the range of the scores, as well as the number of\ncontestants, have greatly increased. You also want your program to work even if\nthe scores are not necessarily given to you in order.",
  "Output Format": "You will output two lines. They will contain the range corresponding to the\nrank of your score.",
  "Title": "CCC11 Stage 2 - Putnam"
}{
  "Example": "Sample Input \n3\n4 6\n0 1 3 1\n0 2 4 1\n0 3 10 1\n1 2 3 0\n1 3 1 1\n2 3 3 0\nSample Output\n9",
  "Explanation": "The path 0 \u2192 1 \u2192 2 \u2192 3 gives a total travel time of 9 seconds\nwith 3 seconds of exposure to the sun. All other paths either required more time\n(e.g., 0 \u2192 3 uses 10 seconds) or overexposure to the sun\n(e.g., 0 \u2192 1 \u2192 3 exposes to the sun for 4 seconds).",
  "Memory Limit": "256M",
  "Input Format": "On the first line of input, you have the number S\n(0\u00a0\u2264\u00a0S\u00a0\u2264\u00a03600), the maximum number of\nseconds that you can be exposed to the sun. On the next line is the number\nN (2\u00a0\u2264\u00a0N\u00a0\u2264\u00a01600), which is the\nnumber of points, and the number E\n(1\u00a0\u2264\u00a0E\u00a0\u2264\u00a010000), which is the number of\nconnections between these N points, separated by one space.\nThe next E lines each contain information about the connections\nbetween points. Specifically, each of these lines contains four integers:\ns (0\u00a0\u2264\u00a0s\u00a0\u2264\u00a0N-1), one\nend point of a connection; t\n(0\u00a0\u2264\u00a0t\u00a0\u2264\u00a0N-1,\ns\u00a0\u2260\u00a0t), the other end point of a connection;\nd (1\u00a0\u2264\u00a0d\u00a0\u2264\u00a010000), the distance\nbetween s and t; and u, which is 1 if this\nconnection is above ground and 0 if it is underground.\nNote: for 30% of the marks for this question, you can assume\nN\u00a0\u2264\u00a050.",
  "Time Limit": "2.00s",
  "Description": "You are a vampire, and you want to travel from some point A to\nanother point B. You may travel in the sunshine above ground or avoid\nthe sunshine by travelling underground via certain tunnels. You have mapped out\nthe area you wish to travel, and have found some secret tunnels between some\npoints, some other points that you can walk between above ground. Both the\ntunnels and above ground paths are bidirectional. Given that you can't be\nexposed to the sunlight for more than S seconds in total, you want to\nminimize the total travel time (given that you have a constant speed of 1 unit\nof distance per second).",
  "Output Format": "The output is one integer, which is the minimum amount of time required to\nget from point 0 to point N-1, with the constraint that there are not\nmore than S seconds of exposure to the sun. If there is no possible\npath which satisfies the constraint, output -1.",
  "Title": "CCC11 Stage 2 - Vampire Tunnels"
}{
  "Example": "Sample Input \n5 3\n4\n1 1\n2 1\n3 1\n4 1\nSample Output\nYES",
  "Input Format": "The first line of the input file will contain two space-separated integers\nN and M\n(1\u00a0\u2264\u00a0N,\u00a0M\u00a0\u2264\u00a02000). They\nrepresent the number of people in each of the teams. The next line will contain\nan integer K\n(0\u00a0\u2264\u00a0K\u00a0\u2264\u00a0NM). Each of the\nfollowing K lines will contain two integers, i\n(1\u00a0\u2264\u00a0i\u00a0\u2264\u00a0N) and j\n(1\u00a0\u2264\u00a0j\u00a0\u2264\u00a0M). This input will\nrepresent that person i of the first team and person j of\nthe second team are allowed to communicate with each other.\nNote: For test cases worth 25% of the marks, you may assume\nN,\u00a0M\u00a0\u2264\u00a0200.",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "The Ultrasecret Spy Organization is very concerned about recent leads\nconcerning a secret conspiracy involving the use of the Comic Sans font.\nIn order to avoid groupthink, the Ultrasecret Spy Organization has decided to\ndivide its agents in two groups. Each of the two groups will carry its own\ninvestigation. However, occasionally interaction between members of different\ngroups will happen through some previously designated contact points\n(i.e., two people on different teams that are allowed to speak with each\nother in special circumstances). This has to be made in a way that preserves the\nfact that there is not much communication between the teams. To make this rule\nmore exact, two people on the same team can have no more than one common contact\non the other team.\nYou are given a plan for the contact points between the two groups. Your task\nis to determine whether this actually satisfies the constraint that two people\non the same team can have no more than one common contact in the other team.",
  "Output Format": "For each input, you will output one line. Its content will be\nYES, if the proposal satifies the constraint that two people on the\nsame team can have no more than one common contact on the other team, and\nNO otherwise.",
  "Title": "CCC11 Stage 2 - Spies Like Us"
}{
  "Example": "Sample Input \n6\n1\n6\n2\n3\n4\n5\nSample Output 2\nYES",
  "Explanation": "Employee 1 (rank 1) supervises both employee 2 (rank 6) and employee 3 (rank\n2).\nEmployee 3 (rank 2) supervises employee 4 (rank 3) and employee 5 (rank 4).\n\nEmployee 4 (rank 3) supervises employee 6 (rank 5).",
  "Memory Limit": "256M",
  "Input Format": "The first line contains n\n(1\u00a0\u2264\u00a0n\u00a0\u2264\u00a0100000), indicating the number of \nemployees. On the next n lines are n distinct integers\nRi\n(1\u00a0\u2264\u00a0Ri\u00a0\u2264\u00a0107), one\ninteger per line, each indicating the rank of an employee. Employees are given\nin increasing order of employee ID.",
  "Time Limit": "2.00s",
  "Description": "Alice and Bob own a huge company. This company was losing money consistently\nover the last 30 years, since its owners spent too much time playing games with \nmathematicians. Alice and Bob decide to make a change.\nAlice and Bob start by giving unique employee IDs to each of the n\nemployees, consecutive positive integers starting from 1.\nThen, Alice and Bob give unique ranks to each employee. Each rank is a\npositive integer. After this, they plan to reorganize the company, by making\nsure that the employees satisfy the following conditions:\nThere is exactly one director, who has no supervisor;\nExcept for the director, each employee has a supervisor, and this supervisor\nhas a smaller employee ID and a higher rank (the value of rank is smaller); and\n\nEach employee can supervise at most 2 people.\nAlice and Bob are eager to know whether their company can be reorganized\nsuccessfully.",
  "Output Format": "Output YES if the company can be reorganized successfully;\noutput NO otherwise.",
  "Title": "CCC11 Stage 2 - Reorganization"
}{
  "Example": "Sample Input \n7 3 3 4 4 3\n5\n6\n3\n5\n4\n1\n2\n3\n5\n6\n5\n1\n4\n1\nSample Output\n5",
  "Explanation": "We take 3 to the bottom and shift the two blocks below it up, with cost 4.\nThen we remove four blocks from each stack, remove a 1 from the playing stack,\nwith cost 1, and remove two blocks from each stack.",
  "Memory Limit": "256M",
  "Input Format": "The first line will contain 6 space-separated integers, in the following\norder:\nN (1\u00a0\u2264\u00a0N\u00a0\u2264\u00a0100), the number\nof disks in each of the stacks\nK (1\u00a0\u2264\u00a0K\u00a0\u2264\u00a04), the maximum\ndepth at which operations can be done\nM (1\u00a0\u2264\u00a0M\u00a0\u2264\u00a05), the\nthreshold before which elements can be removed from our stack\nD (1\u00a0\u2264\u00a0D\u00a0\u2264\u00a0106),\nthe cost for a shift in which the bottom element of the selected range goes to\nthe top\nU (1\u00a0\u2264\u00a0U\u00a0\u2264\u00a0106),\nthe cost for an up shift operation (in which the top element of the selected\nrange goes to the bottom)\nR (1\u00a0\u2264\u00a0R\u00a0\u2264\u00a0106),\nthe cost for reversing the top elements of the selected range\n2N lines will follow, each containing a number L\n(1\u00a0\u2264\u00a0L\u00a0\u2264\u00a020). The first N lines\nwill contain the labels of the disks in the Master stack, from top to bottom.\nThe next N lines will contain the labels of the disks in your stack,\nfrom top to bottom.\nNote: for 20% of the marks in this question, you may assume that\nK\u00a0\u2264\u00a02.",
  "Time Limit": "2.00s",
  "Description": "You are playing a game with a stack of N disks. The goal of the\ngame is to remove all of the disks from your stack. However, there is a cost\nassociated with removing disks, and you wish to minimize the cost of removing\nall the disks from your stack.\nEach disk contains a label L, a positive integer.\nYou are also given a \"Master stack\" of N disks which you can use\nto help you remove disks from your stack.\nYou can remove disks from the top of your stack of disks in two ways:\nremove a disk at the top of your stack: if label of the disk on top of your\nstack is c, that disk can be removed from your stack with cost\nc;\nremove a disk from both the top of the Master stack and the top of your\nstack if the label is the same between both disks: in this case, there is no\ncost with removing both disks.\nYou are also allowed to modify the order of the top K elements of\nyour stack, so long as immediately after each modification, you remove the top\nelement of your stack. There are three allowed modifications:\nReverse: you may reverse the order of the top r\n(2\u00a0\u2264\u00a0r\u00a0\u2264\u00a0K) disks on your stack.\nIn other words, if the top r disks are d1,\nd2, \u2026, dr (reading from the\ntop down), then after this operation, the top r disks will be\ndr, \u2026, d2,\nd1 (reading from the top down). The cost of one reverse\noperation is R.\n(Cyclic Shift) Up: you can shift up one disk in the range of the top\nu disks (2\u00a0\u2264\u00a0u\u00a0\u2264\u00a0K).\nFor example, if the top four disks are d1,\nd2, d3, d4\n(read from the top down), you can perform an up shift in the range of the top\nthree elements to get d2, d3,\nd1, d4 or an up shift of the top\nfour elements to get d2, d3,\nd4, d1. The cost of one up shift\noperation is U.\n(Cyclic Shift) Down: you can shift down one disk in the range of the top\nd disks (2\u00a0\u2264\u00a0d\u00a0\u2264\u00a0K).\nFor example, if the top four disks are d1,\nd2, d3, d4\n(read from the top down), you can perform a down shift in the range of the top\nthree elements to get d3, d1,\nd2, d4 or a down shift of the top\nfour elements to get d4, d1,\nd2, d3. The cost of one down shift\noperation is D.\nIf the operations yield a match between the top of the master stack and the\ntop of your stack, you can pop for free. If not, you must pay the cost of the\npop.\nThere is one additional constraint. At any point in the game, if a disk at\nlevel j is being popped (levels start at 0 at the bottom of the\nstack), then all elements that were originally at level\nj\u00a0+\u00a0M or higher must have already been popped,\nwhere M is given.\nMinimize the cost required to pop all the elements off of your stack.",
  "Output Format": "Output the integer (on one line) which is the minimal cost required to\nremove all disks from your stack.",
  "Title": "CCC11 Stage 2 - Fixing Disks"
}{
  "Example": "Sample Input \n5 5 2\n1 1\n3 3\nSample Output\n12",
  "Input Format": "The first line contains n, m, and t\n(0\u00a0\u2264\u00a0n,\u00a0m\u00a0\u2264\u00a010000,\n0\u00a0\u2264\u00a0t\u00a0\u2264\u00a010000), representing the\ndimensions of the given map of the forest and the number of trees indicated on\nthe map respectively. The next t lines each contain two integers\nx and y\n(0\u00a0\u2264\u00a0x\u00a0\u2264\u00a0n,\n0\u00a0\u2264\u00a0y\u00a0\u2264\u00a0m) describing the\nlocation of each tree (where (0,0) is the bottom leftmost point on the map and\n(n,m) is the top rightmost point on the map).\nNote: for 20% of the marks for this question, you may assume that\nt\u00a0\u2264\u00a0100, and for 45% of the marks for this question,\nt\u00a0\u2264\u00a0400.",
  "Memory Limit": "256M",
  "Time Limit": "5.00s",
  "Description": "Having just recently won the lottery, you decide to build a summer resort\nnestled deep in a forest. However, being a very eco-friendly person, you decide\nnot to cut down any of the trees that grow in the forest. Given a map of the\nforest and the positions of its trees, determine the area of the largest\nrectangular plot you can buy that does not contain any of the trees. (Note that\nyour plot must have edges which are parallel to the x and y axes.)",
  "Output Format": "Output the area of the largest rectangle that does not contain any of the\ngiven trees.",
  "Title": "CCC11 Stage 2 - Biggest (Zero Carbon) Footprint"
}{
  "Example": "Sample Input \n4\n1 1 1\n1 1 0\n1 2 1\n2 8 5\nSample Output\nempty\ncrystal\ncrystal\ncrystal\nNote: At least 40% of the test cases will have m\u00a0<\u00a04.",
  "Input Format": "The first line of input will be T (0\u00a0<\u00a0T\u00a0\u2264\u00a010), the number of test cases. On each of the next T lines there will be three integers: m (1\u00a0\u2264\u00a0m\u00a0\u2264\u00a013), followed by x and y (0\u00a0\u2264\u00a0x,\u00a0y\u00a0<\u00a05m), the position of the grid cell that Alice wishes to examine.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Alice is looking at a crystal through a microscope. Alice\u2019s microscope has the interesting feature\nthat it can superimpose grid lines over the image that she is looking at.\nAt level 1 of magnification, Alice sees the image as follows:\n\nNotice that at level 1, there is a 5\u00a0\u00d7\u00a05 grid superimposed over the image.\nHowever, as Alice increases the magnification, the leaf pattern becomes more intricate.\n\nAt level 2 of the magnification, Alice sees the image with a 25\u00a0\u00d7\u00a025 grid, and notices that three of\nthe four larger squares in the original image have the small four square pattern on top. In fact, for\nthis particular crystal, this self-similarity repeats for each magnification level.\nGiven that Alice's microscope has up to 13 levels of magnification, she would like to try to quantify the detail of each grid cell at every one of these magnification levels.\nSpecifically, since there is a 5m\u00a0\u00d7\u00a05m grid at magnification level m, Alice will call the bottom-left\ncorner grid cell (0,\u00a00), the bottom-right grid cell (5m\u00a0\u2212\u00a01,\u00a00), the top-left grid cell (0,\u00a05m\u00a0\u2212\u00a01), and\nthe top-right grid cell (5m\u00a0\u2212\u00a01,\u00a05m\u00a0\u2212\u00a01).\nGiven an integer magnification level and a grid position, Alice would like to know if her crystal will fill that grid cell, or if that grid cell will be empty space.",
  "Output Format": "The output will be T lines. Each line of output will either be empty, if the specified grid cell is empty, or crystal if that grid cell contains crystal.",
  "Title": "CCC11S3 - Alice Through the Looking Glass"
}{
  "Example": "Sample Input \n5\n1\n1\n0\n1\n1\nSample Output\n1",
  "Explanation": "Notice that turning on the third light will create five consecutive lights that are on, which will in\nturn cause all of these five lights to be off.\nNote: At least 30% of the test cases will have K\u00a0\u2264\u00a010.",
  "Memory Limit": "512M",
  "Input Format": "The first line of input will consist of the integer K (4\u00a0\u2264\u00a0K\u00a0\u2264\u00a025), indicating the number of lights. Each of the next\nK lines will have either the integer 0 (to represent a light that is off) or the integer 1 (to represent\na light that is on).",
  "Time Limit": "2.00s",
  "Description": "You are walking by a row of K lights, some of which are on and some of which are\noff. In this initial configuration, there is no consecutive sequence of four lights that are on.\nWhenever four or more consecutive lights are on, the lights in that consecutive block will turn off.\nYou can only turn on lights that are off.\nWhat is the minimum number of lights you need to turn on in order to end up with all K lights off?",
  "Output Format": "Your program should output the minimum number of lights that must be turned on in order to have all K lights be off.",
  "Title": "CCC11S5 - Switch"
}{
  "Title": "CCC12J1 - Speed fines are not fine!",
  "Sample Data": "",
  "Memory Limit": "16M",
  "Input Format": "Two numbers: first, the speed limit; second, the recorded speed of the\ncar.",
  "Time Limit": "2.00s",
  "Description": "Many communities now have \"radar\" signs that tell drivers what their speed\nis, in the hope that they will slow down.\nYou will output a message for a \"radar\" sign. The message will display\ninformation to a driver based on his/her speed according to the following\ntable:",
  "Output": "You are speeding and your fine is $100.",
  "Output Format": "If the driver is not speeding, the output should be:\nCongratulations, you are within the speed limit!\nIf the driver is speeding, the output should be:\nYou are speeding and your fine is\n$F.\nwhere F is the amount of the fine as described in the table\nabove.",
  "Input": "100\n120"
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \nThe input will be four positive integers, representing the depth readings.\neach integer will be on its own line of input.\nSample Output\nThe output is one of four possibilities. If the depth readings are\nincreasing, then the output should be Fish Rising. If the depth\nreadings are decreasing, then the output should be Fish Diving.\nIf the depth readings are identical, then the output should be\nFish At Constant Depth. Otherwise, the output should be\nNo Fish.\nSample Input 1\n30\n10\n20\n20\nSample Output 1\nNo Fish\nSample Input 2\n1\n10\n12\n13\nSample Output 2\nFish Rising",
  "Description": "A fish-finder is a device used by anglers to find fish in a lake. If the\nfish-finder finds a fish, it will sound an alarm. It uses depth readings to\ndetermine whether to sound an alarm. For our purposes, the fish-finder will\ndecide that a fish is swimming past if:\nthere are four consecutive depth readings which form a strictly increasing\nsequence (such as 3 4 7 9) (which we call \"Fish Rising\"), or\nthere are four consecutive depth readings which form a strictly decreasing\nsequence (such as 9 6 5 2) (which we call \"Fish Diving\"), or\nthere are four consecutive depth readings which are identical (which we\ncall \"Constant Depth\").\nAll other readings will be considered random noise or debris, which we call\n\"No Fish.\"\nYour task is to read a sequence of depth readings and determine if the\nalarm will sound.",
  "Title": "CCC12J2 - Sounds fishy!",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n3\nSample Output\n***xxx***\n***xxx***\n***xxx***\n   xxxxxx\n   xxxxxx\n   xxxxxx\n***   ***\n***   ***\n***   ***",
  "Input Format": "The input will be a positive integer k\n(k\u00a0<\u00a025).",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You have been asked to take a small icon that appears on the screen of a\nsmart telephone and scale it up so it looks bigger on a regular computer\nscreen.\nThe icon will be encoded as characters (x and *)\nin a 3\u00a0\u00d7\u00a03 grid as follows:\n*x*\n xx\n* *\n\nWrite a program that accepts a positive integer scaling factor and outputs\nthe scaled icon. A scaling factor of k means that each character\nis replaced by a k\u00a0\u00d7\u00a0k grid consisting\nonly of that character.",
  "Output Format": "The output will be 3k lines, which represent each individual\nline scaled by a factor of k and repeated k times. A\nline is scaled by a factor of k by replacing each character in the\nline with k copies of the character.",
  "Title": "CCC12J3 - Icon Scaling"
}{
  "Example": "Sample Input \n3\nFXAB\nSample Output 1\nZOOM\nSample Input 2\n5\nJTUSUKG\nSample Output 2\nBIGBANG",
  "Input Format": "The input will be two lines. The first line will contain the positive\ninteger K (K\u00a0<\u00a010), which is used to compute\nthe shift value. The second line of input will be the word, which will be a\nsequence of consecutive uppercase characters of length at most 20.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Sheldon and Leonard are physicists who are fixated on the the BIG BANG\ntheory. In order to exchange secret insights they have devised a code that\nencodes UPPERCASE letters by shifting their letters forward.\nShifting a letter by S positions means to go forward S\nletters in the alphabet. For example, shifting B by\nS\u00a0=\u00a03 positions gives E. However, sometimes this makes us\ngo past Z, the last letter of the alphabet. Whenever this happens we wrap\naround, treating A as the letter that follows Z. For example, shifting Z by\nS\u00a0=\u00a02 positions gives B.\nSheldon and Leonard's code depends on a parameter K and also\nvaries depending on the position of each letter in the word. For the letter at\nposition P, they use the shift value of .\nFor example, here is how ZOOM is encoded when K\u00a0=\u00a03.\nThe first letter Z has a shift value of ;\nit wraps around and becomes the letter F. The second letter, O, has\n and becomes X. The last two letters\nbecome A and B. So Sheldon sends Leonard the secret message: FXAB\nWrite a program for Leonard that will decode messages sent\nby Sheldon.",
  "Output Format": "The output will be the decoded word of uppercase letters.",
  "Title": "CCC12J4 - Big Bang Secrets"
}{
  "Example": "Sample Input \n3\n3 2 1\n2\n2 1\n0\nSample Output\n20\nIMPOSSIBLE",
  "Input Format": "The input will contain some number of test cases. A test case consists of\ntwo lines. The first line contains a positive integer n\n(n\u00a0<\u00a05), which is the number of coins. We assume that\nthe coins are labelled 1, 2, 3,\u00a0...n. The second line contains\na list of numbers 1 to n in arbitrary order, which represents the\ninitial coin configuration. For the above example, the input test case would\nbe:\n3\n3 2 1\nThe end of test cases is indicated by 0 on a line by itself.",
  "Memory Limit": "1024M",
  "Time Limit": "20.00s",
  "Description": "When she is bored, Jo Coder likes to play the following game with coins on a\ntable. She takes a set of distinct coins and lines them up in a row. For\nexample, let us say that she has a penny (P, worth $0.01), a nickel (N, worth\n$0.05), and a dime (D, worth $0.10). She lines them up in an arbitrary order\n(for example, D N P), and then moves them around with the goal of placing them\nin strictly increasing order by value, that is P N D (i.e., $0.01, $0.05,\n$0.10). She has particular rules that she follows:\nThe initial coin line-up defines all positions where coins can be placed.\nThat is, no additional positions can be added later, and even if one of the\npositions does not have a coin on it at some point, the position still\nexists.\nThe game consists of a sequence of moves and in each move Jo moves a coin\nfrom one position to an adjacent position.\nThe coins can be stacked, and in a move Jo always takes the top coin from\none stack and moves it to the top of another stack.\nIn a stack of coins, Jo never places a higher-value coin on top of a\nlower-value coin.\nFor simplicity, let the coins have consecutive integer values (e.g., denote\nthe penny as 1, nickel as 2, and dime as 3). Then, in the above example, Jo\ncould play the game in the following way in 20 moves (where XY denotes that\ncoin X is on top of coin Y):\nFor some starting configurations, it is not always possible to obtain the\ngoal of strictly increasing order.",
  "Output Format": "For each test case, output one line, which will either contain the\nminimal number of moves in which Jo can achieve the goal coin line-up,\nor, if it is not possible to achieve the goal coin line-up,\nIMPOSSIBLE.",
  "Title": "CCC12J5 - A Coin Game"
}{
  "Title": "CCC12S1 - Don't pass me the ball!",
  "Sample Cases": "",
  "Input Format": "The input will be the positive integer J\n(J\u00a0\u2264\u00a099), which is the jersey number of the goal\nscorer.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A CCC soccer game operates under slightly different soccer rules. A goal is\nonly counted if the 4 players, in order, who touched the ball prior to the goal\nhave jersey numbers that are in ascending numeric order with the highest number\nbeing the goal-scorer.\nPlayers have jerseys numbered from 1 to 99 (and each jersey number is worn\nby exactly one player).\nGiven a jersey number of the goal-scorer, indicate how many possible\ncombinations of players can produce a valid goal.",
  "Output": "113564",
  "Output Format": "The output will be one line containing the number of possible scoring\ncombinations that could have J as the goal-scoring jersey\nnumber.",
  "Input": "90"
}{
  "Example": "Sample Input \n3M1D2C\nSample Output 1\n3700\nSample Input 2\n2I3I2X9V1X\nSample Output 2\n-16",
  "Input Format": "The input is a valid aromatic number consisting of between 2 and 20 \nsymbols.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "This question involves calculating the value of aromatic numbers\nwhich are a combination of Arabic digits and Roman numerals.\nAn aromatic number is of the form ARARAR...AR, where\neach A is an Arabic digit, and each R is a Roman\nnumeral. Each pair AR contributes a value described below, and by\nadding or subtracting these values together we get the value of the entire\naromatic number.\nAn Arabic digit A, can be 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9. A\nRoman numeral R is one of the seven letters I, V, X, L, C, D, or M.\nEach Roman numeral has a base value:\nThe value of a pair AR is A times the base value of\nR. Normally, you add up the values of the pairs to get the overall\nvalue. However, wherever there are consecutive symbols ARA'R' with\nR' having a strictly bigger base value than R,\nthe value of pair AR must be subtracted from the total,\ninstead of being added.\nFor example, the number 3M1D2C has the value\n3\u00d71000\u00a0+\u00a01\u00d7500\u00a0+\u00a02*100\u00a0=\u00a03700 and\n3X2I4X has the value\n3\u00d710\u00a0-\u00a02\u00d71\u00a0+\u00a04\u00d710\u00a0=\u00a068.\nWrite a program that computes the values of aromatic numbers.",
  "Output Format": "The output is the decimal value of the given aromatic number.",
  "Title": "CCC12S2 - Aromatic Numbers"
}{
  "Example": "Sample Input \n6\n3\n6\n7\n8\n1\n35336\nSample Output 1\nY\nSample Input 2\n3\n2\n4\n9\n2\n97\n88\nSample Output 2\nN\nY",
  "Explanation": "First line: we cannot achieve 97 using the rules of this calculator, so the \noutput is N (even despite that \n4\u00a0\u00d7\u00a04\u00a0+\u00a09\u00a0\u00d7\u00a09\u00a0=\u00a097, when the\ntypical order of operations rules are taken into account). Second line: start \nwith 9, add 9, add 4, and multiply by 4; this gives 88.",
  "Memory Limit": "64M",
  "Input Format": "The first line of input is W, the exact number of operations you \nmust use. W will be an integer between 0 and 6. The second line of \ninput is 1\u00a0\u2264\u00a0D\u00a0\u2264\u00a010, the number of working \ndigit keys. On each of the D following lines, a working digit is \ngiven; these values are distinct integers from 0 to 9. Finally, an integer \n1\u00a0\u2264\u00a0V\u00a0\u2264\u00a05 is given, the number of target \nvalues; on each of the following Vlines there is an integer between \n0 and 5000000 (inclusive) giving a target value which you'd like to achieve on \nyour calculator.",
  "Time Limit": "2.00s",
  "Description": "In Waterloo, you probably have seen some geese. How can you see geese with \nyour calculator? Start with 6, add 7, multiply by 6, multiply by 8, add 7, \nmultiply by 8, and multiply by 7, giving 35336. Then if you flip your calculator\nupside down, it says gEESE:\n\nYou want to write a program to help automatically build tricks of this type. \nHowever, your calculator has a lot of broken buttons: the only mathematical \noperators that work are + and \u00d7, and only a few of the digits work. Your \ngoal is to figure out whether your half-broken calculator can achieve a given \ntarget value, using single-digit inputs and a fixed number of operations.\nNote: the calculator performs the operations as soon as they are entered, \nrather than following any rules for order of operations (see Sample Input 2).",
  "Output Format": "The output consists of V lines corresponding to the target values;\neach line contains \"Y\" if that target value can be achieved, and \"N\" if it \ncannot be achieved, using exactly W operations with the D\ngiven digits.\nPrecisely, a target value T can be achieved if, starting with one\nof the D digits, and then by adding or multiplying exactly W\ntimes by one of the digits, you end up with T. Digits can be re-used,\nand you do not need to use all of the digits. You cannot enter multi-digit\nnumbers.",
  "Title": "CCC12 Stage 2 - Choose Your Own Arithmetic"
}{
  "Explanation": "The shortest route is 1\u00a0\u2192\u00a02 of length 1, and the strictly-second route\nis 1\u00a0\u2192\u00a02\u00a0\u2192\u00a01\u00a0\u2192\u00a02 of length 3.",
  "Example": "Sample Input \n2 2\n1 2 1\n2 1 1\nSample Output 2\n3",
  "Input Format": "The first line will have the format N M, where \nN is the number of nodes in Budapest and M is the number of \nedges. The nodes are 1,\u00a02,\u00a0...,\u00a0N; node 1 represents \ns; node N represents t. Then there are \nM lines of the form A B L, indicating \na one-way street from A to B of length L. You can\nassume that A \u2260 B on these lines, and that the ordered \npairs (A,\u00a0B) are distinct.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Welcome to the Hungary Games! The streets of Budapest form a twisted network of one-way\nstreets. You have been forced to join a race as part of a \"Reality TV\" show where you race\nthrough these streets, starting at the Sz\u00e9chenyi thermal bath (s for \nshort) and ending at the Tomb of G\u00fcl Baba (t for short).\nNaturally, you want to complete the race as quickly as possible, because you will get\nmore promotional contracts the better you perform. However, there is a catch: any person\nwho is smart enough to take a shortest s-t route will be thrown into\nthe P\u00e1lv\u00f6lgyi cave system and kept as a national treasure. You would like to\navoid this fate, but still be as fast as possible. Write a program that computes a \nstrictly-second-shortest s-t route.\nSometimes the strictly-second-shortest route visists some nodes more than once;\nsee Sample Input 2 for an example.",
  "Output Format": "Output the length of a strictly-second-shortest route from s to \nt. If there are less than two possible lengths for routes from s to \nt, output -1.",
  "Limits": "Every length L will be a positive integer between 1 and 10000. For \n50% of the test cases, we will have 2\u00a0\u2264\u00a0N\u00a0\u2264\u00a040 and \n0\u00a0\u2264\u00a0M\u00a0\u2264\u00a01000. All test cases will have \n2\u00a0\u2264\u00a0N\u00a0\u2264\u00a020000 and 0\u00a0\u2264\u00a0M\u00a0\u2264\u00a0100000.",
  "Title": "CCC12 Stage 2 - Hungary Games"
}{
  "Example": "Sample Input \n5 2\nI S A B C\na b\n2\nA a\nB b\n7\nI A B\nI A C\nC S B\nS A B\nS A C\nI S S\nS S S\n4\nabababaaabbbaabbaabb\nabab\nbbaa\naaabababbaaabbbb\nSample Output\n1\n1\n0\n1",
  "Input Format": "On the first line, two integers V and T in that order.\nOn the second line, V space separated uppercase letters, the variables. The\nfirst variable on the line is always the start variable.\nOn the third line, T space separated lowercase letters, the terminals.\nOn the fourth line, there is an integer R1. R1\nlines follow, each of which is of the form , representing a rule\n.\nOn the next line, there is an integer R2. R2\nlines follow, each of which is of the form , representing a\nrule .\nOn the next line, there is an integer W. W lines follow; each\ncontains a single word made entirely of lowercase letters.",
  "Memory Limit": "64M",
  "Constraints": "1\u00a0\u2264\u00a0V,T\u00a0\u2264\u00a026\n1\u00a0\u2264\u00a0R1\u00a0+\u00a0R2\u00a0\u2264\u00a030\n1\u00a0\u2264\u00a0W\u00a0\u2264\u00a020\nEach of the words in the linguists' list will have length between 1 and 30.",
  "Time Limit": "2.00s",
  "Description": "Linguists are currently studying Mhocskian, the language of the native inhabitants of\nMhocsky island. The linguists have found a description of how the natives construct words\nin Mhocskian, and a list of words. The linguists would now like to know which of the words\nin the list are valid Mhocskian words.",
  "Rules": "Words in Mhocskian are constructed according to a set of rules. These\nrules involve two types of components: variables and\nterminals. A variable is an uppercase letter used in the description of\nthe rules. A terminal is a lowercase letter that is part of a Mhocskian word.\nThere are two types of rules. The first type of rule allows you to replace a variable\n by two variables  in that order, and we write\n as a short form for this type of rule. The second\ntype of rule allows you to replace a variable  by a terminal \n, and we write  as a short form for this\ntype of rule.\nOne of the variables is the start variable. A word w is composed of lowercase\nletters from the English alphabet. It is a valid Mhocskian word if,\nstarting from the start variable, it is possible to follow a sequence of rules to obtain\nw.",
  "Output Format": "The output must contain W lines. On line i, output a 1 if the\nith word is a valid Mhocskian word, and 0 otherwise.",
  "Title": "CCC12 Stage 2 - Mhocskian Languages"
}{
  "Example": "Sample Input \n4\n40\n10\n4\n80\n4 78\n1 35\nSample Output\n10",
  "Input Format": "The first line of input is N, the number of lines of your program \n(1\u00a0\u2264\u00a0N\u00a0\u2264\u00a0100000). The next N lines contain\nthe number of characters on each line: you can assume there is at least one character per\nline, and at most 80 characters per line. The next line contains two integers \nRS CS, indicating the starting row and column\nof the cursor (1\u00a0\u2264\u00a0RS\u00a0\u2264\u00a0N, \n1\u00a0\u2264\u00a0CS, and CS is at most the\nnumber of characters in row RS). The last line contains two integers\nRF CF, indicating the finishing row and column\nof the cursor (1\u00a0\u2264\u00a0RF\u00a0\u2264\u00a0N,\n1\u00a0\u2264\u00a0CF, and CF is at most the\nnumber of characters in row RF).",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "You are using an editor to type in a program that you hope solves another problem on\nthis contest. Instead of thinking about solving this problem, you look at your editor and\nstart to think of how to edit your program more quickly.\nYour editor has the following characteristics:\nyou can move your cursor using the direction keys: up (\u2191), down (\u2193),\n    left (\u2190) or right (\u2192)\npressing \u2192 will move the cursor one character to the right; if the cursor is\n    on the rightmost character of a line, the cursor will move to the first character of\n    the next line below the current line; (the cursor will not move if it is in the\n    bottom-right position)\npressing \u2190 will move the cursor one character to the left; if the cursor is\n    on the leftmost character of a line, the cursor will move to the last character of the\n    previous line above the current line; (the cursor will not move if it is in the\n    top-left position)\npressing \u2191 will move the cursor to the character immediately above it; if\n    there is no character immediately above the cursor, it will move to the last character\n    of the previous line above the current line; (the cursor will not move if it is on the\n    first line)\npressing \u2193 will move the cursor to the character immediately below it; if\n    there is no character immediately below the cursor, it will move to the last character\n    of the next line below the current line; (the cursor will not move if it is on the last\n    line)\nYou would like to ?nd the least number of key presses that will cause you to move\nbetween positions in your editor in a given program which you are editing.",
  "Output Format": "Output the minimum number of key presses that are required to move the cursor from row\nRS and column CS to row RF\nand column CF.",
  "Title": "CCC12 Stage 2 - Editor Distance"
}{
  "Example": "Sample Input \n3\n25\n50\n75\nSample Output 1\n4\nSample Input 2\n2\n33\n67\nSample Output 2\n3",
  "Input Format": "The first line of the input file will contain an integer M between 1 and\n100000 (inclusive). This represents the number of percentages that appear in the newspaper\narticle you are analyzing.\nM lines will follow, each of them containing an integer percentage P,\n0\u00a0\u2264\u00a0P\u00a0\u2264\u00a0100.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Someone whose name I don't want to remember was reading an article in the newspaper that\nmentioned the results of a poll. Upon seeing that the percentages that appeared in the\narticle were all 25%, 50% and 75%, they thought that maybe the poll only included 4 people,\nand was then not very good.\nIn this problem, your task is to come up with a program that would make a similar\nanalysis. In particular, given the percentages that appear in a newspaper article, it is\nyour task to determine the minimum number of people that must have been interviewed in\norder for those percentages to be possible, assuming that percentages are rounded to the\nclosest integer, with .5 rounded up (so, 1 of 3 people corresponds to 33%, 2 of 3 people\ncorresponds to 67%, and 155 of 1000 people corresponds to 16%).",
  "Output Format": "An integer N\u00a0\u2265\u00a01, the minimum number of people that must be\ninterviewed for all of the percentages in the input to correspond to a fraction of those\npeople.",
  "Title": "CCC12 Stage 2 - Sample Size"
}{
  "Example": "Sample Input \n5 3\n-8 4\n-7 11\n4 10\n10 5\n8 2\n-5 7\n-4 3\n5 6\nSample Output\n3\n\nFigure 1: Sample input and an optimal net.",
  "Input Format": "The first line contains P and then T, separated by spaces.\nSubsequently there are P lines of the form x y giving the\nenemy units' co-ordinates, and then T lines giving the friendly units'\ncoordinates.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "Colonel Trapp is trapped! For several days he has been fighting General Position on a\nplateau and his mobile command unit is now stuck at (0,\u00a00), on the edge of a cliff.\nBut the winds are changing! The Colonel has a secret weapon up his sleeve: the \"epsilon\nnet.\" Your job, as the Colonel's chief optimization officer, is to determine the maximum\nadvantage that a net can yield.\nThe epsilon net is a device that looks like a parachute, which you can launch to cover\nany convex shape. (A shape is convex when, for every pair p,\u00a0q\nof points it contains, it also contains the entire line segment \npq.) The net shape must include the launch\npoint (0,\u00a00).\nThe General has P enemy units stationed at fixed positions and the Colonel\nhas T friendly units. The advantage of a particular net shape equals\nthe number of enemy units it covers, minus the number of friendly units it covers. The\nGeneral is not a unit.\nYou can assume that\nno three points (Trapp's position (0,\u00a00), enemy units, and friendly units) lie\n    on a line,\nevery two points have distinct x-coordinates and y-coordinates,\nall co-ordinates (x,\u00a0y) of the units have y\u00a0>\u00a00,\nall co-ordinates are integers with absolute value at most 1000000000, and\nthe total number P + T of units is between 1 and 100",
  "Output Format": "Output a single line with the maximum possible advantage.",
  "Title": "CCC12 Stage 2 - The Winds of War"
}{
  "Example": "Sample Input \n5\n1\n1\n1\n4\n3\nSample Output 1\n3\nSample Input 2\n4\n10\n6\n1\n8\nSample Output 2\n9",
  "Input Format": "The first line of input will be the integer N\n(2\u00a0\u2264\u00a0N\u00a0\u2264\u00a02\u00d7106), the\nnumber of sensors. The next N lines each contain the reading for\nthat sensor, which is an integer R\n(1\u00a0\u2264\u00a0R\u00a0\u2264\u00a01000). You should assume that\nthere are at least two different readings in the input.",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "You are gathering readings of acidity level in a very long river in order\nto determine the health of the river. You have placed N sensors in\nthe river, and each sensor gives an integer reading R. For the\npurposes of your research, you would like to know the frequency of each\nreading, and find the absolute difference between the two most frequent\nreadings.\nIf there are more than two readings that have the highest frequency, the\ndifference computed should be the largest such absolute difference\nbetween two readings with this frequency. If there is only one reading with\nthe largest frequency, but more than one reading with the second largest\nfrequency, the difference computed should be the largest absolute\ndifference between the most frequently occurring reading and any of the\nreadings which occur with second-highest frequency.",
  "Output Format": "Output the positive integer value representing the absolute difference\nbetween the two most frequently occurring readings, subject to the tie-breaking\nrules outlined above.",
  "Title": "CCC12S3 - Absolutely Acidic"
}{
  "Example": "Sample Input \n3\n3 2 1\n2\n2 1\n0\nSample Output\n20\nIMPOSSIBLE",
  "Input Format": "The input will contain some number of test cases. A test case consists of\ntwo lines. The first line contains a positive integer n\n(n\u00a0<\u00a08), which is the number of coins. We assume that\nthe coins are labelled 1, 2, 3,\u00a0...n. The second line contains\na list of numbers 1 to n in arbitrary order, which represents the\ninitial coin configuration. For the above example, the input test case would\nbe:\n3\n3 2 1\nThe end of test cases is indicated by 0 on a line by itself.",
  "Memory Limit": "1024M",
  "Time Limit": "20.00s",
  "Description": "When she is bored, Jo Coder likes to play the following game with coins on a\ntable. She takes a set of distinct coins and lines them up in a row. For\nexample, let us say that she has a penny (P, worth $0.01), a nickel (N, worth\n$0.05), and a dime (D, worth $0.10). She lines them up in an arbitrary order\n(for example, D N P), and then moves them around with the goal of placing them\nin strictly increasing order by value, that is P N D (i.e., $0.01, $0.05,\n$0.10). She has particular rules that she follows:\nThe initial coin line-up defines all positions where coins can be placed.\nThat is, no additional positions can be added later, and even if one of the\npositions does not have a coin on it at some point, the position still\nexists.\nThe game consists of a sequence of moves and in each move Jo moves a coin\nfrom one position to an adjacent position.\nThe coins can be stacked, and in a move Jo always takes the top coin from\none stack and moves it to the top of another stack.\nIn a stack of coins, Jo never places a higher-value coin on top of a\nlower-value coin.\nFor simplicity, let the coins have consecutive integer values (e.g., denote\nthe penny as 1, nickel as 2, and dime as 3). Then, in the above example, Jo\ncould play the game in the following way in 20 moves (where XY denotes that\ncoin X is on top of coin Y):\nFor some starting configurations, it is not always possible to obtain the\ngoal of strictly increasing order.",
  "Output Format": "For each test case, output one line, which will either contain the\nminimal number of moves in which Jo can achieve the goal coin line-up,\nor, if it is not possible to achieve the goal coin line-up,\nIMPOSSIBLE.",
  "Title": "CCC12S4 - A Coin Game"
}{
  "Example": "Sample Input \n2 3\n1\n2 1\nSample Output 1\n2\nSample Input 2\n3 4\n3\n2 3\n2 1\n1 4\nSample Output 2\n1",
  "Input Format": "The first line of input contains two integers R and C\n(1\u00a0\u2264\u00a0R,\u00a0C\u00a0\u2264\u00a025), separated\nby one space representing the number of rows and columns (respectively). On the\nsecond line of input is the integer K, the number of cages that\ncontain cats. The next K lines each contain the row and column\npositions (in that order) for a cage that contains a cat. None of the\nK cat cages are repeated, and all cages are valid positions. Note\nthat (1,1) and (R,C) will not be cat cages.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You are a mouse that lives in a cage in a large laboratory. The laboratory\nis composed of one rectangular grid of square cages, with a total of\nR rows and C columns of cages.\nTo get your exercise, the laboratory owners allow you to move between cages.\nYou can move between cages either by moving right between two adjacent cages in\nthe same row, or by moving down between two adjacent cages in the same column.\nYou cannot move diagonally, left or up.\nYour cage is in one corner of the laboratory, which has the label (1,1) (to\nindicate top-most row, left-most column). You would like to visit your brother\nwho lives in the cage labelled (R,C) (bottom-most row,\nright-most column), which is in the other corner diagonally. However, there are\nsome cages which you cannot pass through, since they contain cats.\nYour brother, who loves numbers, would like to know how many different paths\nthere are between your cage and his that do not pass through any cat cage.\nWrite a program to compute this number of cat-free paths.",
  "Output Format": "Output the non-negative integer value representing the number of paths\nbetween your cat cage at position (1,1) and your brother's cage at position\n(R,C). You can assume the output will be strictly less\nthan 109.",
  "Title": "CCC12S5 - Mouse Journey"
}{
  "Example": "Sample Input \n12\n15\nSample Output 1\n18\nSample Input 2\n10\n10\nSample Output 2\n10",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You know a family with three children. Their ages form an arithmetic\nsequence: the difference in ages between the middle child and youngest child is\nthe same as the difference in ages between the oldest child and the middle\nchild. For example, their ages could be 5, 10 and 15, since both adjacent pairs\nhave a difference of 5 years.\nGiven the ages of the youngest and middle children, what is the age of the\noldest child?",
  "Output": "The output will be the age of the oldest child.",
  "Title": "CCC13J1 - Next in Line",
  "Input": "The input consists of two integers, each on a separate line. The first line\nis the age Y of the youngest child\n(0\u00a0\u2264\u00a0Y\u00a0\u2264\u00a050). The second line is the age\nM of the middle child\n(Y\u00a0\u2264\u00a0M\u00a0\u2264\u00a050)."
}{
  "Example": "Sample Input \nSHINS\nSample Output 1\nYES\nSample Input 2\nNOISE\nSample Output 2\nNO",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "An artist wants to construct a sign whose letters will rotate freely in the\nbreeze. In order to do this, she must only use letters that are not changed by\nrotation of 180 degrees: I, O, S, H, Z, X, and N.\nWrite a program that reads a word and determines whether the word can be\nused on the sign.",
  "Output": "Output YES if the input word can be used on the sign;\notherwise, output NO.",
  "Title": "CCC13J2 - Rotating Letters",
  "Input": "The input will consist of one word, all in uppercase letters, with no\nspaces. The maximum length of the word will be 30 letters, and the word will\nhave at least one letter in it."
}{
  "Example": "Sample Input \n6\n5\n5\n4\n3\n2\n1\nSample Output 2\n3",
  "Explanation": "Tasks 3, 4, and 5 can be completed in 6 minutes. It is not possible to\ncomplete more than 3 tasks in 6 minutes.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You have been asked by a parental unit to do your chores.\nEach chore takes a certain amount of time, but you may not have enough time\nto do all of your chores, since you can only complete one chore at a time. You\ncan do the chores in any order that you wish.\nWhat is the largest amount of chores you can complete in the given amount of\ntime?",
  "Output": "The output will be the maximum number of chores that can be completed in\ntime T.",
  "Title": "CCC13J4 - Time on task",
  "Input": "The first line of input consists of an integer T\n(0\u00a0\u2264\u00a0T\u00a0\u2264\u00a0100000), which is the total\nnumber of minutes you have available to complete your chores.\nThe second line of input consists of an integer C\n(0\u00a0\u2264\u00a0C\u00a0\u2264\u00a0100), which is the total number\nof chores that you may choose from. The next C lines contain the\n(positive integer) number of minutes required to do each of these chores. You\ncan assume that each chore will take at most 100000 minutes."
}{
  "Example": "Sample Input \n1987\nSample Output 1\n2013\nSample Input 2\n999\nSample Output 2\n1023",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You might be surprised to know that 2013 is the first year since 1987 with\ndistinct digits. The years 2014, 2015, 2016, 2017, 2018, 2019 each have\ndistinct digits. 2012 does not have distinct digits, since the digit 2 is\nrepeated.\nGiven a year, what is the next year with distinct digits?",
  "Output": "The output will be the single integer D, which is the next year\nafter Y with distinct digits.",
  "Title": "CCC13J3S1 - From 1987 to 2013",
  "Input": "The input consists of one integer Y\n(0\u00a0\u2264\u00a0Y\u00a0\u2264\u00a010000), representing the starting\nyear."
}{
  "Example": "Sample Input \n100\n3\n150\n1\n1\nSample Output 2\n0",
  "Explanation": "When the first railway car enters the bridge, its weight of 150 will exceed\nthe maximum weight the bridge can hold. Thus, we cannot bring any railway cars\nacross the bridge.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A train of railway cars attempts to cross a bridge. The length of each car\nis 10\u00a0m but their weights might be different. The bridge is 40\u00a0m long\n(thus can hold 4 train cars at one time). The bridge will crack if the total\nweight of the cars on it at one time is greater than a certain weight. The cars\nare numbered starting at 1, going up to N, and they cross the bridge\nin that order (i.e., 1 immediately followed by 2, which is immediately followed\nby 3, and so on).\nWhat is the largest number T of railway cars such that the train\nof cars 1\u2026T (in order) can cross the bridge?",
  "Output": "Your output should be a non-negative integer representing the maximum number\nof railway cars that can be brought across the bridge in the order\nspecified.",
  "Title": "CCC13S2 - Bridge Transport",
  "Input": "The first line of input is the maximum weight W\n(1\u00a0\u2264\u00a0W\u00a0\u2264\u00a0100000) that the bridge can hold at any\nparticular time. The second line of input is the number N\n(1\u00a0\u2264\u00a0N\u00a0\u2264\u00a0100000) which is the number of railway cars\nthat we wish to move across the bridge. On each of the next N lines\nof input, there will be a positive integer wi\n(1\u00a0\u2264\u00a0i\u00a0\u2264\u00a0N,\n1\u00a0\u2264\u00a0wi\u00a0\u2264\u00a0100000) which\nrepresents the weight of the ith railway car in the\nsequence."
}{
  "Example": "Sample Input \n9\nSample Output\n2\n8",
  "Explanation": "The number 9 was shown to be a palindrome in base-2 and base-8 in the\nproblem description. The other bases do not lead to palindromes: for example,\nin base-3, 9 is expressed as 100, and in base-5, 9 is expressed as 14.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Most of the time, humans have 10 fingers. This fact is the main reason that\nour numbering system is base-10: the number 257 really means\n2\u00a0\u00d7\u00a0102 + 5\u00a0\u00d7\u00a0101 +\n7\u00a0\u00d7\u00a0100. Notice that each digit in base-10 is in the\nrange from 0...9.\nOf course, there are other bases we can use: binary (base-2), octal (base-8)\nand hexadecimal (base-16) are common bases that really cool people use when\ntrying to impress others. In base-b, the digits are in the range\nfrom 0...b-1, with each digit (when read from right to left) being\nthe multiplier of next larger power of b.\n\n\nSo, for example 9 (in base-10) is:\n9 in base-16\n11 in base-8 (1\u00a0\u00d7\u00a081 +\n1\u00a0\u00d7\u00a080 = 9)\n1001 in base-2 (1\u00a0\u00d7\u00a023 +\n0\u00a0\u00d7\u00a022 + 0\u00a0\u00d7\u00a021 +\n1\u00a0\u00d7\u00a020 = 9)\nNoticing the above, you can see that 9 is a palindrome in these 3 different\nbases. A palindrome is a sequence which is the same even if it is\nwritten in reverse order: English words such as dad, mom and\nracecar are palindromes, and numbers like 9, 11, 1001 are also\npalindromes.\nGiven a particular number X (in base-10), what bases b\n(2\u00a0\u2264\u00a0b\u00a0<\u00a0X) cause the\nrepresentation of X in base-b to be a palindrome?.",
  "Output": "The output should consist of a sequence of increasing integers, each on its\nown line, indicating which bases have the property that X written in\nthat base is a palindrome. Note that we will only concern ourselves with bases\nwhich are less than X, and that the first possible valid base is \n2.",
  "Title": "CCC13 Stage 2 - All Your Base Are Belong To Palindromes",
  "Input": "There will be one line, containing the integer X\n(2\u00a0\u2264\u00a0X\u00a0\u2264\u00a0109).\nFor test cases worth 80% of the points, you may assume\nX\u00a0\u2264\u00a010000."
}{
  "Example": "Sample Input \n2 8\n30\n20\n10\n40\nS 1\nW\nR 4 9\nS 4\nW\nR 2 35\nS 2\nW\nSample Output\n1\n4\n0\n1\n2\n2",
  "Explanation": "The results of the initial tourney are as follows:\n\nAs can be seen, competitor 1 wins 1 match, and competitor 4 wins the entire\ntourney. After this, competitor 4 is replaced by a new competitor with skill\nlevel 9. As can be seen below, this causes a different outcome for the tourney\nheld after the third command:\n\nFinally, the state of the tourney tree after the next competitor replacement\n(caused by the sixth command) is:\n",
  "Memory Limit": "512M",
  "Time Limit": "10.00s",
  "Description": "Don Cherry has been hired to run 24-hour coverage of a series of\nsingle-elimination, bracket-style, furniture disassembly tourneys\n(tournaments). Each competitor has a furniture disassembly skill level, an\ninteger between 1 and 109. In every head-to-head match, the\ncompetitor with the larger skill level wins and moves on, while the other is\neliminated from the tourney. It is guaranteed that, at any time, the skill\nlevels of all competitors are distinct, so there are no ties.\nThere are 2N\n(1\u00a0\u2264\u00a0N\u00a0\u2264\u00a020) competitor positions in the\ntourney tree, numbered 1, 2, ..., 2N from left to right.\nIn the first round, competitors 1 and 2 face off in a furniture disassembly\nrace, as do competitors 3 and 4, etc. In each subsequent round, the winners of\nthe first two matches from the previous round compete, as do the winners of the\nfollowing two, etc. After N rounds, a single winner remains. For\nexample, when N\u00a0=\u00a02, the tourney tree looks like this:\n\nwhere A represents the winner of the match between competitors 1 and 2, B\nrepresents the winner of the match between competitors 3 and 4, and C\nrepresents the winner of the match between A and B. The winner of this tourney\nis C.\nBecause of sponsorship contracts, some competitors will be replaced over\ntime. After any new person comes in, a new tourney is held.\nIn order to help Don Cherry, you must write a program to compute certain\ntourney statistics at various points in time, given a sequence of M\n(1\u00a0\u2264\u00a0M\u00a0\u2264\u00a0106) commands \u2014\nsee the input format below.",
  "Output": "For each W or S i command in the input, print out the corresponding integer on a line by itself.",
  "Title": "CCC13 Stage 2 - Tourney",
  "Input": "The first line of input contains two integers, N\n(1\u00a0\u2264\u00a0N\u00a0\u2264\u00a020) and M\n(1\u00a0\u2264\u00a0M\u00a0\u2264\u00a0106), separated by one\nspace.\nThe next 2N lines, for i from 1 to\n2N, each contain one integer\nSi, indicating the skill level of the initial\ncompetitor at position i in the tourney tree.\nEach of the following M lines will be a command in one of three\nformats:\nR i S means that the competitor\nat position i is removed, and replaced with a new one with skill\nlevel S. A new tourney should then be held.\nW means that your program should determine who won the\ncurrent tourney. Print the position i (between 1 and\n2N) of this competitor.\nS i means that your program should print out\nthe number of rounds that the competitor at position i won in the\ncurrent tourney."
}{
  "Example": "Sample Input \n5\n1 3\n2 3\n3 4\n4 5\nSample Output\n4 2",
  "Memory Limit": "64M",
  "Time Limit": "5.00s",
  "Description": "For your latest top-secret experiment, you will need a large quantity of\nHiggs bosons. To obtain these elusive particles, you will need to build a\nlarge hadron collider, a long circular tunnel that you can use to\naccelerate particles and smash them into each other.\nYou already have access to an extensive network of tunnels, which is\nguaranteed to be connected and free of cyclic paths. In other words, the\nexisting tunnels form a tree structure. This system can be represented\nby N junctions, labelled 1 through N, connected\nby N\u00a0-\u00a01 tunnels, each of which connects two\njunctions. Tunnels can be traversed in either direction (i.e., if there is a\njunction from a to b, that junction also goes from\nb to a).\nBy adding exactly one tunnel to the network, you can create a cyclic path,\nwhich you will use to build your large hadron collider. You wish to form the\nlongest possible collider in this way, where we define length as the number of\ntunnels in a cycle. Also, you would like to compute the number of ways to do\nthis\u2013 that is, the number of distinct pairs of junctions such that adding\na tunnel between them forms a cycle of maximum length.\nFor example, in the following network, we can form a collider of length 4 by\nbuilding a tunnel between junctions 1 and 5, or between 2 and 5:\n",
  "Output": "The output should consist of a single line with two space-separated\nintegers: the length of the longest possible collider, and the number of ways\nto achieve that length. Note that you may need a 64-bit integer to store the\nanswer (long long in C/C++, LongInt in Pascal).\nFor test cases worth 40% of the points, you may assume\nN\u00a0\u2264\u00a05000.",
  "Title": "CCC13 Stage 2 - LHC",
  "Input": "The first line of each test case will contain N\n(3\u00a0\u2264\u00a0N\u00a0\u2264\u00a0400\u00a0000), the number of junctions.\nThe next N\u00a0-\u00a01 lines will each contain two space-separated\nintegers i and j, indicating that there is a tunnel\nbetween junctions i and j."
}{
  "Example": "Sample Input \n3 7\nE 1 2\nE 2 5\nS 3 4\nE 2 3\nL 2 5\nS 1 3\nS 2 2\nSample Output\n3\n0\nNo\n0",
  "Explanation": "When Anatevka makes her first suggestion, the front 3 rows and leftmost 5\ncolumns of the theatre look as follows (where a P represents a person,\nand an S represents one of the suggested seats):\nThe person sitting in seat (1,2) is in the field of vision of both suggested\nseats, while the person sitting in seat (2,5) is only in the way of the right\none. As such, the total inconvenience of the two seats is\n1\u00a0+\u00a02\u00a0=\u00a03.\n\nThe second suggestion is shown below:\n\nThese two seats aren't obstructed by any people, so their total\ninconvenience is 0. The final suggestion is invalid, as one of its two seats\n(seat (2,3)) is already occupied.\nFinally, Brian can easily select two far seats which each have\ninconvenience 0, as the theatre has 109\u00a0-\u00a03 far\nrows with 1000 seats each, and most are far from the two people setting in the\ntheatre after the last event. For example, he might choose to take seat (4,6),\nwhile recommending that Anatevka enjoy the view from seat (100,1000).",
  "Memory Limit": "128M",
  "Time Limit": "2.00s",
  "Description": "Brian the Computer Science Nerd is going on a date with his girlfriend,\nAnatevka! His romantic location of choice is a movie theatre - but not an IMAX\ntheatre, of course, as that would be far too expensive.\nThis theatre has 109 rows of 1000 seats each, which are initially\nempty. The rows are numbered 1..109 starting from the one closest to\nthe screen, and the seats in each row are numbered 1..1000 from left to right.\nSeat c in row r is denoted as seat\n(r,c). Seats in rows 1..L\n(1\u00a0\u2264\u00a0L\u00a0\u2264\u00a01000) are considered to be\nclose to the screen, while seats in further rows are considered to be\nfar.\nOver the course of T\n(1\u00a0\u2264\u00a0T\u00a0\u2264\u00a0500000) minutes before the movie\nstarts, a number of events occur. During the ith minute,\neither a person enters and sits in the empty seat\n(Ri,Ci), the person sitting in the\noccupied seat (Ri,Ci) leaves, or\nAnatevka suggests that she and Brian take seats\n(Ri,Ci) and\n(Ri,Ci\u00a0+\u00a01). The type of\nthe ith event is represented by the character\nEi, with Ei = E indicating a\nperson entering, Ei = L indicating a person\nleaving, and Ei = S indicating a seating\nsuggestion. All seats involved in the events are valid seats inside the\ntheatre, and every seat that Anatevka suggests will be close, as she\nbelieves that they're the best.\nEvery time Anatevka makes a suggestion, Brian must, of course, analyze its\nquality. If either of the two seats she suggests is already occupied, he should\nexplain that her recommendation is invalid with a simple No. Otherwise,\nhe'd like to calculate the total inconvenience of both seats in such an\narrangement. The inconvenience of sitting in seat (r,c)\nis the number of occupied seats in its field of vision (excluding itself). The\nfield of vision of seat (r,c) includes all seats which\nare no further than it from seat (1,c) by Manhattan distance (i.e.,\nManhattan distance between\n(x1,\u00a0y1) and\n(x2,\u00a0y2) is\n|x1\u00a0-\u00a0x2| +\n|y1\u00a0-\u00a0y2|), as shown\nbelow (with the S representing a suggested seat, and an F\nrepresenting a seat within its field of vision):\n\nAfter all of the events have taken place, the movie is about to start, and a\nfinal decision must be made on where to sit - and Brian will handle that. He\nconcludes that seats that are far are clearly superior (as they offer a\nbroader view of the screen), and he knows that the point of going to the movies\nis to have an optimal viewing experience, so selecting two adjacent seats is\ncertainly not mandatory. As such, he'd like to determine the minimum total\ninconvenience for any two far, unoccupied seats in the theatre. Note\nthat, if one of the chosen seats is in the other's field of vision, this does\nnot count towards its inconvenience - it's only determined by other people\nsitting in the theatre.",
  "Output": "For each of Anatevka's suggestions (i.e., when\nEi\u00a0=\u00a0S in the input), output the string\nNo if the suggestion is invalid; otherwise, output the total\ninconvenience of the two suggested seats.\nThe last line of output should contain the minimum total inconvenience of\nany pair of far, unoccupied seats.",
  "Title": "CCC13 Stage 2 - A Romantic Movie Outing",
  "Input": "The first line of each test case contains two integers, L\n(1\u00a0\u2264\u00a0L\u00a0\u2264\u00a01000) and T\n(1\u00a0\u2264\u00a0T\u00a0\u2264\u00a0500000).\nThe next T lines each contain one character,\nEi (Ei\u00a0\u2208\u00a0{E, L, S}),\nand two integers, Ri and Ci, for\ni\u00a0=\u00a01..T\n(1\u00a0\u2264\u00a0Ri\u00a0\u2264\u00a0109;\n1\u00a0\u2264\u00a0Ci\u00a0\u2264\u00a01000).\nFor test cases worth 20% of the points, you may assume\nL\u00a0\u2264\u00a0100 and T\u00a0\u2264\u00a0400.\nFor test cases worth 60% of the points, you may assume\nL\u00a0\u2264\u00a0500 and T\u00a0\u2264\u00a050000."
}{
  "Example": "Sample Input \n3\n3\n0 0\n1 0\n0 1\n20 20\n60 20\n40 40\n4\n0 0\n1 1\n0 0\n1 1\n30 30\n19 23\n30 30\n19 23\n4\n0 0\n1 0\n1 1\n0 1\n0 0\n2 0\n2 1\n0 1\nSample Output\n3\n1\n0",
  "Memory Limit": "128M",
  "Time Limit": "10.00s",
  "Description": "While traveling from Earth to Krypton, Superman was caught in a wormhole and\ntransported instantly to some unknown location. Superman remembers seeing\nperiodic comets from Earth, and he can see some periodic comets from his\ncurrent location. He would like to use these comets to find his bearings, but\nfirst he has to match up which one is which.\nThe specific comets Superman sees are periodic Gaussian hyper-comets. A\nperiodic Gaussian hyper-comet is a sequence (p1,\np2, ..., pn) where each\npi is a 2-dimensional point\n(xi,\u00a0yi) with integer\ncoordinates. The comet visits some point pi and then it\nvisits point pi+1. The sequence is periodic:\nafter visiting pn the comet visits\np1, next (so the indices are interpreted modulo\nn), Gaussian hyper-comets also have the special property that\npi\u00a0\u2260\u00a0pi+1\nfor each i and\np1\u00a0\u2260\u00a0pn.\nSuperman was disoriented in both space and time. In terms of space this\nmeans a comet that he saw before might now have its whole set of points\nrotated, both axes scaled by the same positive factor, and/or\ntranslated. Furthermore, since he was disoriented in time, the first\npoint of a comet he used to know might not be the first point any more.\nFor example, the right-triangular hyper-comet ((0,\u00a00), (1,\u00a00),\n(0,\u00a01)) from earth might look like ((40,\u00a040), (20,\u00a020),\n(60,\u00a020)) or ((20,\u00a020), (60,\u00a020), (40,\u00a040)). Note that\nreversing time or space is not an allowed transformation, e.g. it's\nnot possible for this hyper-comet to appear as ((0,\u00a01),\n(1,\u00a00), (0,\u00a00)).\nYour goal is: given a periodic sequence of points corresponding to a\nGaussian hyper-comet Superman saw from earth, and a Gaussian hyper-comet\nSuperman sees now, determine if they could be the same comet.",
  "Output": "For each test case, if the two sequences could represent the same\nhyper-comet under this disorientation process, print out the smallest positive\ninteger s so that\nx1\u00a0\u00a0y1 could correspond\nxs\u2032\u00a0\u00a0ys\u2032. If\nthere is no such s, print 0.",
  "Title": "CCC13 Stage 2 - Transforming Comets",
  "Input": "The first line contains 1\u00a0\u2264\u00a0t\u00a0\u2264\u00a010, the\nnumber of test cases to follow.\nEach test case begins with an integer n where\n2\u00a0\u2264\u00a0n\u00a0\u2264\u00a0500000. The following n\nlines, for i from 1 to n, each contain a space-separated\npair of integers xi\u00a0\u00a0yi.\nThese lines denote the points for a sequence viewed from Earth. Then,\nsimilarly, there are n more lines each containing a pair of integers\nxi\u2032\u00a0\u00a0yi\u2032;\nthese lines denote the points for a sequence viewed Superman's current\nlocation.\nIt is guaranteed that all of the coordinates are integers between 0 and\n30000 (inclusive)."
}{
  "Example": "Sample Input \nzoo\n10\nSample Output 1\n2\nSample Input 2\n@#$%\n1000000\nSample Output 2\n16",
  "Memory Limit": "512M",
  "Time Limit": "10.00s",
  "Description": "Any string of length n has 2n subsequences,\nwhich are the strings obtained by deleting some subset of the characters. But\nthese subsequences may not all be distinct. For example, the string zoo\nhas only 6 distinct subsequences:\nthe subsequences z, oo, and zoo appear only once,\nthe empty subsequence appears only once,\nand the subsequences o and zo each appear twice.\nSuppose a string S has k distinct subsequences, and\nthat the ith one appears fi times. Then the\nrepetitivity of S is defined as . For example, the repetitivity of zoo is\n12 + 12 + 12\n+ 12 + 22 + 22 = 12.",
  "Output": "The output should consist of a single line, containing the repetitivity of\nS, modulo M.",
  "Title": "CCC13 Stage 2 - Repetitivity",
  "Input": "Each test case contains a line containing the string S (with\nlength at most 10000), followed by a line containing a single integer\nM (2\u00a0\u2264\u00a0M\u00a0\u2264\u00a0109). You\nmay assume that S only contains characters with ASCII codes between\n33 and 126 inclusive (these are all printable, nonwhitespace characters).\nFor test cases worth 20% of the points, you may assume that S\nwill be at most 20 characters long."
}{
  "Example": "Sample Input \n3\n4\n1 3 5 7\n3 4 8 0\n2 4 2 2\n1 2 5 5\nSample Output 2\n9",
  "Explanation": "After these games, we know the following:\nThere are two remaining games (team 3 plays team 2; team 1 plays team 4).\nTeams 1, 2 or 4 cannot achieve 6 points, since even if they win their final\ngames, their final point totals will be 4, 5 and 4 respectively. Thus, out of\nthe 9 possible outcomes (2 matches with 3 different possible results per\nmatch), team 3 will be the champion in all 9 outcomes.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You want to determine the chances that your favourite team will be the\nchampion of a small tournament.\nThere are exactly four teams. At the end of the tournament, a total of six\ngames will have been played with each team playing every other team exactly\nonce. For each game, either one team wins (and the other loses), or the game\nends in a tie. If the game does not end in a tie, the winning team is awarded\nthree points and the losing team is awarded zero points. If the game ends in a\ntie, each team is awarded one point.\nYour favourite team will only be the champion if it ends the tournament with\nstrictly more total points than every other team (i.e., a tie for first place\nis not good enough for your favourite team).\nThe tournament is not over yet but you know the scores of every game that\nhas already been played.  You want to consider all possible ways points could\nbe awarded in the remaining games that have not yet been played and determine\nin how many of these cases your favourite team will be the tournament\nchampion.",
  "Output": "The output will consist of a single integer which is the number of times\nthat team T is the champion over all possible awarding of points in\nthe remaining games in the tournament.",
  "Title": "CCC13J5S3 - Chances of Winning",
  "Input": "The first line of input will contain an integer T which is your\nfavourite team (1\u00a0\u2264\u00a0T\u00a0\u2264\u00a04).  The second\nline will contain an integer G, the number of games already played\n(0\u00a0\u2264\u00a0G\u00a0\u2264\u00a05).  The next G lines\nwill give the results of games that have already been played. Each of these\nlines will consist of four integers A, B,\nSA, SB separated by single spaces\nwhere\n1\u00a0\u2264\u00a0A\u00a0<\u00a0B\u00a0\u2264\u00a04, and\nSA, SB\u00a0\u2265\u00a00.  This\ncorresponds to a game between team A (which had score\nSA) and team B (which had score\nSB) where team A won if\nSA\u00a0>\u00a0SB, team\nB won if\nSA\u00a0<\u00a0SB and the game\nended in a tie if\nSA\u00a0=\u00a0SB.  The pairs\nA and B on the input lines are distinct, since no pair of\nteams plays twice."
}{
  "Example": "Sample Input \n10 3\n8 4\n3 8\n4 2\n3 2\nSample Output 1\nyes\nSample Input 2\n10 3\n3 8\n2 8\n3 4\n3 2\nSample Output 2\nunknown",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "You have a few minutes before your class starts, and you decide to compare\nthe heights of your classmates. You dont have an accurate measuring device, so\nyou just compare relative heights between two people: you stand two people\nback-to-back, and determine which one of the two is taller. Conveniently, none\nof your classmates are the same height, and you always compare correctly (i.e.,\nyou never make a mistake in your comparisons).\n After you have done all of your comparisons, you would like to determine\nwho the tallest person is between two particular classmates.  ",
  "Output": "The output is one line, containing one of three possible strings:\nyes (if p is taller than q),\nno (if q is taller than p),\nunknown (if there is not enough information to determine the\nrelative heights of p and q).",
  "Title": "CCC13S4 - Who is Taller?",
  "Input": "The first line contains two integers N and M separated\nby one space.  N, the number of people in the class, is an integer\nwith 1\u00a0\u2264\u00a0N\u00a0\u2264\u00a01000000.  M, the\nnumber of comparisons that have already been done, is an integer with\n1\u00a0\u2264\u00a0M\u00a0\u2264\u00a010000000. Each of the next\nM lines contains two distinct integers x and y\n(1\u00a0\u2264\u00a0x,\u00a0y\u00a0\u2264\u00a0N)\nseparated by a space, indicating that person number x was determined\nto be taller than person number y. Finally, the last line contains\ntwo distinct integers p and q\n(1\u00a0\u2264\u00a0p,\u00a0q\u00a0\u2264\u00a0N)\nseparated by one space: your goal is to determine, if possible, whether person\np is taller than person q. Note that it may be the case\nthat neither p nor q occur in the input concerning\nmeasurements between classmates, and each measurement between any two\nparticular people will be recorded exactly once."
}{
  "Example": "Sample Input \n15\nSample Output 1\n9\nSample Input 2\n2013\nSample Output 2\n91",
  "Memory Limit": "256M",
  "Explanation for Sample Case 2": "For example, start with 1, then get to 2, 4, 5, 10, 15, 30, 60, 61, 122,\n244, 305, 610, 671, 1342, and then 2013.",
  "Time Limit": "3.00s",
  "Description": "In the game of Factor Solitaire, you start with the number 1, and try to\nchange it to some given target number n by repeatedly using the\nfollowing operation. In each step, if c is your current number, you\nsplit it into two positive factors a,\u00a0b of your\nchoice such that\nc\u00a0=\u00a0a\u00a0*\u00a0b.  You then add\na to your current number c to get your new current\nnumber. Doing this costs you b points.  You continue doing this\nuntil your current number is n, and you try to achieve this at the\ncost of a minimum total number of points.\nFor example, here is one way to get to 15:\nstart with 1\nchange 1 to 1+1=2\u2014cost so far is 1\nchange 2 to 2+1=3\u2014cost so far is 1+2\nchange 3 to 3+3=6\u2014cost so far is 1+2+1\nchange 6 to 6+6=12\u2014cost so far is 1+2+1+1\nchange 12 to 12+3=15\u2014cost so far is 1+2+1+1+4=9.\nIn fact, this is the minimum possible total cost to get 15. You want to\ncompute the minimum total cost for other target end numbers.",
  "Output": "Compute the minimum cost that gets you to N.",
  "Title": "CCC13S5 - Factor Solitare",
  "Input": "The input costs of a single integer N\u00a0\u2265\u00a01. In at\nleast half of the cases N\u00a0\u2264\u00a05\u00d7104, in\nat least another quarter of the cases\nN\u00a0\u2264\u00a05\u00d7105, and in the remaining cases\nN\u00a0\u2264\u00a05\u00d7106."
}{
  "Time Limit": "2.00s",
  "Description": "3\n6*7\n67-25\n31+11\nSample Output\n42\n42\n42",
  "Title": "Shortest Code",
  "Memory Limit": "16M"
}{
  "Time Limit": "2.00s",
  "Description": "3\n6*7\n67-25\n31+11\nSample Output\n42\n42\n42",
  "Title": "Shortest Code",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n6 5 9\n1 2\n2 3\n3 4\n4 5\n5 3\nT 1 2 5\nT 5 6 1000\nS 2\nS 6\nT 2 3 1\nT 5 3 14\nS 1\nS 2\nS 4\n\nSample Output\n26\n",
  "Memory Limit": "64M",
  "Time Limit": "10.00s",
  "Description": "Facebook Headquarters - a mysterious, intimidating place, full of magical code and trade secrets. If outsiders were ever to breach the walls of the compound, which are protected by a legion of security guards and, more importantly, security foxes, the entire company could well be brought to its knees!\nActually, wait, tours of the place are given regularly...\nThe compound consists of N (1 \u2264 N \u2264 105) buildings, with M (1 \u2264 M \u2264 106) walkways running amongst them. The i-th walkway connects buildings Ai and Bi (1 \u2264 Ai, Bi \u2264 N, Ai \u2260 Bi), and no two buildings are directly connected by more than one walkway. There are no other ways to move from building to building.\nOver a period of D (1 \u2264 D \u2264 106) days, some events will occur at the Headquarters daily. One of two types of events will happen on the i-th day, indicated by the value of the character Ei. If Ei = \"T\" then a tour will take place \u2013 otherwise, Ei = \"S\", and a security sweep of a building will take place.\nIf a tour is given on the i-th day, visitors will enter the compound at building Xi, and leave from building Yi (1 \u2264 Xi, Yi \u2264 N, Xi \u2260 Yi). If it turns out that these two buildings are not actually connected by any sequence of walkways, then the tour will be cancelled, and the unfortunate visitors will be given Facebook T-shirts and promptly kicked out. Otherwise, a large number of groups of people will be led from building Xi to building Yi along various routes. No route will involve travelling along the same walkway multiple times (even in different directions), but a route might revisit the same building repeatedly, including buildings Xi and Yi. Along the way, some visitors will inevitably get \"lost\", and fail to rejoin their tour group. How many of them will get away with this will depend on the security levels that day, but it's safe to say that, in total, Oi (1 \u2264 Oi \u2264 1000) new outsiders will be left behind in each building which could possibly be part of any valid tour route from building Xi to building Yi. Good thing they'll no doubt have brought cameras to amuse themselves with while they wait to be found.\nOn the other hand, if a security sweep is conducted on the i-th day, then the security guards (and foxes) will carefully search building Zi (1 \u2264 Zi \u2264 N) for any trespassers remaining from previous tours, who will be kindly escorted out of the Headquarters (after being given Facebook T-shirts for the road, of course).\nBecause this company likes to collect data about everything, you've been hired to record how many outsiders were found in each sweep. However, to make things more interesting, you'll instead simply write a program to predict these values based on the map of the compound and the schedule of events!",
  "Output": "For each test case, output 1 integer, the total number of people escorted out of the compound, modulo 109 + 7.",
  "Title": "Tours",
  "Explanation of Sample": "On the first day, a tour is given from building 1 to building 2. The only valid route consists of simply crossing the walkway between these two buildings. As such, by the end of the day, 5 outsiders are left hiding in each of buildings 1 and 2.\nOn the second day, the planned low-security tour unfortunately cannot take place, due to no routes existing between buildings 5 and 6. Facebook should probably hire some new tour planners, as well as architects.\nOn the following two days, security sweeps of buildings 2 and 6 are carried out, with 5 and 0 outsiders found and removed, respectively.\nOn the fifth day, a tour is given from building 2 to building 3. There are exactly three valid routes, passing through buildings 2-3, 2-3-4-5-3, and 2-3-5-4-3. As such, one new outsider remains behind in each of buildings 2, 3, 4, and 5.\nOn the sixth day, a tour is given from building 5 to building 3. There are exactly two valid routes, passing through buildings 5-3 and 5-4-3. As such, 14 new outsiders take up residence in each of buildings 3, 4, and 5.\nFinally, security sweeps of buildings 1, 2, and 4 are conducted, evicting 5, 1, and 15 people, respectively. In total, then, 5 + 0 + 5 + 1 + 15 = 26 people will have been escorted out of the compound, which is still 26 when taken modulo 109 + 7. Following these events, buildings 3 and 5 still contain 15 outsiders, while the others contain none.",
  "Input": "Line 1: 1 integer, T (1 \u2264 T \u2264 20), the number of test cases\nFor each test case:\nLine 1: 3 integers, N, M, and D\nNext M lines: 2 integers, Ai and Bi, for i = 1..M\nNext D lines: 1 character, Ei, followed by the three integers Xi, Yi, and Oi if Ei = \"T\", or the single integer Zi if Ei = \"S\", for i = 1..K\n"
}{
  "Example": "Sample Input \n2\n1 3 0 1 5 6\nZZ\n2 1\n3 4 1 4 3 2\nFOXENINBOXEN\n5 2\n1000 11\n2 2\n\nSample Output\n24.00000 -2.00000 -2.00000\n7.05556 3.49091 3.49091 3.49091\n",
  "Memory Limit": "64M",
  "Time Limit": "60.00s",
  "Description": "Kit is competing on the latest popular gameshow, Fortunate Wheels. On this show, there is a secret word S (2 \u2264 |S| \u2264 105) consisting only of uppercase letters, known only to the host, and contestants can pay points to buy sequences of letters in hopes of matching part of S and earning more points! This show is clearly a scam, as the probability of earning more points than are spent is extremely low. Fortunately, Kit has come prepared \u2013 he knows the secret word! Even so, getting as many points as possible will not be easy.\nThere are N (1 \u2264 N \u2264 20) basic deals which contestants can take. The i-th deal costs Ai points (1 \u2264 Ai \u2264 104), and allows any sequence of Bi letters (1 \u2264 Bi < |S|) to be purchased. Furthermore, deals can be combined to purchase longer sequences! Combining a deal with cost C1 and length L1 with another deal (potentially the same one) with cost C2 and length L2 creates a new deal with cost C1 + C2 + W (0 \u2264 W \u2264 104) and length L1 + L2 (as long as L1 + L2 < |S|), which can in turn be used to create even bigger deals. For example, if W = 0, then a basic deal with cost and length equal to 1 could be combined with itself repeatedly to yield a new deal with both cost and length equal to any positive integer smaller than |S|.\nOnce Kit purchases a sequence of letters using one (potentially non-basic) deal, it will be matched against the secret word \u2013 twice! The host will spin the First Fortunate Wheel to select the starting index in S for the first matching, which is chosen uniformly at random such that the sequence will fit entirely within S. Then, the host will spin the Second Fortunate Wheel to select the starting index for the second matching, which is chosen uniformly at random such that the sequence will fit entirely within S and such that the value given by the First Fortunate Wheel will not be repeated. For example, if the sequence consists of a single letter, the First Fortunate Wheel might yield any of the indices in S with probability 1/|S| each, and then the Second Fortunate Wheel might yield any of the remaining indices with probability 1/(|S| \u2212 1) each. On the other hand, if the sequence has length |S| \u2212 1, then the first Wheel might yield either 0 or 1, and the second Wheel must yield the other. If, for both generated indices, the sequence miraculously happens to be equal to the substring of S of the same length starting at that index, then Kit will earn back Y\u00d7(|S| \u2212 |X \u2212 \u2113|)2 + Z points (1 \u2264 X < |S|, 0 \u2264 Y, Z \u2264 109), where \u2113 is the length of the sequence. If even one letter is off in either matching, however, Kit will earn no points at all! What has the game show industry come to?\nKit is carefully considering his first turn of the game. He obviously wants to maximize the number of points he'll gain, but worries that choosing the very best move might be suspicious. As such, he'd like to find the expected point values of the M (1 \u2264 M \u2264 20) best distinct moves before making his decision. Two moves are distinct if they involve purchasing different sequences of letters \u2013 the deal(s) used are ignored. Note that moves can have negative expected point values, due to the costs of deals.",
  "Output": "For each test case, output M real numbers on one line (accurate to within 10\u22122 in absolute or relative value), the M largest expected point values which can be earned, in descending order.",
  "Title": "Fortunate Wheels",
  "Explanation of Sample": "In the first test case, Kit's best move is to use the basic deal, costing 2 points, to purchase the sequence of letters \"Z\". No matter what pair of indices the two Fortunate Wheels yield, this sequence will match and earn Kit 5\u00d7(2 \u2212 |1 \u2212 1|)2 + 6 = 26 points. Any other sequence shorter than S cannot match S at even a single index, so Kit's second- and third-best moves consist of using the basic deal to purchase any other single-letter sequence, and simply losing the 2 points.\nIn the second test case, Kit's best move consists of combining the third basic deal with itself to yield a deal with cost 5 and length 4, and then purchasing the sequence \"OXEN\". His three next-best moves, which are the only other moves which get him a positive expected point value, involve using the third basic deal to purchase the sequences \"OX\", \"XE\", and \"EN\".",
  "Input": "Line 1: 1 integer, T (1 \u2264 T \u2264 150), the number of test cases\nFor each test case:\nLine 1: 6 integers, N, M, W, X, Y, and Z\nLine 2: 1 string, S\nNext N lines: 2 integers, Ai and Bi, for i = 1..N\n"
}{
  "Example": "Sample Input \n10\n2\n5\n6\n12\n76\n0\n200\n1\n32\n14\nSample Output\n912",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The upscale clothing company FurWear has recently expanded to the planet of Cyclopia. Cyclopia, however, does not have an atmosphere with oxygen, something that the workers producing FurWear products require to work. (They need food and water too, but they can figure that out on their own!) The Oelfinn, as the dominant species of Cyclopia, have a ready supply of oxygen, but they aren't willing to give it away freely. They do have a love of puzzles, however.\nThe Oelfinn have placed some numbers on some cards arranged in a circle, and will allow FurWear to pick one pair of adjacent cards. The Oelfinn are willing to give FurWear an amount of oxygen proportional to the product of the numbers on said cards.\nObviously, FurWear would like to maximise the amount of oxygen they receive, and have turned to you to help. Your task is to write a program that will find the largest product of any two adjacent numbers, which will then be stored on a chip implanted into a peon.",
  "Output": "On a single line, output the maximum product of any two adjacent numbers.",
  "Title": "Cyclopian Air",
  "Input": "The first line consists of a single integer N (8 \u2264 N \u2264 10 000). The following N lines each contain a single integer ai (0 \u2264 ai \u2264 30 000), the number on the ith card. The numbers will be given from the northernmost card, then clockwise all the way around."
}{
  "Example": "Sample Input \n5\n30\n34\n30\n20\n34\nSample Output\n2\n30\n34",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "After securing a steady supply of oxygen, FurWear is ready to begin production of their fine apparel. Unfortunately, since the Oelfinn are giants, it takes a long time to make clothing for them, so FurWear can only make one size of clothing. They have acquired the Cyclopian census data and would like to find the most common size. Can you help them?",
  "Output": "Output the number of most common sizes, followed by the most common sizes in ascending order, each on a separate line.",
  "Title": "Cyclopian Suits",
  "Input": "The first line consists of a single integer N (1 \u2264 N \u2264 50 000). The following N lines each contain a single integer ai (10 \u2264 ai \u2264 1000), the size of clothing worn by the ith Oelfinn."
}{
  "Example": "Sample Input \n10\n42\n23\n15\n52\n63\n24\n73\n54\n66\n10\n3\n1\n5\n10\nSample Output\n10\n42\n73",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "FurWear is running out of oxygen!\nAfter an emergency meeting between the Oelfinn and FurWear, and the ingestion of Earth-imported beer, the Oelfinn have decided to contract FurWear to perform analysis on their most recent census data (which now includes Oelfinn living on other planets). The Oelfinn wish to find how old the ith oldest Oelfinn is.\nDue to their abnormally long lifespans and quirky reproductive cycles, it is guaranteed that no two Oelfinn will be the same age.",
  "Output": "Output the correct answer to each query in the order given, on separate lines.",
  "Title": "Cyclopian Census",
  "Input": "The first line consists of a single integer N (1 <  N \u2264 60 000), the number of live Oelfinn. The following N lines each contain a single integer ai (10 \u2264 ai \u2264 1 000 000), the age of the ith Oelfinn (in millenia). The next line consists of a single integer Q (1 \u2264 Q \u2264 100), the number of queries to follow. The following Q lines each contain a single integer qi (1 \u2264 qi \u2264 N), the ith query."
}{
  "Example": "Sample Input \n4\nSample Output\nAB\nAC\nBC\nAB\nCA\nCB\nAB\nAC\nBC\nBA\nCA\nBC\nAB\nAC\nBC",
  "Memory Limit": "16M",
  "Time Limit": "3.00s",
  "Description": "There are few in the Cyclopian puzzle market now that FurWear has entered it. Discontent with merely selling clothing, FurWear has ripped off invented a puzzle named after a tower in the Chthonic city of Hanoi.\nIn FurWear's game, there are three pegs in a line. On the leftmost peg is a tower of N discs of unique sizes, sorted with the largest on the bottom and the smallest on the top. The goal is to move the entire tower to the rightmost peg. The challenge lies in that only one disc may be moved at a time, and no disc may be placed atop a smaller disc.\nYou've bet your colleagues that nobody can solve this puzzle in fewer moves than you. To this end, you've decided to write a program that will show you how to do so and memorise its output.",
  "Output": "You are to output the shortest sequence of moves that will move all discs to the rightmost peg. The pegs are labelled A, B, and C, with A being the leftmost peg and C being the rightmost peg. A move is denoted by the string xy where x is the peg from which a disc is moved, and y is the destination peg. (For example, moving a disc from A to C would be denoted by \"AC\".)\n\n",
  "Title": "Cyclopian Puzzle",
  "Input": "The input consists of a single integer N (1 \u2264 N \u2264 20), the number of discs initially on the leftmost peg."
}{
  "Title": "Math on Titan",
  "Example": "Sample Input \n3\n23 79 84\n59 57 81\n94 47 50\n\nSample Output 2\n3\n88.39437\n47.54930\n",
  "Input Format": "The first line of input will contain an integer G (1 \u2264 G \u2264 50), the number of giants close to the town.\nThe next G lines will each contain a description of a giant's neck. The first number of each line will be the x-coordinate of the giant's neck, and the remaining two numbers will be the y-coordinates of the bottom and top of the giant's neck, respectively. You may assume that the bottom y-coordinate will be strictly less than the top y-coordinate. Each of these three coordinates will be an integer between 1 and 100, inclusive.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The titans (giants) are coming! To make time for the civilians to escape, Mikasa will launch an attack on the giants. To destroy a giant, Mikasa must slash precisely at the back of their neck with her blade. The necks of the giants may vary in height, because not all giants are made equal. Conveniently, all giants are perfectly upright and lined up in a row today, so it is possible to represent their necks as vertical line segments defined by two points. Mikasa's attack can be also be defined by two points, and consists of the line segment formed by those two points. A giant is considered to be destroyed if the line defined by the starting and ending coordinates of Mikasa's attack intersects the line segment which represents the giant's neck (including passing through endpoints). Mikasa is running low on the fuel source which enables her to fly (to reach the taller giants), so she can only launch one attack. Your task is calculate her optimal flight path, which must adhere to the following restrictions:\nMikasa begins her attack at the point (0, a), where a is a non-negative real number.\nMikasa ends her attack at the point (100, b), where b is also a non-negative real number.\nNo other possible flight path will destroy more giants than the one Mikasa will take.\nOut of all the possible flight paths that destroy the same number of giants (and this number is maximal), the path Mikasa will take has the starting coordinate with the lowest a value. If multiple flight paths share the lowest a value, then Mikasa's path will have the lowest b value.",
  "Output Format": "The first line of output must contain the number of giants Mikasa destroys on her optimal flight path.\nThe second line of output must contain the y-coordinate of her starting point, a.\nThe third line of output must contain the y-coordinate of her ending point, b.\nBoth y-coordinates should be accurate to at least 5 decimal places.",
  "Explanation for Sample 1": "Mikasa can go along the line y = x + 1 to destroy the first three giants. No more than three giants can be destroyed on any valid flight path. Since there are multiple ways to destroy the first three giants, she chooses the best way as described in the problem statement."
}{
  "Example": "Sample Input \n5 6 1 4\n5\n4\n5\n10\n2\n1 2\n1 3\n2 4\n3 4\n4 5\n5 4\nSample Output\n22",
  "Memory Limit": "256M",
  "Time Limit": "4.00s",
  "Description": "It's that time of year again - the best ACM-ICPC team of all time is off to the World Finals! Being the best, they realize that a good performance starts before the contest itself - in order to get into the perfect mindset, they must have as much fun on the trip to the contest site as possible!\nThe Team is interested in a network of N (2 \u2264 N \u2264 106) cities (conveniently numbered 1..N), interconnected by M (1 \u2264 M \u2264 106) one-way flights (similarly numbered 1..M). Their hometown is city S (1 \u2264 S \u2264 N), and the contest will take place in city E (1 \u2264 E \u2264 N, S \u2260 E). Flight i goes from city ai (1 \u2264 ai \u2264 N) to city bi (1 \u2264 bi \u2264 N, ai \u2260 bi), and no two flights connect the same pair of cities in the same direction. In general, no cities are guaranteed to be reachable from other cities by a sequence of flights. However, The Team of course knows that city E is reachable from city S - they're not about to break their streak of triumphant wins!\nNow, each city i has a fun value, fi (0 \u2264 fi \u2264 106), associated with it. Along their trip, The Team will take time to have fun at every city they visit, including the first and last. However, though they can visit a city multiple times (including cities S and E), or even take a certain flight multiple times, surely this gets boring quickly - therefore, any city's fun can only be had up to once.\nThe Team wants to determine the maximal amount of fun they can have on any sequence of flights that starts at city S and ends at city E. Naturally, every member on The Team is so intelligent that they've calculated this value in their heads (and are quite excited about it) - but can you?",
  "Output": "1 integer, the maximal amount of fun The Team can have on their trip.",
  "Title": "Good Travels",
  "Explanation of Sample": "The network of cities and flights looks like this (the fun values of cities are shown below them):\nThe optimal route that The Team can take goes through cities 1 \u2192 3 \u2192 4 \u2192 5 \u2192 4, yielding a total fun value of 5 + 5 + 10 + 2 + 0 = 22.",
  "Input": "First line: 4 integers, N, M, S, and E\nNext N lines: 1 integer, fi, for i = 1..N\nNext M lines: 2 integers, ai and bi, for i = 1..M\n"
}{
  "Example": "Sample Input \n3 2 1 0\nSample Output\n3",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "Having arrived at the ACM-ICPC contest site in a fun-filled mood, The Team continues their important pre-contest preparations. Specifically, every world-class team knows the importance of making predictions about their upcoming submissions.\nThe Team knows that they'll get plenty of AC (Accepted) submissions, and they find those quite boring by now. As such, they'll focus on their incorrect ones. From their vast experience, The Team knows that they'll only get exactly N (1 \u2264 N \u2264 300) submissions wrong throughout the upcoming contest - in fact, they predict that, of those, exactly W (0 \u2264 W \u2264 100) will get WA (Wrong Answer), T (0 \u2264 T \u2264 100) will get TLE (Time Limit Exceeded), and the remaining R (0 \u2264 R \u2264 100) will get RE (Runtime Error). Note that W + T + R = N.\nAssuming that their predictions will certainly be correct, the members of The Team are wondering in how many ways that might occur. In other words, how many different ordered combinations of N incorrect results (each being WA, TLE, or RE) exist which satisfy their predictions? Since The Team doesn't make many mistakes, surely you can calculate this value, right? However, since it can get quite large for you, compute it modulo (109 + 7).",
  "Output": "1 integer, the number of valid ordered combinations of submission results, modulo (109 + 7).",
  "Title": "Good Predictions",
  "Explanation of Sample": "Out of 3 submissions, two are WA, while the third is TLE. The following 3 ordered combinations are then possible:\nWA, WA, TLE\nWA, TLE, WA\nor\nTLE, WA, WA\nThe answer is then 3 modulo (109 + 7) = 3.",
  "Input": "4 integers, N, W, T, and R"
}{
  "Example": "Sample Input \n12 4\nc++;\ngoto 6;\n18:\nc++;\nc++;\ngoto 2;\ngoto 6;\n6:\ngoto 18;\n2:\nc++;\nc++;\nSample Output\n11",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "It's time for the members of The Team to do what they do best - coding! Faster than you can say \"Dijkstra\", they've already produced an elegant piece of work. The program has N (1 \u2264 N \u2264 106) lines of code (conveniently numbered 1..N), and just one integer variable, c, which starts with a value of 0. The program starts executing at line 1, and every line i contains one of the following:\n\n\n\"c++;\" \u2014 The value of c is incremented by 1. Then, if i = N, the program terminates - otherwise, the program moves to line i + 1.\n\"x:\" \u2014 This line contains the label x, where x is an integer such that 1 \u2264 x \u2264 106. No value of x will appear as a label more than once in the program. If i = N, the program terminates - otherwise, the program moves to line i + 1.\n\"goto x;\" \u2014 The program jumps to the single line that contains the label x, where x is an integer such that 1 \u2264 x \u2264 106. It is guaranteed that, for every such line, the corresponding label will exist in the program.\nNow, even though this program is glorious, its creators are wondering if it's quite correct. In particular, they know that c should ideally reach a value of M (1 \u2264 M \u2264 1012), but they're not sure when. If the program terminates with c \u2264 M, then certainly there's an issue, and the program should get a WA (Wrong Answer). If the program will never terminate, and c will never reach a value of M, then that's also no good, and can be considered a TLE (Time Limit Exceeded). In all other cases, however, The Team would like to know exactly on which line c will first attain a value of M. Naturally, having written the program, they instantly realized this already. But can you?",
  "Output": "Either 1 integer, the number of the line on which c will first reach a value of M, or the string \"WA\" if the program terminates with c < M, or the string \"TLE\" if the program runs forever with c < M.\n\n\n",
  "Title": "Good Code",
  "Explanation of Sample": "The program will run through the following lines, and corresponding values of c:\nLine 1 (\"c++;\"), c = 1\nLine 2 (\"goto 6;\"), c = 1\nLine 8 (\"6:\"), c = 1\nLine 9 (\"goto 18;\"), c = 1\nLine 3 (\"18:\"), c = 1\nLine 4 (\"c++;\"), c = 2\nLine 5 (\"c++;\"), c = 3\nLine 6 (\"goto 2;\"), c = 3\nLine 10 (\"2:\"), c = 3\nLine 11 (\"c++;\"), c = 4\nAs can be seen, c first achieves a value of M = 4 on line 11.",
  "Input": "First line: 2 integers, N and M\nNext N lines: The i-th line of the program (as described above), for i = 1..N"
}{
  "Example": "Sample Input \n6 4 2\n2 4\n4 6\n1 1\n1 2\nSample Output\n5\n4\nAC?\n2",
  "Memory Limit": "64M",
  "Time Limit": "8.00s",
  "Description": "Any good coder knows that writing a program is only half the battle - and each member of The Team is most certainly a good coder. Maybe you're not a good coder, though, and you're wondering what the other half is. Debugging, of course!\nThe Team has a program with N (1 \u2264 N \u2264 106) lines (conveniently numbered 1..N) - and, unfortunately, every single line happens to initially have a bug in it. The programming language they're using will run the program from the start, line by line, and will always crash as soon as it encounters a total of L (1 \u2264 L \u2264 106) buggy lines.\nThe Team will make M (1 \u2264 M \u2264 106) attempts to debug the program. The ith attempt will consist of modifying every line in the inclusive range of lines ai..bi (1 \u2264 a \u2264 b \u2264 N). In particular, these coders are so amazing that, every single time they modify a buggy line, it becomes perfect! However, every time they modify a perfect line, they instead introduce a bug into it. After every debugging attempt, The Team will run their new program, and observe how many lines of code it gets through before crashing. Sometimes, the program may even terminate successfully! The modified code will then carry over for future modifications.\nNow, the members of The Team would like to know how their program will fare throughout the debugging session. Are your debugging skills good enough to figure that out?",
  "Output": "M lines: Either 1 integer, the number of lines the program executes before crashing after the first i modifications, or the string \"AC?\" if it doesn't crash at all, for i = 1..M.",
  "Title": "Good Debugging",
  "Explanation of Sample": "The following table shows the status of each line of code after every modification, with newly-changed lines shown in bold font. Buggy lines represented by 1s, and correct ones by 0s.\nAfter 1 modification, then, the program will encounter its second bug at line 5, at which point it will crash. Similarly, after 2 modifications, it will crash after 4 lines, and after 4 modifications, it will crash after just 2. After 3 modifications, however, it will not crash at all, as the program will contain only 1 bug at that point.",
  "Input": "First line: 3 integers, N, M and L.\nNext M lines: ai and bi, for i = 1..N"
}{
  "Example": "Sample Input \n6 6 3 2\n5 6 3\n2 1 5\n4 4 2\n4 3 1\n5 4 2\n7 6 1\n6\n5\n4\n3\n2\n1\nSample Output\n4\n3\n1\n2\n5\n5",
  "Memory Limit": "256M",
  "Time Limit": "6.00s",
  "Description": "The heated competition of the ACM-ICPC World Finals continues, and The Team is at the top of their game! Well, okay, maybe they're not actually doing so well, according to the scoreboard, yet. But they have a plan!\nThe contest is taking place in a huge room with a regular grid of desks. The columns and rows are each numbered 1..106, and the desk in the xth column and yth row is considered to have coordinates (x, y). The Team is sitting at coordinates (X, Y). There are N (1 \u2264 N \u2264 106) opposing teams (conveniently numbered 1..N), with team i having  mi (1 \u2264 mi \u2264 106) members, all sitting at coordinates (xi, yi). No desk is occupied by more than one team, and all other desks are empty.\nNow, The Team is interested in removing some of the more dangerous opponents from the competition. To accomplish this, they have a number of water balloons at their disposal (after all, where in the contest rules does it say that water balloons are not allowed?). Always conservative, they would first like to answer Q (1 \u2264 Q \u2264 106) queries - for the ith query, how many balloons it would theoretically take to take out all of the members of team  qi?\nIn order to do any real damage, the water balloons will of course have to be thrown extremely hard - in fact, in a perfectly straight line, and not over any obstacles besides empty desks. This means that, if team j lies exactly on the line segment from The Team to team i, then every member of team j must be dispatched before any members of team i can be hit. It takes one balloon to knock one person out (the members of The Team have received plenty of training, so they're not about to miss a throw). Note that these queries are all only theoretical (for the moment) - so each should be answered assuming that all teams are still untouched.\nThe members of The Team will need to carefully choose with opponents to take out, based on how well they're doing and how many balloons it would take, so they're already answered all of their queries in their heads. Maybe, if you can answer them as well, you can also adopt such techniques in the future\u2026",
  "Output": "Q lines: 1 integer, the number of balloons that would be required to take out team ti, for i = 1..Q.",
  "Title": "Good Aim",
  "Explanation of Sample": "The following grid shows the positions of the N opposing teams (marked with their numbers), as well as The Team (marked with a \"T\"). The line segments represent direct lines of sight to the opponents.\n\nAs can be seen, team 6 is blocked by teams 4 and 5. Therefore, taking them out would require 1 + 2 + 1 = 4 balloons in total. Similarly, team 5 is blocked by team 4, and requires 1 + 2 = 3 balloons. Teams 4, 3, and 2 are not blocked by any others, and so only require 1, 2, and 5 balloons, respectively. Finally, team 1 is blocked by team 3, and would require 2 + 3 = 5 balloons to dispose of.",
  "Input": "First line: 4 integers, N, Q, X, and Y\nNext N lines: 3 integers, xi, yi, and mi, for i = 1..N\nNext Q lines: 1 integer,  ti, for i = 1..Q"
}{
  "Example": "Sample Input \n5\n2 3\n10 2\n0 1\n5 4\n1 10\nSample Output\n5",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "The competition is drawing to a close, and The Team could really use another balloon to help them come out on top\u2026 good thing they're no chumps, and thought of this in advance! Before the contest started, they instructed an accomplice to go to the local balloon shop, buy an extra balloon, and deliver it to them at the conclusion of the event. It is true that their balloons then won't match up with the scoreboard's record of which problems they've solved - but, in the end, it's the balloons that count! In fact, The Team knows that, the larger their extra balloon, the more their opponents (and the judges) will be intimidated. They're not the best ACM-ICPC team in the world for nothing!\nHowever, this balloon shop is rather strange. The accomplice is given an empty balloon (a balloon with size 0), and told that he can tie it closed and keep it after exactly N (1 \u2264 N \u2264 106) minutes. In the meantime, during each minute, an inflation offer is available. If offer i is taken, then, at the start of the i-th minute, the balloon's size will be increased by ai (0 \u2264 ai \u2264 106). However, since the balloon cannot be closed until the end, its air will leak out at a constant rate, which depends on the gas that was used - in particular, its size will immediately start to decrease at a rate of di (0 \u2264 di \u2264 106) per minute, until either another offer is taken, or the balloon deflates completely (its size can never become negative, of course).\nThe Team will not be happy if they don't receive the largest balloon possible. Unfortunately, their accomplice happens to be...you. Can you figure out the maximal size that the balloon can have at the start of minute N + 1, before it's too late?",
  "Output": "1 integer, the maximal size which the balloon can have at the start of minute N + 1.",
  "Title": "Good Inflation",
  "Explanation of Sample": "The best option is to take only the offers at minutes 2 and 3. At the start of minute 2, the balloon will be inflated to size 10, and will deflate to size 8 by the start of minute 3. At that point, the balloon's size will not change, but its deflation rate will change to 1. As a result, by the start of minute 6, its size will be 5.\nNote that, if the offer at minute 1 is additionally taken, the balloon will simply be inflated to size 2 before deflating back to size 0 by the start of minute 2 - therefore, this will not change the outcome.\nAlso note that, if the offer at minute 4 is additionally taken, the balloon will inflate to size 12 at the start of minute 4, but its deflation rate of 4 will result in a size of 4 at the start of minute 6, which is not optimal.",
  "Input": "First line: 1 integer, N\nNext N lines: 2 integers, ai and di, for i = 1..N"
}{
  "Example": "Sample Input \n3 2\n0 5 1\n1 3 4\n1 2 6\nSample Output\n12",
  "Memory Limit": "64M",
  "Time Limit": "4.00s",
  "Description": "The ACM-ICPC World Finals are over! Which team came out on top? Why, only our favourite team - everyone's favourite team - the most deserving, lovable, courteous, powerful, flawless, successful team that has ever existed. Who else?\nIt's time to celebrate, and what better way is there to celebrate than by eating cake? The contest organizers have bought N (1 \u2264 N \u2264 200) cakes (conveniently numbered 1..N) - however, ever generous, The Team will only eat cake 1, leaving the rest for the other, inferior teams. They will need their cake to be as tasty as possible, though. To help with this, M (0 \u2264 M \u2264 200) globs of icing are available, which will be distributed among the cakes. Icing is always used in whole globs.\nThe cakes are arranged in a somewhat strange way - piled on top of one another. Cake 1 is directly on top of a table, while every other cake i (for i = 2..N) is directly on top of cake ci. c1 is considered to have a value of 0. Note that there may be multiple cakes on top of a single cake, and that the entire structure obeys the laws of physics (no cake is on top of itself, and no cakes are floating).\nNow, the tastiness of any cake i is determined by the formula bi + mi(xi + yi). bi (0 \u2264 bi \u2264 100) and mi (0 \u2264 mi \u2264 100) are simply properties of cake i, which depend on its size, shape, weight, temperature, fluffiness, and so on. xi is the number of globs of icing that are chosen to be applied to cake i. If there are no cakes on top of cake i, yi = 0 - otherwise, yi is the minimal tastiness of any cake directly on top of cake i. No cake will ever be capable of achieving a tastiness value larger than 260, no matter how the icing is distributed.\nThe members of The Team have already, of course, determined how the available icing could be optimally applied to the mountain of cakes to maximize the tastiness of their cake (cake 1). However, the contest organizers are the ones who will actually be distributing the icing, and they had better hope they get it right! Can you help them determine how tasty cake 1 should be? You don't want to know what The Team will do if their celebration isn't perfect\u2026",
  "Output": "1 integer, the maximal tastiness of cake 1, after all of the icing has been used",
  "Title": "Good Celebration",
  "Explanation of Sample": "The optimal icing distribution is 1 glob each on cakes 2 and 3. This gives cake 2 a tastiness of 3 + 4(1 + 0) = 7, and cake 3 a tastiness of 2 + 6(1 + 0) = 8. Since both of these cakes are on top of cake 1, it then has a tastiness of 5 + 1(0 + min(7,\u00a08)) = 12. No other icing distribution yields a higher tastiness for cake 1.",
  "Input": "First line: 2 integers, N and M\nNext N lines: 3 integers, ci, bi, and mi, for i = 1..N"
}{
  "Example": "Sample Input \n4 4\n1 2\n1 3\n2 4\n4 1\nSample Output\n0.50000",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "King Graff, the ruler of the land of Feerie, has a problem - his nation is under attack! Luckily, he has an army at his disposal, composed of a whopping S soldiers (where S = 2).\nFeerie consists of N (1 \u2264 N \u2264 106) towns (numbered 1..N), and M (1 \u2264 M \u2264 106) roads. The i-th road runs between distinct towns Ai and Bi, in both directions. No pair of towns is directly connected by more than one road, but every pair of towns is connected by at least one path of connected roads. King Graff would like to position his two soldiers in two different towns to prepare for the impending assault - however, since he's not much of a strategist, he'll choose the towns at complete random.\nGraff's only real concern is with his enemies using a divide-and-conquer strategy. His soldiers will be susceptible to this type of attack if there exists any single road that, if blocked, will prevent them from reaching each other by any system of connected roads. As the royal computer scientist, your job is to determine the probability that King Graff will be defeated.",
  "Output": "Line 1: 1 real number (rounded to 5 decimal places), the probability that the two towns chosen by Graff can be disconnected by the removal of any single road",
  "Title": "King Graff's Defense",
  "Explanation of Sample": "The map of Feerie is illustrated below:\n\nKing Graff can make 6 possible choices as to where to place his soldiers, and three of those (the three with one of the soldiers being at town 3) result in defeat (if the road between towns 1 and 3 is destroyed). The probability of failure is then 3/6 = 0.5.",
  "Input": "Line 1: 2 integers, N and M\nNext M lines: 2 integers, Ai and Bi, for i = 1..M"
}{
  "Example": "Sample Input \n4\n1 3\n2 3\n4 3\n6\nQ 1 4\nT 3 5\nQ 4 2\nQ 3 1\nT 3 1\nQ 1 2\nSample Output\n0\n5\n0\n1",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "King Graff, the ruler of the land of Feerie, feels that he is not quite rich enough. As such, he would like to impose travel tolls on his people! After all, why should they get to walk around his kingdom for free?\nFeerie consists of N (1 \u2264 N \u2264 105) towns (numbered 1..N), and N\u22121 roads. The i-th road runs between distinct towns Ai and Bi, in both directions. Every pair of towns is connected by exactly one path of connected roads. Currently, all travel is free, but King Graff is interested in charging for passage through certain towns.\nHe is planning to have a meeting with the royal computer scientist - that would be you. The meeting will last M (1 \u2264 M \u2264 105) minutes, and in the i-th minute, one of two things will occur, described by Ti. If Ti = \"T\", Graff will proclaim that town Xi shall henceforth cost Yi (0 \u2264 Yi \u2264 109) dollars to pass through, and you'll update the map accordingly. Otherwise, if Ti = \"Q\", he will ask you how much a trip from town Xi to a different town Yi would currently cost a commoner, in order to gauge the effectiveness of his tolls - and you had better answer quickly! Note that neither the starting nor the ending town's tolls are included in a trip's cost, as they are not passed through. Note also that a town's toll may be modified by Graff multiple times throughout the meeting, in which case the most recent modification at any point will stand.",
  "Output": "X lines (where X is the number of questions asked by King Graff): 1 integer, the cost of the i-th trip asked for (in dollars), for i = 1..X",
  "Title": "King Graff's Tolls",
  "Explanation of Sample": "The map of Feerie is illustrated below:\n\nThe first trip asked for by King Graff goes through towns 1 \u2192 3 \u2192 4. Since town 3 has no toll at that point, the trip's cost is 0.\nThe second trip goes through towns 4 \u2192 3 \u2192 2 and has a cost of 5, due to the new toll on town 3.\nThe third trip goes through towns 3 \u2192 1, passing through no towns and so costing nothing.\nThe final trip goes through towns 1 \u2192 3 \u2192 2 and costs only 1, as town 3's toll is reduced by then.",
  "Input": "Line 1: 1 integer, N\nNext N - 1 lines: 2 integers, Ai and Bi, for i = 1..N\u22121\nNext line: 1 integer, M\nNext M lines: 1 character, Ti, and 2 integers, Xi and Yi, for i = 1..M"
}{
  "Example": "Sample Input \n5 7 2 3 7\n2 3 5\n3 2 1\n2 1 4\n1 3 3\n2 4 3\n4 5 2\n5 3 3\n3\n1\n4\n5\nSample Output\n4",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "King Graff, the ruler of the land of Feerie, is going on a trip through his realm! He would like to give his people a chance to see their great king amongst them, almost as if he too were a petty commoner with no future.\nFeerie consists of N (1 \u2264 N \u2264 104) towns (numbered 1..N), and M (1 \u2264 M \u2264 105) roads. The ith road runs from town Ai to a different town Bi (and can only be travelled in that one direction), and takes Ti (1 \u2264 Ti \u2264 109) minutes to traverse. No pair of towns is directly connected by more than one road in the same direction. King Graff will start his trip at town X, and would like to end at a different town Y. Furthermore, since he has better things to do, he would like to complete it in at most L (1 \u2264 L \u2264 1015) minutes.\nHowever, Graff does not like to go long without being worshipped, and the only proper place to do this is in a shrine built to him. S (1 \u2264 S \u2264 100) distinct towns contain such shrines - the ith shrine is in town Hi. He would like to minimize the longest continuous stretch of time spent during the trip without passing through any shrines. As the royal computer scientist, your job is to determine the length of this stretch, or break the news to your king that the trip cannot be completed in time. Note that the trip may be impossible to complete in any amount of time, if town Y is not reachable from town X by any path of connected roads.",
  "Output": "Line 1: 1 integer - the minimum value for the longest continuous stretch of travel time spent away from shrines (in minutes), or -1 if the trip cannot be completed in at most L minutes",
  "Title": "King Graff's Trip",
  "Explanation of Sample": "The map of Feerie is illustrated below:\n\nThe optimal route goes through towns 2 \u2192 1 \u2192 3, taking 7 minutes with at most 4 minutes spent away from any shrines. The route 2 \u2192 3 is shorter (taking 5 minutes), but has a longer continuous time away from shrines (5). The route 2 \u2192 4 \u2192 5 \u2192 3 has a shorter such value (3), but takes longer than 7 minutes in total (8) and as such is not allowed.",
  "Input": "Line 1: 5 integers, N, M, X, Y, and L\nNext M lines: 3 integers, Ai, Bi, and Ti, for i = 1..M\nNext line: 1 integer, S\nNext S lines: 1 integer, Hi, for i = 1..S\n"
}{
  "Example": "Sample Input \n3 1\n0 1 1\n1 0 1\n1 1 0\nSample Output\n6\nNote from admin: the test data for this problem is, in particular, erroneous. In certain cases, the answer is too large to be contained in a 32-bit signed integer. However, you should not move to larger data types, and should instead use this type (int in C/C++, longint in Pascal) to store the answer and \"allow it to overflow\" when necessary. Be cautious in other languages where 32-bit signed integers are not the primarily used type.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Counting Paths"
}{
  "Example": "Sample Input \n3\n0 1 0\n0 0 1\n0 0 0\nSample Output\n2",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Shortest Path"
}{
  "Example": "Sample Input \n5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 1 1\n0 0 1 0 1\n0 0 1 1 0\nSample Output\n1\n2\n3 4 5",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Connected Components"
}{
  "Example": "Sample Input \n3\n0 1 0 \n0 0 1\n1 0 0\nSample Output\nNO\nSample Input 2\n3\n0 1 0\n0 0 1\n0 0 0\nSample Output 2\nYES",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Directed Acyclic Graph"
}{
  "Example": "Sample Input \n3\n0 1 1\n1 0 1\n1 1 0\nSample Output\n1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Trees"
}{
  "Example": "Sample Input \n4 3\n1 2\n2 3\n3 4\n2\n1\n2\nSample Output\n2",
  "Memory Limit": "32M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "Travelling Salesmen"
}{
  "Example": "Sample Input \n3 3\n1 2 1\n2 3 2\n1 3 5\nSample Output\n3",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "",
  "Title": "Shortest Path"
}{
  "Example": "Sample Input \n4 4\n1 2 2 0\n2 3 1 1\n3 1 1 0\n3 4 1 1\nSample Output\n1 4",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "",
  "Title": "Cable TV"
}{
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "I'm thinking of a number between 1 and 2\u00d7109, inclusive.\n\nNow it will be your job to try to find my number!\nTo guess a number, just print it out. See\nthe wiki for instructions on\nflushing output in your language; you must do this after every\nguess you print.\nI will output something back: \"Higher\" if your number is too low, or \"Lower\" \nif your number is too high.\nI will output \"OK\" if you guessed correctly! Your program should stop at this point.\nYour guessing algorithm must be optimal\u2014you must take less than 32\nguesses.",
  "Title": "Guess the Number",
  "Sample session": "You: 10\nMe: Lower\nYou: 8\nMe: Higher\nYou: 9\nMe: OK"
}{
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "I'm thinking of a number between 1 and 2\u00d7109, inclusive.\n\nNow it will be your job to try to find my number!\nTo guess a number, just print it out. See\nthe wiki for instructions on\nflushing output in your language; you must do this after every\nguess you print.\nI will output something back: \"Higher\" if your number is too low, or \"Lower\" \nif your number is too high.\nI will output \"OK\" if you guessed correctly! Your program should stop at this point.\nYour guessing algorithm must be optimal\u2014you must take less than 32\nguesses.",
  "Title": "Guess the Number",
  "Sample session": "You: 10\nMe: Lower\nYou: 8\nMe: Higher\nYou: 9\nMe: OK"
}{
  "Example": "Sample Input \n4.242641 2.236068 1.414215 2.236068 45 243.43495 1\n100.0 100.0 10.0 10.0 135.0 315.0 100.0\n101.99 607.37 16.69 16.54 329.17 317.29 6061.14\n162.92 380.26 6.71 5.49 227.61 69.98 3203.42\n815.85 681.36 3.61 9.48 207.39 47.93 1540.80\n\nSample Output\n10.00\n2200.00\n20920.74\n38878.86\n21378.26\n",
  "Explanation": "The following diagrams depict the first test case in the sample input.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A recent discovery in the field of astrophysics dealing with the BICEP2 (Background Imaging of Cosmic Extragalactic Polarization) and Keck Array experiments has produced amazing evidence to support the theory of cosmic inflation! Inflation refers to the rapid expansion of the universe at a rate much faster than the speed of light, lasting from 10\u221236 seconds to sometime between 10\u221233 and 10\u221232 seconds after the Big Bang. During this incredibly short period, the volume of the universe was increased by a factor of at least 1078. This discovery is a huge step in the direction of confirming the Big Bang theory.\nPart of the evidence for the Big Bang theory is the observation that planets and particles in the universe are constantly moving apart from each other. The first particles of the universe (including W and Z bosons and Higgs bosons) formed at the end of the inflationary period and were dispersed throughout the universe. Your task is to model the simple dispersion of two such particles from the singularity at the beginning the Big Bang.\nFor simplicity's sake, we will work in 2 dimensions only for this problem. Let us label our particles A and B, and set the \"centre\" of the universe (where the singularity of the Big Bang is originally concentrated) as the origin of a Cartesian plane, the point (0, 0). Inflation has already propelled the two particles RA and RB metres, respectively, away from the centre. The particles, after being accelerated, are now moving at a constant velocity of VA and VB m/s away from the centre. The directions in which particles A and B are moving are, respectively, \u03b1 degrees and \u03b2 degrees counterclockwise relative to the positive x direction. Given this information, what is the distance between the particles t seconds after inflation has ended?",
  "Output": "For each test case, output a single real value, rounded and displayed to exactly 2 decimal places. The distance the particles are from each other after t seconds has elapsed.",
  "Title": "Cosmic Inflation",
  "Input": "The input will contain 10 test cases. Each test case will consist of a single line with 7 space separated real values, in the order: RA, RB, VA, VB, \u03b1, \u03b2, and t. It is guaranteed that all values in the input will be less than 10000 in magnitude, and that the paths of A and B will never overlap."
}{
  "Example": "Sample Input \n20\n30\n\nSample Output\n2\n2\n2\n1\n2\n1\n2\n1\n2\n1\n3\n",
  "Input Format": "The input consists of two lines. The first line will contain the integer A, and the second line will contain the integer B.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "\n\"What do we make them do for problem A?\"\n\"Uh\u2026 make them prime factorize a number.\"\n\"Isn't that a bit too easy?\"\n\"Fine, make them prime factorize a BIG number.\"\n\"Like with GNFS? Isn't that a bit too hard?\"\n\"Fine, let's make them prime factorize a lot of numbers.\"\n\"Just how many are you thinking?\"\n\"All of them.\"\n\"wat.\"\n\"k screw this, let's slap on some bounds and call it a day.\"\n\nGiven two integers A and B (2 \u2264 A \u2264 B \u2264 1000000), determine the number of distinct prime factors for each integer between A and B, inclusive.",
  "Output Format": "The output should contain B \u2212 A + 1 lines. Each line should contain a single integer, the number of distinct prime factors of A, A+1, \u2026, B.",
  "Title": "Distinct Prime Factors"
}{
  "Title": "Benergy Transfer",
  "Example": "Sample Input \n4\n0 0 0 0\n0 0 0 1\n0 0 0 -1\n0 0 0 -1\n\nSample Output 2\n0\n",
  "Input Format": "The 1st line contains a single integer N (2 \u2264 N \u2264 100000) , the number of dimensions.\nThe 2nd line contains N integers, the coordinates of A, representing Ben's initial position at t = 0.\nThe 3rd line contains N integers, the coordinates of B, representing the HV star's initial position at t = 0.\nThe 4th line contains N integers, the velocity vector VA, where the i-th integer represents the distance moved in the i-th coordinate of point A during each unit of time after t = 0.\nThe 5th line contains N integers, the velocity vector VB, where the i-th integer represents the distance moved in the i-th coordinate of point B during each unit of time after t = 0.\nEach number in the input will be between \u2212106 and 106.\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Explanation for Sample 2": "In this example, Ben has been transferred to 4D land. He is located at (0, 0, 0, 0) and the star is located at (0, 0, 0, 1). Every second, Ben and the star will both move \u22121 in the 4th dimension. This means that Ben and the star will forever be 1 unit of distance apart, so he might as well make the energy transfer immediately, at t = 0.",
  "Description": "It is not widely known, but outside of playing Hearthstone and watching NGNL, Ben is actually a quantum mechanics expert. He is very interested in string theory, but he heard that in order for string theory to be mathematically consistent, the concept of more than just 3 spacial dimensions must be introduced. While fooling around on Wikipedia all day (his primary research routine), he discovered that \"flat space string theories are 26-dimensional in the bosonic case while superstring and M-theories turn out to involve 10 or 11 dimensions for flat solutions.\" Whatever that meant, Ben read it and was in hysterics.\n\"HA\", he exclaimed. \"Physicists are such noobs these days. 10 dimensions? 26 dimensions? How about 100000 dimensions. Ain't nothing I can't handle.\"\nWhile Ben was probably referring to his ability to solve physics problems in 100000 dimensions, the universe had heard this statement and was not impressed. That night while Ben was still in his dreams, the fabric of space-time in his realm had transfered him to N-D Land (where the number of dimensions N \u2264 100000, as Ben boasted he could handle). After waking up, Ben finds himself on a rocket-ship hurtling through space.\nThe first thing he noticed was that everything around him is extremely\u2026weird. He was able to glide around the ship in so many miraculous directions that he never thought existed. Just as his puny 3D brain was busy being overwhelmed by the new change of universes, a series of loud beeps from the front of the ship caught his attention. Approaching the dashboard, he saw the flashing message: ENERGY LEVEL: CRITICALLY LOW. Ben looked out the window and noticed nothing but pitch darkness. After getting the Newton's first law question wrong on his physics test, he learned that a constantly moving object will not stop unless acted on by any external, unbalanced forces. That means, Ben's ship is bound to go on forever until it gets absorbed by a star, torn apart by a black hole, or demolished by a planet, space junk, or whatever obstacles occupy the peculiar universe. His ship's energy will soon run out, so there is no chance of him turning it around when these things happen. He'll just have to accept his sad fate.\n\nBut wait! Just as he was about to give up hope, he noticed a faint glow in the distance. Alas \u2013 it's a star! But\u2026 why is it moving so quickly!?! Ah yes, that's when Ben remembered from one of his Wikipedia readings that this is probably a hypervelocity star, that is, a star moving so quickly that its velocity exceeds the escape velocity of its galaxy.\n\"What massive amounts of energy must be involved with such a majestic cosmic entity\", Ben thought to himself, \"there is hope now!\"\nAfter some digging through manuals, Ben discovered that, sure enough, his rocket-ship had integrated energy collection capabilities. The ship is able to capture the radiant and thermal energy of any nearby object \u2014 the closer the object, the more energy will be transfered over to the ship! The encounter with this star might be his only chance to repower ship, so Ben better make the absolute most out of the energy transfer or risk dying in this realm of a bajillion dimensions.\nIn N-D Land, every point in space can be represented using a coordinate of N numbers (x1, x2, \u2026, xN). We shall let two such N-dimensional points A and B respectively represent the locations of Ben's ship and and the HV star at t = 0. Ben's velocity is represented by the vector VA = (VA,1, VA,2, \u2026, VA,N). This means that during every unit of time, the value xi describing Ben's position in the i-th dimension will increase by VA,i. Similarly, the velocity of the star can be represented by the vector VB = (VB,1, VB,2, \u2026, VB,N).\nKnowing these pieces of information, Ben would like to find out just how close he is ever going to get to the star, and at what time he will get the closest. Please help him make the most of this energy transfer!",
  "Output Format": "Output a single nonnegative real number t \u2013 the time at which the Euclidean distance between Ben and the star will be minimized.\nIf the time is not unique, output the smallest value of t \u2265 0 such that Ben and the star's Euclidean distance will be minimized.\nYour output will be considered correct if it is accurate to \u00b110\u22125 (5 digits after the decimal).",
  "Explanation for Sample 1": "In this example, Ben happens to have been transferred to 2D land. Ben starts out at (0, 0) and the star starts out at (5, 0). Every unit of time, Ben moves 1 unit in the positive x-direction and 1 unit in the positive y-direction. Every unit of time, the star moves by 2 in the positive y-direction. Ben performs the energy transfer at t = 2.5, when the ship will be at (2.5, 2.5) and the star will be at (5, 5). This is the closest they'll ever be, with a distance of \u221a((5 \u2212 2.5)2 + (5 \u2212 2.5)2) \u2248 3.53553. The scenario is depicted in the figure below.\n"
}{
  "Subtask 1 [30% of points]": "R = 1.",
  "Example": "Sample Input \n3 4\n1 2 3 1\n5 7 2 1\n1 4 1 0\n\nSample Output 1\n14 3\n\nSample Input 2\n3 3\n1 1 0\n0 0 1\n1 1 0\n\nSample Output 2\n3 5\n",
  "Scoring": "\nIf your output is incorrectly formatted, then your program will score 0 points.\nOtherwise, if you correctly determine the first number but not the second, then your program will score 40% of points for the test case.\nIf both numbers are correct, then you will receive 100% of points for the test case.\n",
  "Subtask 2 [30% of points]": "R \u2264 10.",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line contains two space-separated integers R and C.\nThe next R lines each contain C space-separated integers representing the tastiness values of the pies.\n",
  "Time Limit": "2.00s",
  "Subtask 3 [40% of points]": "There are no additional restrictions.",
  "Description": "Dorian loves pies, and he especially loves his local pie shop \u2014 that's why he's bought an all-you-can-eat pie dinner! The pies have been arranged into a grid with R rows and C columns (1 \u2264 R, C \u2264 16). The pie in row i and column j has a tastiness value ti,j (0 \u2264 ti,j \u2264 1000). Dorian is a messy eater, and whenever he eats a pie, he destroys all pies adjacent to it. He would like to maximize the sum of the tastiness values of the pies he eats, and also figure out how many ways he can achieve this sum.\nTwo pies respectively located at (r1, c1) and (r2, c2) are adjacent if they are exactly 1 unit of distance apart; that is, |r1 \u2212 r2| + |c1 \u2212 c2| = 1.",
  "Output Format": "A single line containing two space-separated integers: the maximum possible sum and the number of ways to reach this sum. Since the number of ways may be very large, you should give the value modulo 1000000007 (109 + 7).",
  "Title": "Pie Shop"
}{
  "Title": "Kuuhaku Numbers",
  "Example": "Sample Input \n1111111\n1111123\n\nSample Output 3\n13\n",
  "Input Format": "\nThe 1st line of input will contain the integer A.\nThe 2nd line of input will contain the integer B.\nYou can assume for test cases worth 30% of points, 1 \u2264 A \u2264 B < 106.\n",
  "Memory Limit": "256M",
  "Explanation for Sample 3": "All numbers between 1111111 and 1111123 are KH-numbers.",
  "Time Limit": "3.00s",
  "Explanation for Sample 2": "The valid KH-numbers are 2454449 and 2454455.",
  "Description": "Shiro is enthralled by the latest FPS (first person shooter) game in the Eastern Federation. A lot is riding on this game, so she is planning to snipe the other player, Izuna, for a decisive victory. Shiro plans to pull this off from a kilometer away, and Izuna is in a shelter, so this requires very advanced mathematical calculations. Shiro needs a special sequence of numbers, the Kuuhaku numbers (a.k.a. KH-numbers) to accomplish her goal.\nThe KH-numbers have an interesting property: examining each digit of an N digit KH-number in base-10 from left to right (most significant to least significant), there will exist a length 6 subsequence of the digits that are nondecreasing in value. More formally: A number in the form aN\u00d710N\u22121 + aN\u22121\u00d710N\u22122 + \u2026 + a1\u00d7100 has the sequence of digits {aN, aN\u22121, \u2026, a1}. This number is a KH-number iff there exists a sequence {c1, c2, \u2026, ck} for k \u2265 6, where 1 \u2264 ci \u2264 N (for 1 \u2264 i \u2264 k) and ci > ci + 1 and aci \u2264 aci + 1 (for 1 \u2264 i < k).\nShiro needs all the KH-numbers between A and B (1 \u2264 A \u2264 B < 1018) to complete her calculations. In the time you need to compute all those numbers, she is sure that she can calculate the exact numbers in her head. Therefore, Shiro only needs you to determine the number of KH-numbers that exist between A and B to verify her calculations.",
  "Output Format": "A single integer, the number of KH-numbers between A and B, inclusive.",
  "Explanation for Sample 1": "The valid KH-numbers are 111111, 111112, 111113, 111114, 111115, 111116, 111117, 111118, 111119, 111122, 111123, 111124, 111125, 111126, 111127, 111128, and 111129."
}{
  "Title": "English Essay",
  "Example": "Sample Input \n      <essay> ::= <paragraph> { <paragraph> }\n  <paragraph> ::= <sentence> \".\" { \" \" <sentence> \".\" } <EOL>\n   <sentence> ::= <noun-phrase> \" \" <verb-phrase>\n<noun-phrase> ::= <pronoun> |\n                  <noun> |\n                  <article> \" \" <noun>\n<verb-phrase> ::= <verb> |\n                  <verb-phrase> \" \" <noun-phrase> |\n                  <verb-phrase> \" \" <adverb> |\n                  <verb-phrase> \" \" <adjective>\n       <noun> ::= cat | mice\n    <pronoun> ::= I | me | you\n       <verb> ::= am | are | is | eats\n  <adjective> ::= cool | smelly | smart\n     <adverb> ::= quickly | slowly\n    <article> ::= the | a | an\n\nSample Output 2\n6",
  "Input Format": "The input will contain the proper format of the essay, using the Backus-Naur Form variant as described above. It is guaranteed that all used symbols, including the symbol <essay>, will be defined exactly once in the input. Definitions may span across multiple lines, although the start of a new definition will always be on a separate line than the end of the previous definition. A literal in quotes will never span across multiple lines. Symbols, literals, \"::=\"s, \"|\"s, and brackets will be separated by 1 or more spaces. There may be up to 10000 symbols defined, and the size of the input will not exceed 5MiB. There may be empty lines in the input which you must ignore.\nNote that the Backus-Naur Form is not particularly standardized. It is mostly used to describe languages rather than to implement them, so different sources will have different variations. Some constructs used in this problem such as the quantifier brackets are part of the Extended Backus-Naur Form. The input will not employ any other constructs from this form (e.g. single quoted strings, comments, grouping with parentheses, etc.) unless it is explicitly mentioned in this problem statement.",
  "Memory Limit": "256M",
  "Time Limit": "10.00s",
  "Explanation for Sample 2": "One possible shortest string is \"I am.\" followed by an EOL character, for a total length of 6.",
  "Description": "The school year is finally coming to a close, and you're dying to get out of school. However, there's still one subject that has yet to be fully taken care of \u2014 English. Writing essays is the bane of your existence, but you still have a final essay due that's worth 30% of your final grade. Your English mark is currently at a whopping 64%, and all that really matters now is passing (with a 50%). Luckily, your English teacher also happens to be the CompSci teacher, so some strings may be pulled to save your butt.\nYou calculated that if you get 20% on this essay, your final grade will be 64\u00d70.7 + 20\u00d70.3 = 50.8% \u2014 barely enough to pass! Considering that you're a really bright programmer, your teacher pities you quite a bit, and has decided to make a deal with you. He claims that he will give you a bare minimum of 20% on your essay, provided that it is in proper essay format with formal English, proper grammar, spelling, blah blah blah. You really don't want him to eat his words and fail you by accident, so you decided to make him clearly explain what he wants.\nSo you ask your teacher, \"hey mister, what exactly is a formal essay format?\". In response, he asks you what you've even been doing the entire year in his class, but you do not succumb to his begging of the question. Finally, he gives in to you because he is impressed by how much you care about this assignment. Being a CompSci teacher, he decides to send you the formal definition of an English essay in Backus-Naur Form (BNF).\nIn BNF, a language or article can be described using a list of symbol definitions. Each definition associates a symbol (represented by an identifier in <> angle-brackets) to an expression. An expression is any combination of concatenations and/or unions of symbols, literal values, and expressions.\nFor example, a BNF definition for any integer is as follows:\n       <integer> ::= \"0\" | [ \"-\" ] <natural-number>\n<natural-number> ::= <non-zero-digit> { <digit> }\n<non-zero-digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n         <digit> ::= 0 | <non-zero-digit>\n\nIn the above example: \"::=\" indicates a definition. Any series of consecutive expressions indicate a concatenation, meaning that all those expressions must be matched in the order given by the definition. \"|\" denotes a union, indicating that either the expression on the left or the expression on the right side of the sign can be matched. An expression in curly brackets {} indicates that it may be matched 0 or more times. An expression in square brackets [] indicates that it may be matched 0 or 1 times. Note that quotations marks around literal values are optional. However, literals tokens that not enclosed in quotations are assumed to not have any leading, trailing, or joining spaces. That means the definition of <foo> below:\n<foo> ::= ab | a \"b\" | \"a\"  b | \"ab\" | <a> <b>\n<a> ::= \"a\"\n<b> ::= b\n\nwill strictly accept nothing else except for the string \"ab\" (without quotes). For the purposes of this problem, you may assume that literals will only consist of upper and lowercase alphabetical characters from A to Z, numerical digits from 0 to 9, spaces, and punctuation. You do not have to worry about quotation marks, or angled/square/curly brackets being a part of string literals. Symbol names will be between 1 and 20 characters in length, and will only contain lowercase letters from a to z, numerical digits, and dashes '-'. We shall assume that the special symbol <EOL> represents an end-of-line character. For the sake of simplicity in this problem, comparisons with definitions and texts are not case sensitive.\nFor another example of BNF, we can try to define an actual essay. In order to define an essay with proper spelling, your teacher will first have to give you a large lexicon of valid words defined in BNF like the following. Don't worry, these lists will be provided to you in the same BNF definition list so that all symbols are defined.\n     <noun> ::= cat | mice | \u2026\n  <pronoun> ::= I | me | you | \u2026\n     <verb> ::= am | are | is | eats | \u2026\n<adjective> ::= cool | smelly | smart | \u2026\n   <adverb> ::= quickly | slowly | \u2026\n  <article> ::= the | a | an | \u2026\n\nFollowing this, we can define the actual structure of an essay. Below, an essay is defined as a series of paragraphs, which themselves are a series of pseudo-English sentences. For illustration purposes, this definition is very simple and clearly does not cover all English sentences. In actuality, your teacher may send you something much more rigorous and extensive.\n      <essay> ::= <paragraph> { <paragraph> }\n  <paragraph> ::= <sentence> \".\" { \" \" <sentence> \".\" } <EOL>\n   <sentence> ::= <noun-phrase> \" \" <verb-phrase>\n<noun-phrase> ::= <pronoun> |\n                  <noun> |\n                  <article> \" \" <noun>\n<verb-phrase> ::= <verb> |\n                  <verb-phrase> \" \" <noun-phrase> |\n                  <verb-phrase> \" \" <adverb> |\n                  <verb-phrase> \" \" <adjective>\n\n\"I am cool\" + \".\" + \" \" + \"You are cool\" + \".\"\n\"The cat\" + \" \" + \"eats mice quickly\"\n\"I\"\n\"mice\"\n\"The\" + \" \" + \"cat\"\n\"eats\"\n\"eats\" + \" \" + \"mice\"\n\"eats mice\" + \" \" + \"quickly\"\n\"am\" + \" \" + \"cool\"\n\nYou may have noticed from the above, definitions can be recursive in nature, calling upon themselves. Furthermore, the order in which symbols are defined do not matter, as long as all of the symbols used in definitions are defined somewhere. The support for recursive definitions can sometimes lead to indeterminate definitions like the following:\n<foo> ::= <foo>\nor\n<foo> ::= <bar>\n<bar> ::= <foo>\n\nIn either of these two cases, we shall consider the number of accepted strings by the defined symbols to be 0. Note that if we had defined <foo> ::= <foo> | \"a\", then the set of all accepted strings would be {a, aa, aaa, \u2026}, and the definition would no longer be indeterminate.\nNow back to your English essay.\nObviously you would like to do as little work as possible to pass English. So, given the Backus-Naur Form that your teacher has sent you, you would like to write a program that determines the length of the shortest possible string accepted by the symbol <essay> in the definition.",
  "Output Format": "The output should consist of a single integer - the length of the shortest string accepted by the symbol <essay>. Since the answer can be very big, output it modulo 1000000007 (109 + 7). An end-of-line symbol <EOL> counts as 1 character when matched. If the symbol's definition is indeterminate, output -1.",
  "Explanation for Sample 1": "Here, an essay is just an integer. The set of shortest strings for this input is {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"}."
}{
  "Title": "Electricity Grid",
  "Example": "Sample Input \n3 3 8\n15 2\n-10 1\n10 1\n1 2\n3 2\n1 3\n\nSample Output 3\n0\n",
  "Input Format": "\nLine 1: three integers N, M, and A, representing the number of substations, the number of wires, and the EPA fine factor.\nNext N lines: two integers Pi and Ei, representing the profit and monthly energy usage of station i.\nNext M lines: two integers ai and bi, indicating that there is a one-way wire from substation ai to bi.\n",
  "Memory Limit": "64M",
  "Explanation for Sample 3": "It is not profitable to keep any substation because the fine by the EPA would always be more than the profit obtainable from keeping any valid subset of substations.\n(With no functional substations anywhere, you should probably be heading to the bank to file bankruptcy for your company.)",
  "Time Limit": "2.00s",
  "Explanation for Sample 2": "It's possible that cyclic dependencies exist, as shown by these four substations. You must take either all or none, and your best choice is to take them all for a profit of $1.",
  "Description": "You have just been hired as the new manager of a city's main power plant. Going to work on your first day, you learned that the company has been losing massive amounts of money. After some investigating, you've discovered that this is because the company has been delivering unnecessarily high amounts of energy to the substations in the city's electricity grid!\nThe electricity grid consists of N (1 \u2264 N \u2264 100) substations and M (0 \u2264 M \u2264 400) wires connecting the substations. These substations are interspersed throughout the city and are responsible for distributing power to consumers. Electricity can only travel in one direction along each wire, and the direction on a wire can never be reversed. The substations are each labeled with a unique integer from 1 to N. Substation i has a monthly energy usage of Ei (1 \u2264 Ei \u2264 100000) megajoules. Through field research, your company has determined that substation i supplies the company with a monthly profit of Pi (\u221210000000 \u2264 Pi \u2264 10000000) dollars.\nSome of these substations are just too wasteful, so it's time for a reform! You would like to pick out some subset of all of the substations in the entire city to keep for the long term. There is a catch: for any of the substations you wish to keep, you must keep all the substations that depend on it for electricity, directly or indirectly. More specifically, in order to keep a substation i, any substation j such that electricity can flow from i to j using any series of connected wires/substations, must also be kept.\nJust when you thought your new job couldn't get any harder, the tyrants from the EPA came over and complained that the maximum energy usage across your substations is too high, and will harm the environment. Every month, they will fine you A dollars for every megajoule of Emax, your maximum energy usage. The value of Emax for a set of substations is the maximum Ei across all i in the set. Therefore, your total monthly profit after the reform is the sum of all Pi values for the stations you choose to keep, subtract A\u00d7Emax across those stations. The fine per megajoule will be a nonnegative integer less than 10000.\nTo save yourself from some headaches, you might as well write a program to determine the highest possible total monthly profit that you can obtain by keeping a subset of the power substations.",
  "Output Format": "A single integer representing the highest possible total monthly profit (in dollars) obtainable by selecting a subset of all of the N substations.",
  "Explanation for Sample 1": "There are 4 substations with profits {$5, \u2212$7, $15, \u2212$3} and monthly energy usages of {3, 2, 4, 1}.\nIf we choose to keep substations 3 and 4, then the monthly subtotal profit is $(15 + (\u22123)) = $12.\nThe EPA fine will be $1\u00d7max(4, 1) = $4, so the total monthly profit is $12 \u2212 $4 = $8. In fact, $8 is the best answer for this example."
}{
  "Example": "Sample Input \n5 4 4 1 1 10\n1 3\n4 6\n7 9\n3 5\n2 4\n1 1 5 1 0\n1 2 4 0 0\n1 3 3 0 0\n1 3 2 0 0\n\nSample Input 2\n3 10 1 2 3 10\n1 1\n1 5\n1 10\n1 1 3 0 9\n2 3 10 10\n1 1 3 1 1\n1 1 3 0 9\n1 1 3 0 1\n2 2 9 9\n1 1 3 0 2\n1 1 3 2 0\n1 1 2 0 0\n1 1 2 0 0\n\nSample Input 3\n5 12 1 0 0 5\n3 3\n1 1\n3 3\n4 4\n2 2\n3 1 5 1\n3 2 1 2\n3 3 2 3\n3 4 3 4\n3 5 4 5\n3 1 3 1\n3 1 3 2\n3 1 3 3\n3 4 2 4\n3 1 2 3\n3 4 1 5\n3 4 1 2\n\nSample Output 1\n4\n1\n0\n2\n\nSample Output 2\n3\n2\n3\n1\n2\n1\n0\n1\n\nSample Output 3\n1\n2\n3\n3\n4\n1\n3\n3\n4\n-1\n-1\n3\n",
  "Description": "Esdeath is currently enjoying a wonderful dinner with subordinates in her army. There is a giant pot on a campfire, and N (2 \u2264 N \u2264 200000) soldiers surrounding the pot in a circle, numbered clockwise from 1 to N. Each soldier holds a very large supply of a specific type of food that tastes best when cooked at a specific range of temperatures. Soldier i's food tastes best when it is cooked between Ai and Bi degrees Celsius, inclusive. We shall refer to this as the optimal temperature range.\nThe entire campfire cooking session will last M (1 \u2264 M \u2264 200000) minutes. During each of these minutes, one of three possible events will occur:\n\nEsdeath would like to try a combination of foods, so all soldiers with a number between i and j (1 \u2264 i, j \u2264 N; note: it is not necessarily true that i \u2264 j) will pitch in some food if the type of food they hold tastes best within a certain range of the pot's current temperature T degrees Celsius. That is, if a soldier is between soldiers i and j inclusive, they must contribute if their optimal temperature range overlaps with the range [T \u2212 L, T + H] (0 \u2264 L, H \u2264 100000). Here, between means starting from the i-th soldier and going clockwise around the circle, considering every soldier you pass up to and including the j-th soldier.\nAfter each time Esdeath performs this event, the temperature of the pot will change based on three constant values X, Y, and Z (0 \u2264 X, Y \u2264 1000; 1 \u2264 Z \u2264 100000). The new temperature after each instance of this event is determined by the formula: Tnew = ((Told*X + F*Y) mod Z) + 1, where F is the number of foods tossed into the pot. We'll assume that each soldier has a very large quantity of their own type of food, and will always be able to contribute if his or her temperature range is right. Every time this event is called, please determine F, the number of types of foods that have been tossed into the pot.\n\nEsdeath would like to try a combination of foods, so all soldiers with a number between i and j (1 \u2264 i, j \u2264 N; note: it is not necessarily true that i \u2264 j) will pitch in some food if the type of food they hold tastes best within a certain range of the pot's current temperature T degrees Celsius. That is, if a soldier is between soldiers i and j inclusive, they must contribute if their optimal temperature range overlaps with the range [T \u2212 L, T + H] (0 \u2264 L, H \u2264 100000). Here, between means starting from the i-th soldier and going clockwise around the circle, considering every soldier you pass up to and including the j-th soldier.\nAfter each time Esdeath performs this event, the temperature of the pot will change based on three constant values X, Y, and Z (0 \u2264 X, Y \u2264 1000; 1 \u2264 Z \u2264 100000). The new temperature after each instance of this event is determined by the formula: Tnew = ((Told*X + F*Y) mod Z) + 1, where F is the number of foods tossed into the pot. We'll assume that each soldier has a very large quantity of their own type of food, and will always be able to contribute if his or her temperature range is right. Every time this event is called, please determine F, the number of types of foods that have been tossed into the pot.\nThe i-th soldier gets a new type of food, getting rid of their old type of food. The new type of food will have an optimal temperature range between L and H (1 \u2264 i \u2264 N; 1 \u2264 L \u2264 H \u2264 Z).\nThe i-th soldier gets a new type of food, getting rid of their old type of food. The new type of food will have an optimal temperature range between L and H (1 \u2264 i \u2264 N; 1 \u2264 L \u2264 H \u2264 Z).\nFor this event, Esdeath would like to know, hypothetically, if all soldiers between i and j were to put some of their food into the pot in increasing order of the Ai temperatures of their food (the lower bounds of their foods' optimal temperature ranges), what would be the Ai temperature of the k-th soldier who places food into the pot? If no such value exists, output -1.",
  "Subtask 2 [17% of points]": "N, M \u2264 100000.\nIn all events of type 1, L = H = 0.\nAdditionally, there will be no events of type 3.",
  "Memory Limit": "1024M",
  "Subtask 4 [15% of points]": "N, M \u2264 100000.\nThere will only be events of type 1.",
  "Subtask 7 [3% of points]": "There are no additional constraints.",
  "Subtask 5 [17% of points]": "N, M \u2264 100000.\nThere will be no events of type 3.",
  "Title": "Campfire Cooking",
  "Subtask 1 [8% of points]": "N, M \u2264 1000.\nAdditionally, there will be no events of type 3.",
  "Time Limit": "3.00s",
  "Input Format": "\nLine 1: Six integers N, M, T, X, Y, and Z.\n\nNext N lines: line i+1 will contain two integers Ai and Bi, the optimal temperature range for soldier i's initial type of food.\n\nNext M lines: line i+N+1 will describe the event that happens in the i-th minute of the cooking session. Each line will be in one of the following three formats to represent the three types of events:\n\n\nType 1 events will be in the format: 1 i j L H\nType 2 events will be in the format: 2 i L H\nType 3 events will be in the format: 3 i j k\n\nAt any given time the pot's temperature T will satisfy 1 \u2264 T \u2264 Z. Furthermore, the total number of type 2 events will not exceed 25000.",
  "Subtask 6 [20% of points]": "N, M \u2264 100000.",
  "Subtask 3 [20% of points]": "N, M \u2264 100000.\nX = 1 and Y = 0.\nAdditionally, there will be no events of type 3.",
  "Explanation for Sample 1": "\nThe pot starts at a temperature of 4 degrees Celsius. The range of temperatures is [3, 4].\nAll soldiers participate, and 4 types of food are thrown into the pot. The temperature becomes (4*1 + 4*1) mod 10 + 1 = 9 degrees Celsius.\nSoldiers 2, 3, and 4 participate, and 1 type of food is thrown into the pot. The temperature becomes (9*1 + 1*1) mod 10 + 1 = 1 degrees Celsius.\nThe third soldier cannot throw any food into the pot. The temperature becomes (1*1 + 0*1) mod 10 + 1 = 2 degrees Celsius.\nAll soldiers participate again, and 2 types of food are thrown into the pot. The temperature becomes (2*1 + 2*1) mod 10 + 1 = 5 degrees Celsius, and the cooking session ends.\n"
}{
  "Example": "Sample Input \n10 2 3.0\n4\n0 2 5\n2 1 10\n4 5 10\n21 10 4\n\nSample Output\nS 3\nG 2\nS 2\nG 5\nS 2\nG 10\nS 11\nG 4\nS 2\n",
  "Explanation": "There are 10 floors in the building. The elevator must stay open for at least 2 seconds every time it opens. The elevator moves at a rate of 3 floors per second. There are 4 passengers, respectively arriving at times 0, 2, 4, and 21. The execution of the output commands are as outlined in the following table.\nIn the above table: A means that the passenger has arrived and is waiting at their initial floor, and E means that the passenger is inside the elevator.\nPassenger 1 waits during the range [0, 7] for a total of 8 seconds.\nPassenger 2 waits during the range [2, 11] for a total of 10 seconds.\nPassenger 3 waits during the range [4, 11] for a total of 8 seconds.\nPassenger 4 waits during the range [21, 24] for a total of 4 seconds.\nThe average waiting time is (8 + 10 + 8 + 4) / 4 = 7.5 seconds. Note that this may not be the best possible solution for this scenario.",
  "Memory Limit": "256M",
  "Input Format": "\nThe 1st line will contain the numbers F, S, and V, respectively representing the number of floors in the building, the minimum time that the elevator must open, and the speed of the elevator in floors/second. F and S will be integers, while V will be a real number.\nThe 2nd line will contain the integer N, representing the number of passengers.\nThe following N lines each contain three integers describing the request of a passenger. Namely, line i + 2 will contain the values ti, Ai, and Bi, indicating that passenger i starts his or her wait at time ti by the elevator doors on floor Ai, and would like to be taken to floor Bi.\n",
  "Time Limit": "2.00s",
  "Experimentation": "For testing purposes, you are provided with an program to simulate the activities of the elevator and passengers. The simulator program simulator.py will accept the following command line options:\n-h will give a brief overview of the available options\n-i INFILE  loads the input file in the input format as described above\n-cmd CMDFILE  loads the command file in the output format as described above\n-log LOGFILE  specifies the file into which to dump information about the simulation. This is optional, as the same information will always be logged in standard output.",
  "Scoring": "For each test case, let's say the average waiting time for passengers during your lift service is X seconds, and the average waiting time for friend's algorithm is Y seconds.\nThen, your score out of 100 for the test case will be:\n0, if any of the following holds true:\n    \nThe output format is incorrect (lines do not follow one of the two formats listed above); or\nNot all passengers have an opportunity to get on and off the elevator to reach their destination.\n\n\nThe output format is incorrect (lines do not follow one of the two formats listed above); or\nNot all passengers have an opportunity to get on and off the elevator to reach their destination.\nbetween 10 and 100, if X \u2265 Y.\n    \nYour program scores 10 base points for getting any valid way of moving all passengers to their designated floors, plus an additional score that is determined from a rational scale based on the values X and Y.\nSpecifically, your score will be 10 + 90 \u00d7 (Y / X), rounded to the nearest integer.\n\n\nYour program scores 10 base points for getting any valid way of moving all passengers to their designated floors, plus an additional score that is determined from a rational scale based on the values X and Y.\nSpecifically, your score will be 10 + 90 \u00d7 (Y / X), rounded to the nearest integer.\n100 (or over), if X < Y.\nHere, Y will actually be the average waiting time for the test case obtained by the current submission with the highest score. Thus, the cases will be updated periodically in accordance to the current best submission (perhaps until a very nice solution is found).",
  "Description": "Fun fact: Do you like mashing on those door-close buttons in elevators? Well, in most elevators built since the 90s, those buttons are just there to give passengers a false sense of control.\nYou were noticeably enraged when your friend, the lead engineer working for a large elevator firm, told you this fact. \"What is this bamboozlement I've been experiencing my whole life?\" you ask him. \"Elevators are always so slow and lead to such long waiting times. And you blame us, the passengers for always being in a hurry and slamming on the door-close buttons. Can't you guys just design better elevators?\"\nHe responds by telling you that behind-the-scenes, elevator companies work really hard to make elevators really efficient. The best elevator algorithm still remains a very difficult open problem. Companies even keep their own algorithms a trade secret.\nThat's when your entitled ass started boasting to him about easily being able to design a way better algorithm than whatever garbage his incompetent team can come up with. You quickly realize that this was a big mistake, because he actually challenged you to an elevator face-off. Being the lead engineer, he actually has the resources to pull this off. He claims that he'll give you a job at his firm if you manage to win or tie against him, but that you'll have to wax his hairy back if you lose. Being the sad, unemployed dweeb you are, living with your parents and eating Cheetos off your chest everyday, you have no choice but to accept his challenge to finally try and land yourself a job.\nThe challenge is to write a program for the computer of the elevator in a building, such that the average waiting time for passengers is minimized. There will be cameras on each floor of the building to record the waiting times of passengers. First, he'll hook your algorithm up to run for a period of time and record the results. Then, your friend will take the passenger data collected from your service period, enter it into his special elevator simulator software, and run his own company's algorithm on it. In the end, the average waiting time of your algorithm and his algorithm will be compared.\nAfter digging through some articles online, you discovered that - big surprise! - elevators systems actually do require quite a bit of complicated mathematical theory. There's no way you'll be able to learn it all in time. Just as you were heading out to buy some wax-paper, a dastardly thought suddenly goes through your mind \u2013 what if you rigged the challenge?\nThe day before your contest, you've secretly paid off the building manager, having him make an announcement to everyone that the elevators are out of service for the time period of your bet. You also told him to seal off the doors so that only certain people can enter and use the elevators. Why? Well, you've secretly arranged for N passengers to use the elevator during the challenge. You'll know the exact times and floors related to their elevator usage so that you can rig your algorithm accordingly. Since your engineer friend has no clue of this, he'll have to rely on his algorithm being efficient during the actual service, while your algorithm will secretly have the traffic data way beforehand. What a perfect trick!\nYour program will have the following information before the challenge:\nThere are F (1 \u2264 F \u2264 1000) floors in the building being serviced, uniquely labeled with an integer from 1 to F.\nThe elevator may change directions at any time. The time it takes to change directions is negligible.\nThe elevator travels at a constant speed of V (0 < V \u2264 20, V is a real number) floors per second. While the elevator is traveling, it may stop at any floor, either to remain idle, or to pick up/drop off passengers.\nThe elevator may stop for as long as possible on a floor. Standard regulations require for elevator doors to open for at least S (1 \u2264 S \u2264 20, S is an integer) seconds each time. This means that if an elevator is told to stop for fewer than S seconds, it will simply remain idle with its doors closed, and no passengers may get on or off. Note that your passengers are bribed, so they will take no more than S total seconds to get on and off. They will never delay the door-close by hitting the door-open button or stand in the way of the sensors.\nThere are N (1 \u2264 N \u2264 1000) passengers that need to be serviced. The passengers are each uniquely labeled with an integer from 1 to N.\nThe following information is known about the passengers you've bribed:\n    \nAt ti seconds (0 \u2264 ti \u2264 1000000, ti is an integer), passenger i (1 \u2264 i \u2264 N) will arrive at the elevator doors on floor Ai (1 \u2264 Ai \u2264 F).\nPassenger i would like to go to floor Bi (1 \u2264 Bi \u2264 F, Ai \u2260 Bi).\nPassengers will be patient. That is, a passenger will never abandon their waiting spot until the elevator arrives.\nIf the elevator doors are open on a passenger's initial floor Ai, then the passenger will immediately step into the elevator.\nSimilarly, if a passenger is on the elevator which is currently on their designated floor Bi with its doors open, then the passenger will immediately step out of the elevator. For example, if the elevator doors open at t = 10s, then we consider the time of all passengers getting off during this stop to also be 10s.\nIf an elevator door opens at to and closes at tc, and a passenger arrives at ti during that range, then they may enter the elevator if and only if to \u2264 ti < tc.\n\n\nAt ti seconds (0 \u2264 ti \u2264 1000000, ti is an integer), passenger i (1 \u2264 i \u2264 N) will arrive at the elevator doors on floor Ai (1 \u2264 Ai \u2264 F).\nPassenger i would like to go to floor Bi (1 \u2264 Bi \u2264 F, Ai \u2260 Bi).\nPassengers will be patient. That is, a passenger will never abandon their waiting spot until the elevator arrives.\nIf the elevator doors are open on a passenger's initial floor Ai, then the passenger will immediately step into the elevator.\nSimilarly, if a passenger is on the elevator which is currently on their designated floor Bi with its doors open, then the passenger will immediately step out of the elevator. For example, if the elevator doors open at t = 10s, then we consider the time of all passengers getting off during this stop to also be 10s.\nIf an elevator door opens at to and closes at tc, and a passenger arrives at ti during that range, then they may enter the elevator if and only if to \u2264 ti < tc.\nThe waiting time experienced by passenger i is the time from when they arrive, ti, to the time when they get off (i.e. the moment the elevator doors open on their designated floor Bi).\nThe average waiting time is the sum of the waiting times of all of the passengers, divided by the number of passengers N.\nInitially, the elevator is on floor 1 (closed) and the time is 0. Your program must output commands to direct the elevator, and must eventually move all the N passengers to their designated floors. Furthermore, your program should try to service all passengers such that the average waiting time of all passengers is minimized. In the end, your average end time will be scored against your friend's. Only when you beat or tie him will you be safe from waxing his back. The odds are already in your favor, so you'd better not screw up!",
  "Output Format": "In order to control the elevator, you must first become familiar with the two commands of the elevator's system. They are the following:\nG b\nS t\nEach line of the output should describe an elevator command in one of the two formats listed above. The commands will be performed back to back (with the slight exception of those that follow a GO command, which will be performed at the next available whole number second after the elevator arrives at its floor), and will control the behavior of the elevator from start to finish.",
  "Title": "Lift Control"
}{
  "Memory Limit": "16M",
  "EXPLANATION": "",
  "Time Limit": "2.00s",
  "SAMPLE OUTPUT": "3",
  "SAMPLE INPUT": "5 6",
  "Description": "each element x that belongs to set X must meet the restriction 1 \u2264 x \u2264 n\nthe sum of elements of the set X must be larger than k\nno pair of elements belonging to the set can be consecutive numbers",
  "Title": "N-K Special"
}{
  "Time Limit": "2.00s",
  "Memory Limit": "16M",
  "INPUT": "",
  "OUTPUT": "  For each image output the value of \"void\", one per line",
  "Description": "An imaging device furnishes digital images of two machined surfaces that eventually \n  be assembled in contact with each other. The roughness of this final contact \n  is to be estimated. A digital image is composed of the two characters, \"X\" and \n  \" \" (space). There are always 25 columns to an image, but the total number of \n  rows, N, is variable. Column 1 and 25 will always have an \"X\". Column 1 will \n  always belong to the left surface, and column 25 will always belong to the right \n  surface. The left surface can extend to the right as continuous Xs.\nDigital-Image View of Surfaces\nXXXX      XXXXX\nX      XXXXXXXX\nXXXXX    XXXXXX\nXX            X\nXXXXXXX  XXXXXX\n\n.     .     .\n.     .     .\n.     .     .\nXXXXX     XXXXX\n\nIn each row of the image there can be a zero or more space characters separating \n  the left from the right surface. There will be no more than one region of blanks \n  in any row. For each image given, your program has to determine the total \"void\" \n  that will exist after the left and right surfaces have been brought into contact. \n  The \"void\" is the total count of spaces that remain. The two surfaces are brought \n  into contact by displacing them strictly horizontally towards each other until \n  a rightmost \"X\" of the left surface of some row is immediately to the left of \n  the leftmost \"X\" of the right surface in that row. The original image may show \n  the two surfaces already in contact, in which case no displacement is needed.",
  "Title": "Machined Surfaces",
  "SAMPLE DATA": "Input:\n4\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\n2\nXXXXXXXXX    XXXXXXXXXXXX\nXXXXXXXXX  XXXXXXXXXXXXXX\n3\nXXXX    XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXX     XXXXX\nXXXXXXXXX     XXXXXXXXXXX\n2\nX                       X\nXXXXXXX    XXXXXXXXXXXXXX\n0\n\nOutput: \n0\n2\n2\n19\n"
}{
  "Time Limit": "2.00s",
  "Memory Limit": "16M",
  "INPUT": "Integer numbers, one per line. The end of data is signaled by the number 0.",
  "OUTPUT": "The length of the FACTORIAL SUM LIST for each number in the input file",
  "Description": "Start with any number, say 25. Find the sum of the factorial (N! = N factorial \n  = 1 x 2 x 3 x ... x N; 0! = 1 by convention) of each of the digits of 25: 2! \n  + 5! = 2 + 120 = 122. Repeat this procedure (in this case you will get 1! + \n  2! + 2! = 1 + 2 +2 =5). Continue summing the factorials of individual digits \n  until your list repeats a number. For example for 25 you will get the following \n  list:\n  25 122 5 120 4 24 26 722 5044 169 363601 1454 169\n\n  At this point you got a repetition (169), so your list will repeat forever and \n  you'd might as well stop now. Your list has 13 elements. \nWrite a program that asks the user to enter any number from 1 to 9999999 and \n  computes the FACTORIAL SUM LIST until a duplicate number is found. The output \n  for your program should be the length of your list. ",
  "Title": "Factorial Sum List",
  "SAMPLE DATA": "Input file\n25\n0\n\nOutput file\n13\n"
}{
  "Time Limit": "2.00s",
  "Memory Limit": "16M",
  "SAMPLE INPUT": "Input file\n4 2\n3\n1\n17 4\n1\n2\n4\n5\n20 3\n8\n5\n1\n0 0\n\nOutput file\n2\n4\n4\n",
  "OUTPUT": "For every case the output should be a smallest number of bucket-fulls needed \n  to fill the barrel. If is it not possible to exactly fill the given barrel output -1.",
  "INPUT": "The input will have a series of test cases. For each case the first line will \n  contain two numbers M, N; the volume of the barrel to be filled and the number \n  of different buckets available. This line will be followed by N lines representing \n  sizes of individual buckets. The end of file will be indicated by a barrel with \n  zero volume.",
  "Description": "You are likely familiar with the story of Henry and Lisa and the hole in the \n  bucket. Not too many people know what happened after Henry managed to fix the \n  hole in his bucket. Lisa, after the hole affair, was pretty upset with Henry. \n  In an effort to get him to think, she had him fill a barrel with several different \n  buckets. The barrel had to be filled exactly to the top by whole (or is that \n  hole?) bucket quantities. Henry, being lazy (which programmers can fully understand), \n  kept thinking about it until he could do it in the fewest buckets possible. \n  Write a program that will output the smallest number of buckets needed to be \n  used to fill a barrel with a given volume. The volume will never exceed 100, \n  and the total number of buckets will not be larger than 100.",
  "Title": "There's a Hole in the Bucket"
}{
  "Example": "Sample Input \n1 5 1\n4\n1\n5\n6\n999\nSample Output\n1\n1\n2\n1",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Mo has been attending every single PEG practice lately (so now we know which \nMo we are talking about) and he got a little bit\u2014hmmm\u2014bored. To\nbring some excitement, he invented a new game: PEG-O-STRIPES, and decided to\nchallenge another Mo to a duel. However, he wants to win for sure, so he hired\nDavid (Pritchard, of course) to come up with a winning strategy for him, or at\nleast to tell him whether he can win. Dave agreed under the condition that Mo\n(A.) will always begin.\nPEG-O-STRIPES involves two players who are given an infinite supply of\nstripes in three colours: red, green and blue. All of the red stripes have\ndimensions R\u00d71, blue ones: B\u00d71, and green\nones: G\u00d71, where R, B, and G\nare given natural numbers. Players take turns by placing given stripes on a\nboard with dimensions L\u00d71. They have to follow the following\nrules:\nstripes can be placed anywhere within the board\nstripes cannot overlap\nThe first player who cannot place any stripes on the board according to the\ngiven rules loses. The player that begins is said to have a winning strategy,\nif he wins no matter how the second player plays. Write a program that can\ndetermine whether the first player has a winning strategy for given dimensions\nL, R, B, and G. If yes, output 1,\nif no, output 2.",
  "Output": "For each test case, output 1 if the first player has a winning strategy, and 2 if not.\nSeparate test cases by a blank line.",
  "Title": "PEG-O-Stripes",
  "Input": "One line containing three numbers: R, B, and\nG (1\u00a0<\u00a0R,\u00a0B,\u00a0G\u00a0\u2264\u00a01000).\nOne line containing M\n(1\u00a0<\u00a0M\u00a0\u2264\u00a01000): a number of boards to consider.\nM lines each containing the length L \n(1\u00a0<\u00a0L\u00a0\u2264\u00a01000) of a board to be\nconsidered."
}{
  "Time Limit": "2.00s",
  "Example": "Sample Input \n5\n1\n2\n6\n11\n1000000000000000000\n\nSample Output\nNOT\nPRIME\nNOT\nPRIME\nNOT\n",
  "Description": "Given T (1 \u2264 T \u2264 100) positive integers, one per line, determine whether each one is prime. The integers will be no greater than 263\u22121.\nThe first line of input will be the integer T. The next T lines each contain a number to be tested.\nFor each of the T integers, you should output on a separate line PRIME if the corresponding integer is prime, or NOT if it is composite.",
  "Title": "Primes 3",
  "Memory Limit": "16M"
}{
  "Example": "Sample Input \n4\n79\n95\n24\n78\nSample Output\nThe median on the test is 78.5",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Bobette was walking home one day, when she slipped on a banana peel. Of\ncourse, the papers that she was carrying flew everywhere. They were actually\nthe test scores for her PEG students, arranged from highest to lowest, so that\nshe would be able to find the median easily. Help Bobette calculate the median\non the test (to one decimal place), given T ( 0\u00a0<\u00a0T\u00a0\u2264\u00a010), the number of\nstudents who wrote the test, followed by N lines, which list their percentage\nscores.",
  "Output": "Output the median score on the tests. ",
  "Title": "Test Median",
  "Input": "Input starts with T, followed by the scores for T tests on separate lines."
}{
  "Example": "Sample Input \n6\nABBABB\n\nSample Output 1\nB\n\nSample Input 2\n6\nABBABA\n\nSample Output 2\nTie\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "A vote is held after singer A and singer B compete in the \ufb01nal round of a singing competition.\nYour job is to count the votes and determine the outcome.",
  "Output": "The output will be one of three possibilites:\nA, if there are more A votes than B votes;\nB, if there are more B votes than A votes;\nTie, if there are an equal number of A votes and B votes.",
  "Title": "CCC14J2 - Vote Count",
  "Input": "The input will be two lines. The \ufb01rst line will contain V (1 \u2264 V \u2264 15), the total number of votes. The second line of input will be a sequence of V characters, each of which will be A or B, representing the votes for a particular singer."
}{
  "Example": "Sample Input \n4\n5 6\n6 6\n4 3\n5 2\n\nSample Output\n94\n91\n",
  "Explanation": "After the \ufb01rst round, David wins, so Antonia loses 6 points. After the second round, there is a tie and no points are lost. After the third round, Antonia wins, so David loses 4 points. After the fourth round, Antonia wins, so David loses 5 points. In total, Antonia has lost 6 points and David has lost 9 points.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Antonia and David are playing a game.\nEach player starts with 100 points.\nThe game uses standard six-sided dice and is played in rounds. During one round, each player rolls one die. The player with the lower roll loses the number of points shown on the higher die. If both players roll the same number, no points are lost by either player.\nWrite a program to determine the \ufb01nal scores.",
  "Output": "The output will consist of two lines. On the \ufb01rst line, output the number of points that Antonia has after all rounds have been played. On the second line, output the number of points that David has after all rounds have been played.",
  "Title": "CCC14J3 - Double Dice",
  "Input": "The \ufb01rst line of input contains the integer n (1 \u2264 n \u2264 15), which is the number of rounds that will be played. On each of the next n lines, will be two integers: the roll of Antonia for that round, followed by a space, followed by the roll of David for that round. Each roll will be an integer between 1 and 6 (inclusive)."
}{
  "Example": "Sample Input \n10\n2\n2\n3\n\nSample Output\n1\n3\n7\n9\n",
  "Explanation": "Initially, our list of invitees is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. There will be two rounds of removals. After the first round of removals, we remove the even positions (i.e., every second position), which causes our list of invitees to be 1, 3, 5, 7, 9. After the second round of removals, we remove every 3rd remaining invitee: thus, we keep 1 and 3, remove 5 and keep 7 and 9, which leaves us with an invitee list of 1, 3, 7, 9.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You are hosting a party and do not have room to invite all of your friends. You use the following unemotional mathematical method to determine which friends to invite.\nNumber your friends 1, 2, \u2026, K and place them in a list in this order. Then perform m rounds. In each round, use a number to determine which friends to remove from the ordered list.\nThe rounds will use numbers r1, r2, \u2026, rm. In round i remove all the remaining people in positions that are multiples of ri (that is, ri, 2ri, 3ri, \u2026) The beginning of the list is position 1.\nOutput the numbers of the friends that remain after this removal process.",
  "Output": "The output is the integers assigned to friends who were not removed. One integer is printed per line in increasing sorted order.",
  "Title": "CCC14J4S1 - Party Invitation",
  "Input": "The first line of input contains the integer K (1 \u2264 K \u2264 100). The second line of input contains the integer m (1 \u2264 m \u2264 10), which is the number of rounds of removal. The next m lines each contain one integer. The i-th of these lines (1 \u2264 i \u2264 m) contains ri (2 \u2264 ri \u2264 100) indicating that every person at a position which is multiple of ri should be removed."
}{
  "Title": "CCC14J5S2 - Assigning Partners",
  "Example": "Sample Input \n7\nRich Graeme Michelle Sandy Vlado Ron Jacob\nRon Vlado Sandy Michelle Rich Graeme Jacob\n\nSample Output 2\nbad\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The CEMC is organizing a workshop with an activity involving pairs of students. They decided to assign partners ahead of time. You need to determine if they did this consistently. That is, whenever A is a partner of B, then B is also a partner of A, and no one is a partner of themselves.",
  "Output": "The output will be good if the two lists of names are arranged consistently, and bad if the arrangement of partners is not consistent.",
  "Input": "The input consists of three lines. The first line consists of an integer N (1 < N \u2264 30), which is the number of students in the class. The second line contains the first names of the N students separated by single spaces. (Names contain only uppercase or lowercase letters, and no two students have the same first name). The third line contains the same N names in some order, separated by single spaces.\nThe positions of the names in the last two lines indicate the assignment of partners: the i-th name on the second line is the assigned partner of the i-th name on the third line.",
  "Explanation for Sample 1": "Graeme is partnered with Vlado, but Vlado is partnered with Rich. This is not consistent. It is also inconsistent because Jacob is partnered with himself."
}{
  "Example": "Sample Input \n5\n.....\n.###.\n.###.\n#####\n.....\n\nSample Output\n16\n",
  "Explanation": "There are 11 triangles of height one, 4 triangles of height two and 1 triangle of height three.",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "Troy loves triangles. He especially likes counting triangles. He has an N-by-N grid consisting of either \".\" or \"#\" characters. Help him count the number of triangles formed only by \"#\" characters in the grid. Triangles are of the form\n              #          \n      #      ###         \n#,   ###,   #####,   etc.\n\nMore formally, a triangle of height h consists of h rows for some positive integer h. The i-th row contains 2i \u2212 1 \"#\" characters for i = 1, \u2026, h. The rows are centred above each other so that they are symmetrically about a vertical line down their middle.",
  "Output": "Output the number of triangles in the grid.",
  "Title": "CCC14 Stage 2 - Troyangles",
  "Input": "The first line contains the number N (1 \u2264 N \u2264 2000) representing the size of the grid. The next N lines each contain N characters as described above.\nYou can assume that for test cases worth 20% of the marks, N \u2264 50."
}{
  "Example": "Sample Input \n4 3 1 2\n2 1 1 1\n3 4 10000 10000\n4 3 10000 10000\n1\n1000000000\n\nSample Output 2\n0\n",
  "Explanation of Sample 1": "The map of the country is illustrated below, with each road labeled with its length only:\n\nIf D = 8, the first and third roads need to be shut down, as they're both part of a path from city 1 to city 3 of length 7. This incurs a total cost of 1 + 15 = 16.\nIf D = 6, no roads need to be shut down, as no paths from city 1 to city 3 with total length 6 or less exist.\nIf D = 90, the first three roads all need to be shut down.\nIf D = 94, the fourth road must additionally be shut down, as it lies on a path from city 1 to city 3 of length exactly 94, consisting of the first, third, fourth, first and then third roads.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "King Gruff the Wolf rules over a happy, prosperous land inhabited by adorable Foxen. Unfortunately for them, he is not a nice king at all, and wants to make their lives miserable!\nHis country has N (1 \u2264 N \u2264 105) cities, with M (0 \u2264 M \u2264 105) roads running amongst them. The i-th road allows one to travel from city Xi to a different city Yi (1 \u2264 Xi, Yi \u2264 N), in that direction only, and has a length of Li (1 \u2264 Li \u2264 104) and a shutdown cost of Ci (1 \u2264 Ci \u2264 104). There may be multiple roads running between a pair of cities, even in the same direction.\nKing Gruff particularly dislikes the Foxen living in two different cities A and B (1 \u2264 A, B \u2264 N), and would like to make it more inconvenient (or even impossible) to travel from city A to city B. In particular, he'll select a distance value D (1 \u2264 D \u2264 109), and then simultaneously shut down every single road in his kingdom which is part of at least one path from city A to city B with total length no more than D. For each such road, however, he'll have to dig into his royal treasury and pay its shutdown cost. A path consists of a sequence of roads such that each road (except the first) starts at the city that the previous road ended at, and may visit a city or road multiple times.\nGruff is having trouble making up his mind about what value of D to choose, however - a larger value would make things more inconvenient for his Foxy subjects, but might cost him more money as well! As such, he'll consider Q (1 \u2264 Q \u2264 105) different values, D1, D2, \u2026, DQ. For each one, he'd like to know how many tax dollars would need to be spent to shut down all roads which lie on at least one sufficiently short path from city A to city B. Since you don't like Foxen either, you're agreed to help the Wolf write a program to calculate this!",
  "Output": "The output consists of Q lines, each with one integer, representing the total cost required to shut down all necessary roads given a distance value of Di, for i = 1..Q.",
  "Title": "CCC14 Stage 2 - King Gruff",
  "Explanation 2": "The map of the country is illustrated below:\n\nAs can be seen, the Foxen already have a problem, as no path from city 1 to city 2 exists! As such, for any value of D, King Gruff doesn't need to shut down any roads.",
  "Input": "The first line contains 4 integers, each separated by a space:\nN (1 \u2264 N \u2264 105), the number of cities, followed by\nM (1 \u2264 M \u2264 105), the number of roads, followed by\nA (1 \u2264 A \u2264 N), the starting city, followed by\nB (1 \u2264 B \u2264 N), the ending city\nEach of the next M lines contain four space-separated integers Xi, Yi, Li, and Ci, describing the road from Xi to Yi with length Li, and shutdown cost Ci (where 1 \u2264 Xi, Yi \u2264 N, 1 \u2264 Li, Ci \u2264 104).\nThe next line contains Q (1 \u2264 Q \u2264 105), the number of different distance values to consider.\nThe next Q lines each contain one integer Di (1 \u2264 Di \u2264 109), which is the distance value to consider in shutting down roads.\nThe following conditions hold for the input data:\nFor test cases worth up to 20% of the points, N \u2264 500;\nFor test cases worth up to 20% of the points, Q = 1;\nFor test cases worth up to 80% of the points, Q \u2264 20."
}{
  "Title": "CCC14 Stage 2 - Werewolf",
  "Example": "Sample Input \n3 2 2\nA 1 2\nD 1 3\n\nSample Output 3\n2\n",
  "Memory Limit": "64M",
  "Explanation for Sample 3": "Either robot 1 is a werewolf, which implies robot 2 is a civilian and robot 3 is a werewolf as well, or robot 1 is a civilian (which allows robot 2 and 3 to both be werewolves).",
  "Time Limit": "1.00s",
  "Explanation for Sample 2": "With no information, either robot 1 or robot 2 could be a werewolf.",
  "Description": "As they usually do, N robots are playing the game of Werewolf, and the robots are numbered with integers from 1 to N. Exactly W of these robots are werewolves, and the remainder are civilians. Though the game of Werewolf involves various aspects, we will focus on a single discussion phase of the game.\nRobots accuse other robots of being werewolves and defend other robots by vouching for their innocence.\nThe werewolves know each other's identities and:\na werewolf never accuses another werewolf;\nany robot that a werewolf defends is another werewolf.\nCivilians may accuse or defend either type of robot.\nAdditional constraints make our task a bit easier:\nNo robot is both accused and defended.\nNo robot is accused or defended more than once.\nFor a robot A to accuse or defend robot B, then A < B.\nYou will be given all the accusations and defenses between N robots where there are exactly W werewolves. A role assignment identifies each of the robots as either werewolf or civilian. Your goal is to figure out how many role assignments satisfy all the above constraints.",
  "Output": "The number of role assignments that are consistent with the given information. Since this number may be very large, you must output this answer modulo 109 + 7.",
  "Input": "The first line contains three numbers (each separated by one space):\nN (1 \u2264 N \u2264 200), the number of robots, followed by\nW (0 \u2264 W \u2264 N), the number of werewolves, followed by\nM (0 \u2264 M < N), the number of accusations/defenses.\nThe next M lines give the accusations and defenses. Each of these lines will be one of the following two forms:\nA a b indicates robot a accused robot b of being a werewolf;\nD a b indicates robot a defended robot b.\nYou may assume that for 20% of the marks for this problem, N \u2264 20.",
  "Explanation for Sample 1": "If robot 1 is a werewolf, then robot 2 must also be, which is too many werewolves! The only possibility is that robot 2 is the sole werewolf."
}{
  "Example": "Sample Input \n5 2\n12 12\n10 100\n8 3\n4 5\n25 15\n\nSample Output\n25\n4\n",
  "Explanation": "Team Star Fox starts on planet 2, on which they collect 10 fuel cells to start off. They should proceed by travelling to planet 3, costing them 3 fuel cells but then increasing their fuel cell count to 15. Next, they can fly to planet 1, lowering their fuel cell count to 3 but then promptly restoring it to 15. Finally, they have just enough fuel to reach planet 5, at which point they can collect its fuel cells to end up with 25. They should then choose to stop without ever visiting planet 4.",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "The heroic Team Star Fox is on a mission to collect as much fuel as possible from various planets across the Lylat System. There are N (1 \u2264 N \u2264 105) planets, and the i-th one contains Ai fuel cells - but travelling there from any other planet uses up Bi fuel cells (1 \u2264 Ai, Bi \u2264 104). Unfortunately, fuel cells are not a sustainable resource, so if a planet is visited for a second time, there will be no new fuel to collect.\nTeam Star Fox starts on planet P (1 \u2264 P \u2264 N) - as such, they may collect its fuel cells immediately. They may then travel to as many different planets as they'd like to, in any order, as long as they have sufficient fuel to spend on each flight (that is, their fuel cell count remains non-negative). Finally, they may choose to stop at any point (possibly even before leaving planet P), with the goal of maximizing the number of fuel cells they end up with. If this can be done in multiple ways, they'd like to maximize the number of different planets they visit as a secondary objective. Can you help our heroes?",
  "Output": "The output consists of two lines, with each line containing one positive integer. The \ufb01rst line contains the largest number of fuel cells that Team Star Fox can possess once they decide to stop. The second line contains the largest number of planets that Team Star Fox can visit, such that they still end up with this maximal number of fuel cells.",
  "Title": "CCC14 Stage 2 - Where's That Fuel?",
  "Input": "The first line contains two integers: N (1 \u2264 N \u2264 105), followed by a space, followed by P (1 \u2264 P \u2264 N), which represents the number of planets followed by the starting planet number. The next N lines contain Ai, followed by a space, followed by Bi (1 \u2264 Ai, Bi \u2264 104).\nYou can assume that for test cases worth 20% of the marks, N \u2264 10."
}{
  "Example": "Sample Input \n5 5 3 4\n3E\n1D\n5C\n1E\n4A\n\nSample Output\n55\n",
  "Explanation": "One optimal strategy is as follows. The first person to leave can go to the front secure room, passing six people along the way (in seats 3D, 3C, 2D, 2C, 1D, and 1C) for an inconvenience of 3\u00b76 + 4\u00b70 = 18. The second person to leave can also go to the front secure room, passing only one person (in seat 1C) and finding one person already in the secure room, for an inconvenience of 3\u00b71 + 4\u00b71 = 7. The third person can go to the back secure room, passing one person for an inconvenience of 3. The fourth person can join the first two in the front secure room, passing only one person (as seat 1D is vacant at that point) for an inconvenience of 11. Finally, the fifth person to leave can go to the back secure room, passing four people and meeting one person in the back secure room for an inconvenience of 16. The total inconvenience experienced by the exam writers with this strategy is 18 + 7 + 3 + 11 + 16 = 55.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "You find yourself writing an exam in a long, narrow auditorium - it has N (1 \u2264 N \u2264 105) rows, numbered 1..N from the front to the back, each of which has 6 seats, 3 on each side of the aisle running down the middle of the auditorium. Each seat is identified by its row number immediately followed by a letter from \"A\" to \"F\", which indicates its position in that row (with seat \"A\" at the far left, and \"F\" at the far right). The aisle lies between seats \"C\" and \"D\" in each row. The auditorium also has two secure rooms - one at the front (in front of row 1), and one at the back (behind row N).\nEvery seat in the auditorium is initially occupied by exactly one exam-writer per seat. However, over the course of the exam,M different exam writers decide that they have written all they can on the exam, and then would like to leave the auditorium, one after another. The i-th exam writer is in seat RiCi (1 \u2264 Ri \u2264 N, Ci is one of \"A\"..\"F\"). When the exam writer leaves the auditorium, they must stay in one of the secure rooms until the end of the exam. Fortunately, both secure rooms can hold as many people as necessary.\nExam writers not only worry about writing exams, but they would like their lives to be as convenient as possible - as such, they're interesting in working together to minimize the total inconvenience experienced by all of them. The inconvenience a single exam-writer experiences is Ax + By, where A and B are given constants (0 \u2264 A, B \u2264 109), x is the number of different people passed on the way to the chosen secure room (explained below), and y is the number of people already in that secure room before that exam-writer enters. Note that if an exam-writer does not leave their seat, their inconvenience is 0.\nWhen walking from a seat to a secure room, one must first pass any other exam writers in the same row on the way to the aisle, and then any exam writers in seats adjacent to the aisle from that row to either row 1 or N (depending on which secure room is chosen), inclusive. Note that any vacant seats passed along the way don't count towards this value.\nCan you help the poor exam writers make their lives as convenient as possible?",
  "Output": "Output the integer which is the minimum total inconvenience experienced by all M exam writers who leave early.",
  "Title": "CCC14 Stage 2 - Early Exam Evacuation",
  "Input": "The first line contains four space-separated integers: N (1 \u2264 N \u2264 105), the number of rows in the auditorium; M (1 \u2264 M \u2264 6N), the number of exam writers that leave early; A, followed by B (1 \u2264 A, B \u2264 109), the constants used in determining the inconvenience caused by an exam writer leaving early.\nThe next M lines each contain one integer followed by one character, Ri and Ci, for i = 1..N in order, where 1 \u2264 Ri \u2264 N and Ci \u2208 \"A\"..\"F\".\nYou can assume that for test cases worth 60% of the marks, M \u2264 5000"
}{
  "Example": "Sample Input \n6 10 3 4\n2 3 15\n4 2 150\n3 6 290\n3 2\n2 3\n1 4\n4 6\n\nSample Output\n10.0\n4.0\n24.0\n6.25\n",
  "Explanation": "For the first query, you should simply walk from gate 3 to gate 2, covering 100 metres at a speed of 10 metres per minute.\nFor the second query, you should immediately get on the moving walkway going from gate 2 to gate 3, covering 100 metres at a speed of 10 + 15 = 25 metres per minute.\nFor the third query, you should walk to gate 2 (taking 10 minutes), then take the walkway as before (taking 4 minutes), and then walk to gate 4 (taking 10 minutes).\nFinally, for the fourth query, you should take the walkway from gate 4 to gate 2 (taking 1.25 minutes), then the walkway from gate 2 to gate 3 (taking 4 minutes), and finally the walkway from gate 3 to gate 6 (taking 1 minute).",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "You're in an airport hallway with G (1 \u2264 G \u2264 109) gates, numbered from 1 to G in order. The entrance to gate i is 100\u00b7i metres from the start of the hallway.\nThere are also N (0 \u2264 N \u2264 105) moving walkways. The i-th walkway runs from the entrance to gate Ai (1 \u2264 Ai \u2264 G) to the entrance to a different gate Bi (1 \u2264 Bi \u2264 G) at a speed of Si (1 \u2264 Si \u2264 109) metres per minute, in one direction only. At every point along the hallway, there is at most one walkway moving in each direction (towards the start of the hallway, or away from it). However, it is possible that one walkway starts at the same gate as another walkway, moving in the same direction, ends.\nYou can walk in either direction along the hallway at a speed of W (1 \u2264 W \u2264 109) metres per minute. Additionally, when at the start of a walkway, you may choose to get on it, in which case it'll carry you directly to its end - you may not get on or off in between these points. While on walkway i, you will move at a speed of W + Si metres per minute.\nTo amuse yourself while waiting for your flight (which, of course, has been delayed), you've posed Q (1 \u2264 Q \u2264 105) queries to yourself. The i-th query involves finding the minimal time in which you can get from gate Xi (1 \u2264 Xi \u2264 G) to gate Yi (1 \u2264 Yi \u2264 G). To make things more interesting, you've decided that you won't board your flight unless you can correctly answer all of these queries - so you'd better not screw up!",
  "Output": "The output is Q lines, each line containing one real number which is the minimal amount of time required to travel from gate Xi to Yi (in minutes), for i = 1..Q. The output will be judged to be correct if the outputted answer is within a factor of 10\u22124 of the correct solution: that is, if D is the correct answer, values in the range [D\u00b7(1 \u2212 10\u22124), D\u00b7(1 + 10\u22124)] will be judged as correct.",
  "Title": "CCC14 Stage 2 - Gates",
  "Input": "The first line contains four integers: G (1 \u2264 G \u2264 109), the number of gates; W (1 \u2264 W \u2264 109), the walking speed; N (1 \u2264 N \u2264 105), the number of moving walkways, and Q (1 \u2264 Q \u2264 105), the number of queries.\nThe next N lines each contain three integers dealing with walkway i (i = 1..N): Ai (1 \u2264 Ai \u2264 G), the starting gate; Bi (1 \u2264 Bi \u2264 G), the ending gate; Si (1 \u2264 Si \u2264 109), the speed. Note that Ai \u2260 Bi for any i.\nThe next Q lines each contain two integers dealing with query i = 1..Q: Xi (1 \u2264 Xi \u2264 G), the starting gate; and Yi (1 \u2264 Yi \u2264 G), the ending gate.\nYou can assume that for some test cases, at least some of G, N, Q are small. This information may be helpful, or not."
}{
  "Example": "Sample Input \n2\n4\n2\n3\n1\n4\n4\n4\n1\n3\n2\n\nSample Output\nY\nN\n",
  "Memory Limit": "16M",
  "Time Limit": "5.00s",
  "Description": "In order to ensure peace and prosperity for future generations, the United Nations is creating the world\u2019s largest candy. The ingredients must be taken in railway cars from the top of a mountain and poured into Lake Geneva. The railway system goes steeply from the mountaintop down to the lake, with a T-shaped branch in the middle as shown below.\n\nRight now, each of the N ingredients is in its own railway car. Each railway car is assigned a positive integer from 1 to N. The ingredients must be poured into the lake in the order 1, 2, 3, \u2026, N but the railway cars are lined up in some random order. The difficulty is that, because of the especially heavy gravity today, you can only move cars downhill to the lake, or sideways on the branch line. Is it still possible to pour the ingredients into the lake in the order 1, 2, 3, \u2026, N?\nFor example, if the cars were in the order 2, 3, 1, 4, we can slide these into the lake in order as described below:\n\n\nSlide car 4 out to the branch\nSlide car 1 into the lake\nSlide car 3 out to the branch\nSlide car 2 into the lake\nSlide car 3 from the branch into the lake\nSlide car 4 from the branch into the lake\n",
  "Output": "For each test, output one line which will contain either Y (for \"yum\") if the recipe can be completed, and N otherwise.",
  "Title": "CCC14S3 - The Geneva Confection",
  "Input": "The first line will contain the number T (1 \u2264 T \u2264 10) which is the number of different tests that will be run. Each test has the form of an integer N (1 \u2264 N \u2264 100\u00a0000) on the first line of the test, followed by a list of the N cars listed from top to bottom. The cars will always use the numbers from 1 to N in some order."
}{
  "Example": "Sample Input \n4\n3\n11 11 20 15 1\n13 8 14 17 2\n17 8 18 17 1\n12 12 19 13 1\n\nSample Output\n5\n",
  "Explanation": "There are 4 pieces of glass used. There are two regions of glass which have a tint-factor greater than or equal to 3: one region between (13, 11) and (14, 15) (which has tint-factor of 3, except for a unit square with tint-factor 4), and another region between (17, 12) and (18, 13) (with tint-factor 3). In total, these two regions have 5 square units of glass with tint-factor greater than or equal to 3, as shown on the diagram below.\n",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "You are laying N rectangular pieces of grey-tinted glass to make a stained glass window. Each piece of glass adds an integer value \"tint-factor\". Where two pieces of glass overlap, the tint-factor is the sum of their tint-factors.\nYou know the desired position for each piece of glass and these pieces of glass are placed such that the sides of each rectangle are parallel to either the x-axis or the y-axis (that is, there are no \"diagonal\" pieces of glass).\nYou would like to know the total area of the finished stained glass window with a tint-factor of at least T.",
  "Output": "Output the total area of the finished stained glass window which has a tint-factor of at least T. All output will be less than 264, and the output for some test cases will be larger than 232.",
  "Title": "CCC14S4 - Tinted Glass Window",
  "Input": "The first line of input is the integer N (1 \u2264 N \u2264 1000), the number of pieces of glass. The second line of input is the integer T (1 \u2264 T \u2264 1\u00a0000\u00a0000\u00a0000), the threshold for the tint-factor. Each of the next N lines contain five integers, representing the position of the top-left and bottom-right corners of the i-th piece of tinted glass followed by the tint-factor of that piece of glass. Specifically, the integers are placed in the order xl yt xr yb ti, where the top-left corner is at (xl, yt) and the bottom-right corner is at (xr, yb), and tint-factor is ti. You can assume that 1 \u2264 ti \u2264 1\u00a0000\u00a0000. The top-most, left-most co-ordinate where glass can be placed is (0, 0) and you may assume 0 \u2264 xl < xr \u2264 K and 0 < yt < yb \u2264 K, and\nThe following additional constraints will apply.\nAt least 10% of the marks will be for test cases where N \u2264 100 and K \u2264 100;\nat least 30% of the marks will be for test cases where N \u2264 1000 and K \u2264 1000;\nat least 40% of the marks will be for test cases where N \u2264 100 and K \u2264 1\u00a0000\u00a0000\u00a0000;\nthe remaining marks will be for test cases where N \u2264 1000 and K \u2264 1\u00a0000\u00a0000\u00a0000."
}{
  "Example": "Sample Input \n5\n5 8\n4 10\n3 1\n3 2\n3 3\n\nSample Output\n6\n",
  "Explanation": "The Fox performs the visits in the following order (with the indicated distances):\n(0, 0) to (4, 10) with distance \u221a116;\n(4, 10) to (3, 1) with distance \u221a82;\n(3, 1) to (5, 8) with distance \u221a53;\n(5, 8) to (3, 3) with distance \u221a29;\n(3, 3) to (3, 1) with distance 2;\n(3, 1) to (3, 2) with distance 1.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "You have a pet Fox who loves treats. You have N neighbours at distinct locations (described as points on the Cartesian plane) which hand out treats to your pet Fox, and each neighbour has an unlimited number of treats to give out. The origin (which is where the Fox starts) will not be one of these N locations.\nWhat does the Fox say, in order to get these treats? That is a good question, but not our concern.\nThe Fox moves from location to location to gather exactly one treat from each location on each visit. He can revisit any previous location, but cannot visit the same location on two consecutive visits.\nYour Fox is very lazy. The distance your Fox is willing to travel after each treat will strictly decrease. Specifically, the distance from the origin to his first treat location must be larger than the distance from his first treat location to his second treat location, which in turn is larger than the distance between his second treat location and his third treat location, and so on.\nWhat is the largest number of treats your Fox gathers?",
  "Output": "The output is one integer, the largest number of treats your Fox can gather.",
  "Title": "CCC14S5 - Lazy Fox",
  "Input": "The first line contains the integer N (1 \u2264 N \u2264 2000). The next N lines each contain Xi, followed by a space, followed by Yi, for i = 1..N (\u221210\u00a0000 \u2264 Xi, Yi \u2264 10\u00a0000) representing the coordinates of the i-th location. The following additional constraints will apply.\nAt least 20% of the marks will be for test cases where N \u2264 50;\nat least 40% of the marks will be for test cases where N \u2264 200;\nthe remaining marks will be for test cases where N \u2264 2000."
}{
  "Example": "Sample Input \n1\n7\n\nSample Output 1\nBefore\n\nSample Input 2\n8\n31\n\nSample Output 2\nAfter\n\nSample Input 3\n2\n18\n\nSample Output 3\nSpecial\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "February 18 is a special date for the CCC this year.\nWrite a program that asks the user for a numerical month and numerical day of the month and then determines whether that date occurs before, after, or on February 18.\nIf the date occurs before February 18, output the word Before. If the date occurs after February 18, output the word After. If the date is February 18, output the word Special.",
  "Output": "Exactly one of Before, After or Special will be printed on one line.",
  "Title": "CCC15J1 - Special Day",
  "Input": "\nThe input consists of two integers each on a separate line. These integers represent a date in 2015.\nThe first line will contain the month, which will be an integer in the range from 1 (indicating January) to 12 (indicating December).\nThe second line will contain the day of the month, which will be an integer in the range from 1 to 31. You can assume that the day of the month will be valid for the given month.\n"
}{
  "Example": "Sample Input \nHow are you :-) doing :-( today :-)?\n\nSample Output 1\nhappy\n\nSample Input 2\n:)\n\nSample Output 2\nnone\n\nSample Input 3\nThis:-(is str:-(:-(ange te:-)xt.\n\nSample Output 3\nsad\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "We often include emoticons in our text messages to indicate how we are feeling. The three consecutive characters :-) indicate a happy face and the three consecutive characters :-( indicate a sad face. Write a program to determine the overall mood of the message.",
  "Output": "The output is determined by the following rules:\nIf the input line does not contain any happy or sad emoticons, output none.\n  \nOtherwise, if the input line contains an equal number of happy and sad emoticons, output unsure.\n  \nOtherwise, if the input line contains more happy than sad emoticons, output happy.\n  \nOtherwise, if the input line contains more sad than happy emoticons, output sad.\n",
  "Title": "CCC15J2 - Happy or Sad",
  "Input": "There will be one line of input that contains between 1 and 255 characters."
}{
  "Example": "Sample Input \njoy\n\nSample Output 1\njikoyuz\n\nSample Input 2\nham\n\nSample Output 2\nhijamon\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "In Sweden, there is a simple child's game similar to Pig Latin called R\u00f6varspr\u00e5ket (Robbers Language).\nIn the CCC version of R\u00f6varspr\u00e5ket, every consonant is replaced by three letters, in the following order:\nthe consonant itself;\nthe vowel closest to the consonant in the alphabet (e.g., if the consonant is d, then the closest vowel is e), with the rule that if the consonant falls exactly between two vowels, then the vowel closer to the start of the alphabet will be chosen (e.g., if the consonant is c, then the closest vowel is a);\nthe next consonant in the alphabet following the original consonant (e.g., if the consonant is d, then the next consonant is f) except if the original consonant is z, in which case the next consonant is z as well.\nVowels in the word remain the same. (Vowels are a, e, i, o, u and all other letters are consonants.)\nWrite a program that translates a word from English into R\u00f6varspr\u00e5ket.",
  "Output": "Output the word as it would be translated into R\u00f6varspr\u00e5ket on one line.",
  "Title": "CCC15J3 - R\u00f6varspr\u00e5ket",
  "Input": "The input consists of one word entirely composed of lower-case letters. There will be at least one letter and no more than 30 letters in this word."
}{
  "Explanation of Sample 2": "For Friend 12, a message is received at time 0 and replied to at time 13. For Friend 23, two messages are exchanged, with the first message having a wait time of 6 seconds and the second message having a wait time of 2 seconds. For Friend 34, a message is received at time 10 and replied to at time 12. Friend 45 sends a message which is never replied to.",
  "Example": "Sample Input \n14\nR 12\nW 2\nR 23\nW 3\nR 45\nS 45\nR 45\nS 23\nR 23\nW 2\nS 23\nR 34\nS 12\nS 34\n\nSample Output 2\n12 13\n23 8\n34 2\n45 -1\n",
  "Explanation of Sample 1": "Friend 2 sends a message at time 0 and Friend 3 sends a message at time 1. Friend 2 receives a reply at time 6 and Friend 3 receives a reply at time 7.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "You exchange text messages with your friends. Since you receive so many messages, you want to measure how long your friends have to wait for your replies.\nYour message device records each received and sent message in order using the following two kinds of entries:\nR X indicates a message was received from a friend numbered X;\nS X indicates a message was sent to a friend numbered X.\nYour message device sends and receives messages instantaneously, and for each consecutive pair of entries described above, either\na single entry W X is recorded in between them indicating they occur X seconds apart, or\nthere is no entry between them and they occur one second apart.\nSeveral rules of message etiquette are always followed:\nthe only messages you send are replies to messages that you have received;\nyou send at most one reply to any message from any particular friend;\nyour friends do not send a subsequent message until you have replied to their previous message.\nThe wait time for a message is the time that passes between when you receive it and the time you reply to it. If a friend X received a reply to each message they sent, the total wait time for friend X is the sum of all wait times for all messages from friend X. Otherwise, the total wait time for friend X is \u22121.\nYour job is to determine the total wait time for each friend.",
  "Output": "Output one line for each friend that sent a message in the form X T where X is a friend number and T is the total wait time for friend X. The lines are in increasing order of the friend numbers.",
  "Title": "CCC15J4 - Wait Time",
  "Input": "The input consists of the integer M (1 \u2264 M \u2264 20), followed by M lines, where each line consists of one character (W, R, or S), followed by a space, followed by an integer X (1 \u2264 X \u2264 100). These M lines are the entries described above (in order)."
}{
  "Example": "Sample Input \n8\n4\n\nSample Output 1\n5\n\nSample Input 2\n6\n2\n\nSample Output 2\n3\n",
  "Memory Limit": "256M",
  "Time Limit": "5.00s",
  "Description": "You may know that March 14 is known as \"\u03c0-day\", since 3.14 (which is the third month and fourteenth day) is a good approximation of \u03c0.\nMathematicians celebrate this day by eating pie.\nSuppose that you have n pieces of pie, and k people who are lined up for pieces of pie. All n pieces of pie will be given out. Each person will get at least one piece of pie, but mathematicians are a bit greedy at times. So, they always get at least as many of pieces of pie as the person in front of them.\nFor example, if you have 8 pieces of pie and 4 people in line, you could give out pieces of pie in the following five ways (with the first person in line being the first number in the list): [1, 1, 1, 5], [1, 1, 2, 4], [1, 1, 3, 3], [1, 2, 2, 3], [2, 2, 2, 2].\nNotice that if k = n, there is only one way to give out the pieces of pie: every person gets exactly one piece. Also, if k = 1, there is only one way to give out the pieces of pie: that single person gets all the pieces.\nWrite a program that determines the number of ways that the pieces of pie can be given out.",
  "Output": "The output will consist of a single integer which is the number of ways that pieces of pie can be distributed. The output is guaranteed to be less than 231.",
  "Title": "CCC15J5 - Pi-day",
  "Input": "\nThe first line of input is the integer number of pieces of pie, n (1 \u2264 n \u2264 250).\nThe second line of input is the integer k which is the number of people in line (1 \u2264 k \u2264 n).\n\nFor at least 20% of the marks for this problem, n \u2264 9. For at least 50% of the marks for this problem, n \u2264 70. For at least 85% of the marks for this problem, n \u2264 120."
}{
  "Example": "Sample Input \n4\n3\n0\n4\n0\n\nSample Output 1\n0\n\nSample Input 2\n10\n1\n3\n5\n4\n0\n0\n7\n0\n0\n6\n\nSample Output 2\n7\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Your boss has asked you to add up a sequence of positive numbers to determine how much money your company made last year.\nUnfortunately, your boss reads out numbers incorrectly from time to time.\nFortunately, your boss realizes when an incorrect number is read and says \"zero\", meaning \"ignore the current last number.\"\nUnfortunately, your boss can make repeated mistakes, and says \"zero\" for each mistake.\nFor example, your boss may say \"One, three, five, four, zero, zero, seven, zero, zero, six\", which means the total is 7 as explained in the following chart:\nAt any point, your boss will have said at least as many positive numbers as \"zero\" statements. If all positive numbers have been ignored, the sum is zero.\nWrite a program that reads the sequence of boss statements and computes the correct sum.",
  "Output": "The output is one line, containing the integer which is the correct sum of the integers read, taking the \"zero\" statements into consideration. You can assume that the output will be an integer in the range 0 and 1\u00a0000\u00a0000 (inclusive).",
  "Title": "CCC15S1 - Zero That Out",
  "Input": "The first line of input contains the integer K (1 \u2264 K \u2264 100\u00a0000) which is the number of integers (including \"zero\") your boss will say. On each of the next K lines, there will be either one integer between 1 and 100 (inclusive), or the integer 0."
}{
  "Example": "Sample Input \n3 20\n18\n25\n18\n\nSample Output\n7 16\n",
  "Explanation": "To minimize the total tastiness, the fox might drink water, eat the first cracker, eat the third cracker, drink more water, and finally eat the second cracker. He will then experience temperatures of 20, 18, 18, 20, and 25 degrees Celsius, and the crackers will have tastiness values of 2 + 0 + 5 = 7.\nTo maximize the total tastiness, the fox might drink water, and then eat the crackers in order. He will then experience temperatures of 20, 18, 25, and 18 degrees Celsius, and the crackers will have tastiness values of 2 + 7 + 7 = 16.",
  "Memory Limit": "256M",
  "Input Format": "The first line contains two integers, N (1 \u2264 N \u2264 100,000) and W (0 \u2264 W \u2264 109), representing the number of crackers and the water's temperature. On the next N lines, there is one integer, Ti (0 \u2264 Ti \u2264 109 for 1 \u2264 i \u2264 N), representing the temperature of the i-th cracker.\nFor at least 30% of the marks for this problem, W = 0.",
  "Time Limit": "2.00s",
  "Description": "It's dinner time for your pet fox! His meal consists of N crackers, with the i-th cracker having a temperature of Ti degrees Celsius. He also has a large dish of water, which has a temperature of W degrees Celsius.\nAfter taking an initial sip of water, your fox begins his meal. Every time he eats a cracker, its tastiness is equal to the absolute difference between its temperature, and the temperature of the last thing he ate or drank (be it the previous cracker he ate, or a sip of water, whichever he consumed most recently). He can drink some water whenever he wants, and can eat the crackers in any order.\nDepending on the order in which your fox eats and drinks, the total tastiness of the crackers consumed may vary. What are the minimum and maximum values it can have?",
  "Output Format": "The output is one line containing two integers: the minimum and maximum total tastiness your fox can experience during his meal, respectively.",
  "Title": "CCO15 - Hungry Fox"
}{
  "Example": "Sample Input \n3 3\n0 2 5\n0 1 4\n1 2 3\n\nSample Output\n7\n",
  "Explanation": "The shortest route would be to take the road directly from 0 to 2, of length 5 km. The route going from 0 to 1 to 2 is 4 + 3 = 7 km, which is longer.",
  "Memory Limit": "256M",
  "Input Format": "The first line of input contains two integers n, m, the total number of cities and the number of roads connecting the cities (2 \u2264 n \u2264 18; 1 \u2264 m \u2264 n2 \u2212 n). There is at most one road from any given city to any other given city. Cities are numbered from 0 to n \u2212 1, which 0 being Troy's starting city, and n \u2212 1 being his destination.\nThe next m lines of input each contain three integers s, d, l. Each triple indicates that there is a one way road from city s to city d of length l km (0 \u2264 s \u2264 n \u2212 1; 0 \u2264 d \u2264 n \u2212 1; s \u2260 d; 1 \u2264 l \u2264 10000). Each road is one-way: it can only be taken from s to d, not vice versa. There is always at least one route from city 0 to city n \u2212 1.\nFor at least 30% of the marks for this problem, n \u2264 8.",
  "Time Limit": "2.00s",
  "Description": "There are many well-known algorithms for finding the shortest route from one location to another. People have GPS devices in their cars and in their phones to show them the fastest way to get where they want to go. While on vacation, however, Troy likes to travel slowly. He would like to take the longest route to his destination so that he can visit many new and interesting places along the way.\nAs such, a valid route consists of a sequence of distinct cities c1, c2, \u2026, ck, such that there is a road from ci to ci+1 for each 1 \u2264 i < k.\nHe does not want to visit any city more than once. Can you help him find the longest route?",
  "Output Format": "Output a single integer, the length of the longest route that starts in city 0, ends in city n \u2212 1, and does not visit any city more than once. The length is the sum of the lengths of the roads taken along the route.",
  "Title": "CCO15 - Artskjid"
}{
  "Example": "Sample Input \n12 4 3 3\n1 4 5\n2 2 3\n6 3 6\n2 1\n1 8\n3 0\n\nSample Output\n11\n6\n0\n",
  "Explanation": "Below is a diagram of the planes' flight paths:\nThe first query is for the plane 2 over x-coordinates in the inclusive range [1, 5]. While this plane is at an x-coordinate smaller than or equal to 4, it might be covered by plane 3, but definitely not by plane 1. However, when it's at an x-coordinate larger than 4, it might be covered by both other planes. Therefore, the answer to this query is the sum of the other planes' interference factors, 5 + 6 = 11.\nFor the second query, plane 1 could be covered by plane 3 while it has x-coordinates less than 10, and will not be covered by anything while it has x-coordinate greater than or equal to 10. Thus, it is only possibly interfered with by plane 3 with interference factor 6.\nNeither plane 1 nor plane 2 can possibly be directly above plane 3 until it reaches x-coordinate 10, so the answer to the final query is 0.",
  "Memory Limit": "512M",
  "Input Format": "The first line contains four space-separated integers: X (1 \u2264 X \u2264 109), the maximum x-coordinate to consider; K (1 \u2264 K \u2264 X), the fixed distance constant; N (1 \u2264 N \u2264 2000), the number of flight paths; Q (1 \u2264 Q \u2264 800,000), the number of queries.\nEach of the next N lines contain three integers Ai, Bi, and Ci, for i = 1..N (1 \u2264 Ai, Bi, Ci \u2264 109), representing, for plane i, the starting y-coordinate, the ending y-coordinate, and the interference factor (respectively).\nEach of the next Q lines contain two integers, Pi and Si, for i = 1..Q representing the query concerning plane Pi while its x-coordinate is in the range [Si, Si + K].\nFor 40% of the marks for this problem, Q \u2264 1000.",
  "Time Limit": "10.00s",
  "Description": "A new era of aviation is upon us - the first solar-powered jumbo jets are about to be made available for public travel! However, this cutting-edge technology raises some safety concerns, as the rays of sunlight which power these planes can be blocked by other objects in the sky. As such, some statistics must first be calculated concerning the planned initial flights.\nWe consider a set of N flight paths, all travelling East from one city to another. A plane can be considered as a single point. The sky through which they pass can be modelled as a Cartesian plane, with x-coordinates representing distance East from an arbitrary fixed point, and y-coordinates representing altitude. We are interested only in the section of the sky with x-coordinates in the inclusive range [0, X] (1 \u2264 X \u2264 109), in which all flight paths are straight lines. The i-th plane flies from (0, Ai) to (X, Bi) (1 \u2264 Ai, Bi \u2264 109). All A values are distinct, as are all B values. The planes travel at unknown, possibly non-constant speeds along their flight paths, so at any point in time, a plane may be anywhere along its path. However, it is known that the planes will never crash with one another, so if two flight paths cross one another, both planes won't reach the intersection point at precisely the same time.\nPlanes also have an interference factor: each plane i has an interference factor Ci (1 \u2264 Ci \u2264 109), which is a measure of how much plane i would negatively impact the solar absorbing capability of any plane below them.\nThe solar panels on each plane are rather strange, in that they can only collect energy from directly above the plane. This means the sunlight that a given plane can absorb can be obstructed by other planes which occupy the same x-coordinate as it, and have a larger y-coordinate than it. In particular, their effectiveness is reduced based on the sum of the interference factor of all such planes.\nGiven this information, as well as a fixed distance constant K (1 \u2264 K \u2264 X), you must answer Q queries regarding the possible impact on planes' solar panels at various times. The i-th query asks for the largest possible amount by which the plane Pi's solar panels could be obstructed at a single moment in time, at any point while the plane's x-coordinate is in the inclusive range [Si, Si + K] (0 \u2264 Si \u2264 X \u2212 K).",
  "Output Format": "The output consists of Q lines, each with the integer answer to the i-th query, for i = 1..Q.",
  "Title": "CCO15 - Solar Flight"
}{
  "Title": "CCO15 - Cars on Ice",
  "Example": "Sample Input \n4 3\n...\n.N.\n.S.\n...\n\nSample Output 2\n(1,1)\n(2,1)\n",
  "Input Format": "The first line contains two integers, N and M (1 \u2264 N, M \u2264 2000), representing the number of rows and columns of the parking lot. The next N lines each contain M characters representing the parking lot itself, where '.' represents an empty spot, while 'N', 'S', 'E', and 'W' each represent a car (facing North, South, East or West, respectively).\nFor at least 70% of the marks for this problem, N \u2264 100 and M \u2264 100.",
  "Memory Limit": "256M",
  "Time Limit": "3.00s",
  "Explanation for Sample 2": "Either car could be pushed first to clear the parking lot, so this output is acceptable (as would the output with the lines outputted in reverse order).",
  "Description": "Guarding a bank during Christmas night can get very boring. That's why Barry decided to go skating around the parking lot for a bit. However the parking lot isn't empty as the other security guards have their cars parked there. So Barry decides to push their cars out of the parking lot. He notices that their cars are parked facing either North, South, East or West. Since the parking lot is frozen, pushing a car will make it slide until it has left the parking lot or hit another car. Cars can only be pushed in the direction which they are facing. Not wanting to crash the cars, Barry enlists your help to find out what order he has to push the cars so as to clear the parking lot.",
  "Output Format": "Output the order in which the cars have to be pushed so as to clear the parking lot without crashes. Output each car in the form (r, c), where r and c are the car's coordinates on the parking lot (where (0, 0) is the top leftmost spot and (N \u2212 1, M \u2212 1) is the bottom rightmost spot).\nYou can assume there will always be at least one valid solution.\nIf there are multiple possible solutions, output any valid solution.",
  "Explanation for Sample 1": "The only car that isn't initially blocked by another car is the one at (4,3). After that's pushed out to the right side of the parking lot, then the car above it (at (1, 3)) can be pushed, and then the one at (1, 1), and finally the car at (4, 1), clearing the parking lot."
}{
  "Title": "CCO15 - Timpanist",
  "Example": "Sample Input \n2 4\n40287 8\n20338194 8\n\nSample Output 3\n0.00\n",
  "Input Format": "The first line contains two integers, N and D, the number of notes to be played and the number of drums available to be played (1 \u2264 N \u2264 100; 1 \u2264 D \u2264 4). The next N lines each contain two integers Ti and Pi representing the time and pitch of the i-th note played (0 \u2264 T1 < T2 < \u2026 < TN\u22121 < TN \u2264 109; 1 \u2264 Pi \u2264 12 for 1 \u2264 i \u2264 N).\nFor 60% of the marks for this problem, N \u2264 50 and D \u2264 3.",
  "Memory Limit": "512M",
  "Explanation for Sample 3": "This is a more typical timpani part, involving just one note, and thus no retuning.",
  "Time Limit": "1.00s",
  "Explanation for Sample 2": "The first 6 notes include only the 4 pitches 1, 3, 5, and 6. Similarly, the last 6 include only 1, 3, 6, 8.\nThe single optimal strategy involves pre-tuning the 4 drums to 1, 3, 5, and 6. After the sixth note, the timpanist can take 4.5 seconds to retune the highest drum to an 8, and then another 4.5 seconds to retune the second-highest drum to a 6, finishing just in time to play the seventh note.",
  "Description": "Computer scientists don't often help percussionists, but today, that will change. Since we cannot help all percussionists at the same time, we focus on timpanists first. By way of terminology, the timpani is the plural of timpano and the player of the timpani is a timpanist.\nA timpano is a large drum which can be tuned to a certain pitch, and a timpanist uses an ordered set of D timpani. On this occasion, they're playing a piece which has N notes. Note i occurs Ti seconds into the piece, and has pitch Pi. Pi is one of the following twelve notes:\n{ F, F#, G, G#, A, A#, B, C, C#, D, D#, E }\nAt a given time, a timpano can only be used to play the pitch it is currently tuned to, and thus the timpanist can play a note i if and only if one of the timpani is tuned to pitch Pi at time Ti.\nEvery note in this piece is in the range of a single octave, from F up to E, which means that the above list of possible notes is in ascending order of pitch. In order to make your computation slightly easier, we will use integers from 1 to 12 to indicate these 12 tones:\n(i.e., F will be represented by 1, F# will be 2, \u2026, E by 12).\nThese are the only pitches to which timpani can be tuned.\nBefore the piece starts, the timpanist can freely tune each timpano to any pitch they'd like. However, during the piece, they may need to quickly retune them in between notes in order to be able to play the required pitches at the correct times. The drums are numbered from 1 to D. At every point in time, the drum i + 1 must be kept tuned to a pitch higher than drum i. Retuning a single drum must be done in an uninterrupted interval of time, in which no notes are being played and no other drums are being retuned. Because this is not an easy process, the timpanist would like to give themselves as much time as possible. In particular, they'd like to maximize the amount of time they have for the fastest retuning they must perform within the piece.",
  "Output Format": "The output is one line containing one real number (rounded off to 2 decimal places), which is the maximum amount of time (in seconds) that the timpanist can have for their fastest retuning, or 0.00 if no retunings are necessary.",
  "Explanation for Sample 1": "With just 1 drum, the timpanist must retune it after every note in order to play the following one.\nWith 2 drums, the answer would instead be 10.00 (achieved by leaving the higher drum tuned to pitch 12)."
}{
  "Example": "Sample Input \n4 2\n3\n3 1 1 2 3 4 2\n3 1 4 2 3 3 2\n4 2 1 2 4 4 1 4 4\n6\n2 2\n2 3\n1 2 3\n2 2\n2 3\n2 4\n\nSample Output\n0.88889\n0.33333\n0.44444\n0.11111\n0.00000\n",
  "Explanation": "Initially, we have the following arrangement of shells (with the first shells in the input being labelled as 1, and so on):\nand our shovel will scoop up a 2\u00d72 square of cells. Thus, there are 9 possible scoops.\nWith no eggs present, 8 of the 9 scoops contain at least two species of shells and 3 of the 9 scoops contain three species of shells.\nAn egg is then dropped into the cell that contains 1, 2.\nThen, 4 of the 9 scoops contain at least two species of shells and no eggs and only 1 scoop (the bottom-leftmost scoop) would contain all three species of shells and no eggs. The final output indicates there are no scoops which contain 4 different species of shells.",
  "Memory Limit": "512M",
  "Input Format": "The first line of input containts two integers N and K, (1 \u2264 N \u2264 2500; 1 \u2264 K \u2264 N), the size of the beach and the size of the shovel, respectively.\nThe second line of input contains the integer M (0 \u2264 M \u2264 105), the number of species of shells. The next M lines each represent species i and consist of the integer Si (1 \u2264 Si \u2264 4) followed by 2*Si more integers, which represent the grid positions (between (1, 1) and (N, N)) where the Si shells of that species are buried.\nThe next line contains T (1 \u2264 T \u2264 10,000). Each of the next T lines represent one specific point in time (from oldest to newest) and each line has one of the following two forms:\n1 Ai Bi (1 \u2264 Ai, Bi \u2264 N), meaning that the dodo just buried an egg in the grid shell (Ai, Bi); or\n2 Vi (1 \u2264 Vi \u2264 109), meaning we would like to calculate the probability that a random dig at this point in time has profit in dollars \u2265 Vi. Note that no shells or eggs are actually removed or added when this probability is calculated.\nFor at least 15% of the marks for this question, N \u2264 40 and all update operations occur before all query operations.\nFor an additional 25% of the marks for this question, all update operations will occur before all query operations.",
  "Time Limit": "5.00s",
  "Description": "It's time for a vacation! You are sick and tired of C shells, so you decide to become a seashell collector.\nFor your vacation, you have decided to visit the beautiful island nation of Cartesia. It is well-known for having a lovely square beach that is composed of an N\u00d7N grid of square cells. You have brought your trusty shovel, which is able to dig up a K\u00d7K square subgrid of the beach. Your shovel, being trusty, can only dig up a K\u00d7K subgrid that is entirely within the beach.\nThere are M undiscovered species of shells hidden under certain grid cells. Specifically for each i, there are Si shells from the i-th species in Si grid locations, with 1 \u2264 Si \u2264 4. For each distinct species that you dig up and bring back home, you can sell it to a scientist back home for one dollar. Multiple shells of the same species don't add extra value.\nComplicating matters is a glorious dodo bird running around the beach. At a given moment, it may decide to bury an egg in a grid cell (including grid cells that have eggs or shells already). The bad news is that if the K\u00d7K subgrid dug up by your shovel includes a dodo egg, the scientists will become annoyed that you are harming endangered species, and nobody will pay you anything.\nAfter all is said and done, you decide to sit back, go back to programming, and simulate the digging instead. You will be computing the probability that your scoop, when chosen uniformly from all valid possible scoops, will make at least a given minimum profit (to pay off your student loans) at different points in time. Who wants to get all sweaty from shoveling on a beach anyway?",
  "Output Format": "For each query operation, output on one line the probability that a random scoop would contain at least the desired number of different types of shells.\nYour answer must be within 10\u22124 of the judge's answer.",
  "Title": "CCO15 - Eggscavation"
}{
  "Explanation of Sample 2": "The first two planes will dock in gates 1 and 2 (in any order). The third plane must dock at Gate 3. Thus, the fourth plane cannot dock anywhere, and the airport is closed, even though plane 5 would have been able to dock.",
  "Example": "Sample Input \n4\n6\n2\n2\n3\n3\n4\n4\n\nSample Output 2\n3\n",
  "Explanation of Sample 1": "The first plane can go anywhere, but it is best to not put it into Gate 1. Notice that planes 2 and 3 both want to dock into Gate 1, so plane 3 is unable to dock.",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "For your birthday, you were given an airport.\nThe airport has G gates, numbered from 1 to G.\nP planes arrive at the airport, one after another. You are to assign the i-th plane to permanently dock at any gate 1, \u2026, gi (1 \u2264 gi \u2264 G), at which no previous plane has docked. As soon as a plane cannot dock at any gate, the airport is shut down and no future planes are allowed to arrive.\nIn order to keep the person who gave you the airport happy, you would like to maximize the number of planes starting from the beginning that can all dock at different gates.",
  "Output": "Output the maximum number of planes that can land starting from the beginning.",
  "Title": "CCC15S3 - Gates",
  "Input": "\nThe first line of input contains G (1 \u2264 G \u2264 105), the number of gates at the airport.\nThe second line of input contains P (1 \u2264 P \u2264 105), the number of planes which will land.\nThe next P lines contain one integer gi (1 \u2264 gi \u2264 G), such that the ith plane must dock at some gate from 1 to gi, inclusive.\n\nNote that for at least 40% of the marks for this question, P \u2264 2000 and G \u2264 2000."
}{
  "Example": "Sample Input \n5\n10\n12\n6\n14\n7\n3\n1\n8\n2\n\nSample Output\n44\n",
  "Explanation": "Place the pies in the order: 10, 1, 12, 2, 8, 6, 14, 7 (that is, insert the pie with 1 gram of sugar between 10 and 12, and insert pies with 2 and 8 grams of sugar, in that order, between pies 12 and 6). Then, we can grab 10 + 12 + 8 + 14 = 44 grams of sugar, which is maximal.",
  "Memory Limit": "512M",
  "Time Limit": "3.00s",
  "Description": "The local pie shop is offering a promotion \u2013 all-you-can-eat pies! Obviously, you can't pass up this offer.\nThe shop lines up N pies from left to right \u2013 the i-th pie contains Ai grams of sugar. Additionally, another M pies are provided - the i-th of these contains Bi grams of sugar.\nYou are first allowed to insert each of the M pies from the second group anywhere into the first list of N pies, such as its start or end, or in between any two pies already in the list. The result will be a list of N + M pies with the constraint that the initial N pies are still in their original relative order.\nFollowing this, you are allowed to take one walk along the new line of pies from left to right, to pick up your selection of all-you-can-eat pies! When you arrive at a pie, you may choose to add it to your pile, or skip it. However, because you're required to keep moving, if you pick up a certain pie, you will not be able to also pick up the pie immediately after it (if any). In other words, you cannot eat consecutive pies in this combined list!\nBeing a pie connoisseur, your goal is to maximize the total amount of sugar in the pies you pick up from this line. How many grams can you get?",
  "Output": "Output the maximum number of grams of sugar in all the pies that you are able to pick up.",
  "Title": "CCC15S5 - Greedy For Pies",
  "Input": "\nThe first line of input contains the integer N (1 \u2264 N \u2264 3000). The next N lines contain one integer Ai (1 \u2264 Ai \u2264 105), describing the integer number of grams of sugar in pie i in the group of N pies.\nThe next line contains the integer M (0 \u2264 M \u2264 100), the number of pies in the second list. The next M lines contain one integer Bi (1 \u2264 Bi \u2264 105), describing the integer number of grams of sugar in pie i in the group of M pies.\nFor 20% of the marks for this question, M = 0. For another 20% of the marks for this question M = 1. For another 20% of the marks for this question M \u2264 10.\n"
}{
  "Example": "Sample Input \n100\n200\n249\n\nSample Output 1\nBob overdoses on day 2.\n\nSample Input 2\n50\n100\n125\n\nSample Output 2\nBob never overdoses.\n",
  "Explanation": "For the first example, Alice slips Bob 100 mL of the potion on day one, of which, only 50 mL remain in Bob's body on day two. 50 mL is added on top of the 200 mL that he ingests on day two to make 250 mL, which is barely enough to make him overdose the recommended dosage of 249 mL.\nFor the second example, the amount from day one reduces to 25 mL on day two, when he is given another 100 mL to yield a total of 125 mL for the second day. 125 mL happens to be just the right dosage, so he does not overdose.",
  "Memory Limit": "16M",
  "Input Format": "Three lines, containing the three non-negative integers A, B, and R, each no greater than 1000.",
  "Time Limit": "2.00s",
  "Description": "Alice has a crush on her friend Bob, but she is too shy to express it. From an ancient recipe passed down through her family, she has concocted a vial of love potion. She plans to slip this potion into Bob's food every day so he will love her forever. The only problem is that the potion is so potent, taking too much can make Bob overdose, resulting in him being utterly indifferent towards her.\nAccording to a note on the recipe, if some amount of the potion is ingested one day, only 50% percent of that amount is retained in the body on the next day, and 0% of that amount is retained on the day after that. You are given A and B, the amount of love potion in mL that Alice gives to Bob on the first and second day, respectively, and R, the recommended dosage in mL, according to her recipe. Write a program to determine whether Bob overdoses on the first day, the second day, or neither. Note that if Bob overdoses on the first day, he cannot overdose again on the second.",
  "Output Format": "If he overdoses on the first day, output \"Bob overdoses on day 1.\" If he overdoses on the second day, output \"Bob overdoses on day 2.\" Otherwise, output \"Bob never overdoses.\"",
  "Title": "Mock CCC14J1 - Love Overdose"
}{
  "Example": "Sample Input \n4\n AR\nDAB\nACAR\n  AB\n\nSample Output 1\nABRACADABRA\n\nSample Input 2\n5\nD\nLRO\n  W\n  OL\n HEL\n\nSample Output 2\nHELLOWORLD\n",
  "Input Format": "The first line of input will contain the positive integer N (1 \u2264 N \u2264 100), the number of lines to follow. The next N lines each contain a segment of the folded rope.\nThe entire, unfolded rope will be no greater than 100 characters, and will only consist of uppercase letters from 'A' to 'Z'.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Alice's love potion failed because Bob overdosed. Now, her new tactic is to impress Bob. Bob is a computer scientist who specializes in ropes. In computer science, a rope is a data structure used for efficiently manipulating strings. Bob has a rope of characters. However, it's too long to fit in his pocket, so he folds it into N segments. Each fold is at a letter which is not the last. The fold takes the rest of the rope after that letter, reverses it, and puts it above the current letter. For example, the rope \"ABRACADABRA\", when folded \"AB|RACA|DAB|RA\", yields:\n AR\nDAB\nACAR\n  AB\n\nAlice notices that Bob often gets a headache pulling the rope out of his pocket and spending a long time untangling it. She concludes that if she finds a way to unfold it for Bob, Bob will be so impressed that he can't help but fall madly in love with her. You must write a program to help Alice!",
  "Output Format": "The output should contain one line \u2014 the unfolded rope.",
  "Title": "Mock CCC14J2 - Rope Unfolding"
}{
  "Example": "Sample Input \n195\n345\n180\n\nSample Output 1\n06:30:00\n\nSample Input 2\n90.066667\n270.733333\n47.200000\n\nSample Output 2\n03:00:08\n",
  "Explanation": "The following diagrams depict Alice's clock for the examples above. Orange is hour hand, black is the minute hand, and red is the second hand.",
  "Memory Limit": "16M",
  "Input Format": "Three lines, containing the three values H, M, and S.",
  "Time Limit": "2.00s",
  "Description": "Alice had just dug up an old time capsule that she had buried in her backyard many years ago. Inside, she discovered an exquisite clock from when she was a young girl.\nWhen she buried the clock, she had removed the batteries so that the hands would remain in that position forever. This was done so she could remind her future self of the exact time at which she met her eternal love interest \u2014 Bob. Unfortunately, all but the 12 o'clock marking had worn away over the years. With a protractor handy, Alice is determined to find out the exact time that Bob came into her life.\nMeasuring the hour hand from the centre of the clock, Alice determined that it was H degrees clockwise from the 12 o'clock marking. Alice then measured the angle of the minute hand, determining that it was M degrees clockwise relative to the hour hand. Finally, she measured the second hand, determining that it was S degrees clockwise relative to the minute hand. The three angle measurements will all be non-negative real numbers greater than or equal to 0, but less than 360. You may assume that the angles will yield valid times.",
  "Output Format": "Output the time, in the format HH:MM:SS, where HH (1 \u2264 HH \u2264 12) is the number of hours, MM (0 \u2264 MM < 60) is the number of minutes, and SS (0 \u2264 SS < 60) is the number of seconds. These values each must be padded to two-digits with leading zeros. Round the time to the nearest second.",
  "Title": "Mock CCC14J3 - Clock Hands"
}{
  "Example": "Sample Input \n10:30AM 07:00PM\n4\n05:30AM 10:00AM\n11:00AM 08:15PM\n01:45PM 05:00PM\n08:00PM 11:00PM\n\nSample Output\n11:00AM 08:15PM\n",
  "Explanation": "Bob works from 10:30AM to 7:00PM. If Alice picks the shift from 1:45PM to 5:00PM, she will spend 3 hours and 15 minutes on the job with Bob. If Alice picks the shift from 11:00AM to 8:15PM, she will spend 8 hours on the job with Bob (from 11:00AM to 7:00PM, when Bob gets off). The shift from 5:30AM to 10:00AM ends before Bob even goes in to work, and the shift at 8:00PM starts after Bob has already left.",
  "Memory Limit": "16M",
  "Input Format": "Line 1 contains T1 and T2, the time that Bob starts and ends his shift.\nLine 2 contains the integer N (1 \u2264 N \u2264 100), the number of shifts that Alice is being offered.\nThe next N lines each contain two times \u2014 the start and end times of that shift. The shifts are ordered by decreasing pay.\nTimes in the input will be in the 7 character long format as depicted in the sample input below, and will all describe times within the same 24 hour day (between 12:00AM and 11:59PM, inclusive). Every shift described will have the start time strictly before the end time.",
  "Time Limit": "2.00s",
  "Description": "Alice figured out where Bob works, and has obtained a job there so she can secretly admire him at work. Because she is new, the position is only part-time, and she is always called in to shifts by her boss. Whenever this happens, she is offered various shifts to pick from, starting and ending at different times of the day. Alice knows that Bob works from T1 to T2 on days that she's called in.\nAlice's employer has given her a list of the shifts that she can choose from in order of decreasing pay. Given this list, Alice would like to know which one would result in the longest period of time that both of them are simultaneously on the job. If multiple shifts yield the same time spent with Bob, she would like to know the highest paying out of those (i.e. the one that appears earliest in the list).",
  "Output Format": "The start and end time of the shift that Alice should pick to maximize the time she gets to spend on the job with Bob. If there are multiple answers, pick the one that is higher up on the list. If none of the shifts overlap with Bob's shift, output \"Call in a sick day.\" (without quotes), since Alice has no interest in wasting her time at work when Bob is not there.",
  "Title": "Mock CCC14J4 - Selecting Shifts"
}{
  "Example": "Sample Input \n2 5 3\nBXXA.\nXXX.X\n.XXXX\n..XXX\nX...X\nX.X.X\n\nSample Output 2\n8\n",
  "Explanation": "The three time settings are:\n(Present Day)\n  Setting 0:    Setting 1:     Setting 2:\n    BXXA.         .XXXX          X...X\n    XXX.X         ..XXX          X.X.X\n\nThe best path she can take is: travel to setting 2 \u2192 left \u2192 left \u2192 down \u2192 travel to setting 1 \u2192 left \u2192 up \u2192 travel to present day, on top of Bob.",
  "Memory Limit": "16M",
  "Input Format": "The first line of input contains the integers R, C, and T, the dimensions of the map and the number of time periods accessible by Alice's time machine.\nThe following contains T maps, each R rows by C columns. The first of these maps describes the present day. In the present day map, 'A' indicates Alice's current position and 'B' indicates Bob's current position. It is guaranteed that Alice cannot reach Bob from traversing only the present day setting.",
  "Time Limit": "2.00s",
  "Description": "Alice's love for Bob is everlasting. Unfortunately, they are fated to be apart in the current time. Alas, her burning love cannot be stopped by such a small obstacle. To reach Bob, Alice has acquired a time machine with T (1 \u2264 T \u2264 10) settings, along with maps of the terrain from each of those time periods. One of those periods is the present day. Alice and Bob live in a rectangular world that's R units tall by C units wide (1 \u2264 R, C \u2264 100). In their world, places where they may walk are denoted by '.'s. and obstacles (places where they may not walk) are denoted by 'X's.\nFrom Alice's perspective of time, it takes 1 second to move in any of the four directions adjacent to her (up, down, left, or right). It also takes her 1 second to travel to any one of the T time periods supported by her time machine. Whenever she travels through time, she always lands exactly on the same location. Of course, she cannot travel to another time if her location in that time is occupied by an obstacle. Alice would like to know the shortest time (from her own perspective) that it takes to get from her location in present day to Bob's location in present day.",
  "Output Format": "The shortest time that it takes for Alice to reach Bob, in seconds from Alice's perspective. If this is not possible, output -1.",
  "Title": "Mock CCC14J5 - Spacetime Surfer"
}{
  "Example": "Sample Input \n.boB m'I olleH :eM (MA03:21 ta tneS)\nBob\n\nSample Output 1\n4\n\nSample Input 2\n.tah eht ni tac eht :eM (MA04:21 ta tneS)\nthe\n\nSample Output 2\n19\n",
  "Input Format": "Line 1 of input contains the text string T.\nLine 2 of input contains the pattern string P.\n",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Alice has an intense, but secret crush on her friend Bob, though she's pretty sure it's not mutual. She would like to learn about his interactions with other girls that may end up being her competition. After paying for some spy training, she managed to find her way into Bob's apartment. Bob had just left to run some errands, and he happened to have left his instant messaging program open. Alice is now hanging on a rope from Bob's ceiling in front of his computer, staring directly into a chat log of all of his conversations.\nShe would like to bookmark the location of some keywords in the chatlog so she can look them up later when she'll have obtained the entire file. The only problem is, because she's hanging upside-down, the text is reversed and upside-down from her eyes! Luckily, she can read letters upside down, but she'll need your help bookmarking the keyword in reverse.\nSpecifically, given a reversed text T of no more than 1000 ASCII characters, and a keyword pattern P of no more than 100 ASCII characters, Alice needs to find the index of the first occurrence of the pattern when the string is read in reverse.",
  "Output Format": "Output 1 integer \u2014 the index of the first occurrence of the pattern when the string is read in reverse. Comparisons of the text and pattern are case-sensitive. The first character of input is index 1, the second character is index 2, and so on. If the pattern cannot be reverse-found, output -1.",
  "Title": "Mock CCC14S1 - Reverse Find"
}{
  "Example": "Sample Input \n12\n21 5 4 10 8 4 3 6 12 17 4 17\n\nSample Output\n7\n",
  "Explanation": "The longest dip in the data is 10, 8, 4, 3, 6, 12, 17.",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 contains the positive integer N, the number of data points to follow.\nLine 2 contains N positive integers each no greater than 1 billion, the measurements of Bob's awakeness levels that Alice has recorded.\n",
  "Time Limit": "2.00s",
  "Description": "Alice's obsession with her friend Bob is so tenacious that she cannot fall asleep at night. She decided to come up with a plan to secretly visit Bob in his house while he is sleeping. To not get caught, she must go only when she knows that Bob will be sound asleep for a while. Alice knows that people have sleep cycles. Below is an example of a hynogram, demonstrating the human sleep cycle.\n\nHowever, every individual's sleep pattern is different and can be affected by many different factors. For instance, Bob's sleep cycle can be different due to his habit of staying up late to watch movies, or due to him being a heavier sleeper than most. The only thing Alice can truly rely on is the cold, hard data she has collected from a high-quality microphone, previously planted outside of Bob's window to monitor his sleeping patterns.\nGiven N (3 \u2264 N \u2264 1000) measurements of Bob's awakeness level recorded at fixed time intervals, Alice would like to know the length of the longest dip in the data. A dip is a consecutive sequence of length three or more that starts at a value, progresses to the minimum value of the sequence in a strictly decreasing pattern, remains at the minimum value for one or more iterations, and progresses back up in a strictly increasing pattern.\n\nMore specifically, a consecutive subsequence from i to j of a sequence of numbers is a dip if and only if xi > xi+1 > \u2026 > xk (= xk+1 = xk+2 = \u2026) < \u2026 < xj-1 < xj.\nFor example, the sequence {7, 5, 4, 2, 1, 2, 8, 10} is a dip of length 8, the sequence {3, 2, 2, 3} is a dip of length 4, but the sequences {1, 1, 1}, {5, 4, 4, 2, 3, 5} and {5, 2, 1, 9, 8, 10} are not dips. Knowing the length of the longest dip, Alice will then be able to determine whether she has an opportunity to break in and watch Bob sleep.",
  "Output Format": "\nOne integer \u2014 the length of the longest dip, or 0 if the input does not contain a dip.\n",
  "Title": "Mock CCC14S2 - Sleep Cycle"
}{
  "Example": "Sample Input \n4 3\n6 2 1\n9 1 3\n9 2 1\n6 1 1\n2\n2\n1\n\nSample Output\n6 1 1\n6 2 1\n9 1 3\n9 2 1\n",
  "Explanation": "Alice first sorts by column 2, then she sorts by column 1. The spreadsheet is sorted as follows:\nBefore sorting:    Sort by col 2:     Sort by col 1:\n    6 2 1              9 1 3              6 1 1\n    9 1 3     ---->    6 1 1     ---->    6 2 1\n    9 2 1              6 2 1              9 1 3\n    6 1 1              9 2 1              9 2 1\n",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 of input contains two integers: R, the number of rows in the spreadsheet, and C, the number of columns in the spreadsheet (1 \u2264 R, C \u2264 100).\nThe next R lines will each contain C integers between 1 and 10\u00a0000 inclusive, representing single cells of the spreadsheet.\nThe next line of input will have an integer N (1 \u2264 N \u2264 100), the number of sort commands that Alice makes.\nThe last N lines will each contain a number ci (1 \u2264 ci \u2264 C), indicating that she sorts by column ci for the i-th command (1 \u2264 i \u2264 N). \n",
  "Time Limit": "2.00s",
  "Description": "\nOver the years, Alice has collected the physical data of her friend and secret love interest, Bob. Now she's trying to find trends in the data so she can learn more about Bob, and thus get closer to him. Alice entered the data into her spreadsheet software, but learned that unfortunately, the software doesn't work as it should. Namely, the \"sort by column\" function is broken. Each time Alice clicks a column, she wants all the rows in the spreadsheet to be sorted in nondecreasing order by values from that column. If rows have the same values in the column she clicks, the relative order of these rows should be preserved after the sort. Given the original spreadsheet and the sequence of the columns that Alice clicked, you are to determine the sorted spreadsheet.\n",
  "Output Format": "\nThe output should contain R lines with C integers per line, the sorted spreadsheet after the N clicks.\n",
  "Title": "Mock CCC14S3 - Spreadsheet Sorting"
}{
  "Explanation": "Under the conditions above, there are exactly two ways to get from city 1 to city 6 \u2014 either by taking the path 1\u21922\u21923\u21925\u21926 or the path 1\u21922\u21924\u21925\u21926.\n",
  "Example": "Sample Input \n6 6\n1 2\n2 3\n2 4\n3 5\n4 5\n5 6\n\nSample Output\nYes\n",
  "Scoring": "In addition to the constraints above, the following will hold:\nFor test cases worth 5/15 of the points, N \u2264 10, M \u2264 20.\nFor test cases worth 10/15 of the points, N \u2264 1\u00a0000, M \u2264 10\u00a0000.",
  "Memory Limit": "16M",
  "Input Format": "\nLine 1 contains the two integers N and M, denoting the number of cities and roads in their country.\nThe next M lines each contain two integers, a and b, indicating that there is a two-way road between city a and city b.\n",
  "Time Limit": "2.00s",
  "Description": "Alice heard that her secret love interest, Bob, is going on a roadtrip to visit his friend in another city. She decides to follow him along the way to see if the friend is actually romantically affiliated with Bob (in which case, the outcome is not going to be pretty). Alice does not know the route that Bob is going to take, so she has acquired a map of the country. In their country, there are N (1 \u2264 N \u2264 40\u00a0000) cities conveniently labeled from 1 to N, and M (1 \u2264 M \u2264 200\u00a0000) bidirectional roads that run between the cities. There is at most one road between any pair of cities.\nBoth of them are currently in city 1, and Bob would like to go to city N. Alice also wants to get to city N eventually, but how she gets there does not matter. Bob's route will never return to the same city twice, and Alice does not plan to waste time by returning to the same city in her route either. The problem is, Alice cannot take the exact same route as Bob because Bob might get suspicious of a car that's following him for the entire trip. At some point, Alice will have to split up with Bob for a while. Alice needs to know whether there are at least two distinct ways to get from city 1 to city N.",
  "Output Format": "\nOutput \"Yes\" if there are at least two different ways to get from city 1 to city N without revisiting the same city twice, otherwise \"No\".\n",
  "Title": "Mock CCC14S4 - Roadtrip Tracking"
}{
  "Explanation": "One way to elimate 8 of the 10 cards is to eliminate the pairs (3, 3), (10, 5), (6, 4), and (7, 14), with 17 left over in the black pile and 15 left over in the white pile. Another way is to eliminate the pairs (3, 15), (10, 5), (6, 3), and (7, 14), with 17 left over from the black pile and 4 left over from the white pile. We know that it's not possible to eliminate all 10 cards because we cannot eliminate 17, since it does not share factors greater than 1 with any other number except for itself (and there are no 17's in the white pile). Therefore, 8 is the most we can eliminate.",
  "Example": "Sample Input \n5 5\n3 10 6 7 17\n3 5 14 4 15\n\nSample Output\n8\n",
  "Scoring": "Bob immediately comes up with a strategy. He decides to start at the beginning of the black cards and go through them one by one. For each card in the black pile, he goes through all of the (non-eliminated) cards in the white pile from beginning to end. If at any one point the two cards he's examining can be eliminated, he eliminates them and moves on to the next black card. If no white cards share a factor greater than 1 with the black card, he then skips to the next black card. Clearly, this strategy is not perfect and will not always lead to the correct answer. However, implementing it efficiently will get you at least 5/15 of the points.\nOn an unrelated note:\nFor test cases worth 5/15 of the points: N, M \u2264 5.\nFor test cases worth 10/15 of the points: N, M \u2264 10.",
  "Memory Limit": "16M",
  "Input Format": "Line 1 of input contains the two integers N and M.\nLine 2 contains N integers, the values of the black cards.\nLine 3 contains M integers, the values of the white cards.\n",
  "Time Limit": "2.00s",
  "Description": "Alice had recently pursued her (not so) secret love interest, Bob, on a long roadtrip to see just who he was meeting in another town. To her dismay, she learned that Bob was getting back together with one of his ex-girlfriends. As she made the discovery, her body convulsed with rage, the sky spun around her head, and the ground trembled under her feet. One thing led to another; before you know it, Bob has found himself tied up and gagged in Alice's basement. Because Bob is a computer scientist, Alice stands before him offering him only two options \u2014 play the Elimination Game with her, or prepare to be eliminated. If she can't have him, nobody can!\nTo play the Elimination Game, Alice presents Bob with two piles of cards \u2014 a pile of N black cards and a pile of M white cards (1 \u2264 N, M \u2264 100). Every card has a positive integer no greater than 100\u00a0000 written on it. The rules of the game are as follows:\nBob picks two cards \u2014 one from the black pile and one from the white pile, such that the numbers on both cards share a factor greater than 1.\nThe two cards are eliminated from their respective piles.\nBob repeats this process until there are no more pairs that can be eliminated.\nThe objective is to eliminate as many cards as possible.\nUsing many days and nights of computational power from a supercomputer, Alice has obtained the maximum (total) number of cards that can be eliminated from the two piles under these rules. If Bob finds this number, then he is free to go. Otherwise, he himself will be forever \"eliminated\" by the crazed, lust-driven Alice. Write a program that helps Bob escape!",
  "Output Format": "The output should contain one integer, the maximum total number of cards that can be eliminated from the piles.",
  "Title": "Mock CCC14S5 - Elimination Game"
}{
  "Example": "Sample Input \n416 0534865\n\nSample Output 1\nvaluable\n\nSample Input 2\n827 9876543\n\nSample Output 2\ninvalid\n",
  "Input Format": "The input will contain two sequences of digits separated by a single space, representing a phone number that you must classify. The first sequence will represent the area code and the second sequence will represent the local number. Neither of the sequences will exceed 9 digits in length.",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "Area codes 416 and 647 are telephone area codes serving the single rate centre of Toronto, Ontario, Canada. However, as the city's people and organizations grow, these area codes are becoming been exhausted. In 2011, the Canadian Radio-television and Telecommunications Commission (CRTC) have announced Toronto's new 437 area code.\nAs the years go by, the classic 416 area code is becoming more and more rare. In fact, 416 phone numbers are being sold for hundreds, even thousands of dollars. Businesspeople feel that a 647 or a 437 number gives customers a feeling that their business is not established. A 416 number tells customers that they have been in business for a while.\nWe will consider a valid phone number to contain 10 numerical digits in total (exactly 3 digits for the area code and exactly 7 digits for the local number). For this problem, we will always denote a phone number by the area code, followed by a space, followed by the local number. Furthermore, since we are only concerned with businesses in central Toronto, valid phone numbers must have the area codes 416, 647, or 437. An invalid phone number is one that does not follow these rules. Examples of valid phone numbers are 416 1234567 and 437 9876543. Examples of invalid phone numbers are 647 12345678, 905 6413431 or 4161 596111.\nAdditionally, if a valid phone number has a 416 area code, then we will consider it to be valuable. All other valid phone numbers are valueless. Part of your job as a vendor of fine 416 numbers is to determine the value of a phone number. Of course, your life would be easier with the help of a automated program. So, write a program that when given a phone number, classifies it as either invalid, valuable, or valueless.",
  "Output Format": "Output a single word (all lowercase), either invalid, valuable, or valueless.",
  "Title": "Mock CCC15J1 - 416"
}{
  "Title": "Mock CCC15J2 - Lowest Exam Mark",
  "Example": "Sample Input \n36\n50\n20\n\nSample Output 2\nDROP THE COURSE\n",
  "Input Format": "\nLine 1 will contain P, the percentage mark she currently has.\nLine 2 will contain Q, the percentage mark she would like to have.\nLine 3 will contain W, the weight of the exam.\nThe input will only contain integers between 0 and 100, inclusive.\n",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Explanation for Sample 2": "Here, Berta has a 36% and just wants to pass the course with a 50%. However, even with a perfect exam, she can only end up with 48.8% overall.",
  "Description": "It's midterm examination season! The most frequently asked question in high schools across Canada is, of course, \"what is the lowest mark I have to get on the exam to end up with X% overall?\"\nBerta currently has exactly P percent in her class and prepares to write an exam that will be worth W percent of her overall mark afterwards. Her goal is to reach a mark of Q percent after the exam. Note that after inputting Berta's exam mark, her teacher will round her overall mark (half-up) to the nearest percent to be displayed. What is the minimum mark that she must obtain on the exam to have an overall mark that rounds to Q percent or over?",
  "Output Format": "Output a single integer, the minimum integer percentage that must be obtained on the exam to reach a final mark that rounds to Q percent or greater. If this is not possible, Berta knows that the mark is probably not going to look good on her report card. In this case you should output only the line \"DROP THE COURSE\" (without quotes).",
  "Explanation for Sample 1": "Berta has a 85% and prepares to take her midterm exam that will be worth 30% of her final mark. Assuming she gets perfect on her exam, her overall mark will be 89.5% afterwards, which just barely rounds up to a 90% for her final mark."
}{
  "Explanation of Sample 2": "\nYou only need to make 3 different problems \u2013 one with difficulty 1, one with difficulty 2, and one with difficulty 3.\n",
  "Example": "Sample Input \n6\n3 2 2 1 3 3\n\nSample Output 2\n3\n",
  "Explanation of Sample 1": "\nUnfortunately, you can't slack off \u2013 all contests will need their own unique problem!\n",
  "Memory Limit": "64M",
  "Input Format": "\nLine 1 of input will contain a single integer N, representing the number of contests you're responsible for.\nLine 2 of input will contain N space-separated integers D1, D2, \u2026, DN, the difficulty levels of the problems you have to contribute for the contests.\n",
  "Time Limit": "1.00s",
  "Description": "You are planning to run N (1 \u2264 N \u2264 100) programming contests in the next few weeks, but you quickly realized that you've bitten off more than you can chew. As a novice problem-setter, you quickly learned that the rumours are true. Indeed, original and interesting problems are really hard to write.\nFortunately, you're not alone in your contest-writing endeavors. Your friend is there with you. However, you know deep down that in order to be credited for helping create the contest, you just need to supply a single problem for it. You know that your friend will take care of the rest, even if it means he'll be very angry for having to do all the remaining work.\nThe contest are numbered from 1 to N. Both of you have agreed that in the i-th (1 \u2264 i \u2264 N) contest, you must contribute a problem of difficulty level Di (1 \u2264 Di \u2264 1000). You don't want to do a lot of work, so you want to create as few problems as possible to get the job done. Your master plan is to repeat problems when multiple contests require problems of the same difficulty. Surely, nobody will notice.\nSince you will focus solely on making problems for the next few days (who needs to eat or sleep?), you are able to make an original problem of any difficulty level if you try hard enough. What is the minimum number of original problems that you'll need to write for the N contests?",
  "Output Format": "\nThe first and only line of output should consist of a single integer, the minimum number of problems you have to write to be able to supply a problem for all the contests.\n",
  "Title": "Mock CCC15J3 - Problem-setting Pandemonium"
}{
  "Example": "Sample Input \n5\n/...\\\n..O..\n.OOO.\n..O..\n\\.../\n\nSample Output 2\n4\n\nSample Input 3\n6\n..\\/..\n\\(OO)/\n(OOOO)\n(OOOO)\n/(OO)\\\n../\\..\n\nSample Output 3\n2\n",
  "Explanation of Sample 1": "The Volvox is symmetrical horizontally and vertically, but not diagonally.",
  "Memory Limit": "64M",
  "Input Format": "\nLine 1 of input will contain a single integer N, the side length of the box.\nThe next N lines will each have N characters, depicting an ASCII image of the Volvox colony.\n",
  "Time Limit": "1.00s",
  "Description": "Michiru has an interesting Volvox colony which she keeps in a square open-air box (to allow them to photosynthesize). The base of the box is a square with a side length of N units (1 \u2264 N \u2264 1000). One day, she took a picture of it and printed out an ASCII image of the colony. The image is made of the characters ., O, (, ), /, and \\. Since Michiru is an inquisitive girl, she would like to know how many lines of symmetry there are in her Volvox colony.\nA line of symmetry can be one of 4 types of lines \u2013 either a horizontal line, a vertical line, a diagonal line running top-left to bottom-right, and a diagonal line running top-right to bottom-left. The horizontal and vertical lines must be parallel to sides of the box, while the diagonal lines must be at 45\u00b0 angles relative to the sides. Furthermore, a line of symmetry should divide the ASCII image into two halves of equal area which are symmetrical to each other with respect to that line.\nFor individual characters on the ASCII image, Michiru has observed that:\nThe characters . and O are symmetrical in all 4 directions.\nThe characters ( and ) are symmetrical to themselves horizontally, and symmetrical to each other vertically.\nThe characters / and \\ are symmetrical to themselves diagonally, and symmetrical to each other both vertically and horizontally.\nPlease help Michiru count the number of lines of symmetry.",
  "Output Format": "The output should consist of a single integer, the number of lines of symmetry.",
  "Title": "Mock CCC15J4 - Vox in Box"
}{
  "Example": "Sample Input \n4\n2 2\n2 3\n3 2\n3 3\n5\n1 2\n4 2\n3 2\n3 5\n3 1\n\nSample Output\n7\n",
  "Input Format": "\nThe first line of input will have an integer N (1 \u2264 N \u2264 100\u00a0000), the number of massive buildings.\nThe next N lines of input will each have the x- and y-coordinates of a single massive building. You may assume that the coordinates are pairwise distinct.\nThe (N + 1)th line will have an integer M (2 \u2264 M \u2264 100\u00a0000), the number of turning points on the Royal Guard's route. The i-th path the Royal Guard walks is from the i-th turning point to the (i + 1)th turning point (for 1 \u2264 i < M).\nThe next M lines will each contain the x- and y-coordinates of a turning point. It is guaranteed for the two turning points i and i + 1, exactly one of xi = xi + 1 or yi = yi + 1 will hold for all i such that 1 \u2264 i < M.\n\nAll numbers in the input will be between 1 and 109, inclusive.",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "Royal Guards protect the cities we live in. However, their numbers are limited and they have many zones in the city to protect, so they must constantly travel.\nWe will focus our attention on the patrol route of one Royal Guard throughout the course of a single day. If we take an aerial view of the city as a 2-dimensional coordinate plane, our particular Royal Guard always travels in straight lines parallel to the x- or y-axes. It is a well-known fact that Royal Guards travel by teleporting, but it's lesser known that they cannot teleport through massive buildings. Massive buildings are big, but compared to the city as a whole, they become mere points on the plane. If a massive building is on one of our Royal Guard's straight paths (even at the beginning or end of the path), he is forced to stop in front of it and walk around (or through) it while contemplating his job security and future career paths. Since these are unpleasant things to think of for a Royal Guard, he will have to mentally prepare himself at the beginning of the day as he learns of his patrol route of that day.\nOut of pity for the Royal Guard and his monotonous daily life, you decide to help him write a program to compute the number of times he will ponder about his existence so he won't have to do it himself every day.",
  "Output Format": "\nThe first only line of output should contain a single integer \u2013 the total number of moments when the Royal Guard is deep in thought.\nNote that the answer may be very large. In particular, it is not guaranteed to fit in a 32-bit integer.\n",
  "Explanation of Sample": "The massive buildings are arranged in a square shape. Note that paths can start or end on massive buildings. The following diagram depicts the royal guard's path, where each star represents a moment that he spends pondering his existence:\n",
  "Title": "Mock CCC15J5 - Royal Guard"
}{
  "Example": "Sample Input \n2\n5\n2\n1\n\nSample Output\n1\n",
  "Input Format": "\nLine 1 of input will contain a single integer P, the net points on the post.\nLine 2 of input will contain a single integer U, the number of users that have voted.\nLine 3 of input will contain a single integer R1, the first number in the ratio.\nLine 4 of input will contain a single integer R2, the second number in the ratio.\n",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "Currently, one of the most popular social news websites is seddit. On seddit, one user can submit a link to content while other users can say things in the comments. A great news aggregator like this is community-driven. Naturally, it employs a system where users can review and rate content. Many websites, including seddit, use a voting system where each user can give a submission either an upvote (worth +1 point) or a downvote (worth \u22121 point). The score of a submission is therefore the total points across all users who have voted on it.\nRecently, seddit is trying a new system where a new \"dupvote\" button is introduced. It's simple, really \u2013 if an upvote contributes +1 to the net score of a submission, then a dupvote simply contributes +2 to the net score. The downvote buttom still works as expected. This system will allow users to express support for quality content that's really exceptional.\nAs an avid user of seddit, you really enjoy this new system, but you are unsatisfied with one aspect of the site. For a given post, the site displays its net points P (\u22122000 \u2264 P \u2264 2000) and the number of users U (3 \u2264 U \u2264 1000) that have voted on the content. However, you have no idea what ratio of these votes are dupvotes, upvotes, or downvotes.\nThe hacker in you decided to analyse the site's JavaScript. To your amusement, you've discovered a little bug which allows you to see a simple ratio R1:R2 (1 \u2264 R1, R2 \u2264 1000) for each post. You know that this is a ratio of two of the values in the number of dupvotes, upvotes, and downvotes, but you don't know anything about which two. For a given post, you would like to calculate all possible triplets for the number of dupvotes, upvotes, and downvotes that could make up the total net points for that post.",
  "Output Format": "\nOutput a single integer, the number of possible combinations of dupvotes, upvotes, and downvotes that can result in a net score of P points on the post. It is guaranteed that all three of these values are positive.\n",
  "Explanation of Sample": "\nThe net score on the post is +2 as a result of 5 users voting. It is guaranteed that a ratio of 2:1 exists between either the dupvotes and upvotes, dupvotes and downvotes, or upvotes and downvotes. If there is 1 dupvote, 2 upvotes, and 2 downvotes, then the net score would be +2 and the ratio of upvotes to dupvotes would be 2:1. In fact, this is the only solution.\n",
  "Title": "Mock CCC15S1 - Dupvoting"
}{
  "Explanation of Sample 2": "\nOne possible solution is to write three original problems with difficulty 3.\nFor the first original problem: use it for contest 1, then lower it to difficulty 2 to use on contest 2, and finally to difficulty 1 to be used on contest 4.\nFor the second original problem: use it for contest 5, then lower it to difficulty 2 to use on contest 3.\nFor the last original problem, just use it for contest 6.\n",
  "Example": "Sample Input \n6\n3 2 2 1 3 3\n\nSample Output 2\n3\n",
  "Explanation of Sample 1": "\nJust create one original problem of difficulty 6 for contest 5, and reduce its difficulty to 4, 3, 2, and 1 in that order so you can reuse it on the other four contests.\n",
  "Memory Limit": "64M",
  "Input Format": "\nLine 1 of input will contain a single integer N, representing the number of contests you're responsible for.\nLine 2 of input will contain N space-separated integers D1, D2, \u2026, DN, the difficulty levels of the problems you have to contribute for the contests.\n",
  "Time Limit": "1.00s",
  "Description": "You are planning to run N (1 \u2264 N \u2264 100\u00a0000) programming contests in the next few weeks, but you quickly realized that you've bitten off more than you can chew. As a novice problem-setter, you quickly learned that the rumours are true. Indeed, original and interesting problems are really hard to write.\nFortunately, you're not alone in your contest-writing endeavors. Your friend is there with you. However, you know deep down that in order to be credited for helping create the contest, you just need to supply a single problem for it. You know that your friend will take care of the rest, even if it means he'll be very angry for having to do all the remaining work.\nThe contest are numbered from 1 to N. Both of you have agreed that in the i-th (1 \u2264 i \u2264 N) contest, you must contribute a problem of difficulty level Di (1 \u2264 Di \u2264 100\u00a0000). You don't want to do a lot of work, so you want to create as few problems as possible to get the job done. Your master plan is to repeat problems when multiple contests require problems of the same difficulty. Surely, nobody will notice.\nHowever, you also realized that your friend is smarter than you think. He will easily notice if you repeat the same problem for multiple contests. Your (not-so-)subtle way to circumvent this is by creating a problem and then repeatedly decreasing its difficulty (by some positive integer value) whenever you reuse it in a different contest. This way, you are less likely to be busted.\nSince you will focus solely on making problems for the next few days (who needs to eat or sleep?), you are able to make an original problem of any difficulty level if you try hard enough. What is the minimum number of original problems that you'll need to write for the N contests?",
  "Output Format": "\nThe first and only line of output should consist of a single integer, the minimum number of original problems you have to write to be able to supply a problem for all the contests.\n",
  "Title": "Mock CCC15S2 - Problem-setting Pandemonium"
}{
  "Example": "Sample Input \n5\n1 2\n2 2\n3 3\n2 1\n2 5\n\nSample Output\n4\n",
  "Explanation": "The four ways that Flash can build the tachyon trap is as follows:\n\n",
  "Memory Limit": "64M",
  "Input Format": "\nLine 1 contains an integer N, the number of points in Central City where tachyonic field is weak.\nThe following N lines will each contain two space-separated integers xi and yi, representing the vertices of the trap for i = 1..N.\n",
  "Time Limit": "1.00s",
  "Description": "The Flash has just met his match at the hands of the Man in the Yellow Suit, a.k.a. the Reverse-Flash, and is chasing him fervently across Central City. Meanwhile, Cisco, Caitlin, and Dr. Wells are drawing up a plan back at S.T.A.R. Labs. They have concluded that Reverse-Flash uses a tachyonic devices to corrupt the Speed Force which is responsible for the powers of the Flash and generate his own negative Speed Force.\nTeam Flash has a plan to capture Reverse-Flash. They have identified N (3 \u2264 N \u2264 10) two-dimensional points (x1, y1), (x2, y2), \u2026, (xN, yN) in Central City where they believe the tachyonic field is weak. These points are numbered from 1 to N and the coordinates are all positive integers between 1 and 10000. In order to trap Reverse-Flash, Flash will have to run to all N points, one after the other in some order, and trace an anti-tachyonic barrier with a special device provided by Dr. Wells. In the end, the Flash's path should join the N points and form an N-sided polygon to trap the Reverse-Flash inside, where his powers are rendered useless. Tachyon fields are very unstable relative to each other, so no three adjacent vertices in the tachyon trap will lie on the same line.\nBecause the Reverse-Flash is lightning fast and unpredictable, the Flash would like to know of as many ways to create the trap as possible in case Reverse-Flash changes course in their chase. Given the points in Central City where the tachyonic field is weak, S.T.A.R Labs needs your help in determining how many different traps that the Flash can set up to trap the Reverse-Flash.",
  "Output Format": "The output should consist of a single integer \u2013 the number of distinct trap shapes that can be made with all N points.",
  "Title": "Mock CCC15S3 - The Tachyon Trap"
}{
  "Title": "Mock CCC15S4 - Ice Pillars",
  "Example": "Sample Input \n3\n5 6\n6 4\n4 0\n\nSample Output 2\n5\n",
  "Scoring": "In addition to the constraints above, the following will hold:\nFor test cases worth 20% of the points: N \u2264 8.\nFor test cases worth 60% of the points: N \u2264 300 and Di, Wi \u2264 1000.",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input will have the integer N.\nFor the next N lines, the i-th of these lines will contain two space-separated integers Di and Wi.\n",
  "Time Limit": "1.00s",
  "Explanation for Sample 2": "If you knock over the 1st pillar, you get a chain reaction which destroys all other pillars.",
  "Description": "\nMiyuki is competing in a sports event known as the Ice Pillars Break. In this event, there are N (2 \u2264 N \u2264 105) ice pillars placed in a line and conveniently numbered 1..N from left to right. Pillar i has a durability Di (1 \u2264 Di \u2264 109) and a weight Wi (0 \u2264 Wi \u2264 109) for i = 1..N. Each second, Miyuki can reduce the durability of any pillar by 1. When a pillar's durability becomes less than or equal to 0, it collapses and removes durability equal to its weight from each of the two pillars adjacent to it (pillars 1 and N only have one other pillar adjacent to them). Miyuki wants to finish with as fast a time as possible, so please help her calculate the minimum number of seconds it will take to collapse all of the pillars.\n",
  "Output Format": "\nOutput one integer, the minimum number of seconds required to reduce the durability of all pillars to 0 or lower.\nPlease note that this answer may be very large and is not guaranteed to fit within a 32-bit integer.\n",
  "Explanation for Sample 1": "Destroy the 5th pillar, then the 1st pillar, then the 2nd pillar, and finally the 3rd pillar. At this point, the 4th pillar will already be destroyed."
}{
  "Title": "Mock CCC15S5 - Kongou",
  "Example": "Sample Input \n4 3 4\n1 1 2 3 1\n1 1 2\n1 3 4\n2 2 3 2 3\n\nSample Output 1\n0\n2\n1\n1\n\nSample Input 2\n7 3 3\n1 2 3 1\n4 1 2 1 3 5 7 6 7\n4 2 3 3 4 4 5 5 6\n3 1 4 4 7 2 6\n\nSample Output 2\n2\n2\n2\n",
  "Scoring": "For test cases worth at least 30% of the points, the additional constraints N, M, Ki, T \u2264 2000 will hold.",
  "Memory Limit": "256M",
  "Input Format": "The first line of input will contain the integers N, M, and T, each separated by a single space.\nThe second line of input will have T + 1 numbers, A0, A1, \u2026, AT (1 \u2264 Ai \u2264 M). The i-th time you fight will be represented by the combination of formations Ai\u22121 and Ai (for 1 \u2264 i \u2264 T).\nThe next M lines will contain descriptions of a single formation. Formation i (1 \u2264 i \u2264 M) on line i + 2 will be described with 2Ki + 1 (1 \u2264 Ki \u2264 200\u00a0000) integers in this order: Ki\u2003xi,1\u2003yi,1\u2003\u2026\u2003xi,Ki\u2003yi,Ki. For all 1 \u2264 j \u2264 Ki, there is a river between lakes xi,j and yi,j in formation i (where xi,j \u2260 yi,j and 1 \u2264 xi,j, yi,j \u2264 N).\nIt is guaranteed that the sum of all Ki will not exceed 200\u00a0000.",
  "Time Limit": "20.00s",
  "Description": "You are the admiral of an admirable fleet of battleships! Your flagship is the Kongou*, and you have never lost a single battle in your entire career. This is because you have adopted the foolproof strategy of blocking off all critical rivers before engaging in battle.\n\nYou and your fleet girls are immortal, and so you get called upon to fight every few years, for a total of T (1 \u2264 T \u2264 200\u00a0000) times. The passage of time is not kind to the battlefield, and so the rivers that connect the seas change often (the seas themselves remain the same though). Normally, this would make it hard to quickly devise a plan for each battle, but there is still hope. In your experience, you have observed that there are M (1 \u2264 M \u2264 100\u00a0000) basic formations. A formation is simply a set of rivers, and each battlefield you fight on can be represented by combining two formations (see the sample input for a better understanding).\nFor each battlefield, you would like to determine the number of critical rivers.\n*Kongou, based off of the Kong\u014d.",
  "Output Format": "The output shoud consist of T lines. Line i should have the number of critical rivers on the battlefield you fight on for the i\u2212th time (1 \u2264 i \u2264 T).",
  "Explanation for Sample 2": "Originally, there are 7 seas numbered from 1 to 7.\n\nThe first formation looks like this:\n\nThe second formation looks like this:\n\nThe third formation looks like this:\n\nIn the first battle, the battlefield is made up of the first and second formations and looks like this:\n\nThe two critical rivers (in red) are 3 \u2194 4 and 4 \u2194 5.\nIn the second battle, the battlefield is made up of the second and third formations and looks like this:\n\nThe two critical rivers (in red) are 1 \u2194 4 and 4 \u2194 7.\nIn the third and final battle, the battlefield is made up of the third and first formations and looks like this:\n\nThe two critical rivers (in red) are 1 \u2194 3 and 5 \u2194 7."
}{
  "Example": "Sample Input \nW\nL\nW\nW\nL\nW\n\nSample Output 1\n2\n\nSample Input 2\nL\nL\nL\nL\nL\nL\n\nSample Output 2\n-1\n",
  "Input Format": "The input consists of six lines, each with one of two possible letters: W (to indicate a win) or L (to indicate a loss).",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Each player in a tournament plays six games. There are no ties. The tournament director places the players in groups based on the results of games as follows:\nif a player wins 5 or 6 games, they are placed in Group 1;\n\nif a player wins 3 or 4 games, they are placed in Group 2;\n\nif a player wins 1 or 2 games, they are placed in Group 3;\n\nif a player does not win any games, they are eliminated from the tournament.\n\nWrite a program to determine which group a player is placed in.",
  "Output Format": "The output will be either 1, 2, 3 (to indicate which Group the player should be placed in) or -1 (to indicate the player has been eliminated).",
  "Title": "CCC16J1 - Tournament Selection"
}{
  "Example": "Sample Input \n5 10 1 3\n10 4 2 3\n1 2 8 5\n3 3 5 0\n\nSample Output 2\nnot magic\n",
  "Explanation 1": "Notice that each row adds up to 34, and each column also adds up to 34.",
  "Memory Limit": "16M",
  "Input Format": "The input consists of four lines, each line having 4 space-separated integers.",
  "Time Limit": "2.00s",
  "Description": "Magic Squares are square arrays of numbers that have the interesting property that the numbers in each column, and in each row, all add up to the same total.\nGiven a 4 \u00d7 4 square of numbers, determine if it is a magic square.",
  "Output Format": "Output either magic if the input is a magic square, or not magic if the input is not a magic square.",
  "Explanation 2": "\nNotice that the top row adds up to 19, but the rightmost column adds up to 11.\n",
  "Title": "CCC16J2 - Magic Squares"
}{
  "Example": "Sample Input \nabba\n\nSample Output 3\n4\n",
  "Explanation 1": "The palindrome anana has 5 letters.",
  "Memory Limit": "16M",
  "Input Format": "The input will consist of one line, containing a sequence of at least 1 and at most 40 lowercase letters.",
  "Time Limit": "2.00s",
  "Description": "A palindrome is a word which is the same when read forwards as it is when read backwards. For example, mom and anna are two palindromes.\nA word which has just one letter, such as a, is also a palindrome.\nGiven a word, what is the longest palindrome that is contained in the word? That is, what is the longest palindrome that we can obtain, if we are allowed to delete characters from the beginning and/or the end of the string?",
  "Output Format": "Output the total number of letters of the longest palindrome contained in the input word.",
  "Explanation 2": "The palindromes aca and ada have 3 letters, and there are no other palindromes in the input which are longer.",
  "Title": "CCC16J3 - Hidden Palindrome"
}{
  "Example": "Sample Input \n23:20\n\nSample Output 3\n01:20\n",
  "Explanation 1": "Fiona does not encounter any rush-hour traffic, and leaving at 5am, she arrives at exactly 7am.",
  "Memory Limit": "16M",
  "Input Format": "The input will be one line, which contains an expression of the form HH:MM, where HH is one of the 24 starting hours (00, 01, \u2026, 23) and MM is one of the three possible departure minute times (00, 20, 40).",
  "Time Limit": "2.00s",
  "Explanation 3": "Fiona leaves at 11:20pm, and with non-rush-hour traffic, it takes two hours to travel, so she arrives at 1:20am the next day.",
  "Description": "Fiona commutes to work each day. If there is no rush-hour traffic, her commute time is 2 hours. However, there is often rush-hour traffic. Specifically, rush-hour traffic occurs from 07:00 (7am) until 10:00 (10am) in the morning and 15:00 (3pm) until 19:00 (7pm) in the afternoon. During rush-hour traffic, her speed is reduced by half.\nShe leaves either on the hour (at XX:00), 20 minutes past the hour (at XX:20), or 40 minutes past the hour (at XX:40).\nGiven Fiona's departure time, at what time does she arrive at work?",
  "Output Format": "Output the time of Fiona's arrival, in the form HH:MM.",
  "Explanation 2": "Fiona drives for 3 hours in rush-hour traffic, but only travels as far as she normally would after driving for 1.5 hours. During the final 30 minutes (0.5 hours) she is driving in non-rush-hour traffic.",
  "Title": "CCC16J4 - Arrival Time"
}{
  "Example": "Sample Input \nabba\nbaaa\n\nSample Output 1\nN\n\nSample Input 2\ncccrocks\nsocc*rk*\n\nSample Output 2\nA\n",
  "Input Format": "The two lines of input will both consist of N (1 \u2264 N \u2264 100) characters. Each character in the first line will be a lowercase letter. Each character in the second line will be either a lowercase letter or an asterisk.\nFor 8 of the 15 available marks, the second line will not contain any asterisk characters.",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "An anagram of a string is formed by rearranging the letters in the string. For example, the anagrams of aab are aab, aba, and baa.\nA wildcard anagram of a string is an anagram of the string where some of the letters might have been replaced with an asterisk (*). For example, two possible wildcard anagrams of aab are *ab and *b*.\nGiven two strings, determine whether the second string is a wildcard anagram of the first string.",
  "Output Format": "Output the character A if the string on the second line is a wildcard anagram of the string on the first line. Otherwise, output the character N.",
  "Title": "CCC16S1 - Ragaman"
}{
  "Example": "Sample Input \n2\n5\n202 177 189 589 102\n17 78 1 496 540\n\nSample Output 3\n2016\n",
  "Explanation 1": "There is a unique optimal solution:\nPair the citizen from Dmojistan with speed 5 and the citizen from Pegland with speed 6.\nPair the citizen from Dmojistan with speed 1 and the citizen from Pegland with speed 2.\nPair the citizen from Dmojistan with speed 4 and the citizen from Pegland with speed 4.",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line will contain the type of question you are to solve, which is either 1 or 2.\nThe second line contains N (1 \u2264 N \u2264 100).\nThe third line contains N space-separated integers: the speeds of the citizens of Dmojistan.\nThe fourth line contains N space-separated integers: the speeds of the citizens of Pegland.\nEach person's speed will be an integer between 1 and 1\u00a0000\u00a0000.\nFor 8 of the 15 available marks, questions of type 1 will be asked. For 7 of the 15 available marks, questions of type 2 will be asked.\n",
  "Time Limit": "2.00s",
  "Explanation 3": "There are multiple possible optimal solutions. Here is one optimal solution:\nPair the citizen from Dmojistan with speed 202 and the citizen from Pegland with speed 1.\nPair the citizen from Dmojistan with speed 177 and the citizen from Pegland with speed 540.\nPair the citizen from Dmojistan with speed 189 and the citizen from Pegland with speed 17.\nPair the citizen from Dmojistan with speed 589 and the citizen from Pegland with speed 78.\nPair the citizen from Dmojistan with speed 102 and the citizen from Pegland with speed 496.\nThis sum yields 202 + 540 + 189 + 589 + 496 = 2016.",
  "Description": "Since time immemorial, the citizens of Dmojistan and Pegland have been at war. Now, they have finally signed a truce. They have decided to participate in a tandem bicycle ride to celebrate the truce. There are N citizens from each country. They must be assigned to pairs so that each pair contains one person from Dmojistan and one person from Pegland.\nEach citizen has a cycling speed. In a pair, the fastest person will always operate the tandem bicycle while the slower person simply enjoys the ride. In other words, if the members of a pair have speeds a and b, then the bike speed of the pair is max(a, b). The total speed is the sum of the N individual bike speeds.\nFor this problem, in each test case, you will be asked to answer one of the two questions:\nQuestion 1: what is the minimum total speed, out of all possible assignments into pairs?\nQuestion 2: what is the maximum total speed, out of all possible assignments into pairs?",
  "Output Format": "Output the maximum and minimum total speed that answers the question asked.",
  "Explanation 2": "There are multiple possible optimal solutions. Here is one optimal solution:\nPair the citizen from Dmojistan with speed 5 and the citizen from Pegland with speed 2.\nPair the citizen from Dmojistan with speed 1 and the citizen from Pegland with speed 6.\nPair the citizen from Dmojistan with speed 4 and the citizen from Pegland with speed 4.",
  "Title": "CCC16J5S2 - Tandem Bicycle"
}{
  "Example": "Sample Input \n8 5 2\n1 4\n8 2\n4 5\n6 2\n3 5\n\nSample Output\n6 2\n",
  "Explanation": "If the friendships between student pairs (8,2) and (4,5) are severed, then 3 buses can be filled as follows:\nBus 1: Students 1 and 4\nBus 2: Students 2 and 6\nBus 3: Students 3 and 5",
  "Memory Limit": "64M",
  "Input Format": "The first line contains three space-separated integers N, M and K (1 \u2264 N \u2264 106; 0 \u2264 M \u2264 106; 1 \u2264 K \u2264 N).\nThe next M lines contain information about the friendships. That is, each of these M lines contain two space-separated integers Ai and Bi (1 \u2264 i \u2264 M) describing that students Ai and Bi are friends\n(1 \u2264 Ai, Bi \u2264 N, Ai \u2260 Bi). Note that no friendship is specified twice (that is, no two unordered friendship pairs are equal to one another).\nFor 3 of the 25 marks available, N \u2264 1000.",
  "Time Limit": "3.00s",
  "Description": "As a special treat for your kindergarten class, you're taking them on a field trip to a magical place of wonder.\nYour class has N students, numbered from 1 to N for convenience. There are M direct, two-way friendships that exist between the students. Each student is friends with at most two other students.\nAside from the M direct friendships, students may also be acquainted with one another. Two students i and j are acquaintances if they're friends, or if there exists a third student k who is an acquaintance of both students i and j. For example, if (1, 2), (2, 3), (3, 4) and (4, 5) are pairs of students with a direct friendship, then person 1 and person 5 are acquaintances.\nYou're getting ready to order buses for the trip, but there are two issues. Firstly, the transportation company insists that every bus you order must be filled exactly to its capacity of K students. They won't allow you to order a bus if you intend to put fewer than K students on it! Secondly, the students are picky about their travelling conditions. Each student i will refuse to get on a bus unless both of the following conditions are met:\nAll of the other students getting on that bus are acquaintances of student i;\nAll of student i's acquaintances are getting on that bus.\nUnfortunately, it looks like you might not be able to bring your whole class on this trip after all. However, you'll do whatever it takes to get as many students as possible on buses. As it turns out, \"whatever it takes\" may involve putting an end to a friendship or two, for the greater good. You may choose to sever 0 or more of the M friendships amongst the students, which will of course also have an effect on which students are acquainted with one another.\nDetermine the maximum number of students which can be brought on the trip, such that they're loaded onto buses with exactly K students each, and every student is satisfied with their bus allocation. Furthermore, since you're feeling generous, determine the minimum number of friendships which you can sever in order to be able to bring that many students along.",
  "Output Format": "The output consists of two space-separated integers printed on one line. The first integer is the the maximum number of students which can be brought on the trip. The second integer is the minimum number of friendships which must be severed in order to bring that many students.",
  "Title": "CCO16 - Field Trip"
}{
  "Example": "Sample Input \n6\n1 8 4\n1 4 6\n7 7 2\n4 10 -3\n4 6 -9\n4 2 8\n\nSample Output\n18\n",
  "Explanation": "Take the bunnies with goodness weights of 4, 6 and 8, which are on the \"left\" side of the line, as shown in the diagram below:\n\n\n",
  "Memory Limit": "16M",
  "Input Format": "The first line contains N (2 \u2264 N \u2264 4000), the number of bunnies. The next N lines contain three space-separated integers: xi yi wi, which indicates that at the point (xi, yi) there is a bunny with a goodness weight of wi (\u22121\u00a0000\u00a0000 \u2264 xi \u2264 1\u00a0000\u00a0000; \u22121\u00a0000\u00a0000 \u2264 yi \u2264 1\u00a0000\u00a0000; \u221210\u00a0000 \u2264 wi \u2264 10\u00a0000). The locations (xi, yi) will be distinct (i.e., there is no other j \u2260 i such that (xi, yi) = (xj, yj)).\n\nFor 5 of the 25 marks available, N \u2264 200 and no three locations are collinear.\nFor an additional 10 of the 25 marks available, no three locations are collinear.\n",
  "Time Limit": "15.00s",
  "Description": "As you know, some bunnies are good bunnies, and some bunnies are bad bunnies.\nYou are given the location of all the bunnies, and their \"goodness\" weight (a positive integer for good bunnies and a negative integer for bad bunnies). No two bunnies are at the same location. Divide them into two groups using a straight line such that the sum of the \"goodness\" of the bunnies on one side of the line is as large as possible. A bunny on the line is counted in the sum of the weights on both sides of the line.",
  "Output Format": "Output the maximum sum of weights that is possible by drawing a straight line and picking all the bunnies which are on one side of that line.",
  "Title": "CCO16 - Splitting Hares"
}{
  "Explanation 5": "",
  "Example": "Sample Input \n5\n2\n\n5 5\n1 2\n2 3\n2 4\n4 5\n3 5\n\n6 6\n1 2\n2 3\n1 4\n4 5\n2 4\n1 6\n\nSample Output 5\nNO\nYES\n",
  "Explanation 1": "",
  "Memory Limit": "64M",
  "Explanation 3": "",
  "Description": "The country of Canadia consists of a network of cities and roads. Each road can be traversed in both directions. It is possible to get from any city to any other city using the roads.\nSuzie studies the creation myths of the Canadiaan people. She is particularly interested in five myths (which correspond to the five subtasks of this problem). The myths are very similar. Each myth has the following form:\nIn the beginning, Canadia's road network had a particular structure. As time went on, the network was modified to meet the needs of Canadia's growing population. Each modification had one of the following forms:\nA road was built between two cities that did not yet have a road going directly between them.\nA new city was built. Cities built in this way were not initially connected to any existing cities.\nA city u grows too large and is split into two cities v and w. The cities originally joined directly to u by a road are partitioned into sets A and B. A road is built from each city in A to v, from each city in B to w and from v to w. For example,\n\n\n\u2003becomes\u00a0\n\n\nThe five myths only differ in the structure that they believe Canadia began with. Here are the original structures, according to each myth:\nFor each subtask, you must take the layout of Canadia as input and determine whether the myth might be correct.\nSubtasks are worth 5 marks each.",
  "Output Format": "For each test case, output a single line containing the string YES or the string NO.",
  "Explanation 2": "",
  "Explanation 4": "",
  "Time Limit": "2.00s",
  "Input Format": "The first line contains a single integer S (1 \u2264 S \u2264 5) representing the subtask which you must solve.\nThe second line contains an integer T (1 \u2264 T) representing the number of test cases.\nEach test case consists of a blank line, followed by two integers N and M (2 \u2264 N, 1 \u2264 M) representing the number of cities and roads, respectively. The cities are numbered from 1 to N.\nThen M lines follow, each containing two integers a and b (1 \u2264 a, b \u2264 N) representing two cities connected by a road.\nNo road connects a city to itself. No two roads connect the same pair of cities. It is possible to get from any city to any other city using the roads.\n\nIn subtasks 3, you may assume that the sum of N over all test cases is at most 105. In all other subtasks, the sum of N over all test cases is at most 1000.\nThe same condition holds for M. In particular, in subtask 3, you may assume that the sum of M over all test cases is at most 105. In all other subtasks, the sum of M over all test cases is at most 1000.\n",
  "Title": "CCO16 - Legends"
}{
  "Example": "Sample Input \n2\n2\nRW\nWR\nWR\nRW\n\nSample Output\n1\n",
  "Explanation": "There are exactly two grids, and they are similar because the first grid can be transformed into the second grid using one change (selecting the 2-by-2 square consisting of the entire grid).",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input contains N (2 \u2264 N \u2264 10), the size of the grids.\nThe second line contains G (2 \u2264 G \u2264 10 000), the number of grids.\nThe input then consists of N\u00b7G lines, where each line contains N characters, where each character is either R or W, indicating the colour (red or white) for that element in the grid. Moreover, after the first two lines of input, the next N lines describe the first grid, the following N lines describe the second grid, and so on.\nFor 12 out of the 25 marks available for this question, 2 \u2264 G \u2264 10.",
  "Time Limit": "2.00s",
  "Description": "In this problem, a grid is an N-by-N array of cells, where each cell is either red or white.\nSome grids are similar to other grids. Grid A is similar to grid B if and only if A can be transformed into B by some sequence of changes. A change consists of selecting a 2-by-2 square in the grid and flipping the colour of every cell in the square. (Red cells in the square will become white; white cells in the square will become red.)\nYou are given G grids. Count the number of pairs of grids which are similar. (Formally, number the grids from 1 to G, then count the number of tuples (i, j) such that 1 \u2264 i < j \u2264 G and grid i is similar to grid j.)",
  "Output Format": "Output the number of pairs of grids which are similar.",
  "Title": "CCO16 - O Canada"
}{
  "Example": "Sample Input \n5 6\n2\n3 3\n2 4\n2\n\nSample Output\n15\n",
  "Explanation": "The sample input is the example shown above, which has 15 2's.",
  "Memory Limit": "64M",
  "Input Format": "\nThe first line of input will contain two space-separated integers N and M (1 \u2264 N \u2264 109; 1 \u2264 M \u2264 109) indicating the size of the grid. The next line contains the number K (1 \u2264 K \u2264 2000), indicating the number of cells that contain zombies. The next K lines each contain two space-separated integers ri ci indicating the row and column of the i-th zombie (1 \u2264 ri \u2264 N; 1 \u2264 ci \u2264 M). No two zombies are in the same cell: thus if i \u2260 j then (ri, ci) \u2260 (rj, cj). The last line will contain the integer Q (0 \u2264 Q \u2264 N + M).\n\nFor 5 of the 25 marks available, N \u2264 1000 and M \u2264 1000.\nFor an additional 5 of the 25 marks available, K \u2264 50.\nFor an additional 5 of the 25 marks available, N \u2264 1000.\n",
  "Time Limit": "2.00s",
  "Description": "Your country has a problem with zombies. That is, it has zombies, which are a problem. Thankfully, you are gainfully employed at the Forsenic Institute for Zoology and Zombie Emerging Studies (FIZZES), and your job is simply to give a measure of how bad the problem is.\nYou have mapped out your country on an an N-by-M array of cells marked with non-negative integers.\nYou have the exact locations of all the zombies, and know that no two zombies are in the same location. The cells containing a zombie are marked with 0. Next, all the unmarked cells touching a cell (where touching a cell means touching on any side or corner of a cell; so each cell touches up to 8 other cells) marked with 0 are marked with 1. Then, all the unmarked cells touching a cell marked with 1 are marked with 2. This process continues until all the cells are marked. These numbers indicate the level of concern your office has about the spread of zombies.\nA small example is shown below.\n2 2 1 1 1 2\n2 1 1 0 1 2\n2 1 0 1 1 2\n2 1 1 1 2 2\n2 2 2 2 2 3\n\nYour boss has given you an integer Q, and you must determine the number of cells which are marked with the integer Q.",
  "Output Format": "Output the number of cells in the grid that are marked with the integer Q.",
  "Title": "CCO16 - Zombie Apocalypse"
}{
  "Explanation 4": "The situation is the same as in Example 3, but now there are only 2 coins. With 1, 2 or 3 pirates, we have the same situations as in Example 3.\nWith 4 pirates, the oldest pirate does not have enough coins to ensure the 3 votes which he needs, so he will be thrown overboard.",
  "Example": "Sample Input \n4\n2\n1\n1\n2\n3\n\nSample Output 4\n2\n2\n1\n-1\n",
  "Explanation 1": "If there are 2 pirates left, pirate 2 can propose that all of the gold coins go to him. Only 1 vote is required for this proposal to pass, so he can guarantee that it passes by voting for it.\nIf there are 3 pirates left, pirate 3 needs someone else to vote for his proposal. He can ensure this by giving 1 coin to pirate 1 and 99 to himself. Pirate 1 knows that if the proposal doesn't pass, he will receive nothing. So a single coin is enough to secure his vote.\nIf there are 4 pirates left, pirate 4 gives 1 gold coin to pirate 2 and 99 to himself.\nIf there are 5 pirates left, pirate 5 gives 1 gold coin to pirates 1 and 3 and keeps 98 coins for himself.",
  "Memory Limit": "512M",
  "Input Format": "\nThe first line of input will be the number N (2 \u2264 N \u2264 106).\nThe second line of input will be the integer K (1 \u2264 K \u2264 1018).\nThe next N lines of input contain V[i] (1 \u2264 V[i] \u2264 i) indicating the number of 'yes' votes required for a proposal to pass if there are i pirates remaining (i = 1, \u2026, N).\nFor 5 of the 25 available marks for this problem N \u2264 2000.\nFor an additional 5 of the 25 available marks for this problem max(1, i \u2212 3) \u2264 V[i] \u2264 i for all i = 1, \u2026, N.\nFor an additional 5 of the 25 available marks for this problem K = 1018.\n",
  "Time Limit": "15.00s",
  "Explanation 3": "The first three cases were explained in Sample Input 1.\n\n\nWhen there are 4 pirates, the oldest pirate needs 3 votes. He will give 2 coins to the youngest pirate and 1 coin to the second-youngest pirate, keeping the rest for himself.",
  "Description": "A group of N pirates found K gold coins. They must decide on a way to distribute the coins amongst themselves. They have agreed on the following rules:\nThe oldest pirate proposes a distribution. (You can assume that all the pirates' ages are distinct.) A distribution assigns a non-negative integer number of coins to each pirate such that the sum of these numbers equals K.\nThen, each pirate will vote either 'yes' or 'no' on the proposal. The number of 'yes' votes required for the proposal to pass depends on the number of pirates. If there are X pirates, then V[X \u2212 1] 'yes' votes are required for the proposal to pass. If the proposal passes, the coins are assigned according the proposed distribution and the process ends. Otherwise, the oldest pirate is thrown overboard and the process is repeated without him.\nThe pirates act according to the following rules. The rules are given in order of priority; for example, rule 2 is only applied to distinguish between multiple options that are optimal according to rule 1.\nA pirate will act to prevent himself from being thrown overboard.\nA pirate will act to maximize the number of coins he receives.\nA pirate will act to maximize the number of pirates thrown overboard (excepting himself, because rule 1 takes priority).\nA pirate will act to maximize the number of coins received by the oldest pirate. If there are still multiple choices that fit these rules, he will maximize the gold received by the second-oldest pirate, then the third-oldest pirate, etc.\nIf there are multiple options that are optimal according to these rules, then the pirate chooses an action arbitrarily. (You can assume that the answer to this problem does not depend on the pirate's choice in this case.) Additionally, all the pirates are perfectly logical and know all the information contained in this problem statement. They cannot form agreements or coalitions because they do not trust each other.\nWe will number the pirates from 1 to N, where these are numbered from youngest (pirate 1) to the oldest (pirate N).\nIf there were only i pirates (where i = 1, \u2026, N), how many coins would the oldest of them get?",
  "Output Format": "\nThe output should consist of N integers, printed one per line. The i-th line of output is the number of coins that the i-th pirate would get if they were the oldest pirate. In other words, if only pirates 1, \u2026, i \u2212 1 existed. If the i-th pirate is thrown overboard, output -1 on the i-th line.\n",
  "Explanation 2": "In this case, a full consensus is required for a proposal to pass, except when there are 5 pirates, in which case only 4 of the 5 votes are required.\nIf there is full consensus required, and there are 2 or more pirates, the youngest pirate will vote against the proposal to maximize their coins and also throw the most pirates overboard.\n",
  "Title": "CCO16 - Pirates"
}{
  "Example": "Sample Input \n8 5\n0 6 4 3 7\n0 1\n0 2\n2 3\n4 3\n6 1\n1 5\n7 3\n\nSample Output 2\n7\n",
  "Explanation 1": "The path between 5 and 2 goes through 5\u21921\u21920\u21922, which uses 3 roads.",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line of input contains 2 integers, N and M (2 \u2264 M \u2264 N \u2264 100\u00a0000).\nThe second line of input contains M distinct integers indicating the restaurants which are Pho restaurants.\nThe next N\u22121 lines contain 2 integers each. The i-th line contains ai and bi (0 \u2264 ai, bi \u2264 N\u22121), representing a path between the two restaurants numbered ai and bi.\n\n\nFor 3 of the 15 available marks, M = 2 and N \u2264 100.\nFor an additional 3 of the 15 available marks, M \u2264 3 and N \u2264 100.\nFor an additional 3 of the 15 available marks, M \u2264 8 and N \u2264 100.\nFor an additional 4 of the 15 available marks, M \u2264 N \u2264 1000.\n",
  "Time Limit": "2.00s",
  "Description": "Jo is a blogger, specializing in the critique of restaurants. Today, she wants to visit all the Vietnamese Pho restaurants in the Waterloo area, in order to determine which one is the best.\nThere are N restaurants in the city of Waterloo, numbered 0 to N\u22121. However, only M of them are Pho restaurants. Jo can choose to start at any restaurant. There are N\u22121 roads in Waterloo, each road connecting exactly two restaurants. It is possible to reach every restaurant from any restaurant using these roads. It takes Jo exactly 1 minute to travel along any road.\n\n\nIn computer science, a road network with this structure is called a tree. Here are three examples of trees:\n\nOne property that is true for all trees is that there is exactly one path that does not repeat any roads between any two points in the tree.\nWhat is the minimal amount of time that Jo needs to spend on travelling on roads to visit to all of the Pho restaurants?",
  "Output Format": "Your program should output one line, containing one integer \u2013 the minimum amount of time Jo needs to spend travelling on roads in order to visit all Pho restaurants, in minutes.",
  "Explanation 2": "If Jo begins at restaurant 6, she will only need to use 7 roads. One possible path that she can take is: 6\u21921\u21920\u21922\u21923\u21927\u21923\u21924. Notice that she doesn't need to visit restaurant 5, since it is not a Pho restaurant. A diagram of the road network is shown below:\n",
  "Title": "CCC16S3 - Phonomenal Reviews"
}{
  "Example": "Sample Input \n4\n1 2 3 1\n\nSample Output 2\n3\n",
  "Explanation 1": "One possible set of moves to create a riceball of size 48 is to combine 12 and 12, forming a riceball of size 24. Then, combine 9 and 9 to form a riceball of size 18. Then, combine 3, 18 and 3 to form a riceball of size 24. Finally, combine the two riceballs of size 24 to form a riceball of size 48.",
  "Memory Limit": "16M",
  "Input Format": "\nThe first line will contain the integer, N (1 \u2264 N \u2264 400).\nThe next line will contain N space separated integers representing the sizes of the riceballs, in order from left to right. Each integer is at least 1 and at most 1\u00a0000\u00a0000.\n\nFor 1 of the 15 available marks, N = 4.\nFor an additional 2 of the 15 available marks, N \u2264 10.\nFor an additional 2 of the 15 available marks, N \u2264 50.",
  "Time Limit": "2.00s",
  "Description": "Alphonse has N rice balls of various sizes in a row. He wants to form the largest rice ball possible for his friend to eat. Alphonse can perform the following operations:\nIf two adjacent rice balls have the same size, Alphonse can combine them to make a new rice ball. The new rice ball's size is the sum of the two old rice balls' sizes. It occupies the position in the row previously occupied by the two old rice balls.\n\nIf two rice balls have the same size, and there is exactly one rice ball between them, Alphonse can combine all three rice balls to make a new rice ball. (The middle rice ball does not need to have the same size as the other two.) The new rice ball's size is the sum of the three old rice balls' sizes. It occupies the position in the row previously occupied by the three old rice balls.\nAlphonse can perform each operation as many times as he wants.\nDetermine the size of the largest rice ball in the row after performing 0 or more operations.",
  "Output Format": "Output the size of the largest riceball Alphonse can form.",
  "Explanation 2": "There are no moves to make, thus the largest riceball in the row is size 3.",
  "Title": "CCC16S4 - Combining Riceballs"
}{
  "Example": "Sample Input \n5 3\n01011\n\nSample Output 2\n10100\n",
  "Explanation 1": "Cell 1 and cell N \u2212 1 are adjacent to cell N, and thus are alive after one generation.",
  "Memory Limit": "16M",
  "Input Format": "The first line will contain two space-separated integers N and T (3 \u2264 N \u2264 100\u00a0000; 1 \u2264 T \u2264 1015). The second line will contain a string consisting of exactly N characters, representing the initial configuration of the N cells. Each character in the string will be either '0' or '1'. The initial state of cell i is given by the i-th character of the string. The character '1' represents an alive cell\nand the character '0' represents a dead cell.\n\nFor 1 of the 15 available marks, N \u2264 15 and T \u2264 15.\nFor an additional 6 of the 15 available marks, N \u2264 15.\nFor an additional 4 of the 15 available marks, T \u2264 100\u00a0000.\nNote that for full marks, solutions will need to handle 64-bit integers. For example\n\nin C/C++, the type long long should be used;\nin Java, the type long should be used;\nin Pascal, the type int64 should be used.",
  "Time Limit": "2.00s",
  "Description": "You may have heard of Conway's Game of Life, which is a simple set of rules for cells on a grid that can produce incredibly complex configurations. In this problem we will deal with a simplified version of the game.\nThere is a one-dimensional circular strip of N cells. The cells are numbered from 1 to N in the order you would expect: that is, cell 1 and cell 2 are adjacent, cell 2 and cell 3 are adjacent, and so on up to cell N \u2212 1, which is adjacent to cell N. Since the strip is circular, cell 1 is also adjacent to cell N.\nEach cell is either alive (represented by a '1') or dead (represented by a '0'). The cells change over a number of generations. If exactly one of a cell's neighbours is alive in the current generation, then the cell will be alive in the next generation. Otherwise, the cell will be dead in the next generation.\nGiven the initial state of the strip, find the state after T generations.",
  "Output Format": "Output the string of N characters representing the final state of the cells, in the same format and order as the input.",
  "Explanation 2": "\nAfter one generation, the configuration becomes 00011.\nAfter two generations, the configuration becomes 10111.\n",
  "Title": "CCC16S5 - Circle of Life"
}{
  "Example": "Sample Input \n12\n5\n\nSample Output 1\n1\n\nSample Input 2\n9\n-13\n\nSample Output 2\n4\n",
  "Input Format": "The first line of input contains the integer x (\u22121000 \u2264 x < 1000; x \u2260 0). The second line of input contains the integer y (\u22121000 \u2264 y \u2264 1000; y \u2260 0).",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "A common problem in mathematics is to determine which quadrant a given point lies in. There are four quadrants, numbered from 1 to 4, as shown in the diagram below:\n\nFor example, the point A, which is at coordinates (12, 5) lies in quadrant 1 since both its x and y values are positive, and point B lies in quadrant 2 since its x value is negative and its y value is positive.\nYour job is to take a point and determine the quadrant it is in. You can assume that neither of the two coordinates will be 0.",
  "Output Format": "Output the quadrant number (1, 2, 3 or 4) for the point (x, y).\n\n",
  "Title": "CCC17J1 - Quadrant Selection"
}{
  "Example": "Sample Input \n12\n3\n\nSample Output\n13332\n",
  "Input Format": "The first line of input contains the number N (1 \u2264 N \u2264 10000). The second line of input contains k, the number of times to shift N (0 \u2264 k \u2264 5).",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "Suppose we have a number like 12. Let\u2019s define shifting a number to mean adding a zero at the end. For example, if we shift that number once, we get the number 120. If we shift the number again we get the number 1200. We can shift the number as many times as we want.\nIn this problem you will be calculating a shifty sum, which is the sum of a number and the numbers we get by shifting. Specifically, you will be given the starting number N and a non-negative integer k. You must add together N and all the numbers you get by shifting a total of k times.\nFor example, the shifty sum when N is 12 and k is 1 is: 12 + 120 = 132. As another example, the shifty sum when N is 12 and k is 3 is 12 + 120 + 1200 + 12000 = 13332.",
  "Output Format": "Output the integer which is the shift sum of N by k.",
  "Title": "CCC17J2 - Shifty Sum"
}{
  "Example": "Sample Input \n10 2\n10 4\n5\n\nSample Output 2\nN\n",
  "Explanation 1": "One possibility is to travel from (3, 4) to (4, 4) to (4, 3) to (3, 3).",
  "Memory Limit": "16M",
  "Input Format": "The input consists of three lines. The first line contains a followed by b, indicating the starting coordinate (a, b) (\u22121000 \u2264 a \u2264 1000; \u22121000 \u2264 b \u2264 1000).\nThe second line contains c followed by d, indicating the destination coordinate (c, d) (\u22121000 \u2264 c \u2264 1000; \u22121000 \u2264 d \u2264 1000).\nThe third line contains an integer t (0 \u2264 t \u2264 10\u00a0000) initial number of units of electrical charge of your battery.\nFor 3 of the 15 available marks, 0 \u2264 a, b, c, d \u2264 2.\nFor an additional 3 out of 15 available marks, t \u2264 8.",
  "Time Limit": "1.00s",
  "Description": "You live in Grid City, which is composed of integer-numbered streets which run east-west (parallel to the x-axis) and integer-numbered avenues which run north-south (parallel to the y-axis). The streets and avenues have infinite length, and there is a street for every integer y-coordinate and an avenue for every x-coordinate. All intersections are labelled by their integer coordinates: for example, avenue 7 and street \u22123 intersect at (7, \u22123).\nYou drive a special electric car which uses up one unit of electrical charge moving between adjacent intersections: that is, moving either north or south to the next street, or moving east or west to the next avenue). Until your battery runs out, at each intersection, your car can turn left, turn right, go straight through, or make a U-turn. You may visit the same intersection multiple times on the same trip.\nSuppose you know your starting intersection, your destination intersection and the number of units of electrical charge in your battery. Determine whether you can travel from the starting intersection to the destination intersection using the charge available to you in such a way that your battery is empty when you reach your destination.",
  "Output Format": "Output Y if it is possible to move from the starting coordinate to the destination coordinate using exactly t units of electrical charge. Otherwise output N.",
  "Explanation 2": "It is possible to get from (10, 2) to (10, 4) using exactly 2 units of electricity, by going north 2\nunits.\nIt is also possible to travel using 4 units of electricity as in the following sequence:\n(10, 2) \u2192 (10, 3) \u2192 (11, 3) \u2192 (11, 4) \u2192 (10, 4).\nIt is also possible to travel using 5 units of electricity from (10, 2) to (11, 4) by the following\nsequence:\n(10, 2) \u2192 (10, 3) \u2192 (11, 3) \u2192 (12, 3) \u2192 (12, 4) \u2192 (11, 4).\nIt is not possible to move via any path of length 5 from (10, 2) to (10, 4), however.",
  "Title": "CCC17J3 - Exactly Electrical"
}{
  "Example": "Sample Input \n180\n\nSample Output 2\n11\n",
  "Explanation 1": "Between 12:00 and 12:34, there is only the time 12:34 for which the digits form an arithmetic sequence.",
  "Memory Limit": "16M",
  "Input Format": "The input contains one integer D (0 \u2264 D \u2264 1\u00a0000\u00a0000\u00a0000), which represents the duration that the clock is observed.\nFor 4 of the 15 available marks, D \u2264 10000.",
  "Time Limit": "1.00s",
  "Description": "Wendy has an LED clock radio, which is a 12-hour clock, displaying times from 12:00 to 11:59. The hours do not have leading zeros but minutes may have leading zeros, such as 2:07 or 11:03.\nWhen looking at her LED clock radio, Wendy likes to spot arithmetic sequences in the digits. For example, the times 12:34 and 2:46 are some of her favourite times, since the digits form an arithmetic sequence.\nA sequence of digits is an arithmetic sequence if each digit after the first digit is obtained by adding a constant common difference. For example, 1,2,3,4 is an arithmetic sequence with a common difference of 1, and 2,4,6 is an arithmetic sequence with a common difference of 2.\nSuppose that we start looking at the clock at noon (that is, when it reads 12:00) and watch the clock for some number of minutes. How many instances are there such that the time displayed on the clock has the property that the digits form an arithmetic sequence?",
  "Output Format": "Output the number of times that the clock displays a time where the digits form an arithmetic sequence starting from noon (12:00) and ending after D minutes have passed, possibly including the ending time.",
  "Explanation 2": "Between 12:00 and 3:00, the following times form arithmetic sequences in their digits (with the difference shown):\n12:34 (difference 1),\n1:11 (difference 0),\n1:23 (difference 1),\n1:35 (difference 2),\n1:47 (difference 3),\n1:59 (difference 4),\n2:10 (difference \u22121),\n2:22 (difference 0),\n2:34 (difference 1),\n2:46 (difference 2),\n2:58 (difference 3).",
  "Title": "CCC17J4 - Favourite Times"
}{
  "Example": "Sample Input \n4\n1 2 3 4\n1 3 2 4\n\nSample Output 3\n4\n",
  "Explanation 1": "After 2 days, each team had scored a total of 4 runs.",
  "Memory Limit": "16M",
  "Input Format": "The first line of input will contain an integer N (1 \u2264 N \u2264 100\u00a0000). The second line will contain N space-separated non-negative integers representing the number of runs scored by the Swifts on each day, in order. The third line will contain N space-separated non-negative integers representing the number of runs scored by the Semaphores on each day, in order. You may assume that each team scored at most 20 runs in any single game.\nFor 7 out of the 15 points available, N \u2264 1000.",
  "Time Limit": "1.00s",
  "Explanation 3": "The Swifts and Semaphores have the same number of total runs after the first game, and after the third game, and after the fourth game. We take the largest of these values (1, 3 and 4) and output 4.",
  "Description": "Annie has two favourite baseball teams: the Swifts and the Semaphores. She has followed them throughout the season, which is now over. The season lasted for N days. Both teams played exactly one game on each day.\nFor each day, Annie recorded the number of runs scored by the Swifts on that day. She also recorded this information for the Semaphores.\nShe would like you to determine the largest integer K such that K \u2264 N and the Swifts and the Semaphores had scored the same total number of runs K days after the start of the season. The total number of runs scored by a team after K days is the sum of the number of runs scored by the team in all games before or on the K-th day.\nFor example, if the Swifts and the Semaphores have the same total number of runs at the end of the season, then you should output N. If the Swifts and the Semaphores never had the same number of runs after K games, for any value of K \u2264 N, then output 0.",
  "Output Format": "Output the largest integer K such that K \u2264 N and the Swifts and the Semaphores have the same total number of runs after K days.",
  "Explanation 2": "The only time when the Swifts and the Semaphores had scored the same number of runs was the beginning of the season.",
  "Title": "CCC17S1 - Sum Game"
}{
  "Example": "Sample Input \n6\n\nSample Output 2\n4 4\n1 2\n2 3\n3 4\n4 1\n",
  "Explanation 1": "The two beautifully connected pairs are 1, 2 and 3, 4.",
  "Output format": "Print a beautiful network in the following format:\nthe first line should contain the number of vertices, V, followed by one space, followed by the number of edges, E;\neach of the next E lines should contain two integers, ai and bi, separated by one space, indicating a trail between places ai and bi (1 \u2264 i \u2264 E).\nThe trails can be printed in any order. The two places of any trail can be printed in any order. If there are multiple beautiful trail networks, print any of them. It is guaranteed a solution always exists.",
  "Input format": "\nThere is one line of input, which contains the integer K (0 < K \u2264 107).\nFor 3 of the 25 available marks, K \u2264 1000.\nFor an additional 6 of the 25 available marks, K \u2264 105.\n",
  "Time Limit": "1.00s",
  "Description": "Vera loves hiking and is going to build her own trail network. It will consist of V places numbered from 1 to V, and E bidirectional trails, where the i-th trail directly joins two distinct places ai and bi. Vera would like her network to be connected so it should be possible to hike between any two places using the trails. It is possible that there could be more than one trail directly joining the same pair of places. \nVera considers two places a, b with a < b to form a beautifully connected pair if it is possible to hike using the trails from a to b then back to a without hiking on the same trail more than once. She thinks that her trail network would be beautiful if it had exactly K beautifully connected pairs.\nVera does not want her network to be too large, so the network should satisfy 1 \u2264 V, E \u2264 5000.\nGiven K, help Vera find any beautiful trail network.",
  "Title": "CCO17 - Vera and Trail Building",
  "Explanation 2": "All pairs of places form a beautifully connected pair.",
  "Memory Limit": "256M"
}{
  "Example": "Sample Input \n10 6\n\nSample Output\n5 8\n",
  "Explanation": "The illustrations below show how this minimum and maximum number of districts could have been achieved. Districts are labelled #1, #2, #3, \u2026 giving the order in which they were added to the region. The dimensions of each district is shown in brackets as (k \u00d7 2k) or (2k \u00d7 k):\n",
  "Memory Limit": "512M",
  "Input Format": "\nThe input will be a single line, containing two integers, N and M (1 \u2264 N, M \u2264 108).\nFor 5 of the 25 marks available, N, M \u2264 1000;\nFor an additional 8 of the 25 marks available, N, M \u2264 106.\n",
  "Time Limit": "5.00s",
  "Description": "Long ago, in the land of Cartesia, there ruled the Rectangle Empire. The Empire was large and prosperous, and it had great success with expanding its territory through frequent conquests. The citizens of this ancient civilization followed many curious customs. Unfortunately, the significance of these are now shrouded in mystery.\nThe Rectangle Empire operated under a system of rectangular districts. These districts were carefully managed to meet three special criteria.\nThe Empire's territory is divided into districts such that each piece of land controlled by the Empire belongs to exactly one district.\nThe boundaries of the districts, when viewed on a map, must be rectangles such that the length of the longer side of the rectangle is twice the length of the shorter side.\nThe side lengths of the districts must be integers, when measured in \u039e (note that \u039e was the primary unit of length in the Rectangle Empire).\nWhen the empire was first established, it consisted of a single district. Since then, the empire has gained additional districts through conquest of neighbouring regions. Whenever the empire gained control of a new region of land, they always established a single new district using that exact land. This means that the empire was always mindful about the geometric properties of the land they were hoping to conquer. You can assume that no two of these conquests occurred at the same time.\nThe addition of new districts was the only way that the boundaries of the empire ever changed. Furthermore, each district, once added, was never modified or merged with another.\nThe final, most important tradition of the Rectangle Empire was to make sure that the overall territory of the empire was always a rectangle, though it did not necessarily need to satisfy the 2:1 ratio for the side lengths that individual districts satisfy.\nRecently, archaeologists have discovered that at one point in time, the empire had dimensions N by M (measured in \u039e). You need not be alarmed if these numbers are very large; after all, Cartesia is an infinite plane. Your task is to estimate the number of districts in the empire when it was at this size. Over all possible ways that the empire was founded and expanded, what is the minimum and maximum number of districts?",
  "Output Format": "Output a single line, containing the minimum number of districts, followed by a space, followed by the maximum number of districts.",
  "Title": "CCO17 - Cartesian Conquest"
}{
  "Example": "Sample Input \n5 6\n1 2 1\n3 4 2\n4 5 3\n6 3 4\n7 1 5\n2 6\n7 8\n5 9\n11 2\n10 7\n4 5\n\nSample Output\n1\n8\n0\n6\n4\n3\n",
  "Explanation": "\nLet colour 1, 2, 3, 4, 5 be red, blue, green, orange, purple respectively.\nLet p, q be non-negative integers, then:\n\nPoints (1 + p, 2 + 2q) have a red paint drop.\nPoints (3 + 2p, 4 + 4q) have a blue paint drop.\nPoints (4 + 4p, 5 + 4q) have a green paint drop.\nPoints (6 + 4p, 3 + 2q) have a orange paint drop.\nPoints (7 + 4p, 1 + q) have a purple paint drop.\nThe painting from (0, 0) to (11, 11) is shown below. We can see that:\n(2, 6) has a red paint drop, so it has colour 1.\n(7, 8) has a red, blue and purple paint drop, so it has colour 1 + 2 + 5 = 8.\n(5, 9) has no paint drops, so it has colour 0.\n(11, 2) has a red and purple paint drop, so it has colour 1 + 5 = 6.\n(10, 7) has a orange paint drop, so it has colour 4.\n(4, 5) has a green paint drop, so it has colour 3.\n",
  "Memory Limit": "512M",
  "Input Format": "The first line contains two integers, N, Q, separated by one space (1 \u2264 N, Q \u2264 2 \u00b7 105).\nThe next N lines each contain three space-separated integers, xi, yi, vi, representing the paint drops of colour vi (1 \u2264 i \u2264 N; 1 \u2264 vi \u2264 10\u00a0000; 1 \u2264 xi, yi \u2264 1018).\nThe next Q lines each contain two space-separated integers, rj and cj, representing the Q questions about the point (rj, cj) (1 \u2264 j \u2264 Q; 1 \u2264 rj \u2264 1018; 1 \u2264 cj \u2264 1018).\n\nFor 5 of the 25 available marks, N, Q \u2264 2000.\nFor an additional 5 of the 25 available marks, yi = 1 (1 \u2264 i \u2264 N).\nFor an additional 5 of the 25 available marks, N, Q \u2264 105 and 1 \u2264 rj, cj \u2264 109 (1 \u2264 j \u2264 Q).\n",
  "Time Limit": "4.00s",
  "Description": "After being inspired by the great painter Picowso, Vera decided to make her own masterpiece. She has an empty painting surface which can be modeled as an infinite 2D coordinate plane. Vera likes powers of two (1, 2, 4, 8, 16, \u2026) and will paint some points in a repeated manner using step sizes which are a power of two.\nVera will paint N times. The i-th time can be described by three integers xi, yi, vi. Let ai be the largest power of two not greater than xi and let bi be the largest power of two not greater than yi. Vera will add a paint drop with colour vi to all points that are of the form (xi + ai p, yi + bi q), where p, q are non-negative integers. A point may have multiple paint drops on it or have multiple drops of the same colour.\nThen, Vera will ask Q questions. For the j-th question, she wants to know the colour at the point (rj, cj). The colour at a point is equal to the sum of the colours of all paint drops at that point. If there are no paint drops at a point, the colour of that point is 0.\nSince you are forced to be her art assistant, you will have to answer Vera's questions.",
  "Output Format": "The output will be Q lines. The j-th line (1 \u2264 j \u2264 Q) should have one integer, which is the colour of point (rj, cj).",
  "Title": "CCO17 - Vera and Modern Art"
}{
  "Example": "Sample Input \n5\n5 1 4 1 5\n\nSample Output 3\n0 1 3 4 5 6 7 8 9\n",
  "Explanation 1": "This is the first given example.",
  "Memory Limit": "256M",
  "Input Format": "The first line contains the integer N (2 \u2264 N \u2264 500) signifying the number of pillars. The next line contains the integers hi (1 \u2264 hi \u2264 50, 1 \u2264 i \u2264 N), representing the i-th pillar height.\n\nFor 5 of the marks available, N \u2264 10.\nFor an additional 10 of the 25 marks available, N \u2264 50.\n",
  "Time Limit": "3.00s",
  "Explanation 3": "This is the third given example.",
  "Description": "It was a dark and stormy night. It also rained, and rained, and rained.\nLucy wants to capture some of the rain, but she only has limited materials. She has a collection of pillars, of various heights, which she can configure to capture the rain. Each pillar is an integer height and width of 1. Once Lucy has her configuration of pillars, she has enough other siding material to enclose the front and back to allow rain to fill all the available space in between pillars. There is more than enough rain and any excess rain will overflow and get absorbed into the earth.\nFor example, if Lucy has pillars of height 1, 5, 2, 1, 4, she could configure them as follows (all configurations are illustrated from the side):\n *\n * *\n * *\n** *\n*****\n\nWhich would capture 5 units of rain (R) as follows:\n *\n *RR*\n *RR*\n **R*\n*****\n\nFor this first collection of pillars (1, 5, 2, 1, 4), she could also capture 6 units of rain as follows: \n *\n *RR*\n *RR*\n**RR*\n*****\n\nAs another example, if the collection of pillars was (5, 1, 5, 1, 5), Lucy could capture 8 units of rain as follows:\n*R*R*\n*R*R*\n*R*R*\n*R*R*\n*****\n\nFinally, this configuration of (5, 1, 4, 1, 5) captures 9 units of rain:\n*RRR*\n*R*R*\n*R*R*\n*R*R*\n*****\n\nLucy has N pillars (2 \u2264 N \u2264 500) with heights h1, h2, \u2026, hN (1 \u2264 hi \u2264 50). She would like to know, of all possible configurations of pillars, what are all of the obtainable volumes of rainfall that she can capture using these N pillars.",
  "Output Format": "On one line, output a space-separated list of all possible obtainable integer volumes of rain captured, in increasing order.",
  "Explanation 2": "This is the second given example.",
  "Title": "CCO17 - Rainfall Storage"
}{
  "Example": "Sample Input \n3\n0 6\n2 7\n3 8\n\nSample Output 3\n8\n",
  "Explanation 1": "Kevin can connect with person 3 immediately, and with this connection made, he can also connect with person 2. He doesn't have enough connections to connect with person 1 or person 4, so he gives 3 Internet Points to person 1 to acquire 3 total connections which enables him to connect with person 4.",
  "Memory Limit": "256M",
  "Input Format": "The first line will contain the integer N (1 \u2264 N \u2264 200\u00a0000). Each of the next N lines will contain integers Ai and Bi (1 \u2264 i \u2264 N; 0 \u2264 Ai \u2264 N; 0 \u2264 Bi \u2264 10\u00a0000).\n\nFor 2 of the 25 available marks, Bi = 1 for all i.\nFor an additional 4 of the 25 available marks, N \u2264 10.\nFor an additional 7 of the 25 available marks, N \u2264 1000.\n",
  "Time Limit": "2.00s",
  "Explanation 3": "Kevin should connect with person 1 immediately, then give 8 Internet Points to person 3 to connect with them, then connect with person 2.",
  "Description": "Kevin is developing his professional network within a certain community. Unfortunately, he is not connected with anybody yet. But he has his eyes on N potentially valuable connections, numbered form 1 to N. He is determined to connect with them all.\nHowever, few people in this community are willing to friend an outsider. Each of the N people Kevin wants to connect with has similar, but different criteria for determining who is an outsider and who isn't. Person i is willing to friend Kevin if he either has at least Ai connections within the community already, or if Kevin gives this person Bi Internet Points.\nKevin likes his Internet Points very much, and he doesn't want to give away too many. Now it is your job to help Kevin give away the least number of Internet Points while still making connections with each of the N people.",
  "Output Format": "Output one integer on a single line, the minimum number of Internet Points Kevin has to give away.",
  "Explanation 2": "It is possible for Kevin to connect with everyone without giving away any Internet Points.",
  "Title": "CCO17 - Professional Network"
}{
  "Example": "Sample Input \n4 2\n2 3\n5 0\n4 1\n6 7\n\nSample Output 2\n7\n1 1 1\n2 1 1\n1 2 1\n1 3 1\n2 1 2\n1 1 1\n2 1 1\n",
  "Explanation 1": "We shift the first column down by one to obtain\n1 2 3 0\n4 5 6 7\n\nthen shift the first row right by one to reach the state\n0 1 2 3\n4 5 6 7\n\nwhich is solved.",
  "Memory Limit": "256M",
  "Input Format": "The first line will contain two space-separated integers N and M (2 \u2264 N, M \u2264 100). The next N lines will contain M space-separated integers, representing the grid.\nNote that both N and M will always be even, and there will be a solution requiring at most 105 shift operations.\n\nFor 5 of the available 25 marks, N \u00b7 M \u2264 8.\nFor an additional 10 of the available 25 marks, the puzzle is solvable in at most 2 moves.\n",
  "Time Limit": "2.00s",
  "Description": "You are given a rectangular grid of numbered tiles, with no empty spaces. This grid can only be manipulated using a sequence of shift operations. A shift involves either moving an entire row left or right by some number of units, or moving an entire column up or down by some number of units. Tiles which move outside of the rectangular boundaries wrap around to the opposite side of the grid. For example, in the grid\na vertical shift downwards by one applied to the second column has the following result:\nNotice that a left shift by K units is the same as a right shift by N \u2212 K units. Similarly, an upward shift by K units is a downward shift by M \u2212 K units. Thus, without loss of generality, we will restrict the shift directions to be only right or down.\nIn a grid with N rows and M columns, there are NM tiles in total. You may assume that the tiles are numbered with distinct integers from 0 to NM \u2212 1.\nYou may have noticed that in the first example given above, the tiles are in a very organized formation. We call such arrangements solved. That is, a grid of tiles is solved when the first row contains the numbers from 0 to M \u2212 1 in order, the second row has the numbers from M to 2M \u2212 1 in order, and so on, with the last row having the number (N \u2212 1)M to NM \u2212 1 in order.\nFind a sequence of shift operations that restores a scrambled grid to a solved state.",
  "Output Format": "Output any sequence of moves that solves the puzzle, in the following format:\nThe first line of output should contain a single integer K (0 \u2264 K \u2264 105), representing the number of moves in the sequence.\nThe next K lines should be either of the form 1 i r (1 \u2264 i \u2264 N, 0 \u2264 r < M), representing a right shift of the i-th row by r, or of the form 2 j d (1 \u2264 j \u2264 M, 0 \u2264 d < N), representing a down shift of the j-th column by d.",
  "Explanation 2": "The sequence of shifts, starting from the input is:\n2 3    3 2    6 2    6 2    6 2    1 2    2 1    0 1\n5 0 -> 5 0 -> 3 0 -> 0 3 -> 0 3 -> 4 3 -> 4 3 -> 2 3\n4 1    4 1    5 1    5 1    1 5    6 5    6 5    4 5\n6 7    6 7    4 7    4 7    4 7    0 7    0 7    6 7\n",
  "Title": "CCO17 - Shifty Grid"
}{
  "Example": "Sample Input \n5\n1 10 100 10000 2000\n\nSample Output 2\n1 10\n",
  "Explanation 1": "Tudor first combines the pieces of wood with lengths 1 and 4 to form a board of length 5. Then he combines the pieces of wood with lengths 2 and 3 to form another board of length 5. Finally, he combines the boards to make a fence with length 2 and height 5.",
  "Memory Limit": "16M",
  "Input Format": "The first line will contain the integer N (2 \u2264 N \u2264 1\u00a0000\u00a0000). \nThe second line will contain N space-separated integers L1, L2, \u2026, LN (1 \u2264 Li \u2264 2000).\nFor 5 of the 15 available marks, N \u2264 100.\nFor an additional 4 of the 15 available marks, N \u2264 1000.\nFor an additional 3 of the 15 available marks, N \u2264 100\u00a0000.",
  "Time Limit": "2.00s",
  "Description": "Tudor is a contestant in the Canadian Carpentry Challenge (CCC). To win the CCC, Tudor must demonstrate his skill at nailing wood together to make the longest fence possible using boards. To accomplish this goal, he has N pieces of wood. The ith piece of wood has integer length Li.\nA board is made of exactly two pieces of wood. The length of a board made with lengths Li and Lj is Li + Lj. A fence consists of boards that are the same length. The length of the fence is the number of boards used to make it, and the height of the fence is the length of each board in the fence. In the example fence below, the length of the fence is 4; the height of the fence is 50; and, the length of each piece of wood is shown:\n\nTudor would like to make the longest fence possible. Please help him determine the maximum length of any fence he could make, and the number of different heights a fence of that maximum length could have.",
  "Output Format": "Output two integers on a single line separated by a single space: the length of the longest fence and the number of different heights a longest fence could have.",
  "Explanation 2": "Tudor can\u2019t make a fence longer than length 1, and there are 10 ways to make a fence with length 1 by choosing any two pieces of wood to nail together. Specifically, he may have a fence of height 11, 101, 1001, 2001, 110, 1010, 2010, 1100, 2100 and 3000.",
  "Title": "CCC17J5S3 - Nailed It!"
}{
  "Example": "Sample Input \n4 4 0\n1 2 715827882\n2 3 715827882\n3 4 715827882\n4 1 715827884\n\nSample Output 3\n0\n",
  "Explanation 1": "Note that it does not matter which pipe you use the pipe enhancer on because D = 0, so it will not affect the maintenance fee of any pipe.\nOn the first day, you should deactivate the pipe from building 2 to 3 and activate the pipe from building 4 to 1.",
  "Memory Limit": "256M",
  "Input Format": "The first line will contain the integers N, M, and D (1 \u2264 N \u2264 100\u00a0000, N \u2212 1 \u2264 M \u2264 200\u00a0000, 0 \u2264 D \u2264 109). Each of the next M lines contain three integers Ai, Bi, and Ci, which means that there is a pipe from building Ai to building Bi that costs Ci per month when activated (1 \u2264 Ai, Bi \u2264 N, 1 \u2264 Ci \u2264 109). The first N \u2212 1 of these lines represent the valid plan the city is currently using.\nIt is guaranteed that there is at most one pipe connecting any two buildings and no pipe connects a building to itself.\n\nFor 3 of the 15 available marks, N \u2264 8, M \u2264 28 and D = 0.\nFor an additional 5 of the 15 available marks, N \u2264 1\u00a0000 and M \u2264 5\u00a0000 and D = 0.\nFor an additional 3 of the 15 available marks, D = 0.\nFor an additional 2 of the 15 available marks, N \u2264 1\u00a0000 and M \u2264 5\u00a0000.\n",
  "Time Limit": "1.00s",
  "Explanation 3": "The initial valid plan is already an optimal plan. Be careful of integer overflow when implementing your solution.",
  "Description": "The city of Watermoo has buildings numbered 1, 2, \u2026, N. The city has M pipes that connect pairs of buildings. Due to urban planning oversights, building 1 is the only sewage treatment plant in the city. Each pipe can be either active or inactive. The set of active pipes forms a valid plan if building 1 is directly or indirectly connected to each other building using active pipes. (Pipes directly connect pairs of buildings. Buildings X and Z are indirectly connected if X is directly or indirectly connected to Y, and Y is directly or indirectly connected to Z.)\nThe municipal government of Watermoo is currently operating a valid plan of N \u2212 1 pipes today, but they think it is too expensive! Each pipe has a monthly maintenance fee that the city must pay when it is active, and the total cost of a valid plan is the sum of the maintenance fees of its active pipes. (Inactive pipes cost nothing.)\nAdditionally, researchers at the University of Watermoo have developed an experimental pipe enhancer which you can use on one pipe of your choice. It will reduce that pipe's cost from C down to max(0, C \u2212 D), where D is the enhancer's strength.\nThe city wants you to minimize the cost of the plan, and they want you to do it quickly. Every day, the city will allow you to activate one pipe, and deactivate another pipe. How many days do you need to make the set of active pipes form a valid plan, whose cost is minimum among all valid plans and all choices of enhanced pipe?\nNote that it is possible that the plan becomes invalid while you are working, but by the end it should be a valid plan.",
  "Output Format": "Output one integer on a single line, the minimum number of days to complete this task. If the initial valid plan is already an optimal plan, then output 0.",
  "Explanation 2": "One solution using the minimum number of days is to first use the pipe enhancer on the pipe from building 1 to 2 to decrease its cost to 3. Then on the first day, replace the pipe from building 2 to 3 with the pipe from building 1 to 3, and on the second day replace the pipe from 1 to 4 with the pipe from building 1 to 5. Note that the cost of the optimal plan is 10.\nAdditionally, there are no solutions where you use the pipe enhancer on the pipe from building 1 to 3 or the pipe from building 1 to 5. Doing so would make that pipe have a maintenance fee of 0, and then any optimal plan would have cost 11 (and we have already seen that we can achieve a cost of 10).",
  "Title": "CCC17S4 - Minimum Cost Flow"
}{
  "Example": "Sample Input \n3 1 7\n1 1 1\n114 101 109\n1 1 1\n2 1\n1 1 1\n2 1\n1 1 1\n2 1\n1 1 1\n\nSample Output 2\n114\n109\n101\n114\n",
  "Explanation 1": "The subway system is illustrated below, with the stations numbered from 1 to 5 and the lines connecting stations marked as either being line 1 or line 2:\n\nInitially, the number of passengers at each station is {1, 2, 3, 4, 5}.\nThe answer to the first survey is 1 + 2 + 3 + 4 + 5 = 15.\nAfter line 1 is operated, the number of passengers at each station is {3, 2, 1, 4, 5}.\nThe answer to the second survey is 1 + 4 + 5 = 10.\nAfter line 2 is operated, the number of passengers at each station is {3, 5, 1, 2, 4}.\nThe answer to the third survey is 3 + 5 + 1 = 9.",
  "Memory Limit": "256M",
  "Input Format": "The first line will contain three space-separated integers N, M, and Q (1 \u2264 M \u2264 N \u2264 150\u00a0000; 1 \u2264 Q \u2264 150\u00a0000). The second line will contain the subway line numbers that each station from 1 to N belongs to: L1, L2, \u2026, LN. The third line will contain N integers A1, A2, \u2026, AN (1 \u2264 Ai \u2264 7\u00a0000) representing the initial number of passengers at each station from 1 to N.\nThe next Q lines will each have one of the following forms:\n1 l r, which represents a survey (1 \u2264 l \u2264 r \u2264 N).\n2 x, which represents RMT operating line x (1 \u2264 x \u2264 M).\n\nFor 2 of the 15 available marks, N \u2264 1\u00a0000 and Q \u2264 1\u00a0000.\nFor an additional 2 of the 15 available marks, Li \u2264 Li + 1 (1 \u2264 i < N).\nFor an additional 3 of the 15 available marks, M \u2264 200.\nFor an additional 3 of the 15 available marks, there will be no more than 200 trains on any single line.\n",
  "Time Limit": "10.00s",
  "Output Specification": "For every survey, output the answer to the survey on a separate line.",
  "Description": "The Rail Metro Transit (RMT) operates a very unusual subway system. There are N subway stations numbered from 1 to N. There are M subway lines numbered from 1 to M, with each station belonging to exactly one line and at least one station per line. The subway lines are circular. That is, if a station is numbered S, the next station after S is the station on the same line with the next largest number, unless S is the greatest number of a station in the line, in which case the next station after S is the station on the same line with the least number.\nRMT is conducting a load test of their system using volunteer passengers to ride the subway trains. The test begins with one subway train in each station and for every i, there are Ai passengers in the train at station i. The volunteers do not leave their assigned trains throughout the entire duration of the load test.\nThroughout the test, RMT will perform Q actions. Each of the Q actions is one of two types: either they will survey the total number of passengers in the trains at the stations numbered from l to r; or they will operate all the trains on some line x. When a train on line x is operated, it goes to the next station in that line.\nYou are RMT's biggest fan, so you have generously volunteered to keep track of RMT's actions and report the answers to their surveys.",
  "Title": "CCC17S5 - RMT",
  "Explanation 2": "The subway system is illustrated below, with the stations numbered from 1 to 3 and the lines connecting stations marked as all being line 1:\n\nJust before the first survey, the number of passengers at each station is {114, 101, 109}.\nJust before the second survey, the number of passengers at each station is {109, 114, 101}.\nJust before the third survey, the number of passengers at each station is {101, 109, 114}.\nJust before the fourth survey, the number of passengers at each station is {114, 101, 109}."
}{
  "Title": "CCOQR16 - Stupendous Bowties",
  "Explanation": "The diagram below illustrates the set of given points (represented by the 12 blue dots), with one of the eight possible Stupendous Bowties shown in red.\n",
  "Example": "Sample Input \n12\n-3 6\n1 6\n-1 4\n-3 2\n1 2\n4 2\n-4 -3\n-3 -3\n1 -3\n-1 -4\n1 -4\n-3 -6\n\nSample Output\n8\n",
  "Input Format": "The first line of the input contains one integer, N. The remaining N lines each contain two integers, xi and yi for i = 1..N.",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "There are N (1 \u2264 N \u2264 100\u00a0000) distinct points on a 2D plane, with the i-th one at integral coordinates (xi, yi) (\u2212109 \u2264 xi \u2264 109, \u2212109 \u2264 yi \u2264 109).\nA Fantastic Right Triangle is one which uses 3 of the given points as its vertices, is non-degenerate (i.e., has positive area), and which has both of its legs axis-aligned (one of its two shortest sides is horizontal and the other shortest side is vertical). The vertex at which the two legs of such a triangle meet (which has an interior right angle) is known as the triangle's Spectacular Vertex.\nA Stupendous Bowtie consists of an unordered pair of Fantastic Right Triangles which share the same point as their Spectacular Vertex, and which touch only at that point. Count the number of Stupendous Bowties which exist amongst the given points.",
  "Subtasks": "\nFor 2 of the 15 marks available, N \u2264 20.\nFor another 3 of the 15 marks available, N \u2264 200.\nFor another 2 of the 15 marks available, N \u2264 2000.\nFor another 3 of the 15 marks available, N \u2264 100\u00a0000, \u2212105 \u2264 xi \u2264 105, and \u2212105 \u2264 yi \u2264 105.\n",
  "Output Format": "\nOutput a single integer, the number of Stupendous Bowties which exist amongst the given points. Note that this value may not fit in a 32-bit signed integer, and may need to be stored in a long long / long / int64 variable in C++ / Java / Pascal, respectively.\n"
}{
  "Title": "CCOQR16 - Through A Maze Darkly",
  "Explanation": "The following picture corresponds to one arrangement of the sample input.\n\nRooms 1 and 3 are connected by one corridor, and it is traversed twice while leaving and returning to the same room, regardless of where we start in rooms 1 or 3.\nFor room 2, we start at the position A and move counter-clockwise, we will go into the corridors connecting (2, 4), then the corridor connecting (4, 6), then the corridor connecting (6, 4), then the corridor connecting (4, 5), then finally the corridor connecting (5, 2), for a total of 5 traversals of corridors. This is the maximum possible number of traversals.\nFor room 4, we may start at position B, move counter clockwise, and then traverse corridors (4, 5), (5, 2) and (2, 4), for a total of 3 traversals of corridors. Notice that starting anywhere else in room 4 will yield no more than 3 traversals of corridors.\nStarting at positions C and D, in rooms 5 and 6 respectively will yield a reordering of the same path traversed as we found starting from A in room 2, which is yields a total of 5 traversals of corridors in these cases.",
  "Example": "Sample Input \n6\n1 3\n2 5 4\n1 1\n3 2 5 6\n2 4 2\n1 4\n6\n1\n2\n3\n4\n5\n6\n\nSample Output\n2\n5\n2\n3\n5\n5\n",
  "Input Format": "The first line of input contains the integer N (2 \u2264 N \u2264 100\u00a0000).\nThe next N lines describe the maze's layout, with the i-th of these lines containing information about room i. Specifically, it contains an integer k, the number of corridors connecting to room i, followed by k integers, c1 c2 \u2026 ck, indicating the rooms that these k corridors lead to (in clockwise order from room i).\nFor example, if the corridor information for room i is 3 4 2 7, this means that there are 3 corridors connecting room i to rooms 4, 2, and 7. Since they are listed in clockwise order, we would have the following picture:\n\nThe next line contains an integer Q.\nThe final Q lines describe the starting rooms to be queried, with each line containing an integer r (1 \u2264 r \u2264 N).\nLet M be the total number of corridors that exist in the maze. The value of M can be calculated as 1/2 \u00d7 (sum of all k values).",
  "Memory Limit": "64M",
  "Time Limit": "2.00s",
  "Description": "There is a maze that is formed by connecting N rooms via some corridors. The rooms are numbered 1 to N and each room has the shape of a circle. The corridors have the following constraints:\nEach corridor forms a connection between two distinct rooms.\nNo two corridors will connect the same pair of rooms.\nEach room will have at least 1 corridor that connects to it.\nOne difficulty in navigating through this maze is that the lights are all out, so you cannot see where you are.\nOne way to move through the maze is to place your right hand at some point on the wall of the starting room and walk forward through the corridors and other rooms without ever taking your hand off the wall. If you walk through the maze in this way, you will end up returning to the original room. The path that you follow will depend upon where you place your right hand in the starting room, since that will determine which corridor you take first.\nGiven the structure of the maze you need to answer Q queries. Each query will specify a distinct starting room r. Determine the maximum number of traversals of corridors as you move through the maze by keeping your right hand on the wall beginning in room r and returning (for the first time) to room r.",
  "Subtasks": "\nFor 2 of of the 15 marks available, 2 \u2264 N \u2264 100, 1 \u2264 M \u2264 100, and 1 \u2264 Q \u2264 N.\nFor another 3 of the 15 marks available, 2 \u2264 N \u2264 100\u00a0000, 1 \u2264 M \u2264 200\u00a0000, and Q = 1.\n",
  "Output Format": "Output Q lines answering the queries in order."
}{
  "Title": "CCOQR16 - Data Structure",
  "Explanation": "The diagram below illustrates the pyramid described by the sample case, where the 3 red block spaces must contain data, while the 12 orange block spaces represent the optimal set of blocks to additionally fill with data to make the entire pyramid stable.\n",
  "Example": "Sample Input \n6 3\n3 1\n4 4\n6 2\n\nSample Output\n15\n",
  "Input Format": "\nThe first line of the input contains two integers, N and M. The remaining M lines each contain two integers, ri and ci for i = 1..M.\n",
  "Memory Limit": "256M",
  "Time Limit": "2.00s",
  "Description": "It's a well-known fact that, inside computers, all data is stored in 2D pyramids of data blocks.\nA certain pyramid has N (1 \u2264 N \u2264 109) rows, numbered 1..N from top to bottom. Each row r has r block spaces, which are labelled (r, 1)..(r, r) from left to right. Each block space (r, c) in rows 1..(N \u2212 1) rests on top of two supporting block spaces in the row below it \u2013 block spaces (r + 1, c) and (r + 1, c + 1). For example, a pyramid with 6 rows is illustrated below, with block spaces (3, 1), (4, 4), and (6, 2) indicated in red:\n\nNow, each block space may either contain data, or be empty. A block space containing data is only stable if it's in the bottom row (row N), or if both of its two supporting block spaces also contain data. The entire pyramid is only stable if all of its non-empty block spaces are stable.\nYou know that there are M (1 \u2264 M \u2264 105) different block spaces which must contain data \u2013 the i-th of these is block space (ri, ci) (1 \u2264 ci \u2264 ri \u2264 N). All of the other block spaces in the pyramid may either be filled with abitrary data or be left empty. However, everyone knows that data is expensive. As such, you're interested in the smallest amount of data that the pyramid's block spaces can contain such that at least the M required block spaces contain data, and the entire data structure is stable.",
  "Subtasks": "\nFor 3 of the 15 marks available, N \u2264 100 and M \u2264 200.\nFor another 3 of the 15 marks available, N \u2264 2000 and M \u2264 105.\nFor another 3 of the 15 marks available, N \u2264 109 and M \u2264 2.\n",
  "Output Format": "Output a single integer, the minimum number of block spaces which can contain data such that the entire pyramid is stable. Note that this value may not fit in a 32-bit signed integer, and may need to be stored in a long long / long / int64 variable in C++ / Java / Pascal, respectively."
}{
  "Clarification": "In the first example, the numbers modulo 42 are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10.\nIn the second example all numbers modulo 42 are 0.\nIn the third example, the numbers modulo 42 are 39, 40, 41, 0, 1, 2, 40, 41, 0 and 1. There are 6\ndistinct numbers.",
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Given two integers A and B, A modulo B is the remainder when dividing A by B. For example, the\nnumbers 7, 14, 27 and 38 become 1, 2, 0 and 2, modulo 3. Write a program that accepts 10 numbers\nas input and outputs the number of distinct numbers in the input, if the numbers are considered\nmodulo 42.",
  "Output": "6\n",
  "Title": "COCI06 #1 - Modulo",
  "Input": "39\n40\n41\n42\n43\n44\n82\n83\n84\n85\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "The 19th century German mathematician Hermann Minkowski investigated a non-Euclidian\ngeometry, called the taxicab geometry. In taxicab geometry the distance between two points T1(x1,\ny1) and T2(x2, y2) is defined as:\nD(T1,T2) = |x1 - x2| + |y1 - y2|\nAll other definitions are the same as in Euclidian geometry, including that of a circle:\nA circle is the set of all points in a plane at a fixed distance (the radius) from a fixed point (the\ncentre of the circle).\nWe are interested in the difference of the areas of two circles with radius R, one of which is in\nnormal (Euclidian) geometry, and the other in taxicab geometry. The burden of solving this difficult\nproblem has fallen onto you.",
  "Output": "5541.769441\n3528.000000\n",
  "Title": "COCI06 #1 - Herman",
  "Input": "42\n"
}{
  "Memory Limit": "128M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "\"Peter Pan frames\" are a way of decorating text in which every character is framed by a diamond-shaped frame, with frames of neigbhouring characters interleaving. A Peter Pan frame for one letter looks like this ('X' is the letter we are framing):\n\n..#..\n.#.#.\n#.X.#\n.#.#.\n..#..\n\nHowever, such a framing would be somewhat dull so we'll frame every third letter using a \"Wendy frame\". A Wendy frame looks like this:\n\n..*..\n.*.*.\n*.X.*\n.*.*.\n..*..\n\nWhen a Wendy frame interleaves with a Peter Pan frame, the Wendy frame (being much nicer) is put on top. For an example of the interleaving check the sample cases.",
  "Output": "..#...#...*...#..\n.#.#.#.#.*.*.#.#.\n#.A.#.B.*.C.*.D.#\n.#.#.#.#.*.*.#.#.\n..#...#...*...#..\n",
  "Title": "COCI06 #1 - Okviri",
  "Input": "ABCD\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "The evil emperor Cactus has in his possession the Magic Keg and has flooded the Enchanted Forest! The Painter and the three little hedgehogs now have to return to the Beaver's den where they will be safe from the water as quickly as possible!\nThe map of the Enchanted Forest consists of R rows and C columns. Empty fields are represented by '.' characters, flooded fields by '*' and rocks by 'X'. Additionally, the Beaver's den is represented by 'D' and the Painter and the three little hedgehogs are shown as 'S'.\nEvery minute the Painter and the three little hedgehogs can move to 4 neighbouring fields (up, down, left or right). Every minute the flood expands as well so that all empty fields that have at least one common side with a flooded field become flooded as well. Neither water nor the Painter and the three little hedgehogs can pass through rocks. Naturally, the Painter and the three little hedgehogs cannot pass through flooded fields, and water cannot flood the Beaver's den.\nWrite a program that will, given a map of the Enchanted Forest, output the shortest time needed for the Painter and the three little hedgehogs to safely reach the Beaver's den.\nNote: The Painter and the three little hedgehogs cannot move into a field that is about to be flooded (in the same minute).",
  "Output": "6\n\nClarification of the second sample test: The best they can do is to go along the lower border and then the left border, and get flooded one minute before reaching the den.",
  "Title": "COCI06 #1 - Slikar",
  "Input": "3 6\nD...*.\n.X.X..\n....S.\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "2.00s",
  "Description": "Everyone knows of the secret agent double-oh-seven, the popular Bond (James Bond). A lesser known fact is that he actually did not perform most of his missions by himself; they were instead done by his cousins, Jimmy Bonds. Bond (James Bond) has grown weary of having to distribute assign missions to Jimmy Bonds every time he gets new missions so he has asked you to help him out.\nEvery month Bond (James Bond) receives a list of missions. Using his detailed intelligence from past missions, for every mission and for every Jimmy Bond he calculates the probability of that particular mission being successfully completed by that particular Jimmy Bond. Your program should process that data and find the arrangement that will result in the greatest probability that all missions are completed successfully.\nNote: the probability of all missions being completed successfully is equal to the product of the probabilities of the single missions being completed successfully.",
  "Output": "9.10000\n\nClarification of the third example: If Jimmy bond 1 is assigned the 3rd mission, Jimmy Bond 2 the 1st mission and Jimmy Bond 3 the 2nd mission the probability is: 1.0 * 0.13 * 0.7 = 0.091 = 9.1%. All other arrangements give a smaller probability of success.",
  "Title": "COCI06 #1 - Bond",
  "Input": "3\n25 60 100\n13 0 50\n12 70 90\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "While debugging a program Mirko noticed that a bug in the program may be linked with the existence of so called square killers in the program memory. The program memory is a matrix composed of R rows and C columns consisting only of zeroes and ones. A square killer is a square submatrix in memory, consisting of more than one character, that, when rotated 180 degrees looks exactly the same. For example, the following matrix contains 3 square killers:\n101010\n111001\n101001\n\nmemory\n\n....10\n....01\n......\n\nkiller\n\n......\n...00.\n...00.\n\nkiller\n\n101...\n111...\n101...\n\nkiller\n\nMirko is wondering if there is a connection between the size of the largest square killer and the bug in the program. Help Mirko by writing a program that, given the layout of the memory, outputs the size of the largest square killer. The size of the square killer is the number of rows (or columns) that the killer consists of. In the example above the killer sizes are 2, 2 and 3, respectively.",
  "Output": "-1\n",
  "Title": "COCI06 #1 - Debug",
  "Input": "3 3\n101\n111\n100\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "The number S is called the mean of two numbers R1 and R2 if S is equal to (R1+R2)/2. Mirko's\nbirthday present for Slavko was two integers R1 and R2. Slavko promptly calculated their mean which\nalso happened to be an integer but then lost R2! Help Slavko restore R2.",
  "Output": "2\n",
  "Title": "COCI06 #2 - R2",
  "Input": "4 3\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "You will be given three integers A, B and C. The numbers will not be given in that exact order, but we\ndo know that A is less than B and B less than C.\nIn order to make for a more pleasant viewing, we want to rearrange them in the given order.",
  "Output": "6 2 4\n",
  "Title": "COCI06 #2 - ABC",
  "Input": "6 4 2\nCAB\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "When moving, ants form rows so that each ant except the first is behind another ant. It is not widely\nknown what happens when two rows of ants moving in opposite directions run into each other in a\npassage too narrow for both rows to pass through. One theory says that, in that situation, ants will\njump over each other.\nFrom the moment the rows meet, each second every ant jumps over (or gets jumped over, as they agree\nupon) the ant in front of himself so that the two ants swap places, but only if the other ant is moving in\nthe opposite direction. Find the order of the ants after T seconds.",
  "Output": "CARLUJO\n",
  "Title": "COCI06 #2 - Kolone",
  "Input": "3 4\nJLA\nCRUO\n3\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Consider a convex polygon with N vertices, with the additional property that no three diagonals intersect in a single point. Find the number of intersections between pairs of diagonals in such a polygon.\nThe figure below shows one such polygon with 6 vertices.\n\nNote: a polygon is convex if all of its interior angles are less than 180 degrees.",
  "Output": "15\n",
  "Title": "COCI06 #2 - Sjecista",
  "Input": "6\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko has bought an apartment and wants to invite to dinner as many people as possible to celebrate with him. For this he needs a large rectangular wooden table for which he will sit down with his guests. The number of people a table can accommodate is equal to its perimeter (the sum of the lengths of all four sides). Mirko wants to buy a table such that it fits in his apartment and that as many people as possible can sit down with him for dinner. The table must be placed so that its edges are parallel to the edges of the apartment.\nGiven the layout of the apartment, find the number of people Mirko can invite to dinner.",
  "Output": "3\n",
  "Title": "COCI06 #2 - Stol",
  "Input": "3 3\nX.X\n.X.\nX.X\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Near a military base there is a system of trenches, modeled as line segments on a plane. During nighttime, when most soldiers are fast asleep, three guards stand watch of the trenches. Two guards can see each other if there is a trench (or a row of trenches) along the entire straight line segment between them and there is no third guard on that line segment.\nFor security reasons, the guards must be placed so that each guard sees the other two. How many ways can they be placed?",
  "Output": "0\n",
  "Title": "COCI06 #2 - Straza",
  "Input": "3\n2 2 3 2\n3 2 3 3\n3 3 2 3\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Every day, while the dwarves are busy in the mines, Snow White prepares dinner for them; seven\nchairs, seven plates, seven forks and seven knives for seven hungry dwarves.\nOne day nine dwarves came from the mines instead of seven (nobody knows how or why), each of\nthem claiming to be one of Snow White's seven dwarves.\nLuckily, each dwarf wears a hat with a positive integer less than 100 written on it. Snow White, a\nfamous mathematician, realised long ago that the sum of numbers on the hats of her seven dwarves\nwas exactly 100.\nWrite a program which determines which dwarves are legit, i.e. pick seven of nine numbers that add to\n100.",
  "Output": "8\n6\n5\n1\n30\n28\n22\n",
  "Title": "COCI06 #3 - Patuljci",
  "Input": "8\n6\n5\n1\n37\n30\n28\n22\n36\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "N-puzzle is a puzzle that goes by many names and has many variants. In this problem we will use the\n15-puzzle. It consists of a 4-by-4 grid of sliding squares where one square is missing. The squares are\nlabeled with uppercase letters 'A' through 'O', with the desired layout as follows:\n\nIt can be useful (for example, when solving the puzzle using a computer) to define the \"scatter\" of a\npuzzle as the sum of distances between each square's current position and its position in the desired\nlayout. The distance between two squares is their Manhattan distance (the absolute value of the sum of\ndifferences between the two rows and the two columns).\nWrite a program that calculates the scatter of the given puzzle.",
  "Output": "6\n",
  "Title": "COCI06 #3 - N-puzzle",
  "Input": ".BCD\nEAGH\nIJFL\nMNOK\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko and Slavko are playing a new game, \"Trojke\" (Triplets). First they use a chalk to draw an N-by-N square grid on the road. Then they write letters into some of the squares. No letter is written more than once in the grid.\nThe game consists of trying to find three letters on a line as fast as possible. Three letters are considered to be on the same line if there is a line going through the centre of each of the three squares.\nAfter a while it gets harder to find new triplets. Mirko and Slavko need a program that counts all the triplets, so that they know if the game is over or they need to search further.",
  "Output": "0\n",
  "Title": "COCI06 #3 - Trojke",
  "Input": "10\n....AB....\n..C....D..\n.E......F.\n...G..H...\nI........J\nK........L\n...M..N...\n.O......P.\n..Q....R..\n....ST....\n"
}{
  "Scoring": "If both the number K and the sequence of moves are correct, your program will score full points on the test case.\nIf your program outputs the correct number K and does not output the sequence of moves, or the sequence of moves is incorrect, you will get 60% of the points for that test case.",
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko found a collection of N toy tanks dating back to the Second World War on his grandfather's attic. He promptly called his friend Slavko to play with him. They made a battlefield \u2013 a wooden board consisting of squares in N rows and N columns.\nEach tank can be moved to one of the four neighbouring squares in a single move. A tank can shoot at any square in the same row and column. The tank is said to be guarding the row and column it is in.\nAdditionally, no two tanks can be in the same square at any time.\nAfter many hours of play and two previous attempts, Mirko's mom yelled at them to come down for lunch again, and they decided to rearrange the tanks so that each tank guards a different row and column (meaning also that each row and column contains only one tank).\nHowever, they want to do this using the minimum number of moves.\nWrite a program that finds the minimum number of moves required to rearrange the tanks so that each row and each column contains a single tank, and one such shortest sequence of moves.",
  "Output": "8\n2 R\n2 D\n3 D\n3 R\n4 U\n4 L\n5 L\n5 U\n",
  "Title": "COCI06 #3 - Tenkici",
  "Input": "6\n1 1\n1 2\n2 1\n5 6\n6 5\n6 6\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "A bicycle race is being organized in a land far, far away. There are N town in the land, numbered 1 through N. There are also M one-way roads between the towns. The race will start in town 1 and end in town 2.\nHow many different ways can the route be set? Two routes are considered different if they do not use the exact same roads.",
  "Output": "073741824\n",
  "Title": "COCI06 #3 - Bicikli",
  "Input": "31 60\n1 3\n1 3\n3 4\n3 4\n4 5\n4 5\n5 6\n5 6\n6 7\n6 7\n\u2026\n\u2026\n\u2026\n28 29\n28 29\n29 30\n29 30\n30 31\n30 31\n31 2\n31 2\n"
}{
  "Scoring": "If both the number K and the sequence of moves are correct, your program will score full points on the test case.\nIf your program outputs the correct number K and does not output the sequence of moves, or the sequence of moves is incorrect, you will get 60% of the points for that test case.",
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko received a birthday present from his aunt in the US \u2013 a brand-new doubly-linked list (an example of which is shown in the figure below). The list contains N nodes numbered 1 through N. Two types of moves can be done on the list:\nA) Move node X in front of node Y.\nB) Move node X after node Y.\n\nAn example of a list with 6 nodes.\n\nThe list after the move \"A 1 4\".\n\nThe list after another move, \"B 3 5\".\nMirko played with his new toy for hours, writing down each move on a piece of paper so that he can reconstruct the list's initial state (nodes 1 through N in order from left to right).\nWhen he decided to reconstruct the list, Mirko was astonished to find that there is no easy way to invert the moves and restore the list's initial state. Mirko cannot know where node X was prior to each move, only where it ended up.\nSeeing how Mirko is still recovering from the shock, write a program that finds a minimal sequence of moves that restored the list's initial state from Mirko's logs.",
  "Output": "3\nA 4 5\nB 6 5\nA 2 3\n",
  "Title": "COCI06 #3 - Lista",
  "Input": "6 5\nA 1 4\nB 2 5\nB 4 2\nB 6 3\nA 3 5\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Young Mirko threw matches all over the floor of his room.\nHis mom did not like that and ordered him to put all the matches in a box. Mirko soon noticed that not\nall of the matches on the floor fit in the box, so he decided to take the matches that don't fit and throw\nthem in the neighbour's garbage, where his mom (hopefully) won't find them.\nHelp Mirko determine which of the matches fit in the box his mom gave him. A match fits in the box\nif its entire length can lie on the bottom of the box. Mirko examines the matches one by one.",
  "Output": "NE\nDA\n",
  "Title": "COCI06 #4 - Sibice",
  "Input": "2 12 17\n21\n20\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Having solved the match issue, Mirko faced another challenging problem. His mom ordered him to\nread an article about the newest couples on the Croatian show-biz scene in the \"Moja Tajna\" magazine.\nThe article is written in a very small font size which Mirko cannot read. Luckily, Mirko has a scanner in\nthe closet which will enlarge the article for him.\nThe article is a matrix of characters with R rows and C columns. The characters are letters of the\nEnglish alphabet, digits and the character '.' (period). Mirko's scanner supports two parameters, ZR and\nZC. It substitutes each character it scans with a matrix of ZR rows and ZC columns, where all\nentries are equal to the scanned character.\nMirko realized his scanner's software no longer works so he needs your help.",
  "Output": ".x.\n.x.\nx.x\nx.x\n.x.\n.x.\n",
  "Title": "COCI06 #4 - Skener",
  "Input": "3 3 2 1\n.x.\nx.x\n.x.\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "After an exhausting morning, Mirko fell asleep. His brother Stanko, however, just awoke and, like his brother, is all about excitement. Stanko found N rings of varying radiuses in the garage. He arranged them on the floor so that each ring (except the first and last) touches the ones before and after it.\n\nHe started turning the first ring and noticed that the other rings turned as well; some faster, some slower!\nThrilled with his discovery, he decided to count how many times the other rings turn while the first ring turns once. He gave up after noticing that this number is not always an integer and not knowing what to do.\nWrite a program that determines how many times each ring turns while the first turns once.",
  "Output": "300/1\n300/1\n1/1\n",
  "Title": "COCI06 #4 - Prsteni",
  "Input": "4\n300 1 1 300\n"
}{
  "Memory Limit": "64M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Consider a sequence of N integers where each integer between 1 and N appears exactly once.\nA pair of numbers in the sequence is confused if the number that comes earlier in the sequence is larger than the later number.\nThe confusion of the sequence is the number of confused pairs in it. For example, the confusion of the sequence (1, 4, 3, 2) is 3 because there are 3 confused pairs: (4, 3), (4, 2) and (3, 2).\nWrite a program that calculates the number of sequences of length N whose confusion is exactly C.",
  "Output": "17957\n",
  "Title": "COCI06 #4 - Zbrka",
  "Input": "9 13\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "A complete binary tree is made of nodes arranged in a hierarchic structure. One of the nodes is the root node, said to be at level 0. The root node has two child nodes, which are at level 1. Each of those has two children at level 2 etc.\nIn general, a complete binary tree with N levels has 2N\u22121 nodes, each of which has two child nodes, except those at level L\u22121.\nA number can be written into each node. Write the numbers 1 to 2N\u22121 into a complete binary tree with N levels so that, for each node at level D, the absolute value of the difference of the sum of all numbers in the left subtree and the sum of all numbers in the right subtree is 2D.\nFor example, the sum of the left subtree of the root node must differ from the sum of the right subtree by 1. The sums of the left and right subtrees of a node at level 1 must differ by 2.\nEach number must be used exactly once. The solution need not be unique.",
  "Output": "3 1 7 5 6 2 4\n",
  "Title": "COCI06 #4 - Jogurt",
  "Input": "3\n"
}{
  "Memory Limit": "256M",
  "Sample Tests": "",
  "Time Limit": "3.00s",
  "Description": "It's exam time in Mirko's village. Everyone wants to pass the exam with as little effort as possible, which is not easy. Mirko realized that it would be best for him to find someone who knows more than him and learn from them. Everyone followed and now everyone is looking for someone to learn from.\nWe can model how well a student is prepared for the exam with two integers, A and B. The number A represents how well a student understands the subject, while the number B is proportional to the quantity of their knowledge.\nAs the head of the village, Mirko decided that a student will ask another student for help only if that student has both numbers greater than or equal to the first student's numbers (no student will ask someone who doesn't understand the subject as well as themselves or who knows less).\nAdditionally, students will try to minimize the difference in knowledge quantity (so that students don't bother those that are way better). If this choice is not unique, they will try to minimize the difference in understanding.\nMirko's village has recently become a very popular suburb and new students keep moving in (in time for the exam). With Mirko's strict rules, they get confused about Mirko's rules and don't know where to go). They decided to ask a programmer from a neighbouring village for help.",
  "Output": "2\n4\n4\n",
  "Title": "COCI06 #4 - Ispiti",
  "Input": "7\nD 5 2\nD 5 3\nP 1\nD 7 1\nD 8 7\nP 3\nP 2\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Jealous of Mirko's position as head of the village, Borko stormed into his tent and tried to demonstrate\nMirko's incompetence for leadership with a trick.\nBorko puts three opaque cups onto the table next to each other (opening facing down) and a small ball\nunder the leftmost cup. He then swaps two cups in one of three possible ways a number of times.\nMirko has to tell which cup the ball ends up under.\n\nWise Mirko grins with his arms crossed while Borko struggles to move the cups faster and faster. What\nBorko does not know is that programmers in the back are recording all his moves and will use a simple\nprogram to determine where the ball is. Write that program.",
  "Output": "1\n",
  "Title": "COCI06 #5 - Trik",
  "Input": "CBABCACCC\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "After an unsuccessful attempt at claiming power peacefully, Borko has decided to tear down Mirko's\nvillage hall, which was built for him out of cardboard by his loyal servants.\nFor this he will use Mirko's microprocessor (which was stolen from him by Borko's friend Zvonko), a\nbucket of water and a bag of sodium. He will enter the time of the \"explosion\" into the\nmicroprocessor, and it will drop the sodium in the water after the time is up.\nBorko knows the current time and when he wants the explosion. He is not very fond of arithmetic and\nZvonko is currently playing with marbles in his back yard so he can't help him.\nWrite a program that calculates the time to the explosion (this is the time Borko will enter into the\nmicroprocessor). The time Borko wants is at least one second and at most 24 hours.",
  "Output": "02:01:26\n",
  "Title": "COCI06 #5 - Natrij",
  "Input": "12:34:56\n14:36:22\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "After Borko's second plan of taking over the village fell through (because Mirko's brother Stanko drank\nall the water), young Zvonko decided to relax with sports. For this purpose he stocked up on carrot\njuice and peanuts, and dived onto the couch, ready to watch the next tennis match on television.\nWhile the two players are warming up, their statistics pop up on the screen. Zvonko noticed that the\nmatch history of the players contained invalid results. He had a brilliant idea where you write him a\nprogram that checks the validity of results, which he will then sell to the record keepers and enjoy a\nleisurely life.\nA tennis match consists of sets, each set consisting of games. The following rules apply:\nA player wins a set if he has 6 or more games and at least two games more than his opponent.\nAdditionally, if the result is 6:6 in the first or second set (but not the third set), a single final\ngame is played to determine the winner of the set (the tie-break game).\nThe match ends when either player has won 2 sets. That player is the winner.\nA match result is valid if a match could have been played by the above rules and ended in the result.\nAdditionally, if one of the players is Roger Federer (designated as \"federer\" in the input), then a result\nin which he has lost a set can't be valid (Zvonko knows Federer is from outer space).\nWrite a program that checks the validity of all matches between two players.",
  "Output": "ne\n",
  "Title": "COCI06 #5 - Tenis",
  "Input": "federer roddick\n1\n2:6 4:6\n"
}{
  "Example": "Sample Input \n5\n27 21 3 3 66\n27 18 6 3 ?\n? 15 5 7 50\n? 14 7 5 ?\n? 14 ? 8 47\n\nSample Output\n27 21 3 3 66\n27 18 6 3 60\n27 15 5 7 50\n26 14 7 5 49\n27 14 5 8 47\n",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "While the players are resting between sets, the station puts on tedious commercials. Zvonko fires up\nthe teletext feature on his TV set and is reviewing the latest scores and standings in the football league.\nAlways sharp, he has come up with a new mathematical game.\nThe standings table contains five statistics for each team: the total number of games played, how many\nof those games the team won, drew and lost, and points earned. A team earns 3 points for every win\nand 1 point for every draw.\nZvonko noticed that the values of some fields can be determined from the others.\nWrite a program that takes in a table in which the values of some fields are unknown, and fills in the\nmissing fields.\nThe data for different teams is not related. For example, it is possible that the table says all teams have\nwon all their games (although that is not possible in a real league).\nEach team will have played at most 100 games (even though that can be one of the missing fields).",
  "Output": "Output the table with the missing fields filled in.",
  "Title": "COCI06 #5 - Liga",
  "Input": "The first line contains an integer N (1 \u2264 N \u2264 1000), the number of teams in the league.\nEach of the following N lines contains the 5 fields for one team separated by single spaces, containing\nthe 5 pieces of data as described in the problem statement. Each field contains an integer (at least 0), or\nthe character '?' (question mark) if the value is not known.\nThe input will be consistent and there will be a unique way to determine the values of the missing\nfields."
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Even though she saw Zvonko steal Mirko's microprocessor in the second task, Mirko's sister Ivana did\nnot tell Mirko because she likes Zvonko. She suggested to him that they go see a movie together so that\nshe would \"forget\" about the incident.\nZvonko does not care much for girls because they take away precious time he usually spends practicing\nhis math-fu. He suggested that the two of them play a game and, if Ivana wins, they will go see a movie\ntogether. Ivana agreed, being good at jump rope and she sometimes even kicks a football around with\nher two brothers.\nZvonko laid N positive integers in a circle on the floor and explained the rules:\nThe first player takes any number.\nThe second player takes either of the two numbers adjacent to the one the first player took.\nThe next player takes a number adjacent to any of the numbers taken so far, and so on until\nthey run out of numbers. The player to take more odd numbers (not divisible by 2) wins.\nZvonko plays optimally; he always looks for a strategy that leads to certain victory or a draw. Zvonko\ndoes not know how well Ivana plays. Being a true cavalier, he let Ivana have the first move.\nBut Ivana only cares about sitting next to Zvonko in front of the big screen so she seeks help playing.\nWrite a program that finds how many different first moves Ivana can make, so that she has a chance of\nwinning afterwards.",
  "Output": "5\n\nFirst example: Whichever number Ivana takes first, she'll end up with two odd numbers, and Zvonko\nwill have gotten only one.\nSecond example: If Ivana takes one of the even numbers, Zvonko will take one of the odd numbers\nand ensure a draw. If she takes an odd number, Zvonko will have to take an even number and then\nlose because Ivana can take the other odd number.",
  "Title": "COCI06 #5 - Ivana",
  "Input": "8\n4 10 5 2 9 8 1 7\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Ivana won the bet (Zvonko hadn't foreseen this and suspects that it is due to outside interference) and\nnow Zvonko is waiting for her at the movies. While he is waiting, he is observing messages on a screen\nabove him.\nAs Ivana is running late, Zvonko has been looking at the screen for a while and noticed that some\nmessages appeared on the screen more than once. Naturally, he's been writing down all messages on a\npiece of paper. He wants to know the length of the longest string that appeared at least twice (appears\nin two different positions on the paper).",
  "Output": "0\n",
  "Title": "COCI06 #5 - Dvaput",
  "Input": "6\nabcdef\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "N children are eating lunch at the table. Children take turns in taking food from the table.\nSome of the children haven't yet been taught proper manners so they jump at the food without giving\nthe others a chance. If at any point a child takes a piece of food, and that child had already taken\nmore food than the other children all together (not including the new piece of food), then the\nmother will warn that child to behave.\nYou will be given the order in which the children take food. Write a program that calculates how many\ntimes the mother has to warn the children.",
  "Output": "4\n",
  "Title": "COCI06 #6 - Prase",
  "Input": "17\na\nb\nb\na\na\na\nc\na\nb\nb\nc\nb\nb\nb\nb\nb\nb\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Albert, Barbara, Casper, Dinko, Eustahije are starting a marathon game of tic-tac-toe, played on an\nN\u00d7N board.\nInitially, all squares on the board are empty and players take turns writing the first letter of their name\ninto any of the empty squares (because the players are elite, no two players have the same first letter).\nThe game ends when some player places 3 of his or her letters consecutively in a row, column or\ndiagonally. That player is declared the winner.\nWrite a program that, given the state of the board, determines if the game is over and who won if it is.",
  "Output": "A\n",
  "Title": "COCI06 #6 - Maraton",
  "Input": "3\nABB\nAAA\nBBA\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "For nearly two weeks now, Domeniko has been lying in his bed because his friend Nedjeljko accidently\nthrew a large rock on his left foot. As Domeniko has already solved the tasks from all Croatian national\ncompetitions since 1998, he has to find a new way to kill time.\nDomeniko's new game is played on an R\u00d7C board. Initially every square is either empty or blocked by a\nwall. Domeniko throws a rock into the board by putting it in the topmost row of a column and then\nletting gravity do the rest.\nGravity works as follows:\nIf the square under the rock is a wall or if the rock is in the bottom row of a column, then the\nrock remains there.\nIf the square under the rock is empty, then the rock moves to that square.\nIf the square under the rock contains another rock, then the falling rock may slide sideways:\nIf the squares left and left-down of the rock are empty, then the rock slides one square left.\nIf the rock doesn't slide left and the squares to the right and right-down are empty, then the rock slides one square right.\nOtherwise, the rock remains there and never moves again.\nDomeniko will never throw another rock while the previous rock hasn't settled down.\nWrite a program that draws the board after Domeniko throws all his rocks into the board, if we know\nthe columns that Domeniko threw his rocks into, in order.\nNote: Domeniko will never throw a rock into column in which the top row isn't empty.\n",
  "Output": "......\n...O..\n...XX.\n......\n.OO...\n.XX...\nO..O.O\n\nIn the first example, all rocks are thrown in the first column. The first rock stops on the wall. The\nsecond rock falls on the first, slides right and stops at the bottom of the second column. The third rock\nfalls on the first then on the second rock, slides left and rests at the bottom of the first column. The\nfourth rock falls on the first then on the second, then slides right.",
  "Title": "COCI06 #6 - Kamen",
  "Input": "7 6\n......\n......\n...XX.\n......\n......\n.XX...\n......\n6\n1\n4\n4\n6\n4\n4\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Zvonko is playing with digits again, even though his mother has warned him that he is doing too much\nmath and should go outside to play with his friends.\nIn his latest game, Zvonko looks for multiples of an integer X, composed only of certain digits. A\nmultiple of X is any number divisible by X.\nIn order to ruin Zvonko's fun, his mother decided to get a program that solves the problem. Write a\nprogram that calculates how many multiples of X are between A and B (inclusive), such that, when\nwritten in decimal, they contain only certain allowed digits.",
  "Output": "0\n",
  "Title": "COCI06 #6 - V",
  "Input": "5 4395 9999999999\n12346789\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "2.00s",
  "Description": "A long time ago in a three-dimensional space far away, a tribe of rectangles lived happily. The\nrectangles lived a spiritual life, parallel with one of the coordinate planes.\nOne day, a cuboid walked into their small world, riding steadily on an icosahedron, showing off its\nsharp corners and positive volume. The rectangles watched in awe and dreamed of being cuboids.\nNothing would ever be the same from that day on. The rectangles started comparing each other by\narea, perimeter and even by the ratio of the lengths of their sides.\nSoon the first conflict ensued over the ownership of shared points. In time, each pair of rectangles\nsharing at least one point (including those merely touching each other) got into a conflict and\nbecame enemies.\nIt is up to you to restore peace in the community, by meeting with every pair of rectangles in conflict.\nWrite a program that finds how many such pairs there are.",
  "Output": "4\n",
  "Title": "COCI06 #6 - Prostor",
  "Input": "5\n4 4 5 4 3 2\n5 3 2 4 3 1\n5 4 3 1 1 3\n1 4 3 1 5 4\n5 5 4 5 4 2\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Every evening villagers in a small village gather around a big fire and sing songs.\nA prominent member of the community is the bard. Every evening, if the bard is present, he sings a\nbrand new song that no villager has heard before, and no other song is sung that night. In the event\nthat the bard is not present, other villagers sing without him and exchange all songs that they know.\nGiven the list of villagers present for E consecutive evenings, output all villagers that know all songs\nsung during that period.",
  "Output": "1\n",
  "Title": "COCI06 Regional - Bard",
  "Input": "5\n3\n2 1 3\n2 2 1\n4 2 1 4 5\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Tetris is a popular computer game played in a field consisting of C columns and an unlimited number\nof rows. In one move, one of the following seven pieces is dropped into the field:\n\nWhen dropping the piece, the player is free to rotate the piece 90, 180 or 270 degrees and to move it\nleft or right, as long as the piece stays entirely in the field. The piece then falls until it settles on the\nbottom of the field or on already occupied squares. In our variant of Tetris the piece must fall so that\nall parts of the piece are on the bottom of the field or on already occupied squares. In other words,\nafter the piece falls there may not be a free square such that some square above it is occupied.\nFor example, let the field be six columns wide with initial heights (the number of already occupied\nsquares in each column) 2, 1, 1, 1, 0 and 1. Piece number 5 can then be dropped into the field in five\ndifferent ways:\n\nYou are given the initial heights of all columns and the figure to be dropped into the field.\nWrite a program that calculates the number of different ways to do this, i.e. the number of different\nfield configurations that can be achieved by dropping the piece.",
  "Output": "1\n",
  "Title": "COCI06 Regional - Tetris",
  "Input": "9 4\n4 3 5 4 6 5 7 6 6\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "A Japanese firefly has flown into a cave full of obstacles: stalagmites (rising from the floor) and\nstalactites (hanging from the ceiling). The cave is N units long (where N is even) and H units high. The\nfirst obstacle is a stalagmite after which stalactites and stalagmites alternate.\nHere is an example cave 14 units long and 5 units high (the image corresponds to the second example):\n\nThe Japanese firefly is not the type that would fly around the obstacle, instead it will choose a single\nheight and ram from one end of the cave to the other destroying all obstacles in its path with its\nmighty kung-fu moves.\nIn the previous example, choosing the 4th level from the ground has the firefly destroying eight\nobstacles:\n\nThis is not the best choice because the firefly will end up less tired if it chooses either level one or five,\nas that would require destroying only seven obstacles.\nYou are given the width and length of the cave and the sizes of all obstacles.\nWrite a program that determines the minimum number of obstacles the firefly needs to destroy to\nreach the end of the cave, and on how many distinct levels it can achieve that number.",
  "Output": "7 2\n",
  "Title": "COCI06 Regional - Firefly",
  "Input": "14 5\n1\n3\n4\n2\n2\n4\n3\n4\n3\n3\n3\n2\n3\n3\n"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "One nice summer day while Mirko was drinking lemonade in his room...\n\"Big brother!\", yells Stanko.\n\"I wonder sometimes which of the two of us is the big one. What is it?\", Mirko asked.\n\"Listen carefully! In the backyard I have N pebbles arranged in a circle. Some of the pebbles are black,\nsome are white. I will do the following: between any two neighbouring pebbles of the same colour I\nwill insert a black pebble, and between any two neighbouring pebbles of different colours I will\ninsert a white pebble. At that point there will be 2N pebbles in the circle, so I will remove the starting\nN pebbles so that only the newly added N pebbles remain. And all this I intend to do exactly K times.\nAnd then you are to determine my starting circle.\", said Stanko long-windedly.\n\"Ha! I shall not fall prey to your trickery! I can see that it is not necessarily possible to know exactly\nwhat the starting circle was, but I can count the number of distinct starting circles that give the same\nresult as your circle after exactly K of those weird transformations of yours\", answered Mirko.\nYou are given the configuration of the circle before Stanko performed the transformation described\nabove K times.\nWrite a program that determines the number of distinct starting circles that give the same circle after K\ntransformations as Stanko's original circle does after K transformations.\n\n\nTwo configurations of pebbles are considered to be the same circle if one can be gotten from the\nother by rotating it any number of positions. For example BBW and BWB is the same circle whereas\nBBWWBW and WWBBWB are not.",
  "Output": "3\n\nTest case 1 clarification: The circles BBW and WBW become circle BWW after one transformation.",
  "Title": "COCI06 Regional - Circle",
  "Input": "6 2\nWBWWBW\n"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Mirko needs to choose four points in the plane so that they form a rectangle with sides parallel to the\naxes. He has already chosen three points and is confident that he hasn't made a mistake, but is having\ntrouble locating the last point. Help him.",
  "Output": "30 10",
  "Title": "COCI07 #1 - Cetvrta",
  "Input": "30 20\n10 10\n10 20"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "In the famous logic game Peg, pieces jump over other pieces to remove them from the game, until only\none piece is left.\nHere is the initial layout of the board:\n  ooo\n  ooo\nooooooo\nooo.ooo\nooooooo\n  ooo\n  ooo\n\nThe lowercase letter 'o' represents a piece, while the character '.' is an empty square. In one move, a\nplayer may choose one piece and one of the four main directions (up, down, left, right), if there is\nanother piece in that direction, and an empty square behind it. The chosen piece jumps over the other\npiece and settles in the empty square behind it, while the piece being jumped over is removed from the\ngame.\nWrite a program that calculates the number of legal moves, given the state of the board.",
  "Output": "12",
  "Title": "COCI07 #1 - Peg",
  "Input": "  ooo\n  ooo\n..ooo..\noo...oo\n..ooo..\n  ooo\n  ooo\n"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Brojko and Brojana are happily married with N little boys. The boys are named with distinct even\nintegers P1, P2, \u2026, PN.\nBrojko and Brojana are expecting an addition to their family and have to come up with a nice name for\nthe little girl. They have decided that the name will be an odd integer in the range [A, B]. Because they\nfind all integers in that range equally beautiful, they have decided to choose the number which\nmaximizes the distance to the name of the closest of the N boys.\nMore precisely, they seek an odd integer X \u2208 [A, B] such that the expression\nmin{|X \u2212 Pi|, i \u2208 [1,N]}\nis as large as possible.\nWrite a program that determines the name for the little girl. If there are multiple solutions, output any\nof them.",
  "Output": "5",
  "Title": "COCI07 #1 - Prinova",
  "Input": "3\n2 6 16\n1 7"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "A regular bracket-sequence is a string of characters consisting only of opening and closing brackets, and\nsatisfying the following conditions:\nAn empty string is a regular bracket-sequence.\nIf A is a regular bracket-sequence, then (A), [A] and {A} are also regular bracket-sequences.\nIf A and B are regular bracket-sequences, then AB is also a regular bracket-sequence.\nFor example, the sequences [({})],\u00a0\u00a0\u00a0[](){} i [{}]()[{}] are regular, but the sequences [({{([, []({)} and [{}])([{}] are not.\nIvica has found a string which looks like it could be a regular bracket-sequence. Some of the characters\nhave become smudged and illegible, and could have been any character.\nWrite a program that calculates how many ways the illegible characters in the string can be replaced by\nbrackets so that the result is a regular bracket-sequence. This number can be very large, so output only\nits last 5 digits.",
  "Output": "92202\nIn the second example, the three matching regular bracket-sequences are ({([()])}),\u00a0\u00a0\u00a0()([()]{}) and ([([])]{}).",
  "Title": "COCI07 #1 - Zapis",
  "Input": "16\n???[???????]????"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Consider a sequence A of integers, containing N integers between 1 and N. Each integer appears\nexactly once in the sequence.\nA subsequence of A is a sequence obtained by removing some (possibly none) numbers from the\nbeginning of A, and then from the end of A.\nCalculate how many different subsequences of A of odd length have their median equal to B. The\nmedian of a sequence is the element in the middle of the sequence after it is sorted. For example, the\nmedian of the sequence {5, 1, 3} is 3.",
  "Output": "4\nIn the fourth example, the four subsequences of A with median 4 are {4}, {7, 2, 4}, {5, 7, 2, 4, 3} and\n{5, 7, 2, 4, 3, 1, 6}.",
  "Title": "COCI07 #1 - Srednji",
  "Input": "7 4\n5 7 2 4 3 1 6"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "A bicycle race is being organized in a country. The transport network of the country consists of N cities\nnumbered 1 through N, with M bidirectional roads connecting them. We will use the following terms:\nA path is a sequence of roads in which each road starts in the city the preceding road ended in.\nA simple path is a path which never visits a city more than once.\nA ring is a simple path ending in the same city it started in.\nThe network is such that there is at least one path between every pair of cities. Additionally, every\nroad in the network is part of at most one ring.\nYour task is to find the longest path for the race satisfying two constraints:\nThe path may begin in any city, but must end in city 1.\nThe path may visit a city more than once, but it must not contain any road more than once.",
  "Output": "6",
  "Title": "COCI07 #1 - Staza",
  "Input": "5 6\n1 2\n2 3\n3 4\n4 5\n5 3\n3 1"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Mirko has found an old chessboard and a set of pieces in his attic. Unfortunately, the set contains only\nwhite pieces, and apparently an incorrect number of them. A set of pieces should contain:\nOne king\nOne queen\nTwo rooks\nTwo bishops\nTwo knights\nEight pawns\nMirko would like to know how many pieces of each type he should add or remove to make a valid set.",
  "Output": "-1 0 0 1 0 7",
  "Title": "COCI07 #2 - Bijele",
  "Input": "2 1 2 1 2 1"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Thrilled about his new valid set of pieces, Mirko rushed over to Slavko's, to find that Slavko too found\na set of chess pieces in his attic. Slavko's set, miraculously, contains only black pieces. But since neither\nof them can play chess, they settled on smashing one another senseless with their chessboards.\nWhile Slavko is warming up with a series of stretches, Mirko decided to sabotage Slavko's chessboard.\nAn expert in carving wood, he decided to cut Slavko's chessboard so that it shatters into as many\npieces as possible when Slavko attempts to hit Mirko.\nMirko can only make horizontal and vertical cuts (parallel to the sides to the board), edge to edge,\nand has time to make at most N cuts.",
  "Output": "6",
  "Title": "COCI07 #2 - Crne",
  "Input": "3"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Little Ivica solves crossword puzzles every day. In case you haven't seen one, a crossword puzzle starts\non a grid of R\u00d7C squares, each of which is either empty or blocked. The player's task is to write words\nin consecutive empty squares vertically (top down) or horizontally (left to right).\nIvica's sister has a strange habit of looking at crosswords Ivica has finished solving, and finding the\nlexicographically smallest word in it. She only considers words at least 2 characters long.\nWrite a program that, given a crossword puzzle, finds that word.",
  "Output": "abb",
  "Title": "COCI07 #2 - Prva",
  "Input": "4 5\nadaca\nda##b\nabb#b\nabbac"
}{
  "Description": "Frane has been given the task of sorting an array of numbers. The array consists of N integers, each\nbetween 1 and N (inclusive), with each of those appearing exactly once in the array. Frane has come up\nwith the following sorting algorithm which operates in N phases, and named it turbosort:\nIn the first phase, the number 1 is moved to position 1 by repeatedly swapping consecutive\nelements.\nIn the second phase, the number N is moved to position N in the same manner.\nIn the third phase, the number 2 is moved to position 2.\nIn the fourth phase, the number N\u22121 is moved to position N\u22121.\nAnd so on.\nIn other words, when the number of the phase is odd, Frane will choose the smallest number not yet\nchosen, and move it to its final position. In even phases he chooses the largest number not yet chosen.\nWrite a program which, given the initial array, output the number of swaps in each phase of the\nalgorithm.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Scoring": "In test cases worth 70% of points, N will be less than 100.",
  "Output": "4\n2\n3\n0\n2\n1\n0",
  "Title": "COCI07 #2 - Turbo",
  "Input": "7\n5\n4\n3\n7\n1\n2\n6"
}{
  "Description": "Instead of paying attention in chemistry class, Luka is killing time playing with numbers again. This\ntime, he wrote N positive integers so that they form a ring (circle). After that he formed a new ring by\nadding to each number its two neighbours.\nThe teacher noticed this and took away the first piece of paper, with the original ring. This did not\ntrouble Luka much because he knows he can use the other ring to reconstruct the original.\nWrite a program that solves Luka's problem.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Scoring": "In test cases worth 70% of points, N will be less than 100.",
  "Output": "4\n1\n3\n5\n2",
  "Title": "COCI07 #2 - Kemija",
  "Input": "5\n7\n8\n9\n10\n11"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "4.00s",
  "Description": "N points are placed in the coordinate plane.\nWrite a program which calculates in how many ways a right triangle can be\nformed by three of the given points. A right triangle is one in which one of the\nangles is 90 degrees.",
  "Output": "7",
  "Title": "COCI07 #2 - Pravokutni",
  "Input": "5\n-1 1\n-1 0\n0 0\n1 0\n1 1"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Mirko has chosen four integers which form an arithmetic progression. In other words, when the four\nnumbers are sorted, then the difference between each pair of adjacent elements is constant.\nAs has become usual, Mirko lost one of the numbers and also is not sure whether the remaining three\nare in the correct (sorted) order.\nWrite a program that, given the three remaining numbers, finds the fourth number.",
  "Output": "7",
  "Title": "COCI07 #3 - Cetiri",
  "Input": "10 1 4"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Slavko is learning about different numeral systems. Slavko is not the brightest when it comes to math,\nso he is starting out converting binary numerals to octal. The algorithm Slavko uses is this:\nPad the binary numeral with zeros on the left until the number\nof digits is divisible by three.\nGroup adjacent binary digits into groups of 3 digits.\nReplace each group of binary digits with the corresponding\noctal digit (as in the table on the right).\nWrite a program that converts a binary numeral to octal so that Slavko\ncan verify his results.",
  "Output": "314",
  "Title": "COCI07 #3 - Oktalni",
  "Input": "11001100"
}{
  "Examples": "",
  "Explanation of Example 3": "Ivica wants to send the message \"bombonisuuladici\" containing 16 letters. He can use a 1\u00d716, 2\u00d78 or\n4\u00d74 matrix. Of these, the 4\u00d74 has the most rows. When the message is written into it, the matrix looks\nlike this:\nb\no\nm\nb\no\nn\ni\ns\nu\nu\nl\na\nd\ni\nc\ni",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Every evening, little Ivica sends secret messages to little Marica through e-mail. Knowing Ivica's e-letter\ntravels unguarded through the network on its way to Marica's e-mailbox, they have decided to encrypt\nevery message using the following algorithm:\nSuppose Ivica's message consists of N characters.\nIvica must first find a matrix consisting of R rows and C columns such that R \u2264 C and\nR\u00b7C = N. If there is more than one such matrix, Ivica chooses the one with the most rows.\nIvica writes his message into the matrix in row-major order. In other words, he writes the first\nsegment of the message into the first row, the second segment into the second row and so on.\nThe message he sends to Marica is the matrix read in column-major order.\nMarica has grown tired of spending her precious time deciphering Ivica's messages, so you must write a\nprogram to do it for her.",
  "Output": "bombonisuuladici",
  "Title": "COCI07 #3 - Tajna",
  "Input": "boudonuimilcbsai"
}{
  "Description": "N points are placed in the coordinate plane.\nWrite a program that calculates how many ways we can choose three points so that they form a right\ntriangle with legs parallel to the coordinate axes.\nA right triangle has one 90-degree internal angle. The legs of a right triangle are its two shorter sides.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Scoring": "In 40% of all test cases, N will be less than 100.\nIn 70% of all test cases, N will be less than 10\u00a0000.",
  "Output": "8",
  "Title": "COCI07 #3 - Dejavu",
  "Input": "6\n10 10\n20 10\n10 20\n20 20\n30 20\n30 30"
}{
  "Description": "Bo\u017eo is a strange little boy. Every day he tires his friends with strange questions. Today's question is:\nhow many integers in the interval [A, B] are there such that the sum of their digits is S, and which is the\nsmallest such number?\nWrite a program that answers Bo\u017eo's question so that he can get some sleep.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Scoring": "For correctly outputting one of the two numbers you will receive 50% of the score.\nNote: if you want to receive credit for just the second number, be sure to output something (0, for\nexample) as the first number so the judge can interpret your output correctly.",
  "Output": "5445\n11499",
  "Title": "COCI07 #3 - Cudak",
  "Input": "11111 99999 24"
}{
  "Description": "Luka is not paying attention in class again, while the teacher is explaining redox reactions. Instead of\npaying attention, he is playing with analog dials.\nAn analog dial is a small device which always shows one digit between 0 and 9. It also contains a small\nbutton which increases the number by 1 (unless it is 9, in which case it is changed to 0).\nLuka has N such dials on his desk, numbered 1 to N left to right, and two sheets of paper for him to\nwrite on.\nLuka's game starts with him setting the dials in some starting configuration, which he then writes onto\nthe first sheet. Luka then does the following M times:\nChoose two integers A and B (1 \u2264 A \u2264 B \u2264 N) and write them down on the first sheet.\nCalculate the sum of numbers on dials numbered between A and B (inclusive), and write the\nsum down on the second sheet.\nPress the button once on all dials numbered between A and B.\nJust as he had finished his game, the teacher noticed him, and took away all his dials and the second\nsheet of paper.\nGiven the contents of the first sheet, help him calculate the numbers on the second sheet.",
  "Examples": "",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Scoring": "In 30% of all test cases, the numbers N and M will be less than 1000.",
  "Output": "17\n23\n1\n19\n5",
  "Title": "COCI07 #3 - Redoks",
  "Input": "7 5\n9081337\n1 3\n3 7\n1 3\n3 7\n1 3"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "In a nearby village, the postman, milkman and garbage man face the same problem morning after\nmorning: house 18. House 18 is guarded by two dogs that often cause problems. What they don't know\nis that the dogs' behaviour is completely predictable.\nWhen the day starts, one dog is aggressive for A minutes and is then calm for B minutes. Similarly, the\nother dog is aggressive for C minutes, then calm for D minutes. Both dogs repeat their behaviours\nindefinitely, starting a new aggressive period after the calm period, then another calm period etc.\nGiven the arrival times of the postman, milkman and garbage man, determine how many dogs (none,\none or both) attack each of them.",
  "Output": "one\nnone\nnone",
  "Title": "COCI07 #4 - Vauvau",
  "Input": "2 3 4 5\n4 9 5"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Your program will be given an integer X. Find the smallest number larger than X consisting of the\nsame digits as X.",
  "Output": "71127",
  "Title": "COCI07 #4 - Veci",
  "Input": "27711"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Mario is making up silly games again instead of reading Dostoevsky for school. The rules of his newest\ngame follow.\nFirst he chooses a random word from the book. Then he splits the word in two arbitrary places to get\nthree separate words.\nAfter that he reverses the order of the letters in each of those three words (exchanges the first and last\nletters, the second and second last and so on).\nFinally, he puts the three words back together in the same order in which they were before splitting.\nThe goal of the game is to obtain the lexicographically smallest word possible. In other words, of all\nwords that can be obtained by the above procedure, find one which would be earliest in a dictionary.\nWrite a program that plays Mario's game perfectly.",
  "Output": "aanadnok",
  "Title": "COCI07 #4 - Lektira",
  "Input": "anakonda"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "\"The Drinking Musicians\", a widely known and popular folk group, are coming to your town. The\nmusicians are known not only by their playing skills, but also their rough character. They never arrive\non time, don't know which town they're in, and frequently have trouble finding the stage.\nAdditionally, during the concert, each of the musicians at one point takes a break. If three or more of\nthem are on a break at the same time, they start stirring trouble in town and the rest of the group start\npanicking and playing the wrong chords.\nThe concert will be T minutes long, during which each of the N members will take a break. The length\nof the break is known for each member.\nHelp the organizer of the concert by writing a program that determines how to schedule the breaks of\nthe member so that, at any given moment, at most two are absent from the stage. All breaks must be\nentirely during the concert.",
  "Output": "3 3 9 0 0",
  "Title": "COCI07 #4 - Muzicari",
  "Input": "10 5\n7 5 1 2 3"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Mirko got a set of intervals for his birthday. There are many games he can play with them. In one of\nthem, Mirko must find the longest sequence of distinct intervals such that each interval in the\nsequence is in the set and that each interval contains the one that follows in the sequence.\nWrite a program which finds one such longest sequence.",
  "Output": "5\n1 7\n1 6\n1 5\n2 5\n3 5",
  "Title": "COCI07 #4 - Poklon",
  "Input": "6\n1 4\n1 5\n1 6\n1 7\n2 5\n3 5"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "A robot and five cubes are placed on an infinite board composed of unit squares. The robot and the\ncubes occupy one square each.\nThe robot can be moved in each of four directions: up, down, left and right. If the square the robot\nwould enter contains a cube, then the robot pushes it in the direction of movement.\nThe cubes possess curious magnetic properties. When two cubes are in neighbouring squares (squares\nthat share a side), they join and become one object. If the robot pushes a cube that is joined with one\nor more other cubes, all cubes in the group move together.\nWrite a program that controls the robot so that it joins all cubes into a single group which (when\nviewed from above) forms the letter T in the upright position (it may not be rotated).",
  "Output": "URRDLLURUULDDLLLDR",
  "Title": "COCI07 #4 - Kocke",
  "Input": "-2 0\n-1 -1\n0 -2\n1 0\n0 1"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Little Mirko wrote into his math notebook an equation containing three positive integers, the equals\nsign and one of the four basic arithmetic operations (addition, subtraction, multiplication and division).\nDuring another class, his friend Slavko erased the equals sign and the operations from Mirko's\nnotebook.\nHelp Mirko by reconstructing the equation from the three integers.",
  "Output": "5=15/3",
  "Title": "COCI07 #5 - Tri",
  "Input": "5 15 3"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Little Frane is already in tenth grade, but is still struggling with Pascal in computer class. For\nhomework, his teacher wrote the following program into his notebook, and he needs to determine the\noutput, given the integer N.\n\n    readln(N);\n    counter := 0;\n    for i := N-1 downto 1 do begin\n        counter := counter + 1;\n        if N mod i = 0 then break;\n    end;\n    writeln(counter);\n\n\nWrite a program which solves Frane's problem.",
  "Output": "18",
  "Title": "COCI07 #5 - Pascal",
  "Input": "27"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Ante bought a piece of land. The land contains N apple trees, but his piece is triangular and it is not\neasy for him to determine which apple trees belong to him.\nYour program will be given the coordinates of the vertices of the triangle forming Ante's piece, and the\ncoordinates of all apple trees. Determine the area of land belonging to Ante, and the number of trees\nbelonging to him. We consider apple trees on the very border of his piece to belong to him.\nThe area of a triangle with vertices (xA, yA), (xB, yB) and (xC, yC) is given by the following formula:\n",
  "Output": "15.5\n2",
  "Title": "COCI07 #5 - Jabuke",
  "Input": "2 6\n5 1\n7 8\n5\n1 4\n3 5\n6 4\n6 5\n4 7"
}{
  "Description": "Luka is slacking again during chemistry class, while the teacher is explaining Avogadro's law.\nLuka first drew a table consisting of 3 rows and N columns. Then he wrote the numbers 1 to N into\nthe first row in arbitrary order, each number appearing exactly once. In the other two rows he also\nwrote integers between 1 and N, but didn't care how many times a number appeared.\nLuka can now delete any set of columns from the table. After doing so, he sorts the numbers in each\nrow in ascending order.\nHe wants to obtain a table in which all three rows are identical after sorting. Write a program that\ndetermines the smallest number of columns he must delete.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Scoring": "In test cases worth 40% of points, N will be less than 100.\nIn test cases worth 70% of points, N will be less than 10\u00a0000.",
  "Output": "2\nIn the first example, Luka needs to delete the second, fourth, sixth and seventh columns. After deleting\nthe columns and sorting each row, all three rows contain the numbers 1, 3 and 5.",
  "Title": "COCI07 #5 - Avogadro",
  "Input": "9\n1 3 5 9 8 6 2 4 7\n2 1 5 6 4 9 3 4 7\n3 5 1 9 8 6 2 8 7"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Barica is an unusual frog. She lives in a pond where N plants float on the surface of the water. The\nplants are numbered 1 through N. When viewing from above, the location of each plant is given by a\npair of coordinates. What makes Barica unusual is her fear of jumping diagonally and in the negative\ndirection. More precisely, she can jump from a plant at coordinates (x1, y1) to another at coordinates (x2, y2) only if:\nx2 > x1 and y2 = y1, or\ny2 > y1 and x2 = x1\nFor each plant, we know the number of flies in its immediate vicinity. Barica can use her swift tongue\nto eat all flies near the plant she is at.\nBarica absorbs one energy unit for each fly she eats, and uses K energy units for each jump she makes.\nBarica can not make a jump if she doesn't have enough energy units beforehand.\nBarica wants to go from plant 1 to plant N and have the largest amount of energy possible after\narriving. Barica initially has no energy and must gather energy for her first jump from the flies around\nplant 1.\nFind the sequence of plants Barica should travel to achieve her goal.",
  "Output": "2\n3\n5 5\n7 5\n7 7",
  "Title": "COCI07 #5 - Barica",
  "Input": "9 5\n5 5 10\n6 5 2\n7 5 1\n5 6 2\n6 6 6\n7 6 2\n5 7 1\n6 7 2\n7 7 1"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "2.00s",
  "Description": "The longest common prefix of two words is the longest word that both words start with. For example,\nthe longest common prefix of the words \"identity\" and \"idealistic\" is the word \"ide\".\nA database contains N words.\nThe algorithm to search for a query word W in the database is primitive. It compares the word W one\nby one with each word in the database. Two words are compared letter by letter until a letter in which\nthey differ is found or until the end of one of the words is reached (it is then established either that the\nwords are equal or that one is longer than the other). When the algorithm finds the word W in the\ndatabase, it terminates.\nAnalysing the algorithm shows that the number of steps needed to find a word W is equal to the\nnumber of words W is compared to, plus the sum of the lengths of the longest common prefixes of W\nand each of the words it was compared to.\nWrite a program that calculates the number of steps the algorithm uses to find each of the Q query\nwords.",
  "Output": "8\n29\n14\nIn the second example, the number of steps to search for the word \"krampus\" is 8 because the\nalgorithm only needs to compare its first letter to each word in the database.\nWhen searching for the word \"malnar\", we need three steps for each of the first three words, and four\nsteps for each of the remaining five words, for a total of 29 steps.\nTo find the word \"majmun\" we use a total of 14 steps. For the first word in the database, we have six\nsuccessful comparisons and one step in which we determine that the word \"majmunica\" is longer than\nthe query word. For the second word, we also have six successful comparisons and a final step in which\nit is established that the words are equal. After finding the word, the algorithm terminates with great\njoy.",
  "Title": "COCI07 #5 - Baza",
  "Input": "8\nmajmunica\nmajmun\nmajka\nmalina\nmalinska\nmalo\nmaleni\nmalesnica\n3\nkrampus\nmalnar\nmajmun"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Having dropped out of school because of chemistry, Luka got a job driving trucks. One evening he\nparked his three trucks in a rest area which charges for parking in an unusual way \u2013 they give a discount\non quantity.\nWhen only one truck is parked, the driver pays A kuna per minute. When two trucks are parked, the\ndrivers each pay B kuna per minute. When three trucks are parked, the drivers each pay C kuna per\nminute.\nGiven the numbers A, B and C, as well as the intervals in which Luka's three trucks are parked,\ndetermines how much Luka needs to pay the owner of the rest area.",
  "Output": "480",
  "Title": "COCI07 #6 - Parking",
  "Input": "10 8 6\n15 30\n25 50\n70 80\n"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Luka is driving his truck along a long straight road with many traffic lights. For each traffic light he\nknows how long the red and green lights will be on (the cycle repeating endlessly).\nWhen Luka starts his journey, all traffic lights are red and just started their cycle. Luka moves one\ndistance unit per second. When a traffic light is red, he stops and waits until it turns green.\nWrite a program that determines how much time Luka needs to reach the end of the road. The start of\nthe road is at distance zero, the end at distance L.",
  "Output": "36\nIn the first example, Luka will wait 2 seconds at the first traffic light. After that he will reach the second\ntraffic light while it is green and be able to pass through immediately.",
  "Title": "COCI07 #6 - Semafori",
  "Input": "4 30\n7 13 5\n14 4 4\n15 3 10\n25 1 1"
}{
  "Description": "Luka started driving international routes with his truck. His biggest problem is the border with\nSlovenia. The border is a point of entrance into the European Union, so every truck is thoroughly\nexamined. Because of this, Luka always has to wait several hours there. To kill the time, he comes up\nwith various logic and math games.\nIn one of them, Luka first reads the numbers off of N license plates and writes them down on a piece\nof paper. Then he tries to find an integer M greater than 1 such that all integers on the paper give the\nsame remainder when divided by M. Luka tries to find as many such integers M as possible.\nWrite a program that, given Luka's N integers, determines all such integers M.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Scoring": "In test cases worth 60% points, each of the N numbers will be at most 10\u00a0000.",
  "Output": "3\nIn the first example, all integers give a remainder of 0 when divided by 2 and the remainder 2 when\ndivided by 4.",
  "Title": "COCI07 #6 - Granica",
  "Input": "5\n5\n17\n23\n14\n83"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Last week Mister George visited Croatia. Since Mister George is a very important person, while he was\nin a street, the police disallowed entry to that street, but vehicles that entered the street before Mister\nGeorge could continue driving.\nWhile Mister George was visiting, Luka drove his truck around town. But because of some of the\nstreets being closed off, he couldn't make his delivery in time and almost lost his job. Although it is late\nnow, he is wondering how he could have planned his delivery better i.e. what would have been the least\ntime needed to make his delivery while Mister George was visiting. He knows the route mister George\ntook.\nThe city is modeled with intersections and two-way streets connecting them. For each street, Luka\nknows how much time he needs to traverse it (mister George needs the same amount of time).\nFor example, if Mister George starts traversing a street during minute 10 and needs 5 minutes to exit it,\nthis street will be blocked during minutes 10, 11, 12, 13 and 14. Luka can enter the street during\nminutes 9 and earlier, or 15 and later.\nWrite a program that calculates the least amount of time Luka needs to make his delivery, if he starts\ndriving K minutes after the arrival of Mister George.",
  "Output": "40",
  "Title": "COCI07 #6 - George",
  "Input": "8 9\n1 5 5 5\n1 2 3 4 5\n1 2 8\n2 7 4\n2 3 10\n6 7 40\n3 6 5\n6 8 3\n4 8 4\n4 5 5\n3 4 23"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Luka parked his truck near the lake. The lake is inhabited by the frog Barica, who jumps across N\nplants floating on the lake's surface. Knowing a fair number of folk tales, Luka knows that if he kisses\nBarica, she will turn into a beautiful princess. However, he needs to catch her first!\nAssuming an aerial view, the position of a plant on the lake's surface can be defined with a pair of\ncoordinates. From plant (x, y) Barica can jump:\nTo plant (x+P, y+P), for any positive integer P. Call this direction A.\nTo plant (x+P, y\u2212P), for any positive integer P. Call this direction B.\nTo plant (x\u2212P, y+P), for any positive integer P. Call this direction C.\nTo plant (x\u2212P, y\u2212P), for any positive integer P. Call this direction D.\nBarica selects one of the four directions and jumps onto the first plant in the chosen direction. If there\nis no plant in the selected direction, Barica stays where she is. After Barica jumps, the plant she\njumped from sinks and disappears.\nKnowing the locations of the plants and the sequence of directions Barica chooses, Luka wants to\ndetermine coordinates of the plant Barica will end up on. Luka will wait for her at that plant, ambush\nher and kiss her.\nWrite a program that solves Luka's problem and helps him turn Barica into a beautiful princess.",
  "Output": "5 3",
  "Title": "COCI07 #6 - Princeza",
  "Input": "6 12\nAAAAAABCCCDD\n1 1\n2 2\n3 3\n4 4\n5 3\n6 2"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "In a single day, N of Luka's trucks travel a specific highway. The highway has a number of exits and\nentrances. An exit with a particular number is in the same location as the entrance with that number.\nUpon entering the highway, a truck driver receives a ticket which indicates the entrance he used. When\nexiting, the driver pays a toll equal to the absolute difference of the entrance and exit numbers. For\nexample, if a ticket says he used entrance 30, then exiting at exit 12 will cost him 18.\nLuka has figured out a way to save toll money that his company daily spends. Any two drivers can meet\non the highway and exchange tickets, even if their routes don't overlap. Tickets can be exchanged an\narbitrary number of times.\nHowever, a driver cannot use an exit if his ticket says he used the same entrance, since that\nwould be suspicious.\nWrite a program that calculates the least total amount of tolls that the drivers can achieve by\nexchanging tickets.",
  "Output": "5\nIn the first example, the first and third drivers will exchange tickets. After this, the second and third\ndrivers exchange tickets. After this, the drivers will have the tickets 60, 3, 45, respectively. The total\namount in tolls is |65\u221260| + |10\u22123| + |25\u221245| = 32.",
  "Title": "COCI07 #6 - Cestarine",
  "Input": "3\n5 5\n6 7\n8 8"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "A level is being designed for a new platform game. The locations of the platforms have been chosen.\nContrary to popular opinion, platforms can't float in the air, but need pillars for support. More\nprecisely, each of the two ends of the platform needs to be supported by a pillar standing on the\nfloor or on a different platform.\nYou will be given the locations of the platforms in a coordinate system as in the left image below. Each\nplatform's location is determined by its altitude (vertical distance from the ground) and the start and\nend coordinates in the horizontal direction. Each support pillar is placed half a unit from the end of a\nplatform, as in the right image.\nDetermine the total length of pillars needed to support all the platforms.",
  "Output": "200",
  "Title": "COCI07 Regional - Platforme",
  "Input": "5\n50 50 90\n40 40 80\n30 30 70\n20 20 60\n10 10 50"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Against his own will, Nikola has become the main character in a game. The game is played on a row of\nN squares, numbered 1 to N. Nikola is initially in square 1 and can jump to other squares. Nikola's first\njump must be to square 2. Each subsequent jump must satisfy two constraints:\nIf the jump is in the forward direction, it must be one square longer than the preceding jump.\nIf the jump is in the backward direction, it must be exactly the same length as the preceding\njump.\nFor example, after the first jump (when on square 2), Nikola can jump back to square 1 or forwards to\nsquare 4.\nEvery time he enters a square, Nikola must pay an entry fee. Nikola's goal is to get from square 1 to\nsquare N as cheaply as possible. Write a program that determines the smallest total cost for Nikola to\nget to square N.",
  "Output": "14\nIn the first example, after jumping to square 2, Nikola jumps back to square 1. From there he can jump\nto square 3 and then to 6.",
  "Title": "COCI07 Regional - Nikola",
  "Input": "8\n2\n3\n4\n3\n1\n6\n1\n4"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Lisa works as a waitress in a restaurant. Tonight is her birthday so Lisa asked the chef to prepare his\nspecial meal for her friends. The chef's meal is made of N ingredients. To prepare one serving of the\nmeal he needs a certain amount of each ingredient.\nThere are some ingredients already available in the kitchen and Lisa will buy the rest at the grocery\nstore. The store has all the necessary ingredients, each coming in smaller and larger packages. Lisa has\nM dollars and wants to spend them so that the chef can make the most servings of his meal.",
  "Output": "2\nIn the first example, for 99 dollars Lisa will buy three smaller and one larger package of the first\ningredient, as well as one smaller and two larger packages of the second ingredient (3\u00b710 + 1\u00b711 + 1\u00b710 + 2\u00b724 = 99).\nThe chef will then have 51 units (8 + 3\u00b710 + 1\u00b713) of the first ingredient and 60 units (20 + 1\u00b76 + 2\u00b717)\n",
  "Title": "COCI07 Regional - Kuhar",
  "Input": "3 65\n10 5 7 10 13 14\n10 5 8 11 14 15\n10 5 9 12 15 16"
}{
  "Examples": "",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "While browsing a math book, Mirko found a strange equation of the form A=S. What makes the\nequation strange is that A and S are not the same. Mirko realized that the left side of the equation\nshould have addition operations between some pairs of digits in A.\nWrite a program that inserts the smallest number of addition operations on the left side to make the\nequation correct. The numbers in the corrected equation may contain arbitrary amounts of leading\nzeros.",
  "Output": "9+9+9+89+9=125",
  "Title": "COCI07 Regional - Jednakost",
  "Input": "999899=125"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Three kangaroos are playing in the desert. They are playing on a number line, each occupying a\ndifferent integer. In a single move, one of the outer kangaroos jumps into the space between the other\ntwo. At no point may two kangaroos occupy the same position.",
  "Output": "3",
  "Title": "COCI08 #1 - Skocimis",
  "Input": "3 5 9"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Adrian, Bruno and Goran wanted to join the bird lovers' club. However, they did not know that all\napplicants must pass an entrance exam. The exam consists of N questions, each with three possible\nanswers: A, B and C.\nUnfortunately, they couldn't tell a bird from a whale (they are only interested in the cute girls in the club) so they are trying to guess the correct answers.\nEach of the three boys has a theory of what set of answers will work best:\nAdrian claims that the best sequence is: A, B, C, A, B, C, A, B, C, A, B, C ...\nBruno is convinced that this is better: B, A, B, C, B, A, B, C, B, A, B, C ...\nGoran laughs at them and will use this sequence: C, C, A, A, B, B, C, C, A, A, B, B ...\nWrite a program that, given the correct answers to the exam, determines who of the three was right \u2014\nwhose sequence contains the most correct answers.",
  "Output": "4\nAdrian\nBruno\nGoran",
  "Title": "COCI08 #1 - Ptice",
  "Input": "9\nAAAABBBBB"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Archeologists recently found the remains of Greco-Roman architecture. The location can be modeled\nas a grid of R\u00b7C square cells. For each of the cells, archeologists have determined if some building was\nthere or if the cell has always been empty.\nAfter examining the artifacts in detail, they concluded that the location contains two buildings from\ndifferent periods in time, and that the floor plans of both buildings are of square shape.\nBecause the buildings were from different periods in time, it is possible that their floor plans overlap.\nDetermine the possible location and size (length of the side of the square occupied by the floor plan)\nfor each building.",
  "Output": "2 1 3\n3 2 3",
  "Title": "COCI08 #1 - Mravojed",
  "Input": "5 5\n.....\nxxx..\nxxxx.\nxxxx.\n.xxx."
}{
  "Description": "Luka found a very unusual game board in his attic. Surprisingly, it consists of R\u00b7C square cells. The\nrows are numbered 0 to R-1 top to bottom and the columns 0 to C-1 left to right.\nWhat makes the board unusual is the way in which the cells are coloured. Each cell is either grey or white:\nwhite, if the row and column numbers of the cell, when represented in binary, have at least one\ndigit 1 in the same position. For example, the cell (4, 5) would be white.\ngrey, otherwise. For example, the cell (2, 5) would be grey.\n\nLuka's hedgehog likes walking on this unusual board and does it in an unusual way. The hedgehog\nstarts his walk in the cell (0, 0) and continues in the zig-zag pattern as in the second image above. While\nthe hedgehog is walking, Luka counts how many grey squares it visited.\nAfter visiting K squares, the hedgehog gets tired and falls asleep. Luka then goes to bed too, happy that\nhe was able count the grey squares.\nKnowing the dimensions of the board and the number K beforehand, however, it is possible to write a\nprogram that calculates the result faster. This is your task.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Scoring": "",
  "Output": "51",
  "Title": "COCI08 #1 - Jez",
  "Input": "10 10\n100"
}{
  "Input": "5\n3 3\n20 16 25 17 12\n11 13 13 30 17\n15 29 10 26 11\n27 19 14 24 22\n23 21 28 18 13",
  "Examples": "",
  "Memory Limit": "35M",
  "Time Limit": "10.00s",
  "Description": "A grasshopper is in a flower field. The field contains N\u00b7N flowers arranged in N rows and N columns.\nFor each flower in the field, we know how many petals it has.\nThe grasshopper is initially on the flower in row R and column C. Its goal is to visit as many flowers as\npossible while obeying these rules:\n\n\t\tIt can only jump into an adjacent row or column. If it jumps into the adjacent row, it must jump\n\t\tat least two columns, and if it jumps into the adjacent column, it must jump at least two rows.\n\t\tIn other words, it can jump from flower (r1, c1) to flower (r2, c2) if:\n\t\n|r1 - r2| = 1 and |c1 - c2| > 1 or\n|c1 - c2| = 1 and |r1 - r2| > 1\n\n|r1 - r2| = 1 and |c1 - c2| > 1 or\n|c1 - c2| = 1 and |r1 - r2| > 1\n\n\t\tThe number of petals on the next flower must be strictly larger than the number of petals on the previous flower.\n\t",
  "Output": "21",
  "Title": "COCI08 #1 - Skakavac",
  "Grading": ""
}{
  "Input": "7\n1 3\n2 3\n2 7\n4 3\n7 5\n3 6",
  "Examples": "",
  "Memory Limit": "128M",
  "Time Limit": "3.00s",
  "Description": "Moles are tidy and hard-working animals. Our mole likes to keep its underground residence in utmost\norder, so that everyone living there knows where to find things.\nTo achieve this, the mole connected rooms with tunnels so that there is a single unique way to get from\none room to any other room. The distance between two rooms is the number of halls passed on the\nway from one to the other.\nDespite all the effort, some of the mole's guests are complaining that it takes too long to walk between\ncertain pairs of rooms.\nThe mole decided to reconstruct her residence, closing one tunnel and opening a new one, so that the\ndistance between the farthest two rooms is the smallest possible, but so that it is still possible to\nreach every room from every other room.\nWrite a program which determines the distance between the farthest two rooms after reconstruction,\nwhich tunnel to close and which to open.",
  "Output": "3",
  "Title": "COCI08 #1 - Krtica",
  "Grading": ""
}{
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Kornislav the turtle never has anything interesting to do. Since he's going to live for three hundred\nyears, he keeps trying to find way to kill time. This weekend he started playing \"enclose the largest\nrectangle\".\nTo start with, Kornislav needs four positive integers. He tries to enclose a rectangle by moving in one\ndirection, then turning 90 degrees, then walking in the new direction etc. Kornislav makes a total of\nthree 90-degree turns and walks four segments.\nWhen walking in some direction, the number of steps he takes must be equal to one of the four chosen\nintegers and each integer must be used exactly once. Depending on the order in which Kornislav uses\nthe integers, his walk will make various shapes, some of which don't contain enclosed rectangles.\nWrite a program that calculates the largest rectangle the turtle can enclose with its walk.",
  "Output": "12\nIn the first example, one possible way for Kornislav to enclose a rectangle of area 3:\nMake 4 steps forward;\nTurn right;\nMake 1 step forward;\nTurn right;\nMake 3 steps forward;\nTurn right;\nMake 2 steps forward.",
  "Title": "COCI08 #2 - Kornislav",
  "Input": "4 4 3 4"
}{
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The sieve of Eratosthenes is a famous algorithm to find all prime numbers up to N. The algorithm is:\nWrite down all integers between 2 and N, inclusive.\nFind the smallest number not already crossed out and call it P; P is prime.\nCross out P and all its multiples that aren't already crossed out.\nIf not all numbers have been crossed out, go to step 2.",
  "Output": "9\nIn the third example, we cross out, in order, the numbers 2, 4, 6, 8, 10, 3, 9, 5 and 7. The seventh\nnumber is 9.",
  "Title": "COCI08 #2 - Reseto",
  "Input": "10 7"
}{
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "The local zoo has acquired a large open garden in which animals may freely move as in their natural\nhabitats and entertain visitors with their usual shenanigans.\nThe most popular animals are monkeys. With their climbing and jumping and other skills, they delight\nold and young visitors alike.\nOne species of monkey has specialized in climbing tall trees and picking off coconuts. Another species\nhas specialized in breaking them open.\nThere are N monkeys of the first type (numbered 1 through N) and M monkeys of the second type\n(numbered 1 through M).\nMonkey k of the first type takes Ak seconds to find a good spot on the tree, after which it picks off its\nfirst coconut. After that the monkey produces a new coconut every Bk seconds.\nMonkey k of the second type takes Ck seconds to find a good spot on the tree, after which it picks off\nits first coconut. After that the monkey produces a new coconut every Dk seconds.\nUnfortunately, the second type of monkey is extremely aggressive so the two types may not be in the\ngarden at the same time. Therefore, zoo keepers will chase away the first type of monkeys as soon as\nthey have picked off all the coconuts. Similarly, if monkeys of the same type stay too long after opening\nall the coconuts, fights will ensue. Because of that, zoo keepers will send them away as soon as they\nhave opened all the coconuts.\nThe zoo keepers first arrive immediately after all coconuts have been picked, and again immediately\nafter the monkeys open them all. The time needed for monkeys to enter or leave the garden is also\nnegligibly small.\nTomislav especially likes the second type of monkey, but can never guess when to arrive in order to see\nthem. Help him calculate the time when the second type arrives if he knows the total time that\nmonkeys spent in the garden, but does not know the number of coconuts in the garden.",
  "Output": "13\nIn the first example, it turns out there are three coconuts in the garden:\nThe monkey of the first type picks off the first coconut 3 seconds after the garden was opened.\nThe monkey picks off the second coconut 4 seconds after the garden is opened.\nThe monkey picks off the third coconut 5 seconds after the garden is opened.\nZoo keepers come in and escort the monkey out. The monkey of the second type arrives. The output is 5 because this is when Tomislav wants to arrive.\nThe monkey of the second type opens the first coconut 10 seconds after the garden was opened.\nThe monkey opens the second coconut 11 seconds after the garden was opened.\nThe monkey opens the third coconut 12 seconds after the garden was opened.\nZoo keepers come in and escort the monkey out.",
  "Title": "COCI08 #2 - Svada",
  "Input": "20\n2\n3 2\n1 3\n3\n3 1\n4 1\n5 1"
}{
  "Description": "In an infinite binary tree:\nEach node has exactly two children \u2014 a left and a right child.\nIf a node is labeled with the integer X, then its left child is labeled 2\u00b7X and its right child 2\u00b7X+1.\nThe root of the tree is labeled 1.\nA walk on the binary tree starts in the root. Each step in the walk is either a jump onto the left child,\nonto the right child, or pause for rest (stay in the same node).\nA walk is described with a string of letters 'L', 'R' and 'P':\n'L' represents a jump to the left child;\n'R' represents a jump to the right child;\n'P' represents a pause.\nThe value of the walk is the label of the node we end up on. For example, the value of the walk LR is\n5, while the value of the walk RPP is 3.\nA set of walks is described by a string of characters 'L', 'R', 'P' and '*'. Each '*' can be any of the three\nmoves; the set of walks contains all walks matching the pattern.\nFor example, the set L*R contains the walks LLR, LRR and LPR. The set ** contains the walks LL, LR,\nLP, RL, RR, RP, PL, PR and PP.\nFinally, the value of a set of walks is the sum of values of all walks in the set.\nCalculate the value of the given set of walks.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "2.00s",
  "Scoring": "",
  "Output": "35400942560",
  "Title": "COCI08 #2 - Setnja",
  "Input": "LLLLLRRRRRLLLLLRRRRRLLLLLRRRRRLLLLL"
}{
  "Description": "Mirko found a wooden board and N nails in his attic. Mirko hammered the nails into the board as fast\nas possible. The board can be modeled by a coordinate plane and the nails as points in it. No two nails\nhave the same x or the same y coordinate.\nIn order to keep having fun, Mirko stole his sister's elastic hair band, spread it over all nails and then let\ngo. The elastic, naturally, tightened around the nails.\nMirko then repeats these steps while there are at least three nails in the board:\nWrite down the area of the shape enclosed by the hair band.\nPicks the leftmost, rightmost, topmost or bottommost nail in the board.\nRemove the chosen nail from the board; the elastic tightens again around the remaining nails.\nWrite a program that calculates the numbers written in step 1 of each iteration, if we know the nail\nMirko picks in step 2 of each iteration.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "3.00s",
  "Scoring": "",
  "Output": "34.0\n24.0\n16.5\n14.0\n9.5\n5.0\nThe images below illustrate the state before each of the 6 steps in the second example.",
  "Title": "COCI08 #2 - Cavli",
  "Input": "8\n1 6\n2 4\n3 1\n4 2\n5 7\n6 5\n7 9\n8 3\nURDLUU"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "2.00s",
  "Description": "In the popular show \"Dinner for Five\", five contestants compete in preparing culinary delights. Every\nevening one of them makes dinner and each of other four then grades it on a scale from 1 to 5.\nThe number of points a contestant gets is equal to the sum of grades they got. The winner of the show\nis of course the contestant that gets the most points.\nWrite a program that determines the winner and how many points they got.",
  "Output": "2 17",
  "Title": "COCI08 #3 - Pet",
  "Input": "4 4 3 3\n5 4 3 5\n5 5 2 4\n5 5 5 1\n4 4 4 4"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "2.00s",
  "Description": "Luka  is  fooling  around  in  chemistry  class  again!  Instead  of  balancing  equations  he  is writing  coded \nsentences  on  a  piece  of paper. Luka modifies  every word  in  a  sentence  by  adding,  after  each  vowel \n(letters 'a', 'e', 'i', 'o' and 'u'), the letter 'p' and then that same vowel again. \n\nFor  example,  the  word  \"kemija\"  becomes  \"kepemipijapa\"  and  the  word  \"paprika\"  becomes \n\"papapripikapa\". The teacher took Luka's paper with the coded sentences and wants to decode them. \nWrite a program that decodes Luka's sentence. ",
  "Output": "bas je dosadna ova kemija ",
  "Title": "COCI08 #3 - Kemija",
  "Input": "bapas jepe doposapadnapa opovapa kepemipijapa"
}{
  "Description": "A matrix is a rectangular table of letters. A square matrix has an equal number of rows and\ncolumns. A square matrix M is called symmetric if its letters are symmetric with respect to the main\ndiagonal (Mij = Mji for all pairs of i and j).\nThe following figure shows two symmetric matrices and one which is not symmetric:\n\t\t\t\nAAB        AAA\nACC        ABA\nBCC        AAA\n\t\t\t\nABCD        AAB\nABCD        ACA\nABCD        DAA\nABCD           \n\t\t\t\nGiven a collection of available letters, you are to output a subset of columns in the lexicographically\nsmallest symmetric matrix which can be composed using all the letters.\nIf no such matrix exists, output \"IMPOSSIBLE\".\nTo determine if matrix A is lexicographically smaller than matrix B, consider their elements in rowmajor\norder (as if you concatenated all rows to form a long string). If the first element in which the\nmatrices differ is smaller in A, then A is lexicographically smaller than B.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "2.00s",
  "Scoring": "",
  "Output": "IMPOSSIBLE",
  "Title": "COCI08 #3 - Matrica",
  "Input": "4 6\nF 1\nE 3\nA 3\nB 3\nC 3\nD 3\n4\n1 2 3 4"
}{
  "Description": "A binary search tree is a tree in which every node has at most two child nodes (a left and a right child). Each node had an integer written insude it. If the number X is written inside a node, then the numbers in its left subtree are less than X and the numbers in its right subtree are greater than X.\nYou will be given a sequence of integers between 1 and N such that each number appears in the sequence exactly once. You are to create a binary search tree from the sequence, putting the first number in the root node and inserting every other number in order. In other words, run insert( X, root ) for every other number:\ninsert( number X, node N )\n   increase the counter C by 1\n   if X is less than the number in node N\n      if N has no left child\n         create a new node with the number X and set it to be the left child of node N\n      else\n         insert( X, left child of node N )\n   else (X is greater than the number in node N)\n      if N has no right child\n         create a new node with the number X and set it to be the right child of node N\n      else\n         insert( X, right child of node N )\nWrite a program that calculates the value of C after every number is inserted. You may assume the counter is initially 0.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "2.00s",
  "Scoring": "In test cases worth 50% of points, N will be at most 1000.",
  "Output": "0\n1\n2\n4\n7\n11\n13\n15",
  "Title": "COCI08 #3 - BST",
  "Input": "8\n3\n5\n1\n6\n8\n7\n2\n4"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "5.00s",
  "Description": " A road network in a country consists of N cities and M one-way roads. The cities are numbered 1 through N. For each road we know the origin and destination cities, as well as its length. We say that the road F is a continuation of road E if the destination city of road E is the same as the origin city of road F. A path from city A to city B is a sequence of road such that origin of the first road is city A, each other road is a continuation of the one before it, and the destination of the last road is city B. The length of the path is the sum of lengths of all roads in it. A path from A to B is a shortest path if there is no other path from A to B that is shorter in length.\n Your task is to, for each road, output how many different shortest paths containing that road, modulo 1,000,000,007.",
  "Output": "0\n4\n6\n6\n6\n7\n2\n6",
  "Title": "COCI08 #3 - Najkraci",
  "Input": "5 8\n1 2 20\n1 3 2\n2 3 2\n4 2 3\n4 2 3\n3 4 5\n4 3 5\n5 4 20"
}{
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "If the number on the first piece is greater than the number\non the second piece, swap them.\nIf the number on the second piece is greater than the\nnumber on the third piece, swap them.\nIf the number on the third piece is greater than the number\non the fourth piece, swap them.\nIf the number on the fourth piece is greater than the\nnumber on the fifth piece, swap them.\nIf the pieces don't form the sequence 1, 2, 3, 4, 5, go to\nstep 1.",
  "Output": "2 3 4 1 52 3 1 4 52 1 3 4 51 2 3 4 5",
  "Title": "COCI08 #4 - Mjehuric",
  "Input": "2 3 4 5 1"
}{
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Write a program that, given a date in 2009, determines the day of week on that date.",
  "Output": "Friday",
  "Title": "COCI08 #4 - Datum",
  "Input": "25 9"
}{
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "    e   d f  c e g b d f ha c e g i b d f h  c e g   d f    e",
  "Title": "COCI08 #4 - Rot",
  "Input": "5 5abcdebcdefcdefgdefghefghi315"
}{
  "Description": "If the picture is a single pixel, he colours it the way he\nintended.\nOtherwise, split the square into four smaller squares and\nthen:\n\nSelect one of the four squares and colour it white.\nSelect one of the three remaining squares and colour it\nblack.\nConsider the two remaining squares as new paintings and\nuse\nthe same three-step process on them.\n\n\nSelect one of the four squares and colour it white.\nSelect one of the three remaining squares and colour it\nblack.\nConsider the two remaining squares as new paintings and\nuse\nthe same three-step process on them.",
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Scoring": "",
  "Output": "160000000100000011000001110000111111110111111100111111000111110000",
  "Title": "COCI08 #4 - Slikar",
  "Input": "80101000110100011010101111010111101010111101000110101000110100000"
}{
  "Examples": "",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "Luka is bored in chemistry class so he is staring at a large periodic table of chemical elements hanging\nfrom  a  wall  above  the  blackboard.  To  kill  time,  Luka  decided  to  make  his  own  table  completely\ndifferent from the one in the classroom. \nHis  table consists of N columns, each with  some height, aligned at  the bottom  (see example below).\nAfter he draws the table he needs to fill  it with elements. He first decided to enter the noble gases of\nwhich there are K. Luka must put them in the table so that no two noble gases are close to each other.\nTwo squares in the table are close to each other if they are in the same column or row, and all squares\nbetween them exist. In the example below, the 'a' squares are not close, but the 'b' squares are. \n\nWrite a program that, given N, K and the heights of the N columns, calculates the total number of ways for Luka to place the noble gases onto the table. This number can be large, so output it modulo 109+7.",
  "Output": "990979013",
  "Title": "COCI08 #4 - Periodni",
  "Input": "3 2\n999999 999999 999999"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "1000",
  "Title": "COCI08 #6 - Buka",
  "Input": "1\n*\n1000\n"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "  (0,250)\n     |\\\n     | \\ \n     |  \\\n     |   \\\n     |    \\\n     |     \\\n     |      \\\n     |_______\\\n   (0,0)    (250,0)\n",
  "Output": "148.81 101.19",
  "Title": "COCI08 #6 - Bazen",
  "Input": "0 40"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "In the nearby kindergarten they recently made up an attractive game of strength and agility that kids love.\nThe surface for the game is a large flat area divided into N\u00d7N squares.\nThe children lay large cubes onto the surface. The sides of the cubes are the same length as the\nsides of the squares. When a cube is put on the surface, its sides are aligned with some square. A cube\nmay be put on another cube too.\nKids enjoy building forts and hiding them, but they always leave behind a huge mess. Because of this,\nprior to closing the kindergarten, the teachers rearrange all the cubes so that they occupy a rectangle on\nthe surface, with exactly one cube on every square in the rectangle.\nIn one moving, a cube is taken off the top of a square to the top of any other square.\nWrite a program that, given the state of the surface, calculates the smallest number of moves needed to\narrange all cubes into a rectangle.",
  "Output": "3",
  "Title": "COCI08 #6 - Nered",
  "Input": "5 8\n2 2\n3 2\n4 2\n2 4\n3 4\n4 4\n2 3\n2 3"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "impossible",
  "Title": "COCI08 #6 - Cuskija",
  "Input": "3\n3 12 9"
}{
  "Description": "Little Ivica recently got a job delivering pizzas for the most popular pizzeria in town.\nAt the start of his work day, he receives a list with the locations to which he needs to deliver pizzas, in\norder in which the locations are given.\nThe city is divided into R\u00d7C cells. The rows are numbered 1 through R, columns 1 through C.\nFrom every cell, it is possible to move to neighbouring cells to the left and right. Moving up or down is\nonly allowed in the first and last columns (columns 1 and C).\nThe pizzeria is in the top left corner (1, 1) and this is the location Ivica starts from. Ivica takes with him\nall the pizzas he will deliver that day so he does not have to return to the pizzeria between deliveries or\nafter the last delivery.\nFor each location in the city, Ivica knows how much time he will spend every time he is in it (trying to\nget through the intersection, for example).\nWrite a program that calculates the smallest amount of time for Ivica to deliver all the pizzas.",
  "Examples": "",
  "Memory Limit": "128M",
  "Time Limit": "4.00s",
  "Scoring": "",
  "Output": "9",
  "Title": "COCI08 #6 - Dostava",
  "Input": "2 5\n0 0 0 0 0\n1 4 2 3 2\n4\n1 5\n2 2\n2 5\n2 1"
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "3.00s",
  "Description": "After their pool burst, Mirko and Slavko started collecting cards. In their neighbourhood, card\ncollection is taken seriously and there are strict rules for the purchase and trading of cards.\nPurchasing cards is always done by two children together. Each of them gives half the required funds\nand two cards are bought. Then they race to the fountain downtown, the winner getting both cards. If\nthey arrive at the exact same time, each of them gets one of the cards.\nAt first the rules performed okay, but soon accusations started that some kids could not have acquired\ntheir cards only through such purchases.\nOne day all the children met to figure out if there were irregularities. They managed to agree on the\nexact number of cards each of them currently has. They also made a partial list of who went to the\nstore with whom, but they do not know who won any of the races and took the cards on those\noccasions.\nWrite a program that determines who participated in all purchases that were made and who won the\nsubsequent races so that after all the purchases, the cards counts correspond to the given counts.\nAssume that before any purchases, the children had no cards.\nIf there are multiple possible solutions, output any of them.",
  "Output": "5\n1 2 2\n1 3 1\n4 2 2\n3 4 0\n3 5 1",
  "Title": "COCI08 #6 - Slicice",
  "Input": "5 0\n3 0 2 4 1"
}{
  "Example": "Sample Input \nAbcd\nSample Output\n0\nSample Input\nEaEbFabG\nSample Output\n5\nSample Input\nAbcbBccCDefgh\nSample Output\n4",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Mirko purchased a new microprocessor. Unfortunately, he soon learned that many of his programs that he wrote for his old processor didn't work on the new processor.\nDeep inside the technical documentation for both processors, he found an explanation. In order to work faster, the new processor imposes certain constraints on the machine code of programs, constraints that never existed on the previous model.\nThe machine code of a processor consists of instructions that are executed sequentially. Each instruction uses a byte of memory. Also, instructions can have zero or more parameters, each of which uses an additional byte of memory. In machine code, parameters immediately follow an instruction.\nWhen formatted as text, machine code instructions are uppercase letters, while parameters are lowercase letters. For example:\nThis program consists of four instructions; the first takes three parameters, the second two, the third none and the fourth takes four parameters. The program uses 13 bytes of memory.\nThe new processor model fetches memory in four-byte chunks so each instruction must start at a memory address that is divisible by four (the first byte in memory is address 0). To achieve that, we can insert NOP (no operation) instructions into the old program, instructions that do nothing and are not limited to memory locations divisible by four. The above program, adapted to run on the new processor, can look like this:\nThe instructions A, B, C and D are now at memory locations 0, 4, 8 and 12, which satisfies the processor's constraints.\nWrite a program that determines the smallest number of NOP instructions that need to be inserted for the given program to work on the new processor model.",
  "Output": "Output the smallest number of NOP instructions needed to adapt the program for the new processor.",
  "Title": "COCI08 Regional - Nop",
  "Input": "The input contains the machine code of the program written for the old processor model. The program will consist of at most 200 English letters.\nThe program will always start in an instruction i.e. the first letter in the machine code will be uppercase. If an instruction appears more than once in the machine code, it will always take the same number of parameters."
}{
  "Example": "Sample Input \n5SSPPR1SSPPR\nSample Output\n510\nSample Input\n5SSPPR2PPRRSRRSSP\nSample Output\n1015\nSample Input\n4SPRS4RPRPSRRRSSPRPSPS\nSample Output\n1221",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Rock-paper-scissors is a popular two-player game. In the game, each of the players uses their hand to show one of three symbols: rock, paper or scissors. If both players show the same symbol, the game is a tie. Otherwise, scissors beat paper, paper beats rock and rock beats scissors.\nSven has been studying the psychological intricacies of the game for years and has become a real master at the game, his friends not standing a chance against him in one-on-one games. With the world championships around the corner, Sven is practicing his skills playing simultaneous games with N of his friends. One such game consists of R rounds. In each round, Sven and each of his friends show one of the three symbols.\nWhen calculating the score, in each round, Sven's symbol is independently compared to each of his friends' symbols. Sven scores two points for every win and one point for every tie. Sven does not get points for losing.\nWrite a program that calculates Sven's total score, and also his largest possible score had he known in advance all the symbols his friends would show.",
  "Output": "",
  "Title": "COCI08 Regional - Majstor",
  "Input": ""
}{
  "Example": "Sample Input \n3 7........M-.-Z........\nSample Output\n2 4 -\nSample Input\n3 5..1-M1-+..Z.23.\nSample Output\n2 4 4\nSample Input\n6 10Z.1----4..|.|....|..|..14..M..2-+++4......2323..............\nSample Output\n3 3 |",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "To help design the new gas pipeline which will be used to deliver Russian gas to Croatia, Zagreb and Moscow are using the computer game Pipe Mania. In the game, Europe is divided into R rows and C columns. Each cell can be empty or contain one of the seven basic pipeline building blocks:\n\nGas flows from Moscow to Zagreb. Gas can flow in either direction through the building blocks.\n  Block '+' is special in that gas must flow in two directions (one vertical, one horizontal), as in the following example:\n\nWork on the new pipeline had already started when it was found that malicious hackers got hold of the plan and erased exactly one building block from the plan i.e. replaced it with an empty cell.\nWrite a program that determines where the block was erased from and what type it was.",
  "Output": "",
  "Title": "COCI08 Regional - Cijevi",
  "Input": "The first line contains two integers R and C, the dimensions of Europe (1 \u2264 R, C \u2264 25).\nThe following R lines contain the plan, each consisting of exactly C characters. The characters are:\nPeriod ('.'), representing an empty cell;\nThe characters '|' (ASCII 124), '-', '+', '1', '2', '3', '4', representing the building block types;\nThe letters 'M' and 'Z', representing Moscow and Zagreb. Each of these will appear exactly once in the plan.\nThe flow of gas will be uniquely determined in the input; exactly one building block will be adjacent to each of Moscow and Zagreb. Additionally, the plan will not have redundant blocks i.e. all blocks in the plan must be used after the missing block is added.\nThe input will be such that a solution will exist and it will be unique. "
}{
  "Example": "Sample Input \n4 16 3 4\nSample Output\n3\nSample Input\n4 26 3 46 2 2\nSample Output\n35\nSample Input\n5 31 2 22 2 212 5 5\nSample Output\n253",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Ivo has an N\u00d7N table. The table has the integers 1 through N2 inscribed in row-major order. The following operations can be done on the table:\nRotate a row \u2013 all cells in a single row are rotated right, so that the number in the last column moves to the first.\nRotate a column \u2013 all cells in a single column are rotated down, so that the number in the last row moves to the first.\nIvo occasionally feels the urge to move a number X to cell (R, C) and proceeds as follows:\nWhile X is not in column C, rotate the row it is in.\nWhile X is not in row R, rotate the column it is in.\nHere is an example of how to move number 6 to cell (3, 4), start from the initial configuration:\nIvo wants to move K numbers one after another. Write a program that calculates the number of rotations needed.",
  "Output": "",
  "Title": "COCI08 Regional - Tablica",
  "Input": ""
}{
  "Example": "Sample Input \n5 6........xx....x.....xx...xxxx.13\nSample Output\n..............xx....xx...xxxx.\nSample Input\n8 8...................x.xx....xxx....xxx.....x.xxx...x...x..xxx..x.56 6 4 3 1\nSample Output\n.....................................x....xxxx....xxx.x...xxxxx.\nSample Input\n7 6............xx.....xx.....xx.....xx.....x.26 4\nSample Output\n..........................xx..xx.xx..x..x.\nIn the second example:\nThe first stick destroys the chunk in the fourth column at height 6, the second destroying the chunk in the seventh column of the same row.\nThe third stick destroys the chunk in the third column at height 4, after which the starting cluster splits in two, but both new clusters still lay on the ground.\nThe fourth stick destroys the chunk in the seventh column at height 3, splitting the right cluster into two. The largest cluster would float in the air and falls two cells down.\nFinally, the fifth stick destroys a chunk in the second column at height 1.",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "Two groups of cavemen got into a land dispute and decided to settle it the old fashion-way, by throwing sticks at each other. The fight was organized in a cave, high enough that the ceiling is of no concern, but mineral deposits on the ground get in the way of flying sticks.\nThe cave can be divided into R rows and C columns, so that the entire cave consists of R\u00d7C cells. Each cell in the cave is either empty or contains a chunk of mineral. Two chunks of minerals are part of the same cluster if they are adjacent in one of the four main directions (up, down, left, right).\nOne group of cavemen is on the left side of the cave, the other on the right side. The groups alternate throwing sticks at the other group; first a group chooses the height at which the stick will fly and then (climbing on each others' shoulders as necessary) they throw it and the stick flies horizontally through the cave at the chosen height.\nIf the stick hits a chunk of mineral on the way, it destroys the chunk, the cell becomes empty and the stick stops its journey.\nWhen a chunk is destroyed, it is possible that a cluster falls apart. If a newly created cluster would float in the air, then it falls down because of gravity. While falling, the cluster does not change shape i.e. all chunks in it fall together. As soon as some chunk in the falling cluster lands on a chunk from a different cluster or the ground, the entire cluster stops falling. Of course, if a cluster lands on another, they merge and become one.\nYour program will be given the layout of minerals in the cave and the heights at which sticks were thrown. Determine the layout of minerals after the sticks are exchanged.",
  "Output": "",
  "Title": "COCI08 Regional - Reljef",
  "Input": "The first line contains two integers R and C (1 \u2264 R, C \u2264 100), the dimensions of the cave.\nEach of the following R lines will contain C characters. The character '.' represents an empty cell, while the letter 'x' represents a chunk of mineral.\nThe next line contains an integer N (1 \u2264 N \u2264 100), the number of sticks thrown.\nThe last line contains N integers separated by spaces, the heights at which sticks were thrown. All heights will be between 1 and R (inclusive), with height 1 being the bottom of the matrix and height R the top. The first stick is thrown left to right, the second right to left and so on.\nNo cluster will initially float in the air. Also, the input data will be such that at no point will two or more clusters fall simultaneously, so that there will be no ambiguous situations.\n"
}{
  "Example": "Sample Input \n41 43 71 62 6\nSample Output\n0112\nSample Input\n51 33 53 92 43 8\nSample Output\n00032",
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "10.00s",
  "Description": "On a faraway planet, there are strange plants with two stems. Every plant can be described by three numbers: the x-coordinates of the stems L and R, and the height H at which the stems are connect. The image depicts a plant with L=2, R=5 and H=4.\n\nEvery day a new plant grows on the planet. The plant that grows on day 1 is of height 1, and every subsequent plant is one higher than the previous one.\nWhen a stem of a new plant intersects the horizontal segment of another plant, a small flower grows (if one wasn't there already). If segments merely touch in a point, a flower will not grow there. The following images are a visualization of the first example.\n\nWrite a program that, given the coordinates of all plants, calculates the number of new flowers every day.",
  "Output": "",
  "Title": "COCI08 Regional - Cvjetici",
  "Input": ""
}{
  "Examples": "",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "C major scale consists of 8 tones: c d e f g a b C. For this task we number the notes using numbers 1 through 8. The scale can be played ascending, from 1 to 8, descending, from 8 to 1, or mixed. Write a program that, given the sequence of notes, determines wether the scale was played ascending, descending or mixed.",
  "Output": "mixed",
  "Title": "COCI09 #1 - Note",
  "Input": "8 1 7 2 6 3 5 4"
}{
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Sample Tests": "",
  "Output": "2040",
  "Description": "Dominoes are gaming pieces used in numerous tile games. Each doimno piece contains two marks. Each mark consists of a number of spots (possibly zero). The number of spots depends on the set size. Each mark in a size N domino set can contain between 0 and N spots, inclusive. Two tiles are considered identical if their marks have the same number of spots, irregardles of reading order. For example tile with 2 and 8 spot marks is identical to the tile having 8 and 2 spot marks. A proper domino set contains no duplicate tiles. A complete set of size N contains all posible tiles with N or less spots and no duplicate tiles. For example, the complete set of size 2 contains 6 tiles:\n\nWrite a program that will determine the total number of spots on all tiles of a complete size N set.",
  "Second sample description:": "Size 3 set contains tiles: [0|0], [0|1], [0|2], [0|3], [1|1], [1|2], [1|3], [2|2], [2|3] and [3|3].",
  "Title": "COCI09 #1 - Domino",
  "Input": "15"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Lea runs into a lot of words in her life. A lot of them she finds unpleasant. To compensate for that she started making up plesant words. Lea makes up new words by writing a nice looking string of characters on a piece of paper. She than erases a few of the most nasty looking characters and replaces them  underscores '_'. After that she tries to replace the underscores with more acceptable characters trying to form a plesant word.\nLea considers words plesant if they do not contain 3 sequential vowels, 3 sequential consonants and contain at least one letter 'L'.\nIn Croatian vowels are letters A, E, I, O, U only. All other lettters are consonants.",
  "Output": "485",
  "Title": "COCI09 #1 - Dobra",
  "Input": "JA_BU_K_A"
}{
  "Scoring": "Test cases worth 50% of total points have N\u00a0\u2264\u00a0200.",
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko and Slavko are playing a new game. Again. Slavko starts each round by giving Mirko two numbers A and B, both smaller than 100. Mirko then has to slove the following task for Slavko: how to pair all given A numbers with all given B numbes so that the maximal sum of such pairs is as small as possible.\nIn other words, if during previous rounds Slavko gave numbers a1, a2, a3 .... an and b1, b2, b3 ... bn, determine n pairings (ai,\u00a0bj) such that each number in A sequence is used in exactly one pairing, and each number in B sequence is used in exactly one pairing and the maximum of all sums ai\u00a0+\u00a0bj is minimal.",
  "Output": "2\n3\n4",
  "Title": "COCI09 #1 - Mali",
  "Input": "3\n1 1\n2 2\n3 3"
}{
  "Explanation": "1 2 3 4 5 6\n6 3 5 4 2 1\n1 5 2 4 3 6\n6 2 3 4 5 1\n1 3 5 4 2 6\n6 5 2 4 3 1\n1 2 3 4 5 6\n6 3 5 4 2 1\n1 5 2 4 3 6\n6 2 3 4 5 1\n1 3 5 4 2 6\n6 5 2 4 3 1\n1 2 3 4 5 6\n        ",
  "Scoring": "Test cases worth 40% total points have A, B, C, D, N\u00a0\u2264\u00a02000.",
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "5.00s",
  "Description": "Mirko is a genius. But the purpose of his inventions is not always obvious. His latest invention, the Shuffle-o-matic 3175, is one of those. The Shuffle-o-matic is used in a very special way. First Mirko places N paper cards, with numbers 1 to N printed on them, on the Shuffle-o-matic working surface. Then he inputs the shuffle sequence in the special input console and hits the go button. The machine than reads the paper cards and outputs the read sequence of numbers on its output tape. It than shuffles the cards according to the shuffle sequence. After that it reads the newly obtaind sequence and writes it onto a new line on its output tape. Then it procedes to shuffle the cards again according to the same shuffle sequence, scans and writes the output to the tape. The machine does this until it runs out of tape.\nAfter experimenting with the machine Mirko decided to rest a bit on the floor. There he noticed a piece of output tape. The piece is neatly cut just before the A-th output row nad just after the B-th output row. It is also missing the first C number and the last D numbers in all rows.\nHe now wonders how many rows on that piece of paper have the property that all numbers in the row, that are still on the paper, are in the exact same spot they were before all the shuffling began.",
  "Output": "1\n        ",
  "Title": "COCI09 #1 - Genijalac",
  "Input": "6 2 11 3 0\n6 3 5 4 2 1\n        "
}{
  "Scoring": "Test cases worth 30% of total points have N and Q\u00a0\u2264\u00a01000.\nTest cases worth 70% of total points have Q\u00a0\u2264\u00a01000.",
  "Memory Limit": "64M",
  "First sample description:": "The boxes start containing {0, 0, 0, 0, 0, 0}, 0 stones in total.\nAfter that the device sets the stones to {1 mod 2, 2 mod 2, 3 mod 2, 4 mod 2, 5 mod 2, 0} = {1,0,1,0,1,0}, or 3 stones in total.",
  "Sample Tests": "",
  "Time Limit": "8.00s",
  "Description": "Aladin was walking down the path one day when he found the strangest thing. N empty boxes right next to a weird alien machine. After a bit of fumbling around he got the machine to do something. The machine now accepts 4 integers L, R, A and B. After that hitting the big red glowing button labeled \"NE DIRAJ\" causes the machine to go crazy and follow the next routine:\nSet the number of stones in the box labeled L to A modulo B.\nIt procedes to fly to the box labeled L+1, and set the number of stones there to (2\u2022A) mod B.\nIt procedes to fly to the box labeled L+2, and set the number of stones there to (3\u2022A) mod B.\nGenerally, it visits each box labeled between L and R, and set the number of stones there to ((X - L + 1)\u2022A) mod B. where X is the box label.\nAfter it visits the box labeled R. It settles down for further instructions.\nDuring the game Aladin wonders what is the total number of stones in some range of boxes.\nWrite a program that simulates the device and answers Aladin's questions",
  "Output": "16\n0",
  "Title": "COCI09 #1 - Aladin",
  "Input": "4 4\n1 1 4 7 9\n2 1 4\n1 1 4 1 1\n2 1 4"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Impact factor of a scientific journal is a measure reflecting the average number of citations to articles published in science journals. For this task we are using a simplified formula for calculating the impact factor:\n\nRounding is always preformed up. For example the impact factor of the \"Journal for ore research and time wasting\" that published 38 articles quoted 894 times is 894 / 38 = 23.53 rounding up to 24.\nYou are the editor of one scientific journal. You know how much article you are going to publish and the owners are pushing you to reach a specific impact factor. You are wondering how many scientists you will have to bribe to cite your article to meet the owners demands. Since money is tight you want to bribe the minimal amount of scientists.",
  "Output": "91",
  "Title": "COCI09 #2 - Faktor",
  "Input": "10 10"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Using roman numerals the numbers 1, 2, 3, 4, 5, 6, 7, 8, 9 are written as 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'. Numbers 10, 20, 30, 40, 50, 60, 70, 80, 90 are written as 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC'.\nAny number smaller than 100 can be written by converting tens and ones separately and concatenating the results. So, for example, the number 48 would be written as XLVIII, XL for 40 and VIII for 8.\nGiven a number written in roman numerals, rearrange it's characters so that you create the smallest possible number, written in roman numerals.",
  "Output": "III",
  "Title": "COCI09 #2 - Rimski",
  "Input": "III"
}{
  "Memory Limit": "32M",
  "Second example description:": "Adding 100\u00b0 15 times yields 1500\u00b0, also known as 60\u00b0",
  "First example description:": "\nSubtracting 30\u00b0 from 70\u00b0 yields 70\u00b0 - 30\u00b0 = 40\u00b0.",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "One day Mirko was cleaning up his room and found a straightedge and a compass. He went to the school the next day and challenged his friend Slavko to a geometric construction battle. Mirko knows how to construct some angles using the straightedge and compass and knows how to subtract and add any two angels he constructs. Slavko now shouts random angles and Mirko must draw them as fast as possible.\nYou are observing this battle and would like to know if Mirko can construct the angles Slavko shouts at all.",
  "Output": "NO\nYES",
  "Title": "COCI09 #2 - Kutevi",
  "Input": "3 2\n10 20 30\n5 70"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Vjekoslav the Wolf is running away from a bunch of blood hungry hunters. The hunters are smart and hide behind trees. Vjekoslav knows this, but doesn't know which trees. He would like to run to his comfortable, civilized cottage (as opposed to the hunters quite uncivilized den, yes I am rooting for the Wolf here) staying as far away as possible from any trees.\nThe forest can be represented as a N by M gird. Let us mark empty meadow patches with '.', patches with a tree in the middle with '+', Vjekoslav's current position with 'V' and the position of his cottage with 'J'. Vjekoslav can run from his current patch to any other patch north, east, south or west from him, even if it contains a tree.\nIf Vjekoslav is standing in R-th row and C-th column on the grid and there is a tree in the A-th row and B-th column then the distance between Vjekoslav and that tree is:\n|R - A| + |C - B|\nHelp Vjekoslav find the best route to his cottage. The best route is any route that maximizes the minimal distance between Vjekoslav and all trees at any given moment.\nNote that Vjekoslav's cottage doesn't occupy the entire patch so that patch must also be included in the route.",
  "Output": "0",
  "Title": "COCI09 #2 - Vuk",
  "Input": "4 5\n.....\n.+++.\n.+.+.\nV+.J+"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "2.00s",
  "Description": "\"Arrange\" is a planetary popular Flash game. In \"Arrange\" the player is given a permutation of numbers 1 to N and a list of allowed swaps. He then has to perform a sequence of swaps that transforms the initial permutation back to the ordered sequence 1,2,3,4,5...N.\nIn order to break the high score list, you need to perform the minimal amount of swaps possible. You can't do that, but you can write a program that does it for you!",
  "Output": "0",
  "Title": "COCI09 #2 - Poslozi",
  "Input": "5 5\n1 2 3 4 5\n1 5\n2 5\n1 4\n1 1\n3 5"
}{
  "Memory Limit": "128M",
  "Sample Tests": "",
  "Time Limit": "6.00s",
  "Description": "\"Pasijans, patience, or solitaire is the name for a group of single player card games. One new such game, so new it has no name, is played with cards sporting random integers as values. The game starts by shuffling all cards and distributing them in N sequences, not necessarily of equal length.\nDuring each turn, the player can remove the first card in any sequence and place it at the end of the \"Solution sequence\". The card that was second in the selected sequence now becomes the first and the turn ends. Of course once the card is in the \"Solution sequence\" it cannot be removed, replaced or altered in any way. So don't even try.\nThe game ends when all cards are in the \"Solution sequence\". The object of the game is to construct the best possible \"Solution sequence\". One sequence is better than the other if for the first cards they differ, lets call them X and Y, the value on the card X is smaller than the value on the card Y.\nWrite a program that finds the best possible \"Solution sequence\".",
  "Output": "5 1 1 5 1 2",
  "Title": "COCI09 #2 - Pasijans",
  "Input": "2\n3 5 1 2\n3 5 1 1"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko has a younger brother, Filip, who just started going to school and is having trouble with numbers. To help him get the hang for number scale, his teacher writes two three digit numbers. She asks Filip to compare those numbers, but instead of interpreting them with the leftmost most significant digit, he needs to interpret them the other way around, with the most significant digit being the rightmost one. He than has to tell the teacher the larger of the two numbers.\nWrite a program that will check Filip's answers.",
  "Output": "938",
  "Title": "COCI09 #3 - Filip",
  "Input": "839 237"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko buys a lot of candy in the candy shop. He cannot always pay the exact amount so the shopkeeper and he have an agreement. He tells the shopkeeper the smallest bill he has, and she rounds his amount to the nearest number he can pay. For example, if the smallest bill Mirko has is a hundred bill, and he wants to buy 150 Kunas of candy, the shopkeeper rounds his amount to 200 Kunas. If he wants to buy 149 Kunas of candy, the shopkeeper rounds his amount to 100 Kunas.\nLately, Mirko suspects that the shopkeeper is trying to cheat him. He asked you to help him. Write a program that will help him.\nHis mother only gives Mirko 1, 10, 100, 1000, ... , 1\u00a0000\u00a0000\u00a0000 Kuna bills. He never has bills that are not powers of 10. The bills he does have, he has in large amounts.",
  "Output": "200",
  "Title": "COCI09 #3 - Slatkisi",
  "Input": "182 2"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko is a great code breaker. He knows any cipher in the world can be broken by frequency analysis. However, his idea of what frequency analysis is completely wrong.\nHe intercepted an enemy message. The message consists of N numbers, smaller than or equal to C Mirko belives freqency analysis consists of sorting this sequence so that more frequent numbers appear before less frequent ones.\nFormally, the sequence must be sorted so that given any two numbers X and Y, X appears before Y if the number of times X appears in the original sequence is larger than the number of time Y does. If the number of appearances are equal, the number whose value appears sooner in the input should appear sooner in the sorted sequence.\nHelp Mirko by creating a \"frequency sorter\".",
  "Output": "11 11 11 33 33 25 25 77 54",
  "Title": "COCI09 #3 - Sort",
  "Input": "9 77\n11 33 11 77 54 11 25 25 33"
}{
  "Input": "3 9\n7 2\n8 3\n3 4",
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko's village has only one long street stretching from east to west with M houses. Each house has a unique house number, starting with 1 and ending with M.\nA recent storm took out most phone lines, so the mayor financed the construction of a new one. Mirko is interested in the popularity of this new phone network, so he infiltrated its construction and placed special detectors on some points.\nDetectors detect any phone call made between two houses, as long as one of them is eastward and the other is westward from the point the detector is installed.\nAt the end of the first month, Mirko removed all detectors and now wonders what is the smallest number of phone calls that could have been made during that month.",
  "Output": "5",
  "Title": "COCI09 #3 - Razgovori",
  "Grading": "In test cases worth 50% of the points, N and C will be smaller than 1\u00a0000."
}{
  "Title": "COCI09 #3 - Patuljci",
  "Example": "Sample Input \n10 3\n1 2 1 2 1 2 3 2 3 3\n8\n1 2\n1 3\n1 4\n1 5\n2 5\n2 6\n6 9\n7 10\nSample Output\nno\nyes 1\nno\nyes 1\nno\nyes 2\nno\nyes 3",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "Snow White and the N dwarfs live in the forest. While the dwarfs mine away, Snow White hangs around social networks.\nEach morning, the dwarfs form a long line and go whistling away to the mine. Snow White runs around them and snaps pictures to upload onto her favorite social network.\nWhen the dwarfs enter the mine, Snow White goes back to their house and goes through the pictures, selecting pretty ones. Each dwarf has a colored cap, and there are C different colors. A picture is pretty if more than half the caps on it are of the same color. In other words, if there are K dwarfs on the picture, it is pretty if strictly more than K / 2 dwarfs have same colored caps.\nWrite a program that will check whether a set of M pictures is pretty, and what color is dominating if they are.",
  "Output": "Output M lines. For each picture output \"no\" if Snow White doesn't think the picture is pretty, and \"yes X\", where X is the color dominating on the picture, if she does.",
  "Input": "The first line contains two integers N and C (3\u00a0\u2264\u00a0N\u00a0\u2264\u00a0300\u00a0000, 1\u00a0\u2264\u00a0C\u00a0\u2264\u00a010\u00a0000), the number of dwarfs and the number of colors.\nThe second line contains N integers between 1 and C (inclusive), colors of the dwarfs' hats, ordered the way they formed the line that morning.\nThe third line contains M (1\u00a0\u2264\u00a0M\u00a0\u2264\u00a010\u00a0000), number of pictures.\nThe next M lines each contain two integers A and B (1\u00a0\u2264\u00a0A\u00a0\u2264\u00a0B\u00a0\u2264\u00a0N). Each line describes one picture. On it there are all the dwarfs starting from A-th all the way to the B-th.",
  "Grading": "In test cases worth 30% of the points, M will be smaller than 10.\nIn test cases worth an additional 30%, C will be smaller than 10."
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Great scientific discoveries are often named by the last names of scientists that made them. For example, the most popular asymmetric cryptography system, RSA was discovered by Rivest, Shamir and Adleman. Another notable example is the Knuth-Morris-Pratt algorithm, named by Knuth, Morris and Pratt.\nScientific papers reference earlier works a lot and it's not uncommon for one document to use two different naming conventions: the short variation (e.g. KMP) using only the first letters of authors last names and the long variation (e.g. Knuth-Morris-Pratt) using complete last names separated by hyphens.\nWe find mixing two conventions in one paper to be aesthetically unpleasing and would like you to write a program that will transform long variations into short.",
  "Output": "PP",
  "Title": "COCI09 #4 - Autori",
  "Input": "Pasko-Patak"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko and Slavko are filming a movie adaptation of the popular SF novel \"Chicks in space 13\". The script requires them to present a lot of different worlds so they decided to film the entire movie in front of a green screen and add CGI backgrounds later. Mirko heard that the best way to generate artificial terrain is to use midpoint displacement algorithm.\nTo start the algorithm, Mirko selects 4 points forming a perfect square. He then performs the following steps:\nOn each side of the square, he adds a new point in the exact middle of the side. The height of this new point is the average height of the two points on that side.\nIn the exact center of the square he adds a new point whose height is the average height of all 4 square vertices, plus a small random value.\nAfter those two steps are performed, he now has 4 new squares. He performs the same steps on the newly created squares again and again until he is pleased with the results. The following diagram illustrates 2 iterations of the algorithm.\n\nMirko noticed that some of the points belong to more than one square. In order to decrease memory consumption, he stores calculates and stores such points only once. He now wonders how many points in total will he need to store in memory after N iterations.",
  "Output": "1089",
  "Title": "COCI09 #4 - Planina",
  "Input": "5"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirkos great grandmother Katica is an avid mathematician. She likes to torment Mirko with math games. This time she wrote down a sequence of numbers on a piece of paper and told Mirko he may do the following:\nChoose any two numbers in the sequence (let's call them A and B) and a prime number X such that A is divisible by X. After that, Mirko erases A and writes A \u00f7 X in its place. In the end he erases B and writes B \u00d7 X in its place.\nMirko may perform this operation as many times he wants. His goal is to obtain the maximum possible score, because he gets candy from his great grandmother if he does so. The score for one sequence is the greatest common divisor of all the numbers in the sequence.\nHe is not very good at this, and he likes his candy so he has asked you to help him. Write a program that will calculate the maximum possible score. Since you are such a nice guy, you should also print the smallest number of times Mirko must perform the operation to obtain the maximum possible score.",
  "Output": "2 2",
  "Title": "COCI09 #4 - Iks",
  "Input": "5\n4 5 6 7 8"
}{
  "Scoring": "If only one of the output numbers is correct, you will receive 50% of the points for that test case. You must always follow the output format to the letter, even if you do not calculate both numbers. In such cases, you may output any integer in place of the number you did not calculate.",
  "Explanation for Sample 1": "Matija needs two swoops with his roller - one to paint planks 1, 2 and 3 to the height of 3 cm, the other to paint planks 3, 4 and 5 to the height of 4 cm. Note that 3 cm2 (2 cm2 on plank 1 and 1 cm2 on plank 5) are left unpainted. Also, 3 cm2 on plank 3 are painted over twice, but that's OK.\n",
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Matija needs to paint his old fence. The fence is made from N planks, each 1 cm in width and varying in height. To do this easy and fast, he bought himself a Super Paint Roller Deluxe. The paint roller is X cm wide. The Super Paint Roller Deluxe model comes with a catch, however. Matija must at all times touch the planks with full width of the roller, otherwise paint drops all around and stains everything. Also, the roller must always be parallel to the ground to prevent leakage. This means that in order for Matija to use the roller safely, he needs to select X planks, and paint them from bottom to the top of the lowest plank in one swoop. Then he selects some other X planks, paints them and so on.\nThis leaves parts of some planks unpainted. Matija will have to paint such parts with a toothbrush. This is obviously quite tedious so he asked you to help him paint as much as possible using the Super Paint Roller Deluxe. Since there is more than one way to do this he is also interested in the painting that requires the minimal number of swoops.",
  "Output": "4\n4",
  "Title": "COCI09 #4 - Ograda",
  "Input": "7 4\n1 2 3 4 3 2 1"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "0.50s",
  "Description": "Luka found an interesting tape in the chem lab. The tape is divided into N segments of equal length, and can easily be bent between two segment, but only by exactly 180 degrees.\nOne side of the tape is completely covered with a very volatile chemical. If the chemical comes in contact with itself, it reaches critical mass and explodes.\nThe other side of the tape is not completely covered yet. Only the first A segments and last B segments are covered, with the exact same chemical.\nWrite a program that will calculate the number of different ways Luka can bend the tape so that it does not explode. He can bend the tape more than once and two ways are different if there is at least one bevel between segments that is not bent in one and is bent in the other.\nSince the solution can be huge, print the result modulo 10301.\nThe following example illustrates all 6 possible ways for N=4, A=1 and B=1. For clarity, the tape is only bent 90 degrees on the illustration. Luka would actually bend it 180 degrees.\n",
  "Output": "7",
  "Title": "COCI09 #4 - Kaboom",
  "Input": "6 1 2"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Ana has a couple of classmates coming over for cr\u00eapes (known as pala\u010dinke in Croatian). They are coming in T minutes, and Ana just found out that she has neither one of the four required ingredients (flour, milk, eggs and jam). She hops into her car and drives around her neighbourhood buying supplies.\nHer neighbourhood contains N crossroads numbered 1 to N, and M one way roads connecting them. Ana starts on crossroad 1. On each road there is exactly one shop, selling some, maybe all, ingredients.\nAna needs 1 minute to drive down any given road if she does not stop in the shop, or 2 minutes if she does. She needs to obtain all ingredients and drive back to crossroad one in time. She likes to compare shop prices so she may enter a shop even if she already has all ingredients.\nConsider the following example with 5 crossroads and 7 roads.\n\nAna can make the ingredient run in 5 different ways, as shown in the table below.\n\nWrite a program that will calculate the number of different ways Ana can buy the ingredients and return home in T minutes or less. Since this number can be very large, output it modulo 5557.",
  "Output": "5",
  "Title": "COCI09 #4 - Palacinke",
  "Input": "5 7\n1 2 B\n2 4 M\n1 3 J\n3 4 MB\n4 1 JP\n4 5 J\n5 1 P\n7"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko got his driver's license! To celebrate that joyous occasion, his parents bought him his first car: a monster truck! Mirko found out that even though having a car that can squash all other cars is nice in traffic jams, parking a car that is the size of 4 normal cars can be a bit tricky.\nHis friend, Slavko, works part time in the city parking company. He periodically sends Mirko a map of the city with occupied parking spaces marked. The map can be represented as a table with R rows, C columns each.\nEach cell can contain a building (symbol '#'), a parked car (symbol 'X') or a free parking space (symbol '.'). A monster truck is quite huge, 2 by 2 cells to be exact.\nHelp Mirko calculate the number of possible parking space grouped by the number of cars he needs to squash to park in them. We are only interested in the number of cars Mirko will squash on the parking space, not the number of cars he will squash on the way over. However, Mirko can't park on a building. Not even a monster truck is large enough to squash buildings!",
  "Output": "2\n1\n1\n0\n1",
  "Title": "COCI09 #5 - Cudoviste",
  "Input": "4 5\n..XX.\n.#XX.\n..#..\n....."
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "As punishment for destroying half of his city with his monster truck, Mirko now has to pay off his dept to society. He works as an assistant for a famous archaeologist. One of his duties include crafting keys for ancient document boxes.\nIn ancient times document boxes were locked using elaborate mechanisms with interesting locks. Each lock is L centimeters long and W centimeters wide and consists of three parts, the upper edge, the lower edge and the empty area between them. Both edges can be represented as a sequence of L nonnegative integers: r1 r2 r3 ... rL. Each number in sequence represents the width of edge at that point.\nThe key for each lock is a small clay tab, fitting perfectly in the area between edges. This image shows a 7 cm long, 8 cm wide lock along with thecorresponding key.\n\nThe sequence representing the upper edge is [2, 1, 3, 2, 3, 2, 3], and the sequence representing the lower edge is [3, 4, 2, 3, 2, 3, 4]. Mirko noticed that some keys open more than one lock. Making keys is tedious work so Mirko asked you to find out what is the minimal number of different keys he needs to make and still be able to open all of the locks.",
  "Output": "1",
  "Title": "COCI09 #5 - Kletva",
  "Input": "100000000 2 2\n88888888 88888888\n4 4\n4 4\n88888888 88888888"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "One day Mirko, while he was walking through the high grass, stumbled upon a sequence of N colored marbles. Soon he noticed that if he touches K or more consecutive marbles of the same color, they start to twinkle and then he could wish them to magically vanish, although he doesn't have to do that immediately (see 3. sample). Fortunately, Mirko brought an inexhaustible supply of marbles from home, so he can insert a marble of any color anywhere in the array (at the beginning, between any two existing marbles, or at the end). Help Mirko find the smallest number of marbles he must insert into the sequence before he could make all of the marbles vanish.",
  "Output": "4",
  "Title": "COCI09 #5 - Zuma",
  "Input": "10 4\n3 3 3 3 2 3 1 1 1 3"
}{
  "Sample 2 Descrption": "The array is {3, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1}.",
  "Memory Limit": "32M",
  "Sample 1 Description": "The procedure is called with arguments 1, 1, 2, 1. After that the array contains values {4, 3, 4, 3, 4, 3, 4, 3, 4, 3}. The sum of indices 2 to 6 (inclusive) is 4 + 3 + 4 + 3 + 4 = 18.",
  "Sample Tests": "",
  "Time Limit": "5.00s",
  "Description": "Mirko is trying to debug a piece of his code. First he creates an array of N integers and fills it with zeros. Then he repeatedly calls the following procedure (he is such a good coder he coded it in both C++ and Pascal):\nvoid something( int jump ) {\n   int i = 0;\n   while( i < N ) {\n      seq[i] = seq[i] + 1;\n      i = i + jump;\n   }\n}\nprocedure something( jump: longint );\nvar i : longint;\nbegin\n  i := 0;\n  while i < N do\n  begin\n    seq[i] := seq[i] + 1;\n    i := i + jump;\n  end;\nend;\nAs you can see, this procedure increases by one all elements in the array whose indices are divisible by jump.\nMirko calls the procedure exactly K times, using the sequence X1\u00a0X2\u00a0X3\u00a0...\u00a0Xk as arguments.\nAfter this, Mirko has a list of Q special parts of the array he needs to check to verify that his code is working as it should be. Each of this parts is defined by two numbers, L and R (L\u00a0\u2264\u00a0R) the left and right bound of the special part. To check the code, Mirko must compute the sum of all elements of seq between and including L and R. In other words seq[L] + seq[L+1] + seq[L+2] + ... + seq[R]. Since he needs to know the answer in advance in order to check it, he asked you to help him.",
  "Output": "16422\n28874",
  "Title": "COCI09 #5 - Program",
  "Input": "1000000 6\n12 3 21 436 2 19\n2\n12 16124\n692 29021"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko and Slavko are sports commentators on a local kayaking competition. They have a live satellite feed of the entire track. Since there are too much teams for our dynamic duo to follow, they asked you to help them. They would like you to write a program that will display current standings teamby-team.\nThe satellite feed is encoded as a table of R rows C characters each. The first character in each row is the starting line, encoded by the character 'S'. The last character in each row is the finishing line, encoded by 'F'. There are exactly nine kayaks on the image. Each kayak is marked by his number, and each spans exactly three consecutive columns. Water is marked by '.'.\nTeams are ranked by their distance to the finish line. Smaller is better. If two teams are at the same distance, they share their place.",
  "Output": "5\n1\n6\n3\n6\n6\n4\n7\n2",
  "Title": "COCI09 #6 - Kajak",
  "Input": "10 15\nS..........222F\nS.....111.....F\nS...333.......F\nS...555.......F\nS.......444...F\nS.............F\nS......777....F\nS..888........F\nS........999..F\nS...666.......F"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "As you know, a kayaking competition is going on as we speak. Unfortunately strong winds have damaged a few kayaks, and the race starts in 5 minutes!. Fortunately, some teams have brought reserve kayaks. Since kayaks are bulky and hard to carry, teams are willing to lend kayaks to opposing teams if and only if they are starting immediately next to them. For example, team with the starting number 4 will lend its reserve kayak only to teams 3 and 5. Of course if some team did bring a reserve and its kayak was damaged, they will use it themselves and not lend it to anyone.\nYou as the organizer now need to know, what is the minimal number of teams that cannot start the race, not even in borrowed kayaks.",
  "Output": "1",
  "Title": "COCI09 #6 - Natjecanje",
  "Input": "5 2 1\n2 4\n3"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko received a message from his friend Slavko. Slavko, being a world class cryptologist, likes to encrypt messages he sends to Mirko. This time, he decided to use One Time Pad encryption. OTP is impenetrable if used correctly, and Slavko knows this. He however, doesn't want Mirko to bang his\nhead on an impossible task, so he sent a few hints along with his message.\nMirko knows that Slavkos original plaintext contained only small letters of the English alphabet ('a' - 'z'), full stop '.' and space ' ' (ASCII 3210). Also, he knows that Slavko used only digits '0' to '9' as his key. After much thought, he realized he can determine locations of all spaces and full stops in the plaintext. He now asked you to write a program that will do so automatically.\nFrom his previous dealings with Slavko, Mirko knows how OTP encryption works. Let's look at a simple example. Suppose you want to encode the string \"abc efg\" using \"0120123\" as key.\nabc efg\n0120123\n61 62 63 20 65 66 67\n30 31 32 30 31 32 33\n51 53 51 10 54 54 54\nFirst, you transform both the key and plaintext into hexadecimal numbers using ASCII encoding. Then you align them and perform the XOR operation on each pair. The resulting sequence is the encrypted message.",
  "Output": "------.",
  "Title": "COCI09 #6 - Dosadan",
  "Input": "7\n53 53 51 54 54 51 10"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko and Slavko have built their own LED display. The display is initially white. During each of the N parts of the testing phase, Mirko attached three electrodes to the display in such way that they formed a right isosceles triangle. He noticed that, after attaching the electrodes, all pixels in the enclosing triangle are inverted (white pixels become black, and black pixels become white).\n\nWatching Mirko play with the electrodes, Slavko observed interesting shapes emerging on the screen. Mathematically inclined as he is, first thing that crossed his mind was how to calculate total area covered by black pixels. Help him by writing a program to do just that!",
  "Output": "0.0",
  "Title": "COCI09 #6 - Xor",
  "Input": "4\n5 5 99\n5 5 99\n5 5 99\n5 5 99"
}{
  "Explanation of Sample 2": "The knowledge base contains implications 1 \u2192 3 and 2 \u2192 3. Therefore, Holmes knows that event 3 can be caused only by events 1 and 2, but (without any extra information), he can't be certain which one of those events actually caused 3. As a result, only event that must have occurred is the one given in the input.",
  "Explanation of Sample 3": "Holmes doesn't know which event from the set {2, 3} is directly responsible for event 4. However, as both of those events are caused only by event 1, Holmes can deduce that event 1 must have occurred. As a consequence, events 2, 3 and 4 (given by the detectives) have also occurred.",
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Sherlock Holmes is a renowned detective. His Scotland Yard colleagues often provide him with a set of evidence and ask for his help in solving the mysteries. After many years of practice, Holmes has gained an enormous amount of experience and already knows causes for many common events, which, combined with his extraordinary deductive capabilities, enables him to solve cases in a matter of minutes, from the comfort of his chair.\nHolmes' knowledge base can be modeled as a set of implications of the form A \u2192 B (where A and B represent events), which means that, if A occurred, event B must have also occurred (remember that logical implication is false only if A is true and B is false). Of course, implications can form chains of reasoning (e.g. A \u2192 B \u2192 C). However, there will never be a circular chain of implications (e.g. A \u2192 B \u2192 C \u2192 ... \u2192 A).\nHolmes is given a set S = {S1, S2, S3, ..., Sn} of events that are known to have occurred. He can then, using his extensive knowledge and deductive powers, find all events that have certainly occurred.\nIt's important to note that Holmes' knowledge is so mind-bogglingly huge that he knows all possible causes of events. In other words, there is no implication that is true, but not included in Holmes' knowledge base.\nMany detective agencies would highly appreciate Holmes' one of a kind capabilities, so you were given a task to accomplish with a computer what is out of reach for ordinary mortals. Write a program to find all events that have certainly occurred based on the given implications and evidence collected by your colleague detectives.",
  "Output": "1 2 3 4",
  "Title": "COCI09 #6 - Holmes",
  "Input": "4 4 1\n1 2\n1 3\n2 4\n3 4\n4"
}{
  "Explanation of Sample 2": "The original gremlin hatched in the accident after 10 years spawns a single cocoon and dies.\n15 years after the accident, a new gremlin hatches from the cocoon. His ancestral chain contains one gremlin. 25 years after the accident this gremlin spawns a new cocoon and dies.\n30 years after the accident, a new gremlin hatches from the cocoon. His ancestral chain contains two gremlins. 40 years after the accident this gremlin spawns a new cocoon and dies.\n42 years after the accident, the current cocoon is not yet hatched, so the longest ancestral chain ever recorded is two gremlins in length.",
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Gremlins are small, funny, fuzzy creatures. In times long gone they used to cause quite a ruckus, but now most of them live decent, honest family lives.\nThere are N different types of gremlins, coded with numbers 1 to N for your convenience. Legend has it that T years ago a laboratory accident occurred causing N gremlins, one of each type to be born.\nAs you all know, in order for gremlins to reproduce, no mating rituals are required. Just add a dash of watter and you instantly get a few new cocoons.\nGremlins of type i need exactly Yi years to mature and spawn Ki cocoons. For each cocoon you know how much years does it take to hatch, and which gremlin type is contained within. The original gremlin unfortunately dies while producing cocoons.\nNow, T years after the original accident. Scientist wonder what is the longest ancestral chain whose genome is currently represented. They are only interested in ancestors of hatched gremlins, not those still cocooned. You are safe to assume that all gremlins that were supposed to hatch this year did so.",
  "Output": "4",
  "Title": "COCI09 #6 - Gremlini",
  "Input": "3 8\n4 5\n1 2 3 2\n1 2 1 3\n1 1\n3\n1\n2 1\n1 2\n2 1"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Every school morning Mirko is woken up by the sound of his alarm clock. Since he is a bit forgetful, quite often he leaves the alarm on on Saturday morning too. That's not too bad tough, since he feels good when he realizes he doesn't have to get up from his warm and cozy bed.\nHe likes that so much, that he would like to experience that on other days of the week too! His friend Slavko offered this simple solution: set his alarm clock 45 minutes early, and he can enjoy the comfort of his bed, fully awake, for 45 minutes each day.\nMirko decided to heed his advice, however his alarm clock uses 24-hour notation and he has issues with adjusting the time. Help Mirko and write a program that will take one time stamp, in 24-hour notation, and print out a new time stamp, 45 minutes earlier, also in 24-hour notation.\nNote: if you are unfamiliar with 24-hour time notation yourself, you might be interested to know it starts with 0:00 (midnight) and ends with 23:59 (one minute before midnight).",
  "Output": "22 55",
  "Title": "COCI09 #7 - Spavanac",
  "Input": "23 40"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "A new type of chocolate arrived in the local shop. The chocolate comes in bars, each bar consisting of N squares. Bars are factory made and only come in sizes which are full powers of two. In other words a single bar has 1, 2, 4, 8, 16, ... squares.\nTo fully assess the quality of chocolate Mirko must sample at least K squares. His friend Slavko would also like to try some of the chocolate. Since Mirko is in a hurry to try the chocolate himself, he decides to break the bar he bought in pieces, such that he has exactly K squares, and leaves the rest (if any) to Slavko. The bars are a bit brittle, so Mirko can break them only on their exact center. In other words, from one bar with D squares, he can get two bars with D/2 squares.\nWrite a program that will determine the minimal number of breaks Mirko must perform in order to obtain exactly K squares (not necessarily in one piece). Also, determine the smallest bar size Mirko must buy in order to have at least K squares.",
  "Output": "8 3",
  "Title": "COCI09 #7 - Cokolada",
  "Input": "5"
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "When it comes to trams, a lot of people are civilized individuals who know how to behave in one. However, there are always those few who upon spotting a place to sit will run towards it in supersonic speeds. If they spot more than one place, they always try the closest one first.\nProblems arise when two or more such individuals aim for the same spot. If one of them is the closest, he or she will sit, and others won't event attempt to move in and instead turn their attention to the next closest spot. If however they are all equally close, they will all run to the seat resulting in a massive explosion that usually ends with complete destruction of both them and the seat.\nYou are given a description of one tram. It is represented as a table with R rows and C columns. The rude passengers are marked with the letter 'X'. Empty seats are marked with 'L' and the tram floor is marked with '.'. Note that although there are other passengers, the force projected by these idiots is more than enough to simply walk through them.\nThe distance between two cells is the Euclidean distance between their centers. Write a program that will determine the number of explosions which will take place before all people are seated, or destroyed, or they run out of chairs.",
  "Output": "1",
  "Title": "COCI09 #7 - Bakice",
  "Input": "7 7\n...X.X.\nXL....L\n.......\n...L...\n.....XL\n.......\n...X..."
}{
  "Memory Limit": "32M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Fourth Great and Bountiful Human Empire is developing a transconduit tunnel network connecting all it's planets. The Empire consists of N planets, represented as points in the 3D space. The cost of forming a transconduit tunnel between planets A and B is:\nTunnelCost[A,B] = min{ |xA - xB|, |yA - yB|, |zA - zB| }\nwhere (xA, yA, zA) are 3D coordinates of planet A, and (xB, yB, zB) are coordinates of planet B. The Empire needs to build exactly N - 1 tunnels in order to fully connect all planets, either by direct links or by chain of links. You need to come up with the lowest possible cost of successfully completing this project.",
  "Output": "4",
  "Title": "COCI09 #7 - Svemir",
  "Input": "5\n11 -15 -15\n14 -5 -15\n-1 -1 -5\n10 -4 -1\n19 -4 19"
}{
  "Scoring": "In test cases worth 20% of total points the number of pieces on the board will be less then or equal to 5000.\nIn test cases worth 60% of total points, R and C will be smaller than or equal to 300.",
  "Memory Limit": "64M",
  "Sample Tests": "",
  "Time Limit": "1.00s",
  "Description": "Mirko and Slavko are playing a chess like game. The game is played on a non-standard chess board sized R rows by C columns. Each player starts with some number of chess kings. In chess kings can move from their current field to any of the 8 neighbouring fields.\nPlayer spread is defined as the complete sum of distances between all pairs of pieces of the given player. The distance between two pieces is the smallest number of moves required for both pieces to reach the same field. No actual moves are performed when calculating the distance and as such enemy pieces do not influence the result.\nMirko knows that the spread is a vital piece of strategic information and would like you to make him a program that will calculate both his and Slavko's\nspread.",
  "Output": "10 13",
  "Title": "COCI09 #7 - Kraljevi",
  "Input": "4 5\nM....\n..S.M\nSS..S\n.M..."
}{
  "Example": "Sample Input \n7\n2\n4\n1\n2\n2\n5\n1\n\nSample Output\n10\n",
  "Memory Limit": "64M",
  "Time Limit": "0.50s",
  "Description": "N people are waiting in line to enter a concert. People get bored waiting so they turn and look for\nsomeone familiar in the line.\nTwo persons A and B standing in line can see each other if they're standing right next to each other or\nif no person between them is strictly taller than person A or person B.\nWrite a program that determines the number of pairs of people that can see each other.",
  "Output": "Output the number of pairs of people that can see each other on a single line.",
  "Title": "COI06 - Patrik",
  "Input": "The first line of input contains an integer N (1 \u2264 N \u2264 500 000), the number of people standing in line.\nEach of the following N lines contains a single integer, the height of one person in nanometres.\nEveryone will be shorter than 231 nanometres.\nThe heights are given in the order in which people are standing in line."
}{
  "Example": "Sample Input \n13 15\n1 2\n2 3\n3 5\n2 4\n4 6\n2 6\n1 4\n1 7\n7 8\n7 9\n7 10\n8 11\n8 12\n9 12\n12 13\n5\n1 5 13 1 2\n1 6 2 1 4\n1 13 6 7 8\n2 13 6 7\n2 13 6 8\n\nSample Output\nyes\nyes\nyes\nno\nyes\n",
  "Memory Limit": "64M",
  "Time Limit": "3.00s",
  "Description": "To help capture criminals on the run, the police are introducing a new computer system. The area\ncovered by the police contains N cities and E bidirectional roads connecting them. The cities are\nlabelled 1 to N.\nThe police often want to catch criminals trying to get from one city to another. Inspectors, looking at a\nmap, try to determine where to set up barricades and roadblocks. The new computer system should\nanswer the following two types of queries:\nConsider two cities A and B, and a road connecting cities G1 and G2. Can the criminals get\nfrom city A to city B if that one road is blocked and the criminals can't use it?\nConsider three cities A, B and C. Can the criminals get from city A to city B if the entire city\nC is cut off and the criminals can't enter that city?\nWrite a program that implements the described system.",
  "Output": "Output the answers to all Q queries, one per line. The answer to a query can be \"yes\" or \"no\".",
  "Title": "COI06 - Policija",
  "Input": "The first line contains two integers N and E (2 \u2264 N \u2264 100 000, 1 \u2264 E \u2264 500 000), the number of cities and roads.\nEach of the following E lines contains two distinct integers between 1 and N - the labels of two cities\nconnected by a road. There will be at most one road between any pair of cities.\nThe following line contains the integer Q (1 \u2264 Q \u2264 300 000), the number of queries the system is being\ntested on.\nEach of the following Q lines contains either four or five integers. The first of these integers is the type\nof the query - 1 or 2.\nIf the query is of type 1, then the same line contains four more integers A, B, G1 and G2 as described earlier. A and B will be different. G1 and G2 will represent an existing road.\nIf the query is of type 2, then the same line contains three more integers A, B and C. A, B and C will be\ndistinct integers.\nThe test data will be such that it is initially possible to get from each city to every other city."
}{
  "Memory Limit": "64M",
  "Sample Tests": "",
  "Time Limit": "2.00s",
  "Description": "The president of the political party in power is holding a conference in the party headquarters.\nPoliticians, members of the party, live in a two-dimensional grid, one member in each cell (except in\ncells containing obstacles). The headquarters are located in cell (0, 0). This is also where the president\nof the party lives.\nPoliticians make steps in one of the four directions (up, down, left, right), moving to one of the four\nadjacent cells in one step. They can't enter cells with obstacles. The conference will be attended by all\nparty members that can reach headquarters in S steps or less. Each member coming to the conference\nwill take the shortest route to headquarters (or any such route, if there is more than one).\nThe president has observed that politicians change their party affiliation with each step they take,\nbecoming a member of the other party (there are only two parties on the political scene).\nWrite a program that determines how many politicians come to the conference as members of the\nparty in power, and how many come as members of the opposing party.",
  "Output": "2500099997 2500000000\n",
  "Title": "COI06 - Sabor",
  "Input": "4 50000\n1 1\n-1 -1\n1 -1\n-1 1\n"
}{
  "Examples": "",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Description": "A long straight road connects two villages. Along the road, N messengers are stationed and, when\nneeded, they exchange messages using mostly their legs, but also their vocal cords and ears.\nThe first messenger (the closest to the first village) has a radio-receiver which he uses to keep track of\ncurrent ongoings in the country. When he finds out who has been evicted from whichever reality show\nis currently popular, he starts running as fast as he can to share the unfortunate (or fortunate) news\nwith everyone else. While running, he shouts the name of the evicted person so that any fellow\nmessengers that are close enough can hear him. Meanwhile, the remaining messengers do not merely sit\nand wait, but also run themselves, all with the selfless goal of sharing the news with everyone as fast as\npossible.\nThe running and shouting proceeds as follows:\nEach of the messengers may run whenever, in either direction, at a speed of at most 1 unit\nper second, or may decide not to run at all and stand still.\nAll messengers that know the news shout it at all times. One messenger can hear another\nmessenger shouting (and learn the news) if the distance between them is at most K units.\nWrite a program that, given the initial locations of the messengers, determines the least amount of\ntime (in seconds) needed for all messengers to learn the news. The location of every messenger is\ngiven with a positive real number \u2013 the distance from the first village. As mentioned above, initially\nonly the first messenger knows the news.",
  "Output": "1.000",
  "Title": "COI07 - Glasnici",
  "Input": "2.000\n4\n0.000\n4.000\n4.000\n8.000"
}{
  "Description": "Igor has a huge collection of folk hits on his computer, containing N songs numbered 1 to N.\nThe collection is so big that it is not possible to display all songs at once on his display. Because of this,\nwhile a song is playing, only K consecutive songs from the collectionare displayed on the screen. Of\ncourse, the K consecutive songs necessarily include the song currently playing.\nWhen a song first appears on the display, the software needs to access its file on disk and read metadata\nlike artist and song name. This metadata is stored in the computer's memory so that, if the song\nreappears on display, the file doesn't need to be opened again.\nYour program will be given the songs Igor wants to listen to, in the order in which he wants to do it.\nFor each song, determine the interval of songs which will be displayed while it is playing, so that the\ntotal number of files that need to be accessed on disk is the smallest possible.\n\n\nNote: The solution may not be unique.",
  "Examples": "",
  "Memory Limit": "64M",
  "Time Limit": "1.50s",
  "Scoring": "An output which is not completely correct, but the first line (the least number of files to access) is\ncorrect, will score 50% points for that test case.",
  "Output": "401\n300 600\n350 650\n400 700",
  "Title": "COI07 - Kolekcija",
  "Input": "1000 301\n3\n300\n500\n700"
}{
  "Description": "Brave Sir Robin has been thrown in the dungeon by the evil king. The dungeon consists of an infinite\nnumber of cube-shaped rooms with big stone walls. Rooms are connected by passages so that the\nentire dungeon, when viewed from above, looks like a spiral. The rooms are numbered as follows:\n\nAfter a big earthquake some of the walls collapsed, and new passages were formed between adjacent\nrooms.\nSir Robin is initially in room 1. Sir Robin knows that the exit from the dungeon is located in room N,\nand wants to escape while everyone is distracted by the earthquake. Because the evil dragon is guarding\nthe dungeon, Sir Robin wants to use the fastest way out of the dungeon.\nWrite a program that, given the location of the exit N and the list of new passages, determines the\nsmallest number of passages that Sir Robin must go through before he can exit the dungeon.",
  "Examples": "",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Scoring": "In a number of test cases, worth a total of 50 points, N will be at most 106.",
  "Output": "9953\nClarification of example 1: This is the layout of the dungeon after the earthquake:\n\nMirko can use the route 1-4-15-14-13-30-31, using only 6 hallways to exit the dungeon.",
  "Title": "COI07 - Tamnica",
  "Input": "10000\n5\n52\n4\n9\n25\n27"
}{
  "Description": "The digit-product of a positive integer is the product of the number's decimal digits. For example, the\ndigit-product of 2612 is 2 \u00b7 6 \u00b7 1 \u00b7 2 = 24.\nThe self-product of a number is the product of the number and its digit-product. For example, the\nself-product of 2612 is 2612 \u00b7 24 = 62688.\nWrite a program that, given two positive integers A and B, calculates the number of positive integers\nwhose self-product is between A and B, inclusive.",
  "Examples": "",
  "Memory Limit": "64M",
  "Time Limit": "1.00s",
  "Scoring": "In test cases worth a total of 25 points, A and B will be at most 108.\nIn test cases worth another 15, A and B will be at most 1012.",
  "Output": "1\nClarification of example 2: The self-products of numbers 19, 24, 32 and 41 are in order 171, 192,\n192 and 164.",
  "Title": "COI07 - Umnozak",
  "Input": "2224222 2224222"
}{
  "Example": "Sample Input \n20 4 5\n4 3 6 1\nSample Output\n3 3 3 2\n1 0 1 0\nSample Input\n100 3 5\n30 20 10\nSample Output\n4 3 3\n1 1 0\nIn the first example, 14 votes have been tallied and 6 are yet to be counted. To illustrate one possible outcome, suppose that the first party receives 2 of those 6 votes, the second none, the third 1 vote and the fourth 3 votes. The parties' totals are 6, 3, 7 and 4 votes. All parties exceeded the 5% threshold.\nSeats are allocated as follows:\nThe quotients are initially 6/1, 3/1, 7/1 and 4/1; the largest is 7/1 so party 3 wins a seat.\nThe quotients are 6/1, 3/1, 7/2 and 4/1; the largest is 6/1 so party 1 wins a seat.\nThe quotients are 6/2, 3/1, 7/2 and 4/1; the largest is 4/1 so party 4 wins a seat.\nThe quotients are 6/2, 3/1, 7/2 and 4/2; the largest is 7/2 so party 3 wins a seat.\nThe quotients are 6/2, 3/1, 7/3 and 4/2; parties 1 and 2 are tied with quotients 6/2 and 3/1, but party 1 is lower numbered so it wins the last seat.\nIn this outcome, the numbers of seats won by the parties are 2, 0, 2 and 1. Since it is possible for the second party not to win any seats, the second number on the second line of output is zero.",
  "Examples": "",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "It is election time. V voters attend the election, each casting their vote for one of N political parties. M officials will be elected into the parliament.\nThe conversion from votes to parliament seats is done using the D'Hondt method with a 5% threshold.\n  More precisely, suppose that the parties are numbered 1 through N and that they receive V1, V2, ..., VN\nvotes. Parliament seats are allocated as follows:\n All parties that receive strictly less than 5% of V votes are erased from the list of parties.\nThe parliament is initially empty i.e. every party has zero seats allocated.\nFor each party P, the quotient QP=VP/(SP+1) is calculated, where VP is the total number of\n    votes received by party P, and SP is the number of seats already allocated to party P.\nThe party with the largest quotient QP is allocated one seat. If multiple parties have the same\n    largest quotient, the lower numbered party wins the seat.\nRepeat steps 3 and 4 until the parliament is full.\nThe votes are being counted and only part of the V votes has been tallied. It is known how many votes\n  each party has received so far.\n  Write a program that calculates for each party, among all possible outcomes of the election after all V\nvotes are counted, the largest and smallest number of seats the party wins.",
  "Output": "On the first line output N integers separated by spaces \u2013 the largest number of seats each party can\n  win.\n  On the second line output N integers separated by spaces \u2013 the smallest number of seats each party can\n  win.",
  "Title": "COI08 - Izbori",
  "Input": "The first line contains the integers V, N and M (1 \u2264 V \u2264 10,000,000, 1 \u2264 N \u2264 100, 1 \u2264 M \u2264 200), the\nnumbers of votes, parties and seats in the parliament.\nThe second line contains N integers \u2013 how many votes (of those that have been counted) each party\ngot. The sum of these numbers will be at most V."
}{
  "Title": "COI08 - Otoci",
  "Description": "Some time ago Mirko founded a new tourist agency named \"Dreams of Ice\". The agency purchased N icy islands near the South Pole and now offers excursions.\nEspecially popular are the emperor penguins, which can be found in large numbers on the islands. Mirko's agency has become a huge hit; so big that it is no longer cost-effective to use boats for the excursions. The agency will build bridges between islands and transport tourists by buses. Mirko wants to introduce a computer program to manage the bridge building process so that fewer mistakes are made.\nThe islands are numbered 1 through N. No two islands are initially connected by bridges. The initial number of penguins on each island is known. That number may change, but will always be between 0 and 1000 (inclusive).\nYour program must handle the following three types of commands:\n  \"bridge A B\" - an offer was received to build a bridge between islands A and B (A and B will be different). To limit costs, your program must accept the offer only if there isn't already a way to get from one island to the other using previously built bridges. If the offer is accepted, the program should output \"yes\", after which the bridge is built. If the offer is rejected, the program should output \"no\".\n \"penguins A X\" - the penguins on island A have been recounted and there are now X of them.\n    This is an informative command and your program does not need to respond.\n \"excursion A B\" - a group of tourists wants an excursion from island A to island B. If the excursion is possible (it is possible to get from island A to B), the program should output the total number of penguins the tourists would see on the excursion (including islands A and B). Otherwise, your program should output \"impossible\".",
  "Examples": "",
  "Memory Limit": "128M",
  "Time Limit": "5.00s",
  "Scoring": "In test cases worth 50% of points, the command \"penguins\" will not appear. In these test cases N will be odd, while in all other cases N will be even.",
  "Output": "Output the responses to commands \"bridge\" and \"excursion\", each on its own line.",
  "Example": "Sample Input \n5\n4 2 4 5 6\n10\nexcursion 1 1\nexcursion 1 2\nbridge 1 2\nexcursion 1 2\nbridge 3 4\nbridge 3 5\nexcursion 4 5\nbridge 1 3\nexcursion 2 4\nexcursion 2 5\nSample Output\n4\nimpossible\nyes\n6\nyes\nyes\n15\nyes\n15\n16\nSample Input\n6\n1 2 3 4 5 6\n10\nbridge 1 2\nbridge 2 3\nbridge 4 5\nexcursion 1 3\nexcursion 1 5\nbridge 3 4\nexcursion 1 5\npenguins 3 10\nexcursion 1 3\nbridge 1 5\nSample Output\nyes\nyes\nyes\n6\nimpossible\nyes\n15\n13\nno",
  "Input": ""
}{
  "Example": "Sample Input \n3\n-2 1 1 2\n1 0 2 1\n-3 -3 -2 0\n2\n1 2\nSample Output\n5\n15\nSample Input\n4\n5 1 8 4\n-8 1 -5 4\n-10 2 10 3\n6 0 8 10\n6\n1 2 3 4 7 9\nSample Output\n0\n5\n14\n18\n70\n100\nSample Input\n1\n1 1 1000000 1000000\n3\n100 10000 1000000\nSample Output\n10000\n100000000\n1000000000000\n\u00a0",
  "Examples": "",
  "Memory Limit": "128M",
  "Time Limit": "1.00s",
  "Description": "Mirko washed his sheets and is on his way to hang them to dry in front of his house. However, strong winds have pulled the clothesline out of the ground so Mirko temporarily laid out the sheets on the grass.\nThe grass field can be modeled by an infinite square grid, where every unit square is represented by a pair of coordinates. Sheets are rectangles in the grid with sides parallel to the coordinate axes. Sheets may overlap.\nIn an effort to put his clothesline back up, Mirko slammed a pole into the ground at coordinates (0, 0). An entirely unexpected turn of events followed. Oil sprung from the ground and the shock caused Mirko to faint. While Mirko lay unconscious, the oil is spreading, staining his sheets.\nTime is measured from the moment the oil starts spreading - at time zero only square (0, 0) is covered in oil. The oil is spreading at a speed of one square per second in all eight directions, as shown in the figure below. When oil enters a square, it stains that square of fabric on all sheets covering the square.\n\nThe grass field from the first example after zero, one and two seconds.\nWrite a program that, given M points in time, calculates the total area of stained fabric on all sheets for each of the given time points.",
  "Output": "For each of the time points, output on a separate line the total area of stained fabric on all sheets, in the order the time points are given in the input.",
  "Title": "COI08 - Plahte",
  "Input": "The first line contains an integer N (1 \u2264 N \u2264 100 000), the number of sheets.\nEach of the following N lines contains four integers x1, y1, x2 and y2 (-1 000 000 \u2264 x1 \u2264 x2 \u2264 1 000 000), (-1 000 000 \u2264 y1 \u2264 y2 \u2264 1 000 000). The coordinates (x1, y1) and (x2, y2) represent diagonally opposite corners of a sheet (again, these coordinates are unit squares, not points on the plane). None of the sheets will cover the square (0, 0).\nThe next line contains an integer M (1 \u2264 M \u2264 100 000), the number of points in time.\n  The next line contains M integers between 0 and 1 000 000, the time points. They will be given in strictly ascending order."
}{
  "Example": "Sample Input \n6\n1 2\n3 2\n2 3\n2 5\n4 4\n6 3\n4\n2 2 4 4\n2 2 6 5\n3 3 5 6\n5 1 6 6\nSample Output\n3\n4\n0\n1\n",
  "Scoring": "Test data worth 30% of points has (1\u00a0\u2264\u00a0X1\u00a0<\u00a0X2\u00a0\u2264\u00a0103, 1\u00a0\u2264\u00a0Y1\u00a0<\u00a0Y2\u00a0\u2264\u00a0103).\nTest data worth 60% of points has (1\u00a0\u2264\u00a0X1\u00a0<\u00a0X2\u00a0\u2264\u00a0106, 1\u00a0\u2264\u00a0Y1\u00a0<\u00a0Y2\u00a0\u2264\u00a0106).",
  "Memory Limit": "32M",
  "Time Limit": "3.00s",
  "Description": "The government is planing to build a walkway for tourists in the middle of an oak forest. The forest can be represented as plane with N special lattice points representing oaks.\nThe walkway is represented as a rectangle with sides parallel to the axes. If the sides of walkway rectangle intersect any oak lattice points, such oaks need to be axed down. Oaks inside the rectangle do not represent problems and need not be cut down.\nLjubo is the state secretary of Forestry and an passionate nature lover, so he ordered the secretary of Tourism to provide him with a list of P possible rectangle walkways that are attractive enough to draw in tourists.\nLjubo plans to select the walkway that needs the smallest amount of oak trees to be cut down. Since we also like trees, would you be so kind and write a program that will determine the number of oaks that will be cut down for each walkway. Remember only the oaks intersecting the sides of the rectangle need to be cut.",
  "Output": "Output P integers, one per line, the number of oaks that need to be cut down for each walkway in the order they are presented in the input.",
  "Title": "COI09 - Hrastovi",
  "Input": "The first line of input contains one integer N (1\u00a0\u2264\u00a0N\u00a0\u2264\u00a0300\u00a0000), number of oaks.\nThe next N lines contain two integers each X and Y (1\u00a0\u2264\u00a0X, Y\u00a0\u2264\u00a0109) coordinates of oaks. There will be at most one oak on each lattice point.\nThe next line contains one integer P (1\u00a0\u2264\u00a0P\u00a0\u2264\u00a0100\u00a0000), number of walkways.\nThe next P lines contain four integers each X1, Y1, X2 and Y2 (1\u00a0\u2264\u00a0X1\u00a0<\u00a0X2\u00a0\u2264\u00a0109, 1\u00a0\u2264\u00a0Y1\u00a0<\u00a0Y2\u00a0\u2264\u00a0109) coordinates of the lower left (X1, Y1) and upper right (X2, Y2) corner of the rectangle."
}{
  "Scoring": "Test data is divided into four groups each worth 25 points, with the following constraints:\nFirst group: (3\u00a0\u2264\u00a0N\u00a0\u2264\u00a01\u00a0000, 1\u00a0\u2264\u00a0K\u00a0\u2264\u00a01\u00a0000).\nSecong group: (3\u00a0\u2264\u00a0N\u00a0\u2264\u00a01\u00a0000, 1\u00a0\u2264\u00a0K\u00a0\u2264\u00a050\u00a0000).\nThird group: (3\u00a0\u2264\u00a0N\u00a0\u2264\u00a050\u00a0000, 1\u00a0\u2264\u00a0K\u00a0\u2264\u00a050\u00a0000).\nFourth group: (3\u00a0\u2264\u00a0N\u00a0\u2264\u00a05\u00a0000\u00a0000, 1\u00a0\u2264\u00a0K\u00a0\u2264\u00a0500\u00a0000).",
  "Memory Limit": "32M",
  "Sample Test Cases": "",
  "Time Limit": "1.00s",
  "Description": "During meetings of young mathematicians a frequent pastime is the Prime Number Circle. For this task, we refer to mathematicians in the circle with numbers 1 to N.\nBefore the game starts we first draw N-1 circles and one square on the pavement arranged in a big circle. The player numbered 1 stands in the square. All other players stand in the circles, starting with the player 2 in a counterclockwise fashion facing towards the middle of the big circle.\nThe game consists of K rounds. In the i-th round the person standing in the square jumps up, says \"It's me!\" and then swaps places with the person standing on his right side pk times, where pk is the k-th prime. For example for N = 5 and K = 3 the following three rounds occur:\n\nWrite a program that will for given N, K and A determine the neighbours of the player numbered A at the end of the game.",
  "Output": "3 2",
  "Title": "COI09 - Kolo",
  "Input": "5 4 5"
}{
  "Scoring": "Test data worth 50% of points has N\u00a0<\u00a030.\nTest data worth 75% of points has N\u00a0<\u00a03000.",
  "Memory Limit": "32M",
  "Sample Test Cases": "",
  "Time Limit": "1.00s",
  "Description": "                             o--+--o\n                             |anton|\n                             o--+--o\n                                |\n                   o------------o------------o\n                   |                         |\n                 o-+-o                     o-+--o\n                 |ana|                     |luka|\n                 o-+-o                     o-+--o\n                   |                         |\n           o-------o-------o              o--o--o\n           |               |              |     |\n         o-+-o          o--+--o         o-+-oo--+--o\n         |mia|          |lovro|         |tea||jakov|\n         o-+-o          o--+--o         o-+-oo--+--o\n           |               |              |\n     o-----o-----o         o        o-----o-----o\n     |           |         |        |           |\no----+----o o----+----o o--+--oo----+-----o o---+---o\n|anamarija| |eustahije| |lovro||semiramida| |dominik|\no----+----o o----+----o o--+--oo----+-----o o---+---o\n\nCounting the characters gives 64 and 371.",
  "Output": "371",
  "Title": "COI09 - Loza",
  "Input": "12\nanton\nana 1\nluka 1\nmia 2\ntea 3\njakov 3\nsemiramida 5\ndominik 5\nanamarija 4\neustahije 4\nlovro 2\nlovro 11"
}{
  "Example": "Sample Input \n12\n0 0\n-1 3\n1 3\n1 7\n2 9\n3 -1\n6 0\n3 1\n5 3\n3 5\n3 8\n6 6\n2 2 0 4\n3 0 3 9\n2 2 3 3\n0 4 1 5\n3 -3 4 -2\nSample Output\n2\n4\n2\n1\n1\nSample Input Analysis\nThere are 2 points [(1,3) and (3,1)] from the set that lie on the line created by the two points (2,2 and (0,4).\nThere are 4 points [(3,8), (3,5), (3,1) and (3,-1)] from the set that lie on the line created by the two points (3,0) and (3,9).\nThere are 2 points [(6,6) and (0,0)] from the set that lie on the line created by the two points (2,2) and (3,3).\nThere is 1 point [(-1,3)] from the set that lie on the line created by the two points (0,4) and (1,5).\nThere is 1 point [(6,0)] from the set that lie on the line created by the two points (3,-3) and (4,-2).",
  "Memory Limit": "16M",
  "Problem 1": "In this particular problem, you will be given a set of points that lie on the Cartesian plane. Given two points, p1 and p2, determine how many points in the set lie on the line created by p1 and p2.\nThe input will contain one set of data. The first line will contain N, the number of points in the set, 10 \u2264 N \u2264 100. The next N lines will contain two integers each, x and y, which represent the x-coordinate and the y-coordinate of the point. -1000 \u2264 x, y \u2264 1000. After these N lines, there will be five lines that will contain the coordinates of the points p1 and p2; p1 and p2 are not part of the original set. -1000 \u2264 p1 and p2 \u2264 1000.\nThe output will contain five lines of data. Each line will contain the number of points in the set that lie on the line created by p1 and p2.\n\n",
  "Time Limit": "1.00s",
  "Description": "",
  "Title": "DWITE Feb '06 - Points on a Line"
}{
  "Example": "Sample Input \n5\n1000\n500\n100\n150\n400\n6\n500\n233\n650\n75\n22\n875\n4\n235\n578\n900\n599\nSample Output\n40\n35\n28\nSample Input Analysis\nIn the first set, the files with sizes 1000 and 400 use up the most storage space on the diskette.\nIn the second set, the files with sizes 650, 500, 233 and 22 use up the most storage space on the diskette.\nIn the third set, the files with sizes 599, 578 and 235 use up the most storage space on the diskette.",
  "Problem 2": "Over the course of approximately 35 years, floppy disks have evolved from 8 inches in size down to 3\u00bd inches. Their storage capacity ranged from 80 kilobytes (KB) to 240 megabytes (MB). Most recently they are becoming extinct, with floppy disk drives being an optional accessory with the purchase of a new computer.\nOne of the more commonly used floppy disks during its time, was the 3\u00bd-inch 1.44 MB capacity disk.\nYour job in this problem is to put files onto the 3\u00bd-inch 1.44 MB capacity disk so that there is minimum amount of unused space left on the floppy disk.\nThe input will contain five sets of data. Each set begins with an integer N, the number of files available to go onto the floppy disk, 1 \u2264 N \u2264 25. The next N lines, for each set, will contain an integer S, the size in kilobytes (KB) of each of the files, 1 \u2264 S \u2264 1440.\nThe output will contain five lines of data. Each line will contain the minimum amount of unused space left on the floppy disk.",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "",
  "Title": "DWITE Feb '06 - Floppy Disk"
}{
  "Example": "Sample Input \n070617006093\n036000291455\n123456789097\n246809753116\n543210987665\nSample Output\n070617006092\n036000291452\n123456789098\n246809753116\n543210987667",
  "Memory Limit": "16M",
  "Problem 3": "The final digit of a Universal Product Code is a check digit computed so that summing the even-numbered digits, plus 3 times the odd-numbered digits, modulo 10, is 0.\n\nFor example, take the UPC 070617006092. The sum of the even numbered digits is 7+6+7+0+0+2 = 22, and the sum of the odd-numbered digits is 0+0+1+0+6+9 = 16. The total sum is 22+3\u00d716 = 70 \u2261 0 (mod 10). So the code is valid.\nThe input will contain five lines of data. Each line will contain a 12 digit UPC that may have an invalid check digit.\nThe output will contain five lines of data. Each line will contain the UPC with the correct check digit.",
  "Time Limit": "1.00s",
  "Description": "",
  "Title": "DWITE Feb '06 - UPC Check Digit"
}{
  "Example": "Sample Input \n212343342254453665554756111121237776767643\n433242522131111122333444455555666666777777\n333242236724226611111133344455555566677777\nSample Output\nRED-23\nRED-11\nBLUE-18\nAnalysis of Sample Input - Second Case\nRed drops a chip in column 4, Blue drops a chip in column 3.\nRed drops a chip in column 3, Blue drops a chip in column 2.\nRed drops a chip in column 4, Blue drops a chip in column 2.\nRed drops a chip in column 5, Blue drops a chip in column 2.\nRed drops a chip in column 2, Blue drops a chip in column 1.\nRed drops a chip in column 3.\nRed wins!\n",
  "Memory Limit": "16M",
  "Time Limit": "1.00s",
  "Description": "",
  "Title": "DWITE Feb '06 - Connect-4",
  "Problem 4": "The rules for Connect-4 are simple. The game is played on an upright seven column board. Each column has six spots. Two players play by alternately dropping a red chip or a blue chip down one of the columns. The chip drops to the lowest unoccupied spot in that column. The first player to get four chips in a row, of their colour, either vertical, horizontal, or diagonal, wins. The game ends in a stalemate if it fills before someone wins.\nAn empty Connect-4 board looks as follows. Columns of the board will be numbered 1 to 7 from left to right.\n\nThe input will contain 5 lines of data. Each line will contain a string of length 42. The only characters in the string will be the digits 1 through 7, indicating the column that the chip is dropped in. The first digit in the string, and every other digit after that will represent the column that a red chip is dropped in. The second digit in the string and every other digit after that will represent the column that a blue chip is dropped in. There will be exactly seven of each of the digits 1 to 7.\nThe output will contain five lines of data. Each line will contain the colour of the winner, in upper case, a hypen (-), and the total number of chips dropped when the winner was declared.\nNote: There will be a winner in each case."
}{
  "Example": "Sample Input \n2 10\n100 200\n10000 20000\nSample Output\n4\n5\n26",
  "Memory Limit": "16M",
  "Problem 5": "The number 181 is a prime palindrome because it is both a prime number and a palindrome. A palindrome is a number that is the same when read forward as backward. Write a program that determines how many prime palindromes there are between two numbers.\nThe input will contain five sets of data. Each set will contain two integers, L and U, the range of numbers to determine the prime palindromes. 2 \u2264 L \u2264 U \u2264 999,999.\nThe output will contain the number of prime palindromes between L and U, inclusive.",
  "Time Limit": "1.00s",
  "Description": "",
  "Title": "DWITE Feb '06 - Prime Palindromes"
}{
  "Example": "Sample Input \n(only two sales given)\n10.00\n9.55\n10.00\n9.25\n10.00\n9.45\n44.50\n22.25\n50.00\n24.00\n60.00\n31.00\nSample Output\n  7.500\n 52.000",
  "Memory Limit": "32M",
  "Problem 1": "You are to determine which item at a store, out of a group of three items which are on sale, offers\nthe best discount as a percentage out of 100.",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "The output will contain five lines of data, each representing the percentage discount\nof the item that offers the greatest discount. The percentage is displayed out of 100 (no percent\nsign needed), rounded to 3 decimal places, right justified in a field width of 7.",
  "Title": "DWITE Nov '02 - Sales!",
  "Input": "The input will contain data sets for five separate sales. Each sale will contain three\npairs of data. Each pair will contain two lines, one for the regular price of an item and the other\nfor the sales price of an item, in that order. The regular price will always be greater than the sales\nprice."
}{
  "Example": "Sample Input \n10\n1\n2\n3\n4.5\n3\n6\n7.5\n8\n9\n10\nSample Output\n5.40\n5.25\n3.00\n10.00\n1.00",
  "Problem 2": "Five commonly reported statistic figures (that notably start with the letter \"m\") include the:\nmean\nmedian\nmode\nmaximum\nminimum\nYour job is the calculate these five figures from a given set of values.",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "The output will contain five lines of data, each representing the statistic figure, listed in the order\nabove. Each figure should be rounded to two decimal places, left justified.\nNote: There will be only one mode in the set of values.",
  "Title": "DWITE Nov '02 - The Five M's of Stats 101",
  "Input": "The first line of the input will contain the integer n (0 < n \u2264 1000), which represents the number\nof values in the set. The next n lines will contain the real values (-1000 \u2264 value \u2264 1000) of the set, each on\na separate line."
}{
  "Example": "Sample Input \n10 10\n..XX..XXXX\n.X.XX.XX..\nXX....X..X\nX...XX..XX\nX..X.X....\n..........\n.XXX.....X\n.......XXX\n......XX..\nX.X.X.X...\nSample Output\n38\n30\n27\n0\n0",
  "Memory Limit": "32M",
  "Problem 3": "The Game of Life is not a game in the conventional sense. There are no players, and no winning or losing.\nOnce the \"pieces\" are placed in the starting position, the rules determine everything that happens later.\nNevertheless, Life is full of surprises! In most cases, it is impossible to look at a starting position (or pattern)\nand see what will happen in the future. The only way to find out is to follow the rules of the game.\nRules of the Game of Life\nLife is played on a grid of square cells - like a chess board but extending infinitely in every direction. A\ncell can be live or dead. A live cell is shown by putting a marker on its square. A dead cell is shown by\nleaving the square empty. Each cell in the grid has a neighborhood consisting of the eight cells in every\ndirection including diagonals (except the cells along the border).\nTo apply one step of the rules, we count the number of live neighbors for each cell. What happens next\ndepends on this number.\nA dead cell with exactly three live neighbors becomes a live cell (birth).\nA live cell with two or three live neighbors stays alive (survival).\nA live cell, with four or more neighbors OR one or less neighbors, dies (overcrowding or loneliness).\nNote: The number of live neighbors is always based on the cells before the rule was applied. In other\nwords, we must first find all of the cells that change before changing any of them. Sounds like a job\nfor a computer!",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "The output will contain five lines of data, each representing the number of live cells after the first,\nfifth, tenth, fiftieth and one hundredth generation, respectfully.",
  "Title": "DWITE Nov '02 - The Game of Life",
  "Input": "The input will contain the information for the starting generation on the grid. The first line will\ncontain two integers, r and c, that represent the number of rows and columns of the grid, respectfully,\n3 \u2264 r,c \u2264 50. The next r lines will contain c characters, either a \".\" (period), representing a dead cell, or an \"X\"\nrepresenting a live cell."
}{
  "Example": "Sample Input \n8\n4 3 1 0 0 5 12 10\n5 3 12 0 0 1 4 3\n1 10 3 0 0 2 12 3\n4 4 4 4 4 4 0 0\n3 1 12 0 0 25 2 0\n0 4 5 7 7 7 4 5\n4 6 9 1 0 0 0 12\n12 2 1 6 0 0 1 2\nSample Output\n126\n124\n124\n122\n122",
  "Memory Limit": "32M",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "The output will contain five lines of data, each representing the amount of money (as\nan integer) that would be obtained on the five best routes, from best to fifth best. It is possible to\nhave different routes with the same amount.",
  "Title": "DWITE Nov '02 - Money Prize",
  "Problem 4": "A local radio station, COOL-FM (that's Cool with a \"C\"), recently awarded a lucky listener, the\nprize of walking through a giant sized chessboard with money prizes at each of the squares on the\nchessboard. The lucky listener, had to start at the lower left corner and move to the upper right\ncorner, by taking steps either to the right or above (moving to the left, down or on a diagonal was\nnot allowed). The lucky listener claimed each of the money prizes at each of the squares they\nstepped on.\nYour job is to find the five best routes through the chessboard yielding the most money for the\nlucky listener.",
  "Input": "The first line of the input will consist of an integer N \u2264 300, the size of the chessboard.\nEach subsequent line represents one row on the chessboard. Each line will contain N integers for the locations\non the chessboard for that row. Each integer A represents the amount of money at that location, 0 \u2264 A \u2264 1053.\nThese integers will be separated by a single space. The first number in the Nth line would be the starting point for the lucky listener.\nThe Nth number in the first line would be the ending point."
}{
  "Example": "Sample Input \n(2 lines only)\nThis sentence has 4 t's in it.\nAnd this one only has one.\n...\nSample Output\nA-1:C-1:E-3:H-2:I-3:N-3:S-4:T-4\nA-2:D-1:E-2:H-2:I-1:L-1:N-4:O-3:S-2:T-1:Y-1\n...",
  "Memory Limit": "32M",
  "Problem 5": "You are to determine the frequency of each letter of the alphabet in a line of characters.",
  "Time Limit": "1.00s",
  "Description": "",
  "Output": "The output will contain five lines of data, each displaying the frequency of the letters\nof the alphabet, in alpabetical order, from the corresponding lines of the input file. Display only\nthose letters that occurred at least once. Separate the letter from the frequency with a hyphen and\nfollow the frequency with a colon (except the last one).",
  "Title": "DWITE Nov '02 - Now I know my ABCs",
  "Input": "The input will contain five lines of data. Each line will contain at most 255\ncharacters."
}{
  "Example": "Sample Input \n-1\nSample Output\nnot\nSample Input\n1\nSample Output\nnot\nSample Input\n2\nSample Output\nprime",
  "Memory Limit": "16M",
  "Problem 1": "In mathematics, a prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example: 2, 3, 5, 7, 11, 13, 17, 19 are the first eight prime numbers. A vanilla flavour programming problem is to figure out if a given number is a prime or not.",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "A single line containing either the word \"prime\" or the word \"not\", depending on whether N is prime or not.",
  "Title": "DWITE Oct '07 - Vanilla Primes",
  "Input": "A single integer N (-1000 \u2264 N \u2264 1000)"
}{
  "Example": "Sample Input \nD.nnr <rpne!\nSample Output\nHello World!\nNote: the messages are case sensitive, and the translation between lower and upper case is not always trivial. ",
  "Memory Limit": "16M",
  "Problem 3": "The Dvorak Simplified Keyboard is a keyboard layout patented in 1936 by Dr. August Dvorak, an educational psychologist and professor of education at the University of Washington in Seattle as an alternative to the more common QWERTY layout. \n\nIf someone was to have Dvorak enabled on their computer, and a guest was to start typing, expecting the standard QWERTY layout - text will come out as nonsense. You are to write a program to de-scramble any such message.",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "DWITE Oct '07 - Where's My QWERTY?",
  "Input": ""
}{
  "Example": "Sample Input \n5\n3\n1\n2\n3\nSample Output 1\n2\nSample Input 2\n10\n3\n1\n5\n7\nSample Output 2\n0",
  "Memory Limit": "16M",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "DWITE Oct '07 - Stacks of Blocks",
  "Problem 4": "Some kids play with blocks, and build things by stacking different blocks on top of each other. Given a set of blocks and a target height, we want to find out if it's possible to construct a stack with an exact specified height.",
  "Input": ""
}{
  "Example": "Sample Input \n3\n5\n#####\nV..HE\n#####\nSample Output 1\nescape\nSample Input 2\n3\n5\n#####\nH..EV\n#####\nSample Output 2\n3",
  "Memory Limit": "16M",
  "Problem 5": "A common problem is being chased through a maze by a hungry velociraptor. There is no time to think as to how one came to be in such a situation. A program is required to calculate the survival time of a human character.\nThe maze consists of hallways, and has no open areas. There are no loops in the maze - that is, there is always only one possible path between any two points. There is just one exit, one human, and one velociraptor present in the maze. The only possible chance of survival is to make it to the exit before the velociraptor does. The velociraptor will also run towards the exit, covering twice as much ground \"per turn\" as the human figure.\nNote: the velociraptor has no intelligence, but it knows its way to the exit. It will attack only when it occupies the same \"square\" as a human. In a case when the velociraptor is between a human and the exit, both will continue running until they meet at the exit location. ",
  "Time Limit": "2.00s",
  "Description": "",
  "Output": "",
  "Title": "DWITE Oct '07 - Velociraptor Maze",
  "Input": ""
}